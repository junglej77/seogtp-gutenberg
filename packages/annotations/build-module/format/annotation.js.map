{"version":3,"names":["__","applyFormat","removeFormat","FORMAT_NAME","ANNOTATION_ATTRIBUTE_PREFIX","STORE_NAME","applyAnnotations","record","annotations","forEach","annotation","start","end","text","length","className","source","id","type","attributes","removeAnnotations","retrieveAnnotationPositions","formats","positions","characterFormats","i","filter","format","replace","hasOwnProperty","updateAnnotationsWithPositions","removeAnnotation","updateAnnotationRange","currentAnnotation","position","name","title","tagName","edit","__experimentalGetPropsForEditableTreePreparation","select","richTextIdentifier","blockClientId","__experimentalGetAnnotationsForRichText","__experimentalCreatePrepareEditableTree","__experimentalGetPropsForEditableTreeChangeHandler","dispatch","__experimentalRemoveAnnotation","__experimentalUpdateAnnotationRange","__experimentalCreateOnChangeEditableValue","props"],"sources":["@wordpress/annotations/src/format/annotation.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { __ } from '@wordpress/i18n';\r\nimport { applyFormat, removeFormat } from '@wordpress/rich-text';\r\n\r\nconst FORMAT_NAME = 'core/annotation';\r\n\r\nconst ANNOTATION_ATTRIBUTE_PREFIX = 'annotation-text-';\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { STORE_NAME } from '../store/constants';\r\n\r\n/**\r\n * Applies given annotations to the given record.\r\n *\r\n * @param {Object} record      The record to apply annotations to.\r\n * @param {Array}  annotations The annotation to apply.\r\n * @return {Object} A record with the annotations applied.\r\n */\r\nexport function applyAnnotations( record, annotations = [] ) {\r\n\tannotations.forEach( ( annotation ) => {\r\n\t\tlet { start, end } = annotation;\r\n\r\n\t\tif ( start > record.text.length ) {\r\n\t\t\tstart = record.text.length;\r\n\t\t}\r\n\r\n\t\tif ( end > record.text.length ) {\r\n\t\t\tend = record.text.length;\r\n\t\t}\r\n\r\n\t\tconst className = ANNOTATION_ATTRIBUTE_PREFIX + annotation.source;\r\n\t\tconst id = ANNOTATION_ATTRIBUTE_PREFIX + annotation.id;\r\n\r\n\t\trecord = applyFormat(\r\n\t\t\trecord,\r\n\t\t\t{\r\n\t\t\t\ttype: FORMAT_NAME,\r\n\t\t\t\tattributes: {\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t\tid,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\tstart,\r\n\t\t\tend\r\n\t\t);\r\n\t} );\r\n\r\n\treturn record;\r\n}\r\n\r\n/**\r\n * Removes annotations from the given record.\r\n *\r\n * @param {Object} record Record to remove annotations from.\r\n * @return {Object} The cleaned record.\r\n */\r\nexport function removeAnnotations( record ) {\r\n\treturn removeFormat( record, 'core/annotation', 0, record.text.length );\r\n}\r\n\r\n/**\r\n * Retrieves the positions of annotations inside an array of formats.\r\n *\r\n * @param {Array} formats Formats with annotations in there.\r\n * @return {Object} ID keyed positions of annotations.\r\n */\r\nfunction retrieveAnnotationPositions( formats ) {\r\n\tconst positions = {};\r\n\r\n\tformats.forEach( ( characterFormats, i ) => {\r\n\t\tcharacterFormats = characterFormats || [];\r\n\t\tcharacterFormats = characterFormats.filter(\r\n\t\t\t( format ) => format.type === FORMAT_NAME\r\n\t\t);\r\n\t\tcharacterFormats.forEach( ( format ) => {\r\n\t\t\tlet { id } = format.attributes;\r\n\t\t\tid = id.replace( ANNOTATION_ATTRIBUTE_PREFIX, '' );\r\n\r\n\t\t\tif ( ! positions.hasOwnProperty( id ) ) {\r\n\t\t\t\tpositions[ id ] = {\r\n\t\t\t\t\tstart: i,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// Annotations refer to positions between characters.\r\n\t\t\t// Formats refer to the character themselves.\r\n\t\t\t// So we need to adjust for that here.\r\n\t\t\tpositions[ id ].end = i + 1;\r\n\t\t} );\r\n\t} );\r\n\r\n\treturn positions;\r\n}\r\n\r\n/**\r\n * Updates annotations in the state based on positions retrieved from RichText.\r\n *\r\n * @param {Array}    annotations                   The annotations that are currently applied.\r\n * @param {Array}    positions                     The current positions of the given annotations.\r\n * @param {Object}   actions\r\n * @param {Function} actions.removeAnnotation      Function to remove an annotation from the state.\r\n * @param {Function} actions.updateAnnotationRange Function to update an annotation range in the state.\r\n */\r\nfunction updateAnnotationsWithPositions(\r\n\tannotations,\r\n\tpositions,\r\n\t{ removeAnnotation, updateAnnotationRange }\r\n) {\r\n\tannotations.forEach( ( currentAnnotation ) => {\r\n\t\tconst position = positions[ currentAnnotation.id ];\r\n\t\t// If we cannot find an annotation, delete it.\r\n\t\tif ( ! position ) {\r\n\t\t\t// Apparently the annotation has been removed, so remove it from the state:\r\n\t\t\t// Remove...\r\n\t\t\tremoveAnnotation( currentAnnotation.id );\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst { start, end } = currentAnnotation;\r\n\t\tif ( start !== position.start || end !== position.end ) {\r\n\t\t\tupdateAnnotationRange(\r\n\t\t\t\tcurrentAnnotation.id,\r\n\t\t\t\tposition.start,\r\n\t\t\t\tposition.end\r\n\t\t\t);\r\n\t\t}\r\n\t} );\r\n}\r\n\r\nexport const annotation = {\r\n\tname: FORMAT_NAME,\r\n\ttitle: __( 'Annotation' ),\r\n\ttagName: 'mark',\r\n\tclassName: 'annotation-text',\r\n\tattributes: {\r\n\t\tclassName: 'class',\r\n\t\tid: 'id',\r\n\t},\r\n\tedit() {\r\n\t\treturn null;\r\n\t},\r\n\t__experimentalGetPropsForEditableTreePreparation(\r\n\t\tselect,\r\n\t\t{ richTextIdentifier, blockClientId }\r\n\t) {\r\n\t\treturn {\r\n\t\t\tannotations: select(\r\n\t\t\t\tSTORE_NAME\r\n\t\t\t).__experimentalGetAnnotationsForRichText(\r\n\t\t\t\tblockClientId,\r\n\t\t\t\trichTextIdentifier\r\n\t\t\t),\r\n\t\t};\r\n\t},\r\n\t__experimentalCreatePrepareEditableTree( { annotations } ) {\r\n\t\treturn ( formats, text ) => {\r\n\t\t\tif ( annotations.length === 0 ) {\r\n\t\t\t\treturn formats;\r\n\t\t\t}\r\n\r\n\t\t\tlet record = { formats, text };\r\n\t\t\trecord = applyAnnotations( record, annotations );\r\n\t\t\treturn record.formats;\r\n\t\t};\r\n\t},\r\n\t__experimentalGetPropsForEditableTreeChangeHandler( dispatch ) {\r\n\t\treturn {\r\n\t\t\tremoveAnnotation:\r\n\t\t\t\tdispatch( STORE_NAME ).__experimentalRemoveAnnotation,\r\n\t\t\tupdateAnnotationRange:\r\n\t\t\t\tdispatch( STORE_NAME ).__experimentalUpdateAnnotationRange,\r\n\t\t};\r\n\t},\r\n\t__experimentalCreateOnChangeEditableValue( props ) {\r\n\t\treturn ( formats ) => {\r\n\t\t\tconst positions = retrieveAnnotationPositions( formats );\r\n\t\t\tconst { removeAnnotation, updateAnnotationRange, annotations } =\r\n\t\t\t\tprops;\r\n\r\n\t\t\tupdateAnnotationsWithPositions( annotations, positions, {\r\n\t\t\t\tremoveAnnotation,\r\n\t\t\t\tupdateAnnotationRange,\r\n\t\t\t} );\r\n\t\t};\r\n\t},\r\n};\r\n"],"mappings":"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","ignoreList":[]}