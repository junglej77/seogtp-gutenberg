{"version":3,"names":["createSelector","EMPTY_ARRAY","__experimentalGetAnnotationsForBlock","state","blockClientId","_state$blockClientId","filter","annotation","selector","_state$blockClientId2","__experimentalGetAllAnnotationsForBlock","_state$blockClientId3","__experimentalGetAnnotationsForRichText","richTextIdentifier","_state$blockClientId4","map","range","other","_state$blockClientId5","__experimentalGetAnnotations","Object","values","flat"],"sources":["@wordpress/annotations/src/store/selectors.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { createSelector } from '@wordpress/data';\r\n\r\n/**\r\n * Shared reference to an empty array for cases where it is important to avoid\r\n * returning a new array reference on every invocation, as in a connected or\r\n * other pure component which performs `shouldComponentUpdate` check on props.\r\n * This should be used as a last resort, since the normalized data should be\r\n * maintained by the reducer result in state.\r\n *\r\n * @type {Array}\r\n */\r\nconst EMPTY_ARRAY = [];\r\n\r\n/**\r\n * Returns the annotations for a specific client ID.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId The ID of the block to get the annotations for.\r\n *\r\n * @return {Array} The annotations applicable to this block.\r\n */\r\nexport const __experimentalGetAnnotationsForBlock = createSelector(\r\n\t( state, blockClientId ) => {\r\n\t\treturn ( state?.[ blockClientId ] ?? [] ).filter( ( annotation ) => {\r\n\t\t\treturn annotation.selector === 'block';\r\n\t\t} );\r\n\t},\r\n\t( state, blockClientId ) => [ state?.[ blockClientId ] ?? EMPTY_ARRAY ]\r\n);\r\n\r\nexport function __experimentalGetAllAnnotationsForBlock(\r\n\tstate,\r\n\tblockClientId\r\n) {\r\n\treturn state?.[ blockClientId ] ?? EMPTY_ARRAY;\r\n}\r\n\r\n/**\r\n * Returns the annotations that apply to the given RichText instance.\r\n *\r\n * Both a blockClientId and a richTextIdentifier are required. This is because\r\n * a block might have multiple `RichText` components. This does mean that every\r\n * block needs to implement annotations itself.\r\n *\r\n * @param {Object} state              Editor state.\r\n * @param {string} blockClientId      The client ID for the block.\r\n * @param {string} richTextIdentifier Unique identifier that identifies the given RichText.\r\n * @return {Array} All the annotations relevant for the `RichText`.\r\n */\r\nexport const __experimentalGetAnnotationsForRichText = createSelector(\r\n\t( state, blockClientId, richTextIdentifier ) => {\r\n\t\treturn ( state?.[ blockClientId ] ?? [] )\r\n\t\t\t.filter( ( annotation ) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\tannotation.selector === 'range' &&\r\n\t\t\t\t\trichTextIdentifier === annotation.richTextIdentifier\r\n\t\t\t\t);\r\n\t\t\t} )\r\n\t\t\t.map( ( annotation ) => {\r\n\t\t\t\tconst { range, ...other } = annotation;\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...range,\r\n\t\t\t\t\t...other,\r\n\t\t\t\t};\r\n\t\t\t} );\r\n\t},\r\n\t( state, blockClientId ) => [ state?.[ blockClientId ] ?? EMPTY_ARRAY ]\r\n);\r\n\r\n/**\r\n * Returns all annotations in the editor state.\r\n *\r\n * @param {Object} state Editor state.\r\n * @return {Array} All annotations currently applied.\r\n */\r\nexport function __experimentalGetAnnotations( state ) {\r\n\treturn Object.values( state ).flat();\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,cAAc,QAAQ,iBAAiB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oCAAoC,GAAGF,cAAc,CACjE,CAAEG,KAAK,EAAEC,aAAa,KAAM;EAAA,IAAAC,oBAAA;EAC3B,OAAO,EAAAA,oBAAA,GAAEF,KAAK,GAAIC,aAAa,CAAE,cAAAC,oBAAA,cAAAA,oBAAA,GAAI,EAAE,EAAGC,MAAM,CAAIC,UAAU,IAAM;IACnE,OAAOA,UAAU,CAACC,QAAQ,KAAK,OAAO;EACvC,CAAE,CAAC;AACJ,CAAC,EACD,CAAEL,KAAK,EAAEC,aAAa;EAAA,IAAAK,qBAAA;EAAA,OAAM,EAAAA,qBAAA,GAAEN,KAAK,GAAIC,aAAa,CAAE,cAAAK,qBAAA,cAAAA,qBAAA,GAAIR,WAAW,CAAE;AAAA,CACxE,CAAC;AAED,OAAO,SAASS,uCAAuCA,CACtDP,KAAK,EACLC,aAAa,EACZ;EAAA,IAAAO,qBAAA;EACD,QAAAA,qBAAA,GAAOR,KAAK,GAAIC,aAAa,CAAE,cAAAO,qBAAA,cAAAA,qBAAA,GAAIV,WAAW;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMW,uCAAuC,GAAGZ,cAAc,CACpE,CAAEG,KAAK,EAAEC,aAAa,EAAES,kBAAkB,KAAM;EAAA,IAAAC,qBAAA;EAC/C,OAAO,EAAAA,qBAAA,GAAEX,KAAK,GAAIC,aAAa,CAAE,cAAAU,qBAAA,cAAAA,qBAAA,GAAI,EAAE,EACrCR,MAAM,CAAIC,UAAU,IAAM;IAC1B,OACCA,UAAU,CAACC,QAAQ,KAAK,OAAO,IAC/BK,kBAAkB,KAAKN,UAAU,CAACM,kBAAkB;EAEtD,CAAE,CAAC,CACFE,GAAG,CAAIR,UAAU,IAAM;IACvB,MAAM;MAAES,KAAK;MAAE,GAAGC;IAAM,CAAC,GAAGV,UAAU;IAEtC,OAAO;MACN,GAAGS,KAAK;MACR,GAAGC;IACJ,CAAC;EACF,CAAE,CAAC;AACL,CAAC,EACD,CAAEd,KAAK,EAAEC,aAAa;EAAA,IAAAc,qBAAA;EAAA,OAAM,EAAAA,qBAAA,GAAEf,KAAK,GAAIC,aAAa,CAAE,cAAAc,qBAAA,cAAAA,qBAAA,GAAIjB,WAAW,CAAE;AAAA,CACxE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASkB,4BAA4BA,CAAEhB,KAAK,EAAG;EACrD,OAAOiB,MAAM,CAACC,MAAM,CAAElB,KAAM,CAAC,CAACmB,IAAI,CAAC,CAAC;AACrC","ignoreList":[]}