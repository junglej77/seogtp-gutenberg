{"version":3,"names":["createSelector","createRegistrySelector","store","blockEditorStore","hasBlockType","isRequestingDownloadableBlocks","state","filterValue","_state$downloadableBl","downloadableBlocks","isRequesting","getDownloadableBlocks","_state$downloadableBl2","results","getInstalledBlockTypes","blockManagement","installedBlockTypes","getNewBlockTypes","select","usedBlockTree","getBlocks","filter","blockType","getUnusedBlockTypes","isInstalling","blockId","getErrorNotices","errorNotices","getErrorNoticeForBlock"],"sources":["@wordpress/block-directory/src/store/selectors.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { createSelector, createRegistrySelector } from '@wordpress/data';\r\nimport { store as blockEditorStore } from '@wordpress/block-editor';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport hasBlockType from './utils/has-block-type';\r\n\r\n/**\r\n * Returns true if application is requesting for downloadable blocks.\r\n *\r\n * @param {Object} state       Global application state.\r\n * @param {string} filterValue Search string.\r\n *\r\n * @return {boolean} Whether a request is in progress for the blocks list.\r\n */\r\nexport function isRequestingDownloadableBlocks( state, filterValue ) {\r\n\treturn state.downloadableBlocks[ filterValue ]?.isRequesting ?? false;\r\n}\r\n\r\n/**\r\n * Returns the available uninstalled blocks.\r\n *\r\n * @param {Object} state       Global application state.\r\n * @param {string} filterValue Search string.\r\n *\r\n * @return {Array} Downloadable blocks.\r\n */\r\nexport function getDownloadableBlocks( state, filterValue ) {\r\n\treturn state.downloadableBlocks[ filterValue ]?.results ?? [];\r\n}\r\n\r\n/**\r\n * Returns the block types that have been installed on the server in this\r\n * session.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Array} Block type items\r\n */\r\nexport function getInstalledBlockTypes( state ) {\r\n\treturn state.blockManagement.installedBlockTypes;\r\n}\r\n\r\n/**\r\n * Returns block types that have been installed on the server and used in the\r\n * current post.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Array} Block type items.\r\n */\r\nexport const getNewBlockTypes = createRegistrySelector( ( select ) =>\r\n\tcreateSelector(\r\n\t\t( state ) => {\r\n\t\t\tconst usedBlockTree = select( blockEditorStore ).getBlocks();\r\n\t\t\tconst installedBlockTypes = getInstalledBlockTypes( state );\r\n\r\n\t\t\treturn installedBlockTypes.filter( ( blockType ) =>\r\n\t\t\t\thasBlockType( blockType, usedBlockTree )\r\n\t\t\t);\r\n\t\t},\r\n\t\t( state ) => [\r\n\t\t\tgetInstalledBlockTypes( state ),\r\n\t\t\tselect( blockEditorStore ).getBlocks(),\r\n\t\t]\r\n\t)\r\n);\r\n\r\n/**\r\n * Returns the block types that have been installed on the server but are not\r\n * used in the current post.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Array} Block type items.\r\n */\r\nexport const getUnusedBlockTypes = createRegistrySelector( ( select ) =>\r\n\tcreateSelector(\r\n\t\t( state ) => {\r\n\t\t\tconst usedBlockTree = select( blockEditorStore ).getBlocks();\r\n\t\t\tconst installedBlockTypes = getInstalledBlockTypes( state );\r\n\r\n\t\t\treturn installedBlockTypes.filter(\r\n\t\t\t\t( blockType ) => ! hasBlockType( blockType, usedBlockTree )\r\n\t\t\t);\r\n\t\t},\r\n\t\t( state ) => [\r\n\t\t\tgetInstalledBlockTypes( state ),\r\n\t\t\tselect( blockEditorStore ).getBlocks(),\r\n\t\t]\r\n\t)\r\n);\r\n\r\n/**\r\n * Returns true if a block plugin install is in progress.\r\n *\r\n * @param {Object} state   Global application state.\r\n * @param {string} blockId Id of the block.\r\n *\r\n * @return {boolean} Whether this block is currently being installed.\r\n */\r\nexport function isInstalling( state, blockId ) {\r\n\treturn state.blockManagement.isInstalling[ blockId ] || false;\r\n}\r\n\r\n/**\r\n * Returns all block error notices.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Object} Object with error notices.\r\n */\r\nexport function getErrorNotices( state ) {\r\n\treturn state.errorNotices;\r\n}\r\n\r\n/**\r\n * Returns the error notice for a given block.\r\n *\r\n * @param {Object} state   Global application state.\r\n * @param {string} blockId The ID of the block plugin. eg: my-block\r\n *\r\n * @return {string|boolean} The error text, or false if no error.\r\n */\r\nexport function getErrorNoticeForBlock( state, blockId ) {\r\n\treturn state.errorNotices[ blockId ];\r\n}\r\n"],"mappings":"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","ignoreList":[]}