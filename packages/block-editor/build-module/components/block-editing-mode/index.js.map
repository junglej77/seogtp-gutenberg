{"version":3,"names":["useSelect","useDispatch","useEffect","store","blockEditorStore","useBlockEditContext","blockEditingModeKey","useBlockEditingMode","mode","context","clientId","setBlockEditingMode","unsetBlockEditingMode","globalBlockEditingMode","select","getBlockEditingMode"],"sources":["@wordpress/block-editor/src/components/block-editing-mode/index.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useSelect, useDispatch } from '@wordpress/data';\r\nimport { useEffect } from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store as blockEditorStore } from '../../store';\r\nimport {\r\n\tuseBlockEditContext,\r\n\tblockEditingModeKey,\r\n} from '../block-edit/context';\r\n\r\n/**\r\n * @typedef {'disabled'|'contentOnly'|'default'} BlockEditingMode\r\n */\r\n\r\n/**\r\n * Allows a block to restrict the user interface that is displayed for editing\r\n * that block and its inner blocks.\r\n *\r\n * @example\r\n * ```js\r\n * function MyBlock( { attributes, setAttributes } ) {\r\n *     useBlockEditingMode( 'disabled' );\r\n *     return <div { ...useBlockProps() }></div>;\r\n * }\r\n * ```\r\n *\r\n * `mode` can be one of three options:\r\n *\r\n * - `'disabled'`: Prevents editing the block entirely, i.e. it cannot be\r\n *   selected.\r\n * - `'contentOnly'`: Hides all non-content UI, e.g. auxiliary controls in the\r\n *   toolbar, the block movers, block settings.\r\n * - `'default'`: Allows editing the block as normal.\r\n *\r\n * The mode is inherited by all of the block's inner blocks, unless they have\r\n * their own mode.\r\n *\r\n * If called outside of a block context, the mode is applied to all blocks.\r\n *\r\n * @param {?BlockEditingMode} mode The editing mode to apply. If undefined, the\r\n *                                 current editing mode is not changed.\r\n *\r\n * @return {BlockEditingMode} The current editing mode.\r\n */\r\nexport function useBlockEditingMode( mode ) {\r\n\tconst context = useBlockEditContext();\r\n\tconst { clientId = '' } = context;\r\n\tconst { setBlockEditingMode, unsetBlockEditingMode } =\r\n\t\tuseDispatch( blockEditorStore );\r\n\tconst globalBlockEditingMode = useSelect(\r\n\t\t( select ) =>\r\n\t\t\t// Avoid adding the subscription if not needed!\r\n\t\t\tclientId ? null : select( blockEditorStore ).getBlockEditingMode(),\r\n\t\t[ clientId ]\r\n\t);\r\n\tuseEffect( () => {\r\n\t\tif ( mode ) {\r\n\t\t\tsetBlockEditingMode( clientId, mode );\r\n\t\t}\r\n\t\treturn () => {\r\n\t\t\tif ( mode ) {\r\n\t\t\t\tunsetBlockEditingMode( clientId );\r\n\t\t\t}\r\n\t\t};\r\n\t}, [ clientId, mode, setBlockEditingMode, unsetBlockEditingMode ] );\r\n\treturn clientId ? context[ blockEditingModeKey ] : globalBlockEditingMode;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,EAAEC,WAAW,QAAQ,iBAAiB;AACxD,SAASC,SAAS,QAAQ,oBAAoB;;AAE9C;AACA;AACA;AACA,SAASC,KAAK,IAAIC,gBAAgB,QAAQ,aAAa;AACvD,SACCC,mBAAmB,EACnBC,mBAAmB,QACb,uBAAuB;;AAE9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAAEC,IAAI,EAAG;EAC3C,MAAMC,OAAO,GAAGJ,mBAAmB,CAAC,CAAC;EACrC,MAAM;IAAEK,QAAQ,GAAG;EAAG,CAAC,GAAGD,OAAO;EACjC,MAAM;IAAEE,mBAAmB;IAAEC;EAAsB,CAAC,GACnDX,WAAW,CAAEG,gBAAiB,CAAC;EAChC,MAAMS,sBAAsB,GAAGb,SAAS,CACrCc,MAAM;EACP;EACAJ,QAAQ,GAAG,IAAI,GAAGI,MAAM,CAAEV,gBAAiB,CAAC,CAACW,mBAAmB,CAAC,CAAC,EACnE,CAAEL,QAAQ,CACX,CAAC;EACDR,SAAS,CAAE,MAAM;IAChB,IAAKM,IAAI,EAAG;MACXG,mBAAmB,CAAED,QAAQ,EAAEF,IAAK,CAAC;IACtC;IACA,OAAO,MAAM;MACZ,IAAKA,IAAI,EAAG;QACXI,qBAAqB,CAAEF,QAAS,CAAC;MAClC;IACD,CAAC;EACF,CAAC,EAAE,CAAEA,QAAQ,EAAEF,IAAI,EAAEG,mBAAmB,EAAEC,qBAAqB,CAAG,CAAC;EACnE,OAAOF,QAAQ,GAAGD,OAAO,CAAEH,mBAAmB,CAAE,GAAGO,sBAAsB;AAC1E","ignoreList":[]}