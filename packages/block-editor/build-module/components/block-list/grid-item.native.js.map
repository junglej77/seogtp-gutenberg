{"version":3,"names":["View","styles","jsx","_jsx","Grid","props","numOfColumns","children","tileCount","index","maxWidth","lastTile","lastRow","Math","floor","row","rowLength","style","width","gridItem"],"sources":["@wordpress/block-editor/src/components/block-list/grid-item.native.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport { View } from 'react-native';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport styles from './block-list-item.scss';\r\n\r\nfunction Grid( props ) {\r\n\t/**\r\n\t * Since we don't have `calc()`, we must calculate our spacings here in\r\n\t * order to preserve even spacing between tiles and equal width for tiles\r\n\t * in a given row.\r\n\t *\r\n\t * In order to ensure equal sizing of tile contents, we distribute the\r\n\t * spacing such that each tile has an equal \"share\" of the fixed spacing. To\r\n\t * keep the tiles properly aligned within their rows, we calculate the left\r\n\t * and right paddings based on the tile's relative position within the row.\r\n\t *\r\n\t * Note: we use padding instead of margins so that the fixed spacing is\r\n\t * included within the relative spacing (i.e. width percentage), and\r\n\t * wrapping behavior is preserved.\r\n\t *\r\n\t * - The left most tile in a row must have left padding of zero.\r\n\t * - The right most tile in a row must have a right padding of zero.\r\n\t *\r\n\t * The values of these left and right paddings are interpolated for tiles in\r\n\t * between. The right padding is complementary with the left padding of the\r\n\t * next tile (i.e. the right padding of [tile n] + the left padding of\r\n\t * [tile n + 1] will be equal for all tiles except the last one in a given\r\n\t * row).\r\n\t *\r\n\t */\r\n\tconst { numOfColumns, children, tileCount, index, maxWidth } = props;\r\n\tconst lastTile = tileCount - 1;\r\n\tconst lastRow = Math.floor( lastTile / numOfColumns );\r\n\r\n\tconst row = Math.floor( index / numOfColumns );\r\n\tconst rowLength =\r\n\t\trow === lastRow ? ( lastTile % numOfColumns ) + 1 : numOfColumns;\r\n\r\n\treturn (\r\n\t\t<View\r\n\t\t\tstyle={ [\r\n\t\t\t\t{\r\n\t\t\t\t\twidth: maxWidth / rowLength,\r\n\t\t\t\t},\r\n\t\t\t\tstyles.gridItem,\r\n\t\t\t] }\r\n\t\t>\r\n\t\t\t{ children }\r\n\t\t</View>\r\n\t);\r\n}\r\n\r\nexport default Grid;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,IAAI,QAAQ,cAAc;;AAEnC;AACA;AACA;AACA,OAAOC,MAAM,MAAM,wBAAwB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAE5C,SAASC,IAAIA,CAAEC,KAAK,EAAG;EACtB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC,MAAM;IAAEC,YAAY;IAAEC,QAAQ;IAAEC,SAAS;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGL,KAAK;EACpE,MAAMM,QAAQ,GAAGH,SAAS,GAAG,CAAC;EAC9B,MAAMI,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAEH,QAAQ,GAAGL,YAAa,CAAC;EAErD,MAAMS,GAAG,GAAGF,IAAI,CAACC,KAAK,CAAEL,KAAK,GAAGH,YAAa,CAAC;EAC9C,MAAMU,SAAS,GACdD,GAAG,KAAKH,OAAO,GAAKD,QAAQ,GAAGL,YAAY,GAAK,CAAC,GAAGA,YAAY;EAEjE,oBACCH,IAAA,CAACH,IAAI;IACJiB,KAAK,EAAG,CACP;MACCC,KAAK,EAAER,QAAQ,GAAGM;IACnB,CAAC,EACDf,MAAM,CAACkB,QAAQ,CACb;IAAAZ,QAAA,EAEDA;EAAQ,CACL,CAAC;AAET;AAEA,eAAeH,IAAI","ignoreList":[]}