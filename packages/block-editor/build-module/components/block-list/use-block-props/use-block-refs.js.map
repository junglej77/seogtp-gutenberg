{"version":3,"names":["useContext","useState","useLayoutEffect","useRefEffect","BlockRefs","useBlockRefProvider","clientId","refsMap","element","set","delete","assignRef","ref","value","current","useBlockElementRef","get","unsubscribe","subscribe","useBlockElement","blockElement","setBlockElement"],"sources":["@wordpress/block-editor/src/components/block-list/use-block-props/use-block-refs.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useContext, useState, useLayoutEffect } from '@wordpress/element';\r\nimport { useRefEffect } from '@wordpress/compose';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { BlockRefs } from '../../provider/block-refs-provider';\r\n\r\n/** @typedef {import('@wordpress/element').RefCallback} RefCallback */\r\n/** @typedef {import('@wordpress/element').Ref} Ref */\r\n\r\n/**\r\n * Provides a ref to the BlockRefs context.\r\n *\r\n * @param {string} clientId The client ID of the element ref.\r\n *\r\n * @return {RefCallback} Ref callback.\r\n */\r\nexport function useBlockRefProvider( clientId ) {\r\n\tconst { refsMap } = useContext( BlockRefs );\r\n\treturn useRefEffect(\r\n\t\t( element ) => {\r\n\t\t\trefsMap.set( clientId, element );\r\n\t\t\treturn () => refsMap.delete( clientId );\r\n\t\t},\r\n\t\t[ clientId ]\r\n\t);\r\n}\r\n\r\nfunction assignRef( ref, value ) {\r\n\tif ( typeof ref === 'function' ) {\r\n\t\tref( value );\r\n\t} else if ( ref ) {\r\n\t\tref.current = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Tracks the DOM element for the block identified by `clientId` and assigns it to the `ref`\r\n * whenever it changes.\r\n *\r\n * @param {string} clientId The client ID to track.\r\n * @param {Ref}    ref      The ref object/callback to assign to.\r\n */\r\nexport function useBlockElementRef( clientId, ref ) {\r\n\tconst { refsMap } = useContext( BlockRefs );\r\n\tuseLayoutEffect( () => {\r\n\t\tassignRef( ref, refsMap.get( clientId ) );\r\n\t\tconst unsubscribe = refsMap.subscribe( clientId, () =>\r\n\t\t\tassignRef( ref, refsMap.get( clientId ) )\r\n\t\t);\r\n\t\treturn () => {\r\n\t\t\tunsubscribe();\r\n\t\t\tassignRef( ref, null );\r\n\t\t};\r\n\t}, [ refsMap, clientId, ref ] );\r\n}\r\n\r\n/**\r\n * Return the element for a given client ID. Updates whenever the element\r\n * changes, becomes available, or disappears.\r\n *\r\n * @param {string} clientId The client ID to an element for.\r\n *\r\n * @return {Element|null} The block's wrapper element.\r\n */\r\nexport function useBlockElement( clientId ) {\r\n\tconst [ blockElement, setBlockElement ] = useState( null );\r\n\tuseBlockElementRef( clientId, setBlockElement );\r\n\treturn blockElement;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,UAAU,EAAEC,QAAQ,EAAEC,eAAe,QAAQ,oBAAoB;AAC1E,SAASC,YAAY,QAAQ,oBAAoB;;AAEjD;AACA;AACA;AACA,SAASC,SAAS,QAAQ,oCAAoC;;AAE9D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAAEC,QAAQ,EAAG;EAC/C,MAAM;IAAEC;EAAQ,CAAC,GAAGP,UAAU,CAAEI,SAAU,CAAC;EAC3C,OAAOD,YAAY,CAChBK,OAAO,IAAM;IACdD,OAAO,CAACE,GAAG,CAAEH,QAAQ,EAAEE,OAAQ,CAAC;IAChC,OAAO,MAAMD,OAAO,CAACG,MAAM,CAAEJ,QAAS,CAAC;EACxC,CAAC,EACD,CAAEA,QAAQ,CACX,CAAC;AACF;AAEA,SAASK,SAASA,CAAEC,GAAG,EAAEC,KAAK,EAAG;EAChC,IAAK,OAAOD,GAAG,KAAK,UAAU,EAAG;IAChCA,GAAG,CAAEC,KAAM,CAAC;EACb,CAAC,MAAM,IAAKD,GAAG,EAAG;IACjBA,GAAG,CAACE,OAAO,GAAGD,KAAK;EACpB;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,kBAAkBA,CAAET,QAAQ,EAAEM,GAAG,EAAG;EACnD,MAAM;IAAEL;EAAQ,CAAC,GAAGP,UAAU,CAAEI,SAAU,CAAC;EAC3CF,eAAe,CAAE,MAAM;IACtBS,SAAS,CAAEC,GAAG,EAAEL,OAAO,CAACS,GAAG,CAAEV,QAAS,CAAE,CAAC;IACzC,MAAMW,WAAW,GAAGV,OAAO,CAACW,SAAS,CAAEZ,QAAQ,EAAE,MAChDK,SAAS,CAAEC,GAAG,EAAEL,OAAO,CAACS,GAAG,CAAEV,QAAS,CAAE,CACzC,CAAC;IACD,OAAO,MAAM;MACZW,WAAW,CAAC,CAAC;MACbN,SAAS,CAAEC,GAAG,EAAE,IAAK,CAAC;IACvB,CAAC;EACF,CAAC,EAAE,CAAEL,OAAO,EAAED,QAAQ,EAAEM,GAAG,CAAG,CAAC;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,eAAeA,CAAEb,QAAQ,EAAG;EAC3C,MAAM,CAAEc,YAAY,EAAEC,eAAe,CAAE,GAAGpB,QAAQ,CAAE,IAAK,CAAC;EAC1Dc,kBAAkB,CAAET,QAAQ,EAAEe,eAAgB,CAAC;EAC/C,OAAOD,YAAY;AACpB","ignoreList":[]}