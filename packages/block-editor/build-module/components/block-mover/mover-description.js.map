{"version":3,"names":["__","sprintf","isRTL","getMovementDirection","moveDirection","orientation","getBlockMoverDescription","selectedCount","type","firstIndex","isFirst","isLast","dir","position","getMultiBlockMoverDescription","movementDirection"],"sources":["@wordpress/block-editor/src/components/block-mover/mover-description.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { __, sprintf, isRTL } from '@wordpress/i18n';\r\n\r\nconst getMovementDirection = ( moveDirection, orientation ) => {\r\n\tif ( moveDirection === 'up' ) {\r\n\t\tif ( orientation === 'horizontal' ) {\r\n\t\t\treturn isRTL() ? 'right' : 'left';\r\n\t\t}\r\n\t\treturn 'up';\r\n\t} else if ( moveDirection === 'down' ) {\r\n\t\tif ( orientation === 'horizontal' ) {\r\n\t\t\treturn isRTL() ? 'left' : 'right';\r\n\t\t}\r\n\t\treturn 'down';\r\n\t}\r\n\treturn null;\r\n};\r\n\r\n/**\r\n * Return a label for the block movement controls depending on block position.\r\n *\r\n * @param {number}  selectedCount Number of blocks selected.\r\n * @param {string}  type          Block type - in the case of a single block, should\r\n *                                define its 'type'. I.e. 'Text', 'Heading', 'Image' etc.\r\n * @param {number}  firstIndex    The index (position - 1) of the first block selected.\r\n * @param {boolean} isFirst       This is the first block.\r\n * @param {boolean} isLast        This is the last block.\r\n * @param {number}  dir           Direction of movement (> 0 is considered to be going\r\n *                                down, < 0 is up).\r\n * @param {string}  orientation   The orientation of the block movers, vertical or\r\n *                                horizontal.\r\n *\r\n * @return {string | undefined} Label for the block movement controls.\r\n */\r\nexport function getBlockMoverDescription(\r\n\tselectedCount,\r\n\ttype,\r\n\tfirstIndex,\r\n\tisFirst,\r\n\tisLast,\r\n\tdir,\r\n\torientation\r\n) {\r\n\tconst position = firstIndex + 1;\r\n\r\n\tif ( selectedCount > 1 ) {\r\n\t\treturn getMultiBlockMoverDescription(\r\n\t\t\tselectedCount,\r\n\t\t\tfirstIndex,\r\n\t\t\tisFirst,\r\n\t\t\tisLast,\r\n\t\t\tdir,\r\n\t\t\torientation\r\n\t\t);\r\n\t}\r\n\r\n\tif ( isFirst && isLast ) {\r\n\t\treturn sprintf(\r\n\t\t\t// translators: %s: Type of block (i.e. Text, Image etc)\r\n\t\t\t__( 'Block %s is the only block, and cannot be moved' ),\r\n\t\t\ttype\r\n\t\t);\r\n\t}\r\n\r\n\tif ( dir > 0 && ! isLast ) {\r\n\t\t// Moving down.\r\n\t\tconst movementDirection = getMovementDirection( 'down', orientation );\r\n\r\n\t\tif ( movementDirection === 'down' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Type of block (i.e. Text, Image etc), 2: Position of selected block, 3: New position\r\n\t\t\t\t__(\r\n\t\t\t\t\t'Move %1$s block from position %2$d down to position %3$d'\r\n\t\t\t\t),\r\n\t\t\t\ttype,\r\n\t\t\t\tposition,\r\n\t\t\t\tposition + 1\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( movementDirection === 'left' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Type of block (i.e. Text, Image etc), 2: Position of selected block, 3: New position\r\n\t\t\t\t__(\r\n\t\t\t\t\t'Move %1$s block from position %2$d left to position %3$d'\r\n\t\t\t\t),\r\n\t\t\t\ttype,\r\n\t\t\t\tposition,\r\n\t\t\t\tposition + 1\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( movementDirection === 'right' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Type of block (i.e. Text, Image etc), 2: Position of selected block, 3: New position\r\n\t\t\t\t__(\r\n\t\t\t\t\t'Move %1$s block from position %2$d right to position %3$d'\r\n\t\t\t\t),\r\n\t\t\t\ttype,\r\n\t\t\t\tposition,\r\n\t\t\t\tposition + 1\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tif ( dir > 0 && isLast ) {\r\n\t\t// Moving down, and is the last item.\r\n\t\tconst movementDirection = getMovementDirection( 'down', orientation );\r\n\r\n\t\tif ( movementDirection === 'down' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Type of block (i.e. Text, Image etc)\r\n\t\t\t\t__(\r\n\t\t\t\t\t'Block %1$s is at the end of the content and can’t be moved down'\r\n\t\t\t\t),\r\n\t\t\t\ttype\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( movementDirection === 'left' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Type of block (i.e. Text, Image etc)\r\n\t\t\t\t__(\r\n\t\t\t\t\t'Block %1$s is at the end of the content and can’t be moved left'\r\n\t\t\t\t),\r\n\t\t\t\ttype\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( movementDirection === 'right' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Type of block (i.e. Text, Image etc)\r\n\t\t\t\t__(\r\n\t\t\t\t\t'Block %1$s is at the end of the content and can’t be moved right'\r\n\t\t\t\t),\r\n\t\t\t\ttype\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tif ( dir < 0 && ! isFirst ) {\r\n\t\t// Moving up.\r\n\t\tconst movementDirection = getMovementDirection( 'up', orientation );\r\n\r\n\t\tif ( movementDirection === 'up' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Type of block (i.e. Text, Image etc), 2: Position of selected block, 3: New position\r\n\t\t\t\t__( 'Move %1$s block from position %2$d up to position %3$d' ),\r\n\t\t\t\ttype,\r\n\t\t\t\tposition,\r\n\t\t\t\tposition - 1\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( movementDirection === 'left' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Type of block (i.e. Text, Image etc), 2: Position of selected block, 3: New position\r\n\t\t\t\t__(\r\n\t\t\t\t\t'Move %1$s block from position %2$d left to position %3$d'\r\n\t\t\t\t),\r\n\t\t\t\ttype,\r\n\t\t\t\tposition,\r\n\t\t\t\tposition - 1\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( movementDirection === 'right' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Type of block (i.e. Text, Image etc), 2: Position of selected block, 3: New position\r\n\t\t\t\t__(\r\n\t\t\t\t\t'Move %1$s block from position %2$d right to position %3$d'\r\n\t\t\t\t),\r\n\t\t\t\ttype,\r\n\t\t\t\tposition,\r\n\t\t\t\tposition - 1\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tif ( dir < 0 && isFirst ) {\r\n\t\t// Moving up, and is the first item.\r\n\t\tconst movementDirection = getMovementDirection( 'up', orientation );\r\n\r\n\t\tif ( movementDirection === 'up' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Type of block (i.e. Text, Image etc)\r\n\t\t\t\t__(\r\n\t\t\t\t\t'Block %1$s is at the beginning of the content and can’t be moved up'\r\n\t\t\t\t),\r\n\t\t\t\ttype\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( movementDirection === 'left' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Type of block (i.e. Text, Image etc)\r\n\t\t\t\t__(\r\n\t\t\t\t\t'Block %1$s is at the beginning of the content and can’t be moved left'\r\n\t\t\t\t),\r\n\t\t\t\ttype\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( movementDirection === 'right' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Type of block (i.e. Text, Image etc)\r\n\t\t\t\t__(\r\n\t\t\t\t\t'Block %1$s is at the beginning of the content and can’t be moved right'\r\n\t\t\t\t),\r\n\t\t\t\ttype\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Return a label for the block movement controls depending on block position.\r\n *\r\n * @param {number}  selectedCount Number of blocks selected.\r\n * @param {number}  firstIndex    The index (position - 1) of the first block selected.\r\n * @param {boolean} isFirst       This is the first block.\r\n * @param {boolean} isLast        This is the last block.\r\n * @param {number}  dir           Direction of movement (> 0 is considered to be going\r\n *                                down, < 0 is up).\r\n * @param {string}  orientation   The orientation of the block movers, vertical or\r\n *                                horizontal.\r\n *\r\n * @return {string | undefined} Label for the block movement controls.\r\n */\r\nexport function getMultiBlockMoverDescription(\r\n\tselectedCount,\r\n\tfirstIndex,\r\n\tisFirst,\r\n\tisLast,\r\n\tdir,\r\n\torientation\r\n) {\r\n\tconst position = firstIndex + 1;\r\n\r\n\tif ( isFirst && isLast ) {\r\n\t\t// All blocks are selected\r\n\t\treturn __( 'All blocks are selected, and cannot be moved' );\r\n\t}\r\n\r\n\tif ( dir > 0 && ! isLast ) {\r\n\t\t// moving down\r\n\t\tconst movementDirection = getMovementDirection( 'down', orientation );\r\n\r\n\t\tif ( movementDirection === 'down' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Number of selected blocks, 2: Position of selected blocks\r\n\t\t\t\t__( 'Move %1$d blocks from position %2$d down by one place' ),\r\n\t\t\t\tselectedCount,\r\n\t\t\t\tposition\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( movementDirection === 'left' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Number of selected blocks, 2: Position of selected blocks\r\n\t\t\t\t__( 'Move %1$d blocks from position %2$d left by one place' ),\r\n\t\t\t\tselectedCount,\r\n\t\t\t\tposition\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( movementDirection === 'right' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Number of selected blocks, 2: Position of selected blocks\r\n\t\t\t\t__( 'Move %1$d blocks from position %2$d right by one place' ),\r\n\t\t\t\tselectedCount,\r\n\t\t\t\tposition\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tif ( dir > 0 && isLast ) {\r\n\t\t// moving down, and the selected blocks are the last item\r\n\t\tconst movementDirection = getMovementDirection( 'down', orientation );\r\n\r\n\t\tif ( movementDirection === 'down' ) {\r\n\t\t\treturn __(\r\n\t\t\t\t'Blocks cannot be moved down as they are already at the bottom'\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( movementDirection === 'left' ) {\r\n\t\t\treturn __(\r\n\t\t\t\t'Blocks cannot be moved left as they are already are at the leftmost position'\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( movementDirection === 'right' ) {\r\n\t\t\treturn __(\r\n\t\t\t\t'Blocks cannot be moved right as they are already are at the rightmost position'\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tif ( dir < 0 && ! isFirst ) {\r\n\t\t// moving up\r\n\t\tconst movementDirection = getMovementDirection( 'up', orientation );\r\n\r\n\t\tif ( movementDirection === 'up' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Number of selected blocks, 2: Position of selected blocks\r\n\t\t\t\t__( 'Move %1$d blocks from position %2$d up by one place' ),\r\n\t\t\t\tselectedCount,\r\n\t\t\t\tposition\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( movementDirection === 'left' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Number of selected blocks, 2: Position of selected blocks\r\n\t\t\t\t__( 'Move %1$d blocks from position %2$d left by one place' ),\r\n\t\t\t\tselectedCount,\r\n\t\t\t\tposition\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( movementDirection === 'right' ) {\r\n\t\t\treturn sprintf(\r\n\t\t\t\t// translators: 1: Number of selected blocks, 2: Position of selected blocks\r\n\t\t\t\t__( 'Move %1$d blocks from position %2$d right by one place' ),\r\n\t\t\t\tselectedCount,\r\n\t\t\t\tposition\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tif ( dir < 0 && isFirst ) {\r\n\t\t// moving up, and the selected blocks are the first item\r\n\t\tconst movementDirection = getMovementDirection( 'up', orientation );\r\n\r\n\t\tif ( movementDirection === 'up' ) {\r\n\t\t\treturn __(\r\n\t\t\t\t'Blocks cannot be moved up as they are already at the top'\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( movementDirection === 'left' ) {\r\n\t\t\treturn __(\r\n\t\t\t\t'Blocks cannot be moved left as they are already are at the leftmost position'\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( movementDirection === 'right' ) {\r\n\t\t\treturn __(\r\n\t\t\t\t'Blocks cannot be moved right as they are already are at the rightmost position'\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]}