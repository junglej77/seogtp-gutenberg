{"version":3,"names":["__experimentalGetBlockAttributesNamesByRole","getBlockAttributesNamesByRole","getMatchingBlockByName","block","selectedBlockName","consumedBlocks","Set","clientId","name","innerBlocks","has","innerBlock","match","getRetainedBlockAttributes","attributes","contentAttributes","length","reduce","_accumulator","attribute"],"sources":["@wordpress/block-editor/src/components/block-switcher/utils.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { __experimentalGetBlockAttributesNamesByRole as getBlockAttributesNamesByRole } from '@wordpress/blocks';\r\n\r\n/**\r\n * Try to find a matching block by a block's name in a provided\r\n * block. We recurse through InnerBlocks and return the reference\r\n * of the matched block (it could be an InnerBlock).\r\n * If no match is found return nothing.\r\n *\r\n * @param {WPBlock} block             The block to try to find a match.\r\n * @param {string}  selectedBlockName The block's name to use for matching condition.\r\n * @param {Set}     consumedBlocks    A set holding the previously matched/consumed blocks.\r\n *\r\n * @return {WPBlock | undefined} The matched block if found or nothing(`undefined`).\r\n */\r\nexport const getMatchingBlockByName = (\r\n\tblock,\r\n\tselectedBlockName,\r\n\tconsumedBlocks = new Set()\r\n) => {\r\n\tconst { clientId, name, innerBlocks = [] } = block;\r\n\t// Check if block has been consumed already.\r\n\tif ( consumedBlocks.has( clientId ) ) {\r\n\t\treturn;\r\n\t}\r\n\tif ( name === selectedBlockName ) {\r\n\t\treturn block;\r\n\t}\r\n\t// Try to find a matching block from InnerBlocks recursively.\r\n\tfor ( const innerBlock of innerBlocks ) {\r\n\t\tconst match = getMatchingBlockByName(\r\n\t\t\tinnerBlock,\r\n\t\t\tselectedBlockName,\r\n\t\t\tconsumedBlocks\r\n\t\t);\r\n\t\tif ( match ) {\r\n\t\t\treturn match;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Find and return the block attributes to retain through\r\n * the transformation, based on Block Type's `role:content`\r\n * attributes. If no `role:content` attributes exist,\r\n * return selected block's attributes.\r\n *\r\n * @param {string} name       Block type's namespaced name.\r\n * @param {Object} attributes Selected block's attributes.\r\n * @return {Object} The block's attributes to retain.\r\n */\r\nexport const getRetainedBlockAttributes = ( name, attributes ) => {\r\n\tconst contentAttributes = getBlockAttributesNamesByRole( name, 'content' );\r\n\tif ( ! contentAttributes?.length ) {\r\n\t\treturn attributes;\r\n\t}\r\n\r\n\treturn contentAttributes.reduce( ( _accumulator, attribute ) => {\r\n\t\tif ( attributes[ attribute ] ) {\r\n\t\t\t_accumulator[ attribute ] = attributes[ attribute ];\r\n\t\t}\r\n\t\treturn _accumulator;\r\n\t}, {} );\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,2CAA2C,IAAIC,6BAA6B,QAAQ,mBAAmB;;AAEhH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAGA,CACrCC,KAAK,EACLC,iBAAiB,EACjBC,cAAc,GAAG,IAAIC,GAAG,CAAC,CAAC,KACtB;EACJ,MAAM;IAAEC,QAAQ;IAAEC,IAAI;IAAEC,WAAW,GAAG;EAAG,CAAC,GAAGN,KAAK;EAClD;EACA,IAAKE,cAAc,CAACK,GAAG,CAAEH,QAAS,CAAC,EAAG;IACrC;EACD;EACA,IAAKC,IAAI,KAAKJ,iBAAiB,EAAG;IACjC,OAAOD,KAAK;EACb;EACA;EACA,KAAM,MAAMQ,UAAU,IAAIF,WAAW,EAAG;IACvC,MAAMG,KAAK,GAAGV,sBAAsB,CACnCS,UAAU,EACVP,iBAAiB,EACjBC,cACD,CAAC;IACD,IAAKO,KAAK,EAAG;MACZ,OAAOA,KAAK;IACb;EACD;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,0BAA0B,GAAGA,CAAEL,IAAI,EAAEM,UAAU,KAAM;EACjE,MAAMC,iBAAiB,GAAGd,6BAA6B,CAAEO,IAAI,EAAE,SAAU,CAAC;EAC1E,IAAK,CAAEO,iBAAiB,EAAEC,MAAM,EAAG;IAClC,OAAOF,UAAU;EAClB;EAEA,OAAOC,iBAAiB,CAACE,MAAM,CAAE,CAAEC,YAAY,EAAEC,SAAS,KAAM;IAC/D,IAAKL,UAAU,CAAEK,SAAS,CAAE,EAAG;MAC9BD,YAAY,CAAEC,SAAS,CAAE,GAAGL,UAAU,CAAEK,SAAS,CAAE;IACpD;IACA,OAAOD,YAAY;EACpB,CAAC,EAAE,CAAC,CAAE,CAAC;AACR,CAAC","ignoreList":[]}