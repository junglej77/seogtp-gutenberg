{"version":3,"names":["colord","extend","namesPlugin","a11yPlugin","privateApis","componentsPrivateApis","unlock","kebabCase","getColorObjectByAttributeValues","colors","definedColor","customColor","colorObj","find","color","slug","getColorObjectByColorValue","colorValue","getColorClassName","colorContextName","colorSlug","undefined","getMostReadableColor","colordColor","getColorContrast","contrast","maxContrast","Math","max","map"],"sources":["@wordpress/block-editor/src/components/colors/utils.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport { colord, extend } from 'colord';\r\nimport namesPlugin from 'colord/plugins/names';\r\nimport a11yPlugin from 'colord/plugins/a11y';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { privateApis as componentsPrivateApis } from '@wordpress/components';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { unlock } from '../../lock-unlock';\r\n\r\nextend( [ namesPlugin, a11yPlugin ] );\r\n\r\nconst { kebabCase } = unlock( componentsPrivateApis );\r\n\r\n/**\r\n * Provided an array of color objects as set by the theme or by the editor defaults,\r\n * and the values of the defined color or custom color returns a color object describing the color.\r\n *\r\n * @param {Array}   colors       Array of color objects as set by the theme or by the editor defaults.\r\n * @param {?string} definedColor A string containing the color slug.\r\n * @param {?string} customColor  A string containing the customColor value.\r\n *\r\n * @return {?Object} If definedColor is passed and the name is found in colors,\r\n *                   the color object exactly as set by the theme or editor defaults is returned.\r\n *                   Otherwise, an object that just sets the color is defined.\r\n */\r\nexport const getColorObjectByAttributeValues = (\r\n\tcolors,\r\n\tdefinedColor,\r\n\tcustomColor\r\n) => {\r\n\tif ( definedColor ) {\r\n\t\tconst colorObj = colors?.find(\r\n\t\t\t( color ) => color.slug === definedColor\r\n\t\t);\r\n\r\n\t\tif ( colorObj ) {\r\n\t\t\treturn colorObj;\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\tcolor: customColor,\r\n\t};\r\n};\r\n\r\n/**\r\n * Provided an array of color objects as set by the theme or by the editor defaults, and a color value returns the color object matching that value or undefined.\r\n *\r\n * @param {Array}   colors     Array of color objects as set by the theme or by the editor defaults.\r\n * @param {?string} colorValue A string containing the color value.\r\n *\r\n * @return {?Object} Color object included in the colors array whose color property equals colorValue.\r\n *                   Returns undefined if no color object matches this requirement.\r\n */\r\nexport const getColorObjectByColorValue = ( colors, colorValue ) => {\r\n\treturn colors?.find( ( color ) => color.color === colorValue );\r\n};\r\n\r\n/**\r\n * Returns a class based on the context a color is being used and its slug.\r\n *\r\n * @param {string} colorContextName Context/place where color is being used e.g: background, text etc...\r\n * @param {string} colorSlug        Slug of the color.\r\n *\r\n * @return {?string} String with the class corresponding to the color in the provided context.\r\n *                   Returns undefined if either colorContextName or colorSlug are not provided.\r\n */\r\nexport function getColorClassName( colorContextName, colorSlug ) {\r\n\tif ( ! colorContextName || ! colorSlug ) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\treturn `has-${ kebabCase( colorSlug ) }-${ colorContextName }`;\r\n}\r\n\r\n/**\r\n * Given an array of color objects and a color value returns the color value of the most readable color in the array.\r\n *\r\n * @param {Array}   colors     Array of color objects as set by the theme or by the editor defaults.\r\n * @param {?string} colorValue A string containing the color value.\r\n *\r\n * @return {string} String with the color value of the most readable color.\r\n */\r\nexport function getMostReadableColor( colors, colorValue ) {\r\n\tconst colordColor = colord( colorValue );\r\n\tconst getColorContrast = ( { color } ) => colordColor.contrast( color );\r\n\r\n\tconst maxContrast = Math.max( ...colors.map( getColorContrast ) );\r\n\treturn colors.find( ( color ) => getColorContrast( color ) === maxContrast )\r\n\t\t.color;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,MAAM,EAAEC,MAAM,QAAQ,QAAQ;AACvC,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,UAAU,MAAM,qBAAqB;;AAE5C;AACA;AACA;AACA,SAASC,WAAW,IAAIC,qBAAqB,QAAQ,uBAAuB;;AAE5E;AACA;AACA;AACA,SAASC,MAAM,QAAQ,mBAAmB;AAE1CL,MAAM,CAAE,CAAEC,WAAW,EAAEC,UAAU,CAAG,CAAC;AAErC,MAAM;EAAEI;AAAU,CAAC,GAAGD,MAAM,CAAED,qBAAsB,CAAC;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,+BAA+B,GAAGA,CAC9CC,MAAM,EACNC,YAAY,EACZC,WAAW,KACP;EACJ,IAAKD,YAAY,EAAG;IACnB,MAAME,QAAQ,GAAGH,MAAM,EAAEI,IAAI,CAC1BC,KAAK,IAAMA,KAAK,CAACC,IAAI,KAAKL,YAC7B,CAAC;IAED,IAAKE,QAAQ,EAAG;MACf,OAAOA,QAAQ;IAChB;EACD;EACA,OAAO;IACNE,KAAK,EAAEH;EACR,CAAC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,0BAA0B,GAAGA,CAAEP,MAAM,EAAEQ,UAAU,KAAM;EACnE,OAAOR,MAAM,EAAEI,IAAI,CAAIC,KAAK,IAAMA,KAAK,CAACA,KAAK,KAAKG,UAAW,CAAC;AAC/D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAAEC,gBAAgB,EAAEC,SAAS,EAAG;EAChE,IAAK,CAAED,gBAAgB,IAAI,CAAEC,SAAS,EAAG;IACxC,OAAOC,SAAS;EACjB;EAEA,OAAQ,OAAOd,SAAS,CAAEa,SAAU,CAAG,IAAID,gBAAkB,EAAC;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,oBAAoBA,CAAEb,MAAM,EAAEQ,UAAU,EAAG;EAC1D,MAAMM,WAAW,GAAGvB,MAAM,CAAEiB,UAAW,CAAC;EACxC,MAAMO,gBAAgB,GAAGA,CAAE;IAAEV;EAAM,CAAC,KAAMS,WAAW,CAACE,QAAQ,CAAEX,KAAM,CAAC;EAEvE,MAAMY,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAE,GAAGnB,MAAM,CAACoB,GAAG,CAAEL,gBAAiB,CAAE,CAAC;EACjE,OAAOf,MAAM,CAACI,IAAI,CAAIC,KAAK,IAAMU,gBAAgB,CAAEV,KAAM,CAAC,KAAKY,WAAY,CAAC,CAC1EZ,KAAK;AACR","ignoreList":[]}