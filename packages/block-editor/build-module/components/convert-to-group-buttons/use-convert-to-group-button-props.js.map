{"version":3,"names":["store","blocksStore","useSelect","blockEditorStore","useConvertToGroupButtonProps","selectedClientIds","select","getBlocksByClientId","getSelectedBlockClientIds","isUngroupable","isGroupable","getGroupingBlockName","getBlockType","clientIds","length","blocksSelection","firstSelectedBlock","_isUngroupable","groupingBlockName","onUngroup","name","transforms","ungroup"],"sources":["@wordpress/block-editor/src/components/convert-to-group-buttons/use-convert-to-group-button-props.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { store as blocksStore } from '@wordpress/blocks';\r\nimport { useSelect } from '@wordpress/data';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store as blockEditorStore } from '../../store';\r\n\r\n/**\r\n * Contains the properties `ConvertToGroupButton` component needs.\r\n *\r\n * @typedef {Object} ConvertToGroupButtonProps\r\n * @property {string[]}  clientIds         An array of the selected client ids.\r\n * @property {boolean}   isGroupable       Indicates if the selected blocks can be grouped.\r\n * @property {boolean}   isUngroupable     Indicates if the selected blocks can be ungrouped.\r\n * @property {WPBlock[]} blocksSelection   An array of the selected blocks.\r\n * @property {string}    groupingBlockName The name of block used for handling grouping interactions.\r\n */\r\n\r\n/**\r\n * Returns the properties `ConvertToGroupButton` component needs to work properly.\r\n * It is used in `BlockSettingsMenuControls` to know if `ConvertToGroupButton`\r\n * should be rendered, to avoid ending up with an empty MenuGroup.\r\n *\r\n * @param {?string[]} selectedClientIds An optional array of clientIds to group. The selected blocks\r\n *                                      from the block editor store are used if this is not provided.\r\n *\r\n * @return {ConvertToGroupButtonProps} Returns the properties needed by `ConvertToGroupButton`.\r\n */\r\nexport default function useConvertToGroupButtonProps( selectedClientIds ) {\r\n\treturn useSelect(\r\n\t\t( select ) => {\r\n\t\t\tconst {\r\n\t\t\t\tgetBlocksByClientId,\r\n\t\t\t\tgetSelectedBlockClientIds,\r\n\t\t\t\tisUngroupable,\r\n\t\t\t\tisGroupable,\r\n\t\t\t} = select( blockEditorStore );\r\n\t\t\tconst { getGroupingBlockName, getBlockType } =\r\n\t\t\t\tselect( blocksStore );\r\n\t\t\tconst clientIds = selectedClientIds?.length\r\n\t\t\t\t? selectedClientIds\r\n\t\t\t\t: getSelectedBlockClientIds();\r\n\t\t\tconst blocksSelection = getBlocksByClientId( clientIds );\r\n\t\t\tconst [ firstSelectedBlock ] = blocksSelection;\r\n\t\t\tconst _isUngroupable =\r\n\t\t\t\tclientIds.length === 1 && isUngroupable( clientIds[ 0 ] );\r\n\t\t\treturn {\r\n\t\t\t\tclientIds,\r\n\t\t\t\tisGroupable: isGroupable( clientIds ),\r\n\t\t\t\tisUngroupable: _isUngroupable,\r\n\t\t\t\tblocksSelection,\r\n\t\t\t\tgroupingBlockName: getGroupingBlockName(),\r\n\t\t\t\tonUngroup:\r\n\t\t\t\t\t_isUngroupable &&\r\n\t\t\t\t\tgetBlockType( firstSelectedBlock.name )?.transforms\r\n\t\t\t\t\t\t?.ungroup,\r\n\t\t\t};\r\n\t\t},\r\n\t\t[ selectedClientIds ]\r\n\t);\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,KAAK,IAAIC,WAAW,QAAQ,mBAAmB;AACxD,SAASC,SAAS,QAAQ,iBAAiB;;AAE3C;AACA;AACA;AACA,SAASF,KAAK,IAAIG,gBAAgB,QAAQ,aAAa;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,4BAA4BA,CAAEC,iBAAiB,EAAG;EACzE,OAAOH,SAAS,CACbI,MAAM,IAAM;IACb,MAAM;MACLC,mBAAmB;MACnBC,yBAAyB;MACzBC,aAAa;MACbC;IACD,CAAC,GAAGJ,MAAM,CAAEH,gBAAiB,CAAC;IAC9B,MAAM;MAAEQ,oBAAoB;MAAEC;IAAa,CAAC,GAC3CN,MAAM,CAAEL,WAAY,CAAC;IACtB,MAAMY,SAAS,GAAGR,iBAAiB,EAAES,MAAM,GACxCT,iBAAiB,GACjBG,yBAAyB,CAAC,CAAC;IAC9B,MAAMO,eAAe,GAAGR,mBAAmB,CAAEM,SAAU,CAAC;IACxD,MAAM,CAAEG,kBAAkB,CAAE,GAAGD,eAAe;IAC9C,MAAME,cAAc,GACnBJ,SAAS,CAACC,MAAM,KAAK,CAAC,IAAIL,aAAa,CAAEI,SAAS,CAAE,CAAC,CAAG,CAAC;IAC1D,OAAO;MACNA,SAAS;MACTH,WAAW,EAAEA,WAAW,CAAEG,SAAU,CAAC;MACrCJ,aAAa,EAAEQ,cAAc;MAC7BF,eAAe;MACfG,iBAAiB,EAAEP,oBAAoB,CAAC,CAAC;MACzCQ,SAAS,EACRF,cAAc,IACdL,YAAY,CAAEI,kBAAkB,CAACI,IAAK,CAAC,EAAEC,UAAU,EAChDC;IACL,CAAC;EACF,CAAC,EACD,CAAEjB,iBAAiB,CACpB,CAAC;AACF","ignoreList":[]}