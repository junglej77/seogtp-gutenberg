{"version":3,"names":["privateApis","componentsPrivateApis","unlock","kebabCase","getFontSize","fontSizes","fontSizeAttribute","customFontSizeAttribute","fontSizeObject","find","slug","size","getFontSizeObjectByValue","value","getFontSizeClass","fontSizeSlug"],"sources":["@wordpress/block-editor/src/components/font-sizes/utils.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { privateApis as componentsPrivateApis } from '@wordpress/components';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { unlock } from '../../lock-unlock';\r\n\r\nconst { kebabCase } = unlock( componentsPrivateApis );\r\n\r\n/**\r\n *  Returns the font size object based on an array of named font sizes and the namedFontSize and customFontSize values.\r\n * \tIf namedFontSize is undefined or not found in fontSizes an object with just the size value based on customFontSize is returned.\r\n *\r\n * @param {Array}   fontSizes               Array of font size objects containing at least the \"name\" and \"size\" values as properties.\r\n * @param {?string} fontSizeAttribute       Content of the font size attribute (slug).\r\n * @param {?number} customFontSizeAttribute Contents of the custom font size attribute (value).\r\n *\r\n * @return {?Object} If fontSizeAttribute is set and an equal slug is found in fontSizes it returns the font size object for that slug.\r\n * \t\t\t\t\t Otherwise, an object with just the size value based on customFontSize is returned.\r\n */\r\nexport const getFontSize = (\r\n\tfontSizes,\r\n\tfontSizeAttribute,\r\n\tcustomFontSizeAttribute\r\n) => {\r\n\tif ( fontSizeAttribute ) {\r\n\t\tconst fontSizeObject = fontSizes?.find(\r\n\t\t\t( { slug } ) => slug === fontSizeAttribute\r\n\t\t);\r\n\t\tif ( fontSizeObject ) {\r\n\t\t\treturn fontSizeObject;\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\tsize: customFontSizeAttribute,\r\n\t};\r\n};\r\n\r\n/**\r\n * Returns the corresponding font size object for a given value.\r\n *\r\n * @param {Array}  fontSizes Array of font size objects.\r\n * @param {number} value     Font size value.\r\n *\r\n * @return {Object} Font size object.\r\n */\r\nexport function getFontSizeObjectByValue( fontSizes, value ) {\r\n\tconst fontSizeObject = fontSizes?.find( ( { size } ) => size === value );\r\n\tif ( fontSizeObject ) {\r\n\t\treturn fontSizeObject;\r\n\t}\r\n\r\n\treturn {\r\n\t\tsize: value,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns a class based on fontSizeName.\r\n *\r\n * @param {string} fontSizeSlug Slug of the fontSize.\r\n *\r\n * @return {string | undefined} String with the class corresponding to the fontSize passed.\r\n *                  The class is generated by appending 'has-' followed by fontSizeSlug in kebabCase and ending with '-font-size'.\r\n */\r\nexport function getFontSizeClass( fontSizeSlug ) {\r\n\tif ( ! fontSizeSlug ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\treturn `has-${ kebabCase( fontSizeSlug ) }-font-size`;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,WAAW,IAAIC,qBAAqB,QAAQ,uBAAuB;;AAE5E;AACA;AACA;AACA,SAASC,MAAM,QAAQ,mBAAmB;AAE1C,MAAM;EAAEC;AAAU,CAAC,GAAGD,MAAM,CAAED,qBAAsB,CAAC;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,WAAW,GAAGA,CAC1BC,SAAS,EACTC,iBAAiB,EACjBC,uBAAuB,KACnB;EACJ,IAAKD,iBAAiB,EAAG;IACxB,MAAME,cAAc,GAAGH,SAAS,EAAEI,IAAI,CACrC,CAAE;MAAEC;IAAK,CAAC,KAAMA,IAAI,KAAKJ,iBAC1B,CAAC;IACD,IAAKE,cAAc,EAAG;MACrB,OAAOA,cAAc;IACtB;EACD;EACA,OAAO;IACNG,IAAI,EAAEJ;EACP,CAAC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,wBAAwBA,CAAEP,SAAS,EAAEQ,KAAK,EAAG;EAC5D,MAAML,cAAc,GAAGH,SAAS,EAAEI,IAAI,CAAE,CAAE;IAAEE;EAAK,CAAC,KAAMA,IAAI,KAAKE,KAAM,CAAC;EACxE,IAAKL,cAAc,EAAG;IACrB,OAAOA,cAAc;EACtB;EAEA,OAAO;IACNG,IAAI,EAAEE;EACP,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAAEC,YAAY,EAAG;EAChD,IAAK,CAAEA,YAAY,EAAG;IACrB;EACD;EAEA,OAAQ,OAAOZ,SAAS,CAAEY,YAAa,CAAG,YAAW;AACtD","ignoreList":[]}