{"version":3,"names":["createHigherOrderComponent","compose","Component","getFontSize","getFontSizeClass","useSettings","jsx","_jsx","DEFAULT_FONT_SIZES","upperFirst","firstLetter","rest","toUpperCase","join","fontSizeNames","fontSizeAttributeNames","reduce","fontSizeAttributeNamesAccumulator","fontSizeAttributeName","WrappedComponent","props","fontSizes","constructor","setters","createSetters","state","Object","entries","settersAccumulator","customFontSizeAttributeName","upperFirstFontSizeAttributeName","createSetFontSize","fontSizeValue","fontSizeObject","find","size","Number","setAttributes","slug","undefined","getDerivedStateFromProps","attributes","previousState","didAttributesChange","values","some","newState","filter","key","value","newStateAccumulator","fontSizeAttributeValue","class","render"],"sources":["@wordpress/block-editor/src/components/font-sizes/with-font-sizes.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { createHigherOrderComponent, compose } from '@wordpress/compose';\r\nimport { Component } from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { getFontSize, getFontSizeClass } from './utils';\r\nimport { useSettings } from '../use-settings';\r\n\r\nconst DEFAULT_FONT_SIZES = [];\r\n\r\n/**\r\n * Capitalizes the first letter in a string.\r\n *\r\n * @param {string} str The string whose first letter the function will capitalize.\r\n *\r\n * @return {string} Capitalized string.\r\n */\r\nconst upperFirst = ( [ firstLetter, ...rest ] ) =>\r\n\tfirstLetter.toUpperCase() + rest.join( '' );\r\n\r\n/**\r\n * Higher-order component, which handles font size logic for class generation,\r\n * font size value retrieval, and font size change handling.\r\n *\r\n * @param {...(Object|string)} fontSizeNames The arguments should all be strings.\r\n *                                           Each string contains the font size\r\n *                                           attribute name e.g: 'fontSize'.\r\n *\r\n * @return {Function} Higher-order component.\r\n */\r\nexport default ( ...fontSizeNames ) => {\r\n\t/*\r\n\t * Computes an object whose key is the font size attribute name as passed in the array,\r\n\t * and the value is the custom font size attribute name.\r\n\t * Custom font size is automatically compted by appending custom followed by the font size attribute name in with the first letter capitalized.\r\n\t */\r\n\tconst fontSizeAttributeNames = fontSizeNames.reduce(\r\n\t\t( fontSizeAttributeNamesAccumulator, fontSizeAttributeName ) => {\r\n\t\t\tfontSizeAttributeNamesAccumulator[\r\n\t\t\t\tfontSizeAttributeName\r\n\t\t\t] = `custom${ upperFirst( fontSizeAttributeName ) }`;\r\n\t\t\treturn fontSizeAttributeNamesAccumulator;\r\n\t\t},\r\n\t\t{}\r\n\t);\r\n\r\n\treturn createHigherOrderComponent(\r\n\t\tcompose( [\r\n\t\t\tcreateHigherOrderComponent(\r\n\t\t\t\t( WrappedComponent ) => ( props ) => {\r\n\t\t\t\t\tconst [ fontSizes ] = useSettings( 'typography.fontSizes' );\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<WrappedComponent\r\n\t\t\t\t\t\t\t{ ...props }\r\n\t\t\t\t\t\t\tfontSizes={ fontSizes || DEFAULT_FONT_SIZES }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t\t'withFontSizes'\r\n\t\t\t),\r\n\t\t\t( WrappedComponent ) => {\r\n\t\t\t\treturn class extends Component {\r\n\t\t\t\t\tconstructor( props ) {\r\n\t\t\t\t\t\tsuper( props );\r\n\r\n\t\t\t\t\t\tthis.setters = this.createSetters();\r\n\r\n\t\t\t\t\t\tthis.state = {};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcreateSetters() {\r\n\t\t\t\t\t\treturn Object.entries( fontSizeAttributeNames ).reduce(\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\tsettersAccumulator,\r\n\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\tfontSizeAttributeName,\r\n\t\t\t\t\t\t\t\t\tcustomFontSizeAttributeName,\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t) => {\r\n\t\t\t\t\t\t\t\tconst upperFirstFontSizeAttributeName =\r\n\t\t\t\t\t\t\t\t\tupperFirst( fontSizeAttributeName );\r\n\t\t\t\t\t\t\t\tsettersAccumulator[\r\n\t\t\t\t\t\t\t\t\t`set${ upperFirstFontSizeAttributeName }`\r\n\t\t\t\t\t\t\t\t] = this.createSetFontSize(\r\n\t\t\t\t\t\t\t\t\tfontSizeAttributeName,\r\n\t\t\t\t\t\t\t\t\tcustomFontSizeAttributeName\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\treturn settersAccumulator;\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{}\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcreateSetFontSize(\r\n\t\t\t\t\t\tfontSizeAttributeName,\r\n\t\t\t\t\t\tcustomFontSizeAttributeName\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\treturn ( fontSizeValue ) => {\r\n\t\t\t\t\t\t\tconst fontSizeObject = this.props.fontSizes?.find(\r\n\t\t\t\t\t\t\t\t( { size } ) => size === Number( fontSizeValue )\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tthis.props.setAttributes( {\r\n\t\t\t\t\t\t\t\t[ fontSizeAttributeName ]:\r\n\t\t\t\t\t\t\t\t\tfontSizeObject && fontSizeObject.slug\r\n\t\t\t\t\t\t\t\t\t\t? fontSizeObject.slug\r\n\t\t\t\t\t\t\t\t\t\t: undefined,\r\n\t\t\t\t\t\t\t\t[ customFontSizeAttributeName ]:\r\n\t\t\t\t\t\t\t\t\tfontSizeObject && fontSizeObject.slug\r\n\t\t\t\t\t\t\t\t\t\t? undefined\r\n\t\t\t\t\t\t\t\t\t\t: fontSizeValue,\r\n\t\t\t\t\t\t\t} );\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstatic getDerivedStateFromProps(\r\n\t\t\t\t\t\t{ attributes, fontSizes },\r\n\t\t\t\t\t\tpreviousState\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tconst didAttributesChange = (\r\n\t\t\t\t\t\t\tcustomFontSizeAttributeName,\r\n\t\t\t\t\t\t\tfontSizeAttributeName\r\n\t\t\t\t\t\t) => {\r\n\t\t\t\t\t\t\tif ( previousState[ fontSizeAttributeName ] ) {\r\n\t\t\t\t\t\t\t\t// If new font size is name compare with the previous slug.\r\n\t\t\t\t\t\t\t\tif ( attributes[ fontSizeAttributeName ] ) {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\tattributes[ fontSizeAttributeName ] !==\r\n\t\t\t\t\t\t\t\t\t\tpreviousState[ fontSizeAttributeName ]\r\n\t\t\t\t\t\t\t\t\t\t\t.slug\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// If font size is not named, update when the font size value changes.\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\tpreviousState[ fontSizeAttributeName ]\r\n\t\t\t\t\t\t\t\t\t\t.size !==\r\n\t\t\t\t\t\t\t\t\tattributes[ customFontSizeAttributeName ]\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// In this case we need to build the font size object.\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t! Object.values( fontSizeAttributeNames ).some(\r\n\t\t\t\t\t\t\t\tdidAttributesChange\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst newState = Object.entries(\r\n\t\t\t\t\t\t\tfontSizeAttributeNames\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t.filter( ( [ key, value ] ) =>\r\n\t\t\t\t\t\t\t\tdidAttributesChange( value, key )\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t.reduce(\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tnewStateAccumulator,\r\n\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\t\tfontSizeAttributeName,\r\n\t\t\t\t\t\t\t\t\t\tcustomFontSizeAttributeName,\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t) => {\r\n\t\t\t\t\t\t\t\t\tconst fontSizeAttributeValue =\r\n\t\t\t\t\t\t\t\t\t\tattributes[ fontSizeAttributeName ];\r\n\t\t\t\t\t\t\t\t\tconst fontSizeObject = getFontSize(\r\n\t\t\t\t\t\t\t\t\t\tfontSizes,\r\n\t\t\t\t\t\t\t\t\t\tfontSizeAttributeValue,\r\n\t\t\t\t\t\t\t\t\t\tattributes[\r\n\t\t\t\t\t\t\t\t\t\t\tcustomFontSizeAttributeName\r\n\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\tnewStateAccumulator[\r\n\t\t\t\t\t\t\t\t\t\tfontSizeAttributeName\r\n\t\t\t\t\t\t\t\t\t] = {\r\n\t\t\t\t\t\t\t\t\t\t...fontSizeObject,\r\n\t\t\t\t\t\t\t\t\t\tclass: getFontSizeClass(\r\n\t\t\t\t\t\t\t\t\t\t\tfontSizeAttributeValue\r\n\t\t\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\treturn newStateAccumulator;\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{}\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t...previousState,\r\n\t\t\t\t\t\t\t...newState,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\trender() {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<WrappedComponent\r\n\t\t\t\t\t\t\t\t{ ...{\r\n\t\t\t\t\t\t\t\t\t...this.props,\r\n\t\t\t\t\t\t\t\t\tfontSizes: undefined,\r\n\t\t\t\t\t\t\t\t\t...this.state,\r\n\t\t\t\t\t\t\t\t\t...this.setters,\r\n\t\t\t\t\t\t\t\t} }\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t] ),\r\n\t\t'withFontSizes'\r\n\t);\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,0BAA0B,EAAEC,OAAO,QAAQ,oBAAoB;AACxE,SAASC,SAAS,QAAQ,oBAAoB;;AAE9C;AACA;AACA;AACA,SAASC,WAAW,EAAEC,gBAAgB,QAAQ,SAAS;AACvD,SAASC,WAAW,QAAQ,iBAAiB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAE9C,MAAMC,kBAAkB,GAAG,EAAE;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAGA,CAAE,CAAEC,WAAW,EAAE,GAAGC,IAAI,CAAE,KAC5CD,WAAW,CAACE,WAAW,CAAC,CAAC,GAAGD,IAAI,CAACE,IAAI,CAAE,EAAG,CAAC;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,CAAE,GAAGC,aAAa,KAAM;EACtC;AACD;AACA;AACA;AACA;EACC,MAAMC,sBAAsB,GAAGD,aAAa,CAACE,MAAM,CAClD,CAAEC,iCAAiC,EAAEC,qBAAqB,KAAM;IAC/DD,iCAAiC,CAChCC,qBAAqB,CACrB,GAAI,SAAST,UAAU,CAAES,qBAAsB,CAAG,EAAC;IACpD,OAAOD,iCAAiC;EACzC,CAAC,EACD,CAAC,CACF,CAAC;EAED,OAAOjB,0BAA0B,CAChCC,OAAO,CAAE,CACRD,0BAA0B,CACvBmB,gBAAgB,IAAQC,KAAK,IAAM;IACpC,MAAM,CAAEC,SAAS,CAAE,GAAGhB,WAAW,CAAE,sBAAuB,CAAC;IAC3D,oBACCE,IAAA,CAACY,gBAAgB;MAAA,GACXC,KAAK;MACVC,SAAS,EAAGA,SAAS,IAAIb;IAAoB,CAC7C,CAAC;EAEJ,CAAC,EACD,eACD,CAAC,EACCW,gBAAgB,IAAM;IACvB,OAAO,cAAcjB,SAAS,CAAC;MAC9BoB,WAAWA,CAAEF,KAAK,EAAG;QACpB,KAAK,CAAEA,KAAM,CAAC;QAEd,IAAI,CAACG,OAAO,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;QAEnC,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;MAChB;MAEAD,aAAaA,CAAA,EAAG;QACf,OAAOE,MAAM,CAACC,OAAO,CAAEZ,sBAAuB,CAAC,CAACC,MAAM,CACrD,CACCY,kBAAkB,EAClB,CACCV,qBAAqB,EACrBW,2BAA2B,CAC3B,KACG;UACJ,MAAMC,+BAA+B,GACpCrB,UAAU,CAAES,qBAAsB,CAAC;UACpCU,kBAAkB,CAChB,MAAME,+BAAiC,EAAC,CACzC,GAAG,IAAI,CAACC,iBAAiB,CACzBb,qBAAqB,EACrBW,2BACD,CAAC;UACD,OAAOD,kBAAkB;QAC1B,CAAC,EACD,CAAC,CACF,CAAC;MACF;MAEAG,iBAAiBA,CAChBb,qBAAqB,EACrBW,2BAA2B,EAC1B;QACD,OAASG,aAAa,IAAM;UAC3B,MAAMC,cAAc,GAAG,IAAI,CAACb,KAAK,CAACC,SAAS,EAAEa,IAAI,CAChD,CAAE;YAAEC;UAAK,CAAC,KAAMA,IAAI,KAAKC,MAAM,CAAEJ,aAAc,CAChD,CAAC;UACD,IAAI,CAACZ,KAAK,CAACiB,aAAa,CAAE;YACzB,CAAEnB,qBAAqB,GACtBe,cAAc,IAAIA,cAAc,CAACK,IAAI,GAClCL,cAAc,CAACK,IAAI,GACnBC,SAAS;YACb,CAAEV,2BAA2B,GAC5BI,cAAc,IAAIA,cAAc,CAACK,IAAI,GAClCC,SAAS,GACTP;UACL,CAAE,CAAC;QACJ,CAAC;MACF;MAEA,OAAOQ,wBAAwBA,CAC9B;QAAEC,UAAU;QAAEpB;MAAU,CAAC,EACzBqB,aAAa,EACZ;QACD,MAAMC,mBAAmB,GAAGA,CAC3Bd,2BAA2B,EAC3BX,qBAAqB,KACjB;UACJ,IAAKwB,aAAa,CAAExB,qBAAqB,CAAE,EAAG;YAC7C;YACA,IAAKuB,UAAU,CAAEvB,qBAAqB,CAAE,EAAG;cAC1C,OACCuB,UAAU,CAAEvB,qBAAqB,CAAE,KACnCwB,aAAa,CAAExB,qBAAqB,CAAE,CACpCoB,IAAI;YAER;YACA;YACA,OACCI,aAAa,CAAExB,qBAAqB,CAAE,CACpCiB,IAAI,KACNM,UAAU,CAAEZ,2BAA2B,CAAE;UAE3C;UACA;UACA,OAAO,IAAI;QACZ,CAAC;QAED,IACC,CAAEH,MAAM,CAACkB,MAAM,CAAE7B,sBAAuB,CAAC,CAAC8B,IAAI,CAC7CF,mBACD,CAAC,EACA;UACD,OAAO,IAAI;QACZ;QAEA,MAAMG,QAAQ,GAAGpB,MAAM,CAACC,OAAO,CAC9BZ,sBACD,CAAC,CACCgC,MAAM,CAAE,CAAE,CAAEC,GAAG,EAAEC,KAAK,CAAE,KACxBN,mBAAmB,CAAEM,KAAK,EAAED,GAAI,CACjC,CAAC,CACAhC,MAAM,CACN,CACCkC,mBAAmB,EACnB,CACChC,qBAAqB,EACrBW,2BAA2B,CAC3B,KACG;UACJ,MAAMsB,sBAAsB,GAC3BV,UAAU,CAAEvB,qBAAqB,CAAE;UACpC,MAAMe,cAAc,GAAG9B,WAAW,CACjCkB,SAAS,EACT8B,sBAAsB,EACtBV,UAAU,CACTZ,2BAA2B,CAE7B,CAAC;UACDqB,mBAAmB,CAClBhC,qBAAqB,CACrB,GAAG;YACH,GAAGe,cAAc;YACjBmB,KAAK,EAAEhD,gBAAgB,CACtB+C,sBACD;UACD,CAAC;UACD,OAAOD,mBAAmB;QAC3B,CAAC,EACD,CAAC,CACF,CAAC;QAEF,OAAO;UACN,GAAGR,aAAa;UAChB,GAAGI;QACJ,CAAC;MACF;MAEAO,MAAMA,CAAA,EAAG;QACR,oBACC9C,IAAA,CAACY,gBAAgB;UAEf,GAAG,IAAI,CAACC,KAAK;UACbC,SAAS,EAAEkB,SAAS;UACpB,GAAG,IAAI,CAACd,KAAK;UACb,GAAG,IAAI,CAACF;QAAO,CAEhB,CAAC;MAEJ;IACD,CAAC;EACF,CAAC,CACA,CAAC,EACH,eACD,CAAC;AACF,CAAC","ignoreList":[]}