{"version":3,"names":["useLayoutEffect","useMemo","useState","useRegistry","deprecated","isShallowEqual","store","blockEditorStore","getLayoutType","pendingSettingsUpdates","WeakMap","useShallowMemo","value","prevValue","setPrevValue","useNestedSettingsUpdate","clientId","parentLock","allowedBlocks","prioritizedInserterBlocks","defaultBlock","directInsert","__experimentalDefaultBlock","__experimentalDirectInsert","templateLock","captureToolbars","orientation","layout","registry","_allowedBlocks","_prioritizedInserterBlocks","_templateLock","undefined","newSettings","__experimentalCaptureToolbars","layoutType","type","getOrientation","alternative","since","version","get","set","window","queueMicrotask","settings","Object","keys","length","updateBlockListSettings","dispatch"],"sources":["@wordpress/block-editor/src/components/inner-blocks/use-nested-settings-update.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useLayoutEffect, useMemo, useState } from '@wordpress/element';\r\nimport { useRegistry } from '@wordpress/data';\r\nimport deprecated from '@wordpress/deprecated';\r\nimport isShallowEqual from '@wordpress/is-shallow-equal';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store as blockEditorStore } from '../../store';\r\nimport { getLayoutType } from '../../layouts';\r\n\r\n/** @typedef {import('../../selectors').WPDirectInsertBlock } WPDirectInsertBlock */\r\n\r\nconst pendingSettingsUpdates = new WeakMap();\r\n\r\nfunction useShallowMemo( value ) {\r\n\tconst [ prevValue, setPrevValue ] = useState( value );\r\n\tif ( ! isShallowEqual( prevValue, value ) ) {\r\n\t\tsetPrevValue( value );\r\n\t}\r\n\treturn prevValue;\r\n}\r\n\r\n/**\r\n * This hook is a side effect which updates the block-editor store when changes\r\n * happen to inner block settings. The given props are transformed into a\r\n * settings object, and if that is different from the current settings object in\r\n * the block-editor store, then the store is updated with the new settings which\r\n * came from props.\r\n *\r\n * @param {string}               clientId                   The client ID of the block to update.\r\n * @param {string}               parentLock\r\n * @param {string[]}             allowedBlocks              An array of block names which are permitted\r\n *                                                          in inner blocks.\r\n * @param {string[]}             prioritizedInserterBlocks  Block names and/or block variations to be prioritized in the inserter, in the format {blockName}/{variationName}.\r\n * @param {?WPDirectInsertBlock} defaultBlock               The default block to insert: [ blockName, { blockAttributes } ].\r\n * @param {?boolean}             directInsert               If a default block should be inserted directly by the appender.\r\n *\r\n * @param {?WPDirectInsertBlock} __experimentalDefaultBlock A deprecated prop for the default block to insert: [ blockName, { blockAttributes } ]. Use `defaultBlock` instead.\r\n *\r\n * @param {?boolean}             __experimentalDirectInsert A deprecated prop for whether a default block should be inserted directly by the appender. Use `directInsert` instead.\r\n *\r\n * @param {string}               [templateLock]             The template lock specified for the inner\r\n *                                                          blocks component. (e.g. \"all\")\r\n * @param {boolean}              captureToolbars            Whether or children toolbars should be shown\r\n *                                                          in the inner blocks component rather than on\r\n *                                                          the child block.\r\n * @param {string}               orientation                The direction in which the block\r\n *                                                          should face.\r\n * @param {Object}               layout                     The layout object for the block container.\r\n */\r\nexport default function useNestedSettingsUpdate(\r\n\tclientId,\r\n\tparentLock,\r\n\tallowedBlocks,\r\n\tprioritizedInserterBlocks,\r\n\tdefaultBlock,\r\n\tdirectInsert,\r\n\t__experimentalDefaultBlock,\r\n\t__experimentalDirectInsert,\r\n\ttemplateLock,\r\n\tcaptureToolbars,\r\n\torientation,\r\n\tlayout\r\n) {\r\n\t// Instead of adding a useSelect mapping here, please add to the useSelect\r\n\t// mapping in InnerBlocks! Every subscription impacts performance.\r\n\r\n\tconst registry = useRegistry();\r\n\r\n\t// Implementors often pass a new array on every render,\r\n\t// and the contents of the arrays are just strings, so the entire array\r\n\t// can be passed as dependencies but We need to include the length of the array,\r\n\t// otherwise if the arrays change length but the first elements are equal the comparison,\r\n\t// does not works as expected.\r\n\tconst _allowedBlocks = useShallowMemo( allowedBlocks );\r\n\r\n\tconst _prioritizedInserterBlocks = useMemo(\r\n\t\t() => prioritizedInserterBlocks,\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t\tprioritizedInserterBlocks\r\n\t);\r\n\r\n\tconst _templateLock =\r\n\t\ttemplateLock === undefined || parentLock === 'contentOnly'\r\n\t\t\t? parentLock\r\n\t\t\t: templateLock;\r\n\r\n\tuseLayoutEffect( () => {\r\n\t\tconst newSettings = {\r\n\t\t\tallowedBlocks: _allowedBlocks,\r\n\t\t\tprioritizedInserterBlocks: _prioritizedInserterBlocks,\r\n\t\t\ttemplateLock: _templateLock,\r\n\t\t};\r\n\r\n\t\t// These values are not defined for RN, so only include them if they\r\n\t\t// are defined.\r\n\t\tif ( captureToolbars !== undefined ) {\r\n\t\t\tnewSettings.__experimentalCaptureToolbars = captureToolbars;\r\n\t\t}\r\n\r\n\t\t// Orientation depends on layout,\r\n\t\t// ideally the separate orientation prop should be deprecated.\r\n\t\tif ( orientation !== undefined ) {\r\n\t\t\tnewSettings.orientation = orientation;\r\n\t\t} else {\r\n\t\t\tconst layoutType = getLayoutType( layout?.type );\r\n\t\t\tnewSettings.orientation = layoutType.getOrientation( layout );\r\n\t\t}\r\n\r\n\t\tif ( __experimentalDefaultBlock !== undefined ) {\r\n\t\t\tdeprecated( '__experimentalDefaultBlock', {\r\n\t\t\t\talternative: 'defaultBlock',\r\n\t\t\t\tsince: '6.3',\r\n\t\t\t\tversion: '6.4',\r\n\t\t\t} );\r\n\t\t\tnewSettings.defaultBlock = __experimentalDefaultBlock;\r\n\t\t}\r\n\r\n\t\tif ( defaultBlock !== undefined ) {\r\n\t\t\tnewSettings.defaultBlock = defaultBlock;\r\n\t\t}\r\n\r\n\t\tif ( __experimentalDirectInsert !== undefined ) {\r\n\t\t\tdeprecated( '__experimentalDirectInsert', {\r\n\t\t\t\talternative: 'directInsert',\r\n\t\t\t\tsince: '6.3',\r\n\t\t\t\tversion: '6.4',\r\n\t\t\t} );\r\n\t\t\tnewSettings.directInsert = __experimentalDirectInsert;\r\n\t\t}\r\n\r\n\t\tif ( directInsert !== undefined ) {\r\n\t\t\tnewSettings.directInsert = directInsert;\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tnewSettings.directInsert !== undefined &&\r\n\t\t\ttypeof newSettings.directInsert !== 'boolean'\r\n\t\t) {\r\n\t\t\tdeprecated( 'Using `Function` as a `directInsert` argument', {\r\n\t\t\t\talternative: '`boolean` values',\r\n\t\t\t\tsince: '6.5',\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\t// Batch updates to block list settings to avoid triggering cascading renders\r\n\t\t// for each container block included in a tree and optimize initial render.\r\n\t\t// To avoid triggering updateBlockListSettings for each container block\r\n\t\t// causing X re-renderings for X container blocks,\r\n\t\t// we batch all the updatedBlockListSettings in a single \"data\" batch\r\n\t\t// which results in a single re-render.\r\n\t\tif ( ! pendingSettingsUpdates.get( registry ) ) {\r\n\t\t\tpendingSettingsUpdates.set( registry, {} );\r\n\t\t}\r\n\t\tpendingSettingsUpdates.get( registry )[ clientId ] = newSettings;\r\n\t\twindow.queueMicrotask( () => {\r\n\t\t\tconst settings = pendingSettingsUpdates.get( registry );\r\n\t\t\tif ( Object.keys( settings ).length ) {\r\n\t\t\t\tconst { updateBlockListSettings } =\r\n\t\t\t\t\tregistry.dispatch( blockEditorStore );\r\n\t\t\t\tupdateBlockListSettings( settings );\r\n\t\t\t\tpendingSettingsUpdates.set( registry, {} );\r\n\t\t\t}\r\n\t\t} );\r\n\t}, [\r\n\t\tclientId,\r\n\t\t_allowedBlocks,\r\n\t\t_prioritizedInserterBlocks,\r\n\t\t_templateLock,\r\n\t\tdefaultBlock,\r\n\t\tdirectInsert,\r\n\t\t__experimentalDefaultBlock,\r\n\t\t__experimentalDirectInsert,\r\n\t\tcaptureToolbars,\r\n\t\torientation,\r\n\t\tlayout,\r\n\t\tregistry,\r\n\t] );\r\n}\r\n"],"mappings":"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","ignoreList":[]}