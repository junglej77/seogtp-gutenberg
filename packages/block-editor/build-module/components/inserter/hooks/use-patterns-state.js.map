{"version":3,"names":["useCallback","useMemo","cloneBlock","createBlock","useDispatch","useSelect","__","sprintf","store","noticesStore","blockEditorStore","INSERTER_PATTERN_TYPES","usePatternsState","onInsert","rootClientId","selectedCategory","patternCategories","patterns","userPatternCategories","select","__experimentalGetAllowedPatterns","getSettings","__experimentalUserPatternCategories","__experimentalBlockPatternCategories","allCategories","categories","forEach","userCategory","find","existingCategory","name","push","createSuccessNotice","onClickPattern","pattern","blocks","patternBlocks","type","user","syncStatus","ref","id","map","block","clonedBlock","attributes","metadata","includes","title"],"sources":["@wordpress/block-editor/src/components/inserter/hooks/use-patterns-state.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useCallback, useMemo } from '@wordpress/element';\r\nimport { cloneBlock, createBlock } from '@wordpress/blocks';\r\nimport { useDispatch, useSelect } from '@wordpress/data';\r\nimport { __, sprintf } from '@wordpress/i18n';\r\nimport { store as noticesStore } from '@wordpress/notices';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store as blockEditorStore } from '../../../store';\r\nimport { INSERTER_PATTERN_TYPES } from '../block-patterns-tab/utils';\r\n\r\n/**\r\n * Retrieves the block patterns inserter state.\r\n *\r\n * @param {Function} onInsert         function called when inserter a list of blocks.\r\n * @param {string=}  rootClientId     Insertion's root client ID.\r\n *\r\n * @param {string}   selectedCategory The selected pattern category.\r\n * @return {Array} Returns the patterns state. (patterns, categories, onSelect handler)\r\n */\r\nconst usePatternsState = ( onInsert, rootClientId, selectedCategory ) => {\r\n\tconst { patternCategories, patterns, userPatternCategories } = useSelect(\r\n\t\t( select ) => {\r\n\t\t\tconst { __experimentalGetAllowedPatterns, getSettings } =\r\n\t\t\t\tselect( blockEditorStore );\r\n\t\t\tconst {\r\n\t\t\t\t__experimentalUserPatternCategories,\r\n\t\t\t\t__experimentalBlockPatternCategories,\r\n\t\t\t} = getSettings();\r\n\t\t\treturn {\r\n\t\t\t\tpatterns: __experimentalGetAllowedPatterns( rootClientId ),\r\n\t\t\t\tuserPatternCategories: __experimentalUserPatternCategories,\r\n\t\t\t\tpatternCategories: __experimentalBlockPatternCategories,\r\n\t\t\t};\r\n\t\t},\r\n\t\t[ rootClientId ]\r\n\t);\r\n\r\n\tconst allCategories = useMemo( () => {\r\n\t\tconst categories = [ ...patternCategories ];\r\n\t\tuserPatternCategories?.forEach( ( userCategory ) => {\r\n\t\t\tif (\r\n\t\t\t\t! categories.find(\r\n\t\t\t\t\t( existingCategory ) =>\r\n\t\t\t\t\t\texistingCategory.name === userCategory.name\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\tcategories.push( userCategory );\r\n\t\t\t}\r\n\t\t} );\r\n\t\treturn categories;\r\n\t}, [ patternCategories, userPatternCategories ] );\r\n\r\n\tconst { createSuccessNotice } = useDispatch( noticesStore );\r\n\tconst onClickPattern = useCallback(\r\n\t\t( pattern, blocks ) => {\r\n\t\t\tconst patternBlocks =\r\n\t\t\t\tpattern.type === INSERTER_PATTERN_TYPES.user &&\r\n\t\t\t\tpattern.syncStatus !== 'unsynced'\r\n\t\t\t\t\t? [ createBlock( 'core/block', { ref: pattern.id } ) ]\r\n\t\t\t\t\t: blocks;\r\n\t\t\tonInsert(\r\n\t\t\t\t( patternBlocks ?? [] ).map( ( block ) => {\r\n\t\t\t\t\tconst clonedBlock = cloneBlock( block );\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tclonedBlock.attributes.metadata?.categories?.includes(\r\n\t\t\t\t\t\t\tselectedCategory\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tclonedBlock.attributes.metadata.categories = [\r\n\t\t\t\t\t\t\tselectedCategory,\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn clonedBlock;\r\n\t\t\t\t} ),\r\n\t\t\t\tpattern.name\r\n\t\t\t);\r\n\t\t\tcreateSuccessNotice(\r\n\t\t\t\tsprintf(\r\n\t\t\t\t\t/* translators: %s: block pattern title. */\r\n\t\t\t\t\t__( 'Block pattern \"%s\" inserted.' ),\r\n\t\t\t\t\tpattern.title\r\n\t\t\t\t),\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: 'snackbar',\r\n\t\t\t\t\tid: 'block-pattern-inserted-notice',\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t},\r\n\t\t[ createSuccessNotice, onInsert, selectedCategory ]\r\n\t);\r\n\r\n\treturn [ patterns, allCategories, onClickPattern ];\r\n};\r\n\r\nexport default usePatternsState;\r\n"],"mappings":"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","ignoreList":[]}