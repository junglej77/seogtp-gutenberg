{"version":3,"names":["removeAccents","noCase","defaultGetName","item","name","defaultGetTitle","title","defaultGetDescription","description","defaultGetKeywords","keywords","defaultGetCategory","category","defaultGetCollection","splitRegexp","stripRegexp","extractedWords","Map","normalizedStrings","extractWords","input","has","get","result","split","filter","Boolean","set","normalizeString","replace","toLowerCase","getNormalizedSearchTerms","removeMatchingTerms","unmatchedTerms","unprocessedTerms","term","some","unprocessedTerm","includes","searchBlockItems","items","categories","collections","searchInput","normalizedSearchTerms","length","config","getCategory","find","slug","getCollection","searchItems","rankedItems","map","getItemSearchRank","rank","sort","rank1","rank2","searchTerm","getName","getTitle","getDescription","getKeywords","collection","normalizedSearchInput","normalizedTitle","startsWith","terms","join","isCoreBlockVariation","id"],"sources":["@wordpress/block-editor/src/components/inserter/search-items.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport removeAccents from 'remove-accents';\r\nimport { noCase } from 'change-case';\r\n\r\n// Default search helpers.\r\nconst defaultGetName = ( item ) => item.name || '';\r\nconst defaultGetTitle = ( item ) => item.title;\r\nconst defaultGetDescription = ( item ) => item.description || '';\r\nconst defaultGetKeywords = ( item ) => item.keywords || [];\r\nconst defaultGetCategory = ( item ) => item.category;\r\nconst defaultGetCollection = () => null;\r\n\r\n// Normalization regexes\r\nconst splitRegexp = [\r\n\t/([\\p{Ll}\\p{Lo}\\p{N}])([\\p{Lu}\\p{Lt}])/gu, // One lowercase or digit, followed by one uppercase.\r\n\t/([\\p{Lu}\\p{Lt}])([\\p{Lu}\\p{Lt}][\\p{Ll}\\p{Lo}])/gu, // One uppercase followed by one uppercase and one lowercase.\r\n];\r\nconst stripRegexp = /(\\p{C}|\\p{P}|\\p{S})+/giu; // Anything that's not a punctuation, symbol or control/format character.\r\n\r\n// Normalization cache\r\nconst extractedWords = new Map();\r\nconst normalizedStrings = new Map();\r\n\r\n/**\r\n * Extracts words from an input string.\r\n *\r\n * @param {string} input The input string.\r\n *\r\n * @return {Array} Words, extracted from the input string.\r\n */\r\nexport function extractWords( input = '' ) {\r\n\tif ( extractedWords.has( input ) ) {\r\n\t\treturn extractedWords.get( input );\r\n\t}\r\n\r\n\tconst result = noCase( input, {\r\n\t\tsplitRegexp,\r\n\t\tstripRegexp,\r\n\t} )\r\n\t\t.split( ' ' )\r\n\t\t.filter( Boolean );\r\n\r\n\textractedWords.set( input, result );\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Sanitizes the search input string.\r\n *\r\n * @param {string} input The search input to normalize.\r\n *\r\n * @return {string} The normalized search input.\r\n */\r\nexport function normalizeString( input = '' ) {\r\n\tif ( normalizedStrings.has( input ) ) {\r\n\t\treturn normalizedStrings.get( input );\r\n\t}\r\n\r\n\t// Disregard diacritics.\r\n\t//  Input: \"mÃ©dia\"\r\n\tlet result = removeAccents( input );\r\n\r\n\t// Accommodate leading slash, matching autocomplete expectations.\r\n\t//  Input: \"/media\"\r\n\tresult = result.replace( /^\\//, '' );\r\n\r\n\t// Lowercase.\r\n\t//  Input: \"MEDIA\"\r\n\tresult = result.toLowerCase();\r\n\r\n\tnormalizedStrings.set( input, result );\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Converts the search term into a list of normalized terms.\r\n *\r\n * @param {string} input The search term to normalize.\r\n *\r\n * @return {string[]} The normalized list of search terms.\r\n */\r\nexport const getNormalizedSearchTerms = ( input = '' ) => {\r\n\treturn extractWords( normalizeString( input ) );\r\n};\r\n\r\nconst removeMatchingTerms = ( unmatchedTerms, unprocessedTerms ) => {\r\n\treturn unmatchedTerms.filter(\r\n\t\t( term ) =>\r\n\t\t\t! getNormalizedSearchTerms( unprocessedTerms ).some(\r\n\t\t\t\t( unprocessedTerm ) => unprocessedTerm.includes( term )\r\n\t\t\t)\r\n\t);\r\n};\r\n\r\nexport const searchBlockItems = (\r\n\titems,\r\n\tcategories,\r\n\tcollections,\r\n\tsearchInput\r\n) => {\r\n\tconst normalizedSearchTerms = getNormalizedSearchTerms( searchInput );\r\n\tif ( normalizedSearchTerms.length === 0 ) {\r\n\t\treturn items;\r\n\t}\r\n\r\n\tconst config = {\r\n\t\tgetCategory: ( item ) =>\r\n\t\t\tcategories.find( ( { slug } ) => slug === item.category )?.title,\r\n\t\tgetCollection: ( item ) =>\r\n\t\t\tcollections[ item.name.split( '/' )[ 0 ] ]?.title,\r\n\t};\r\n\r\n\treturn searchItems( items, searchInput, config );\r\n};\r\n\r\n/**\r\n * Filters an item list given a search term.\r\n *\r\n * @param {Array}  items       Item list\r\n * @param {string} searchInput Search input.\r\n * @param {Object} config      Search Config.\r\n *\r\n * @return {Array} Filtered item list.\r\n */\r\nexport const searchItems = ( items = [], searchInput = '', config = {} ) => {\r\n\tconst normalizedSearchTerms = getNormalizedSearchTerms( searchInput );\r\n\tif ( normalizedSearchTerms.length === 0 ) {\r\n\t\treturn items;\r\n\t}\r\n\r\n\tconst rankedItems = items\r\n\t\t.map( ( item ) => {\r\n\t\t\treturn [ item, getItemSearchRank( item, searchInput, config ) ];\r\n\t\t} )\r\n\t\t.filter( ( [ , rank ] ) => rank > 0 );\r\n\r\n\trankedItems.sort( ( [ , rank1 ], [ , rank2 ] ) => rank2 - rank1 );\r\n\treturn rankedItems.map( ( [ item ] ) => item );\r\n};\r\n\r\n/**\r\n * Get the search rank for a given item and a specific search term.\r\n * The better the match, the higher the rank.\r\n * If the rank equals 0, it should be excluded from the results.\r\n *\r\n * @param {Object} item       Item to filter.\r\n * @param {string} searchTerm Search term.\r\n * @param {Object} config     Search Config.\r\n *\r\n * @return {number} Search Rank.\r\n */\r\nexport function getItemSearchRank( item, searchTerm, config = {} ) {\r\n\tconst {\r\n\t\tgetName = defaultGetName,\r\n\t\tgetTitle = defaultGetTitle,\r\n\t\tgetDescription = defaultGetDescription,\r\n\t\tgetKeywords = defaultGetKeywords,\r\n\t\tgetCategory = defaultGetCategory,\r\n\t\tgetCollection = defaultGetCollection,\r\n\t} = config;\r\n\r\n\tconst name = getName( item );\r\n\tconst title = getTitle( item );\r\n\tconst description = getDescription( item );\r\n\tconst keywords = getKeywords( item );\r\n\tconst category = getCategory( item );\r\n\tconst collection = getCollection( item );\r\n\r\n\tconst normalizedSearchInput = normalizeString( searchTerm );\r\n\tconst normalizedTitle = normalizeString( title );\r\n\r\n\tlet rank = 0;\r\n\r\n\t// Prefers exact matches\r\n\t// Then prefers if the beginning of the title matches the search term\r\n\t// name, keywords, categories, collection, variations match come later.\r\n\tif ( normalizedSearchInput === normalizedTitle ) {\r\n\t\trank += 30;\r\n\t} else if ( normalizedTitle.startsWith( normalizedSearchInput ) ) {\r\n\t\trank += 20;\r\n\t} else {\r\n\t\tconst terms = [\r\n\t\t\tname,\r\n\t\t\ttitle,\r\n\t\t\tdescription,\r\n\t\t\t...keywords,\r\n\t\t\tcategory,\r\n\t\t\tcollection,\r\n\t\t].join( ' ' );\r\n\t\tconst normalizedSearchTerms = extractWords( normalizedSearchInput );\r\n\t\tconst unmatchedTerms = removeMatchingTerms(\r\n\t\t\tnormalizedSearchTerms,\r\n\t\t\tterms\r\n\t\t);\r\n\r\n\t\tif ( unmatchedTerms.length === 0 ) {\r\n\t\t\trank += 10;\r\n\t\t}\r\n\t}\r\n\r\n\t// Give a better rank to \"core\" namespaced items.\r\n\tif ( rank !== 0 && name.startsWith( 'core/' ) ) {\r\n\t\tconst isCoreBlockVariation = name !== item.id;\r\n\t\t// Give a bit better rank to \"core\" blocks over \"core\" block variations.\r\n\t\trank += isCoreBlockVariation ? 1 : 2;\r\n\t}\r\n\r\n\treturn rank;\r\n}\r\n"],"mappings":"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","ignoreList":[]}