{"version":3,"names":["__experimentalTreeGridRow","TreeGridRow","__experimentalTreeGridCell","TreeGridCell","memo","AsyncModeProvider","useSelect","Appender","ListViewBlock","useListViewContext","getDragDisplacementValues","isClientIdSelected","store","blockEditorStore","useBlockDisplayInformation","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","countBlocks","block","expandedState","draggedClientIds","isExpandedByDefault","_expandedState$block$","isDragged","includes","clientId","isExpanded","innerBlocks","reduce","countReducer","count","_expandedState$block$2","length","noop","ListViewBranch","props","blocks","selectBlock","showBlockMovers","selectedClientIds","level","path","isBranchSelected","listPosition","fixedListWindow","parentId","shouldShowInnerBlocks","isSyncedBranch","showAppender","showAppenderProp","parentBlockInformation","syncedBranch","isSynced","canParentExpand","select","canEditBlock","blockDropPosition","blockDropTargetIndex","firstDraggedBlockIndex","blockIndexes","filteredBlocks","filter","Boolean","blockCount","rowCount","nextPosition","children","map","index","_expandedState$client","displacement","isAfterDraggedBlocks","isNesting","itemInView","blockInView","position","updatedPath","hasNestedBlocks","shouldExpand","undefined","isSelected","isSelectedBranch","showBlock","value","siblingBlockCount","className","setSize","positionInSet","treeGridCellProps","nestingLevel"],"sources":["@wordpress/block-editor/src/components/list-view/branch.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport {\r\n\t__experimentalTreeGridRow as TreeGridRow,\r\n\t__experimentalTreeGridCell as TreeGridCell,\r\n} from '@wordpress/components';\r\nimport { memo } from '@wordpress/element';\r\nimport { AsyncModeProvider, useSelect } from '@wordpress/data';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { Appender } from './appender';\r\nimport ListViewBlock from './block';\r\nimport { useListViewContext } from './context';\r\nimport { getDragDisplacementValues, isClientIdSelected } from './utils';\r\nimport { store as blockEditorStore } from '../../store';\r\nimport useBlockDisplayInformation from '../use-block-display-information';\r\n\r\n/**\r\n * Given a block, returns the total number of blocks in that subtree. This is used to help determine\r\n * the list position of a block.\r\n *\r\n * When a block is collapsed, we do not count their children as part of that total. In the current drag\r\n * implementation dragged blocks and their children are not counted.\r\n *\r\n * @param {Object}  block               block tree\r\n * @param {Object}  expandedState       state that notes which branches are collapsed\r\n * @param {Array}   draggedClientIds    a list of dragged client ids\r\n * @param {boolean} isExpandedByDefault flag to determine the default fallback expanded state.\r\n * @return {number} block count\r\n */\r\nfunction countBlocks(\r\n\tblock,\r\n\texpandedState,\r\n\tdraggedClientIds,\r\n\tisExpandedByDefault\r\n) {\r\n\tconst isDragged = draggedClientIds?.includes( block.clientId );\r\n\tif ( isDragged ) {\r\n\t\treturn 0;\r\n\t}\r\n\tconst isExpanded = expandedState[ block.clientId ] ?? isExpandedByDefault;\r\n\r\n\tif ( isExpanded ) {\r\n\t\treturn (\r\n\t\t\t1 +\r\n\t\t\tblock.innerBlocks.reduce(\r\n\t\t\t\tcountReducer(\r\n\t\t\t\t\texpandedState,\r\n\t\t\t\t\tdraggedClientIds,\r\n\t\t\t\t\tisExpandedByDefault\r\n\t\t\t\t),\r\n\t\t\t\t0\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\treturn 1;\r\n}\r\nconst countReducer =\r\n\t( expandedState, draggedClientIds, isExpandedByDefault ) =>\r\n\t( count, block ) => {\r\n\t\tconst isDragged = draggedClientIds?.includes( block.clientId );\r\n\t\tif ( isDragged ) {\r\n\t\t\treturn count;\r\n\t\t}\r\n\t\tconst isExpanded =\r\n\t\t\texpandedState[ block.clientId ] ?? isExpandedByDefault;\r\n\t\tif ( isExpanded && block.innerBlocks.length > 0 ) {\r\n\t\t\treturn (\r\n\t\t\t\tcount +\r\n\t\t\t\tcountBlocks(\r\n\t\t\t\t\tblock,\r\n\t\t\t\t\texpandedState,\r\n\t\t\t\t\tdraggedClientIds,\r\n\t\t\t\t\tisExpandedByDefault\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn count + 1;\r\n\t};\r\n\r\nconst noop = () => {};\r\n\r\nfunction ListViewBranch( props ) {\r\n\tconst {\r\n\t\tblocks,\r\n\t\tselectBlock = noop,\r\n\t\tshowBlockMovers,\r\n\t\tselectedClientIds,\r\n\t\tlevel = 1,\r\n\t\tpath = '',\r\n\t\tisBranchSelected = false,\r\n\t\tlistPosition = 0,\r\n\t\tfixedListWindow,\r\n\t\tisExpanded,\r\n\t\tparentId,\r\n\t\tshouldShowInnerBlocks = true,\r\n\t\tisSyncedBranch = false,\r\n\t\tshowAppender: showAppenderProp = true,\r\n\t} = props;\r\n\r\n\tconst parentBlockInformation = useBlockDisplayInformation( parentId );\r\n\tconst syncedBranch = isSyncedBranch || !! parentBlockInformation?.isSynced;\r\n\r\n\tconst canParentExpand = useSelect(\r\n\t\t( select ) => {\r\n\t\t\tif ( ! parentId ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn select( blockEditorStore ).canEditBlock( parentId );\r\n\t\t},\r\n\t\t[ parentId ]\r\n\t);\r\n\r\n\tconst {\r\n\t\tblockDropPosition,\r\n\t\tblockDropTargetIndex,\r\n\t\tfirstDraggedBlockIndex,\r\n\t\tblockIndexes,\r\n\t\texpandedState,\r\n\t\tdraggedClientIds,\r\n\t} = useListViewContext();\r\n\r\n\tif ( ! canParentExpand ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Only show the appender at the first level.\r\n\tconst showAppender = showAppenderProp && level === 1;\r\n\tconst filteredBlocks = blocks.filter( Boolean );\r\n\tconst blockCount = filteredBlocks.length;\r\n\t// The appender means an extra row in List View, so add 1 to the row count.\r\n\tconst rowCount = showAppender ? blockCount + 1 : blockCount;\r\n\tlet nextPosition = listPosition;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{ filteredBlocks.map( ( block, index ) => {\r\n\t\t\t\tconst { clientId, innerBlocks } = block;\r\n\r\n\t\t\t\tif ( index > 0 ) {\r\n\t\t\t\t\tnextPosition += countBlocks(\r\n\t\t\t\t\t\tfilteredBlocks[ index - 1 ],\r\n\t\t\t\t\t\texpandedState,\r\n\t\t\t\t\t\tdraggedClientIds,\r\n\t\t\t\t\t\tisExpanded\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst isDragged = !! draggedClientIds?.includes( clientId );\r\n\r\n\t\t\t\t// Determine the displacement of the block while dragging. This\r\n\t\t\t\t// works out whether the current block should be displaced up or\r\n\t\t\t\t// down, relative to the dragged blocks and the drop target.\r\n\t\t\t\tconst { displacement, isAfterDraggedBlocks, isNesting } =\r\n\t\t\t\t\tgetDragDisplacementValues( {\r\n\t\t\t\t\t\tblockIndexes,\r\n\t\t\t\t\t\tblockDropTargetIndex,\r\n\t\t\t\t\t\tblockDropPosition,\r\n\t\t\t\t\t\tclientId,\r\n\t\t\t\t\t\tfirstDraggedBlockIndex,\r\n\t\t\t\t\t\tisDragged,\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\tconst { itemInView } = fixedListWindow;\r\n\t\t\t\tconst blockInView = itemInView( nextPosition );\r\n\r\n\t\t\t\tconst position = index + 1;\r\n\t\t\t\tconst updatedPath =\r\n\t\t\t\t\tpath.length > 0\r\n\t\t\t\t\t\t? `${ path }_${ position }`\r\n\t\t\t\t\t\t: `${ position }`;\r\n\t\t\t\tconst hasNestedBlocks = !! innerBlocks?.length;\r\n\r\n\t\t\t\tconst shouldExpand =\r\n\t\t\t\t\thasNestedBlocks && shouldShowInnerBlocks\r\n\t\t\t\t\t\t? expandedState[ clientId ] ?? isExpanded\r\n\t\t\t\t\t\t: undefined;\r\n\r\n\t\t\t\t// Make updates to the selected or dragged blocks synchronous,\r\n\t\t\t\t// but asynchronous for any other block.\r\n\t\t\t\tconst isSelected = isClientIdSelected(\r\n\t\t\t\t\tclientId,\r\n\t\t\t\t\tselectedClientIds\r\n\t\t\t\t);\r\n\t\t\t\tconst isSelectedBranch =\r\n\t\t\t\t\tisBranchSelected || ( isSelected && hasNestedBlocks );\r\n\r\n\t\t\t\t// To avoid performance issues, we only render blocks that are in view,\r\n\t\t\t\t// or blocks that are selected or dragged. If a block is selected,\r\n\t\t\t\t// it is only counted if it is the first of the block selection.\r\n\t\t\t\t// This prevents the entire tree from being rendered when a branch is\r\n\t\t\t\t// selected, or a user selects all blocks, while still enabling scroll\r\n\t\t\t\t// into view behavior when selecting a block or opening the list view.\r\n\t\t\t\t// The first and last blocks of the list are always rendered, to ensure\r\n\t\t\t\t// that Home and End keys work as expected.\r\n\t\t\t\tconst showBlock =\r\n\t\t\t\t\tisDragged ||\r\n\t\t\t\t\tblockInView ||\r\n\t\t\t\t\t( isSelected && clientId === selectedClientIds[ 0 ] ) ||\r\n\t\t\t\t\tindex === 0 ||\r\n\t\t\t\t\tindex === blockCount - 1;\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<AsyncModeProvider key={ clientId } value={ ! isSelected }>\r\n\t\t\t\t\t\t{ showBlock && (\r\n\t\t\t\t\t\t\t<ListViewBlock\r\n\t\t\t\t\t\t\t\tblock={ block }\r\n\t\t\t\t\t\t\t\tselectBlock={ selectBlock }\r\n\t\t\t\t\t\t\t\tisSelected={ isSelected }\r\n\t\t\t\t\t\t\t\tisBranchSelected={ isSelectedBranch }\r\n\t\t\t\t\t\t\t\tisDragged={ isDragged }\r\n\t\t\t\t\t\t\t\tlevel={ level }\r\n\t\t\t\t\t\t\t\tposition={ position }\r\n\t\t\t\t\t\t\t\trowCount={ rowCount }\r\n\t\t\t\t\t\t\t\tsiblingBlockCount={ blockCount }\r\n\t\t\t\t\t\t\t\tshowBlockMovers={ showBlockMovers }\r\n\t\t\t\t\t\t\t\tpath={ updatedPath }\r\n\t\t\t\t\t\t\t\tisExpanded={ isDragged ? false : shouldExpand }\r\n\t\t\t\t\t\t\t\tlistPosition={ nextPosition }\r\n\t\t\t\t\t\t\t\tselectedClientIds={ selectedClientIds }\r\n\t\t\t\t\t\t\t\tisSyncedBranch={ syncedBranch }\r\n\t\t\t\t\t\t\t\tdisplacement={ displacement }\r\n\t\t\t\t\t\t\t\tisAfterDraggedBlocks={ isAfterDraggedBlocks }\r\n\t\t\t\t\t\t\t\tisNesting={ isNesting }\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t) }\r\n\t\t\t\t\t\t{ ! showBlock && (\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td className=\"block-editor-list-view-placeholder\" />\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t) }\r\n\t\t\t\t\t\t{ hasNestedBlocks && shouldExpand && ! isDragged && (\r\n\t\t\t\t\t\t\t<ListViewBranch\r\n\t\t\t\t\t\t\t\tparentId={ clientId }\r\n\t\t\t\t\t\t\t\tblocks={ innerBlocks }\r\n\t\t\t\t\t\t\t\tselectBlock={ selectBlock }\r\n\t\t\t\t\t\t\t\tshowBlockMovers={ showBlockMovers }\r\n\t\t\t\t\t\t\t\tlevel={ level + 1 }\r\n\t\t\t\t\t\t\t\tpath={ updatedPath }\r\n\t\t\t\t\t\t\t\tlistPosition={ nextPosition + 1 }\r\n\t\t\t\t\t\t\t\tfixedListWindow={ fixedListWindow }\r\n\t\t\t\t\t\t\t\tisBranchSelected={ isSelectedBranch }\r\n\t\t\t\t\t\t\t\tselectedClientIds={ selectedClientIds }\r\n\t\t\t\t\t\t\t\tisExpanded={ isExpanded }\r\n\t\t\t\t\t\t\t\tisSyncedBranch={ syncedBranch }\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t) }\r\n\t\t\t\t\t</AsyncModeProvider>\r\n\t\t\t\t);\r\n\t\t\t} ) }\r\n\t\t\t{ showAppender && (\r\n\t\t\t\t<TreeGridRow\r\n\t\t\t\t\tlevel={ level }\r\n\t\t\t\t\tsetSize={ rowCount }\r\n\t\t\t\t\tpositionInSet={ rowCount }\r\n\t\t\t\t\tisExpanded\r\n\t\t\t\t>\r\n\t\t\t\t\t<TreeGridCell>\r\n\t\t\t\t\t\t{ ( treeGridCellProps ) => (\r\n\t\t\t\t\t\t\t<Appender\r\n\t\t\t\t\t\t\t\tclientId={ parentId }\r\n\t\t\t\t\t\t\t\tnestingLevel={ level }\r\n\t\t\t\t\t\t\t\tblockCount={ blockCount }\r\n\t\t\t\t\t\t\t\t{ ...treeGridCellProps }\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t) }\r\n\t\t\t\t\t</TreeGridCell>\r\n\t\t\t\t</TreeGridRow>\r\n\t\t\t) }\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default memo( ListViewBranch );\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SACCA,yBAAyB,IAAIC,WAAW,EACxCC,0BAA0B,IAAIC,YAAY,QACpC,uBAAuB;AAC9B,SAASC,IAAI,QAAQ,oBAAoB;AACzC,SAASC,iBAAiB,EAAEC,SAAS,QAAQ,iBAAiB;;AAE9D;AACA;AACA;AACA,SAASC,QAAQ,QAAQ,YAAY;AACrC,OAAOC,aAAa,MAAM,SAAS;AACnC,SAASC,kBAAkB,QAAQ,WAAW;AAC9C,SAASC,yBAAyB,EAAEC,kBAAkB,QAAQ,SAAS;AACvE,SAASC,KAAK,IAAIC,gBAAgB,QAAQ,aAAa;AACvD,OAAOC,0BAA0B,MAAM,kCAAkC;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAaA,SAASC,WAAWA,CACnBC,KAAK,EACLC,aAAa,EACbC,gBAAgB,EAChBC,mBAAmB,EAClB;EAAA,IAAAC,qBAAA;EACD,MAAMC,SAAS,GAAGH,gBAAgB,EAAEI,QAAQ,CAAEN,KAAK,CAACO,QAAS,CAAC;EAC9D,IAAKF,SAAS,EAAG;IAChB,OAAO,CAAC;EACT;EACA,MAAMG,UAAU,IAAAJ,qBAAA,GAAGH,aAAa,CAAED,KAAK,CAACO,QAAQ,CAAE,cAAAH,qBAAA,cAAAA,qBAAA,GAAID,mBAAmB;EAEzE,IAAKK,UAAU,EAAG;IACjB,OACC,CAAC,GACDR,KAAK,CAACS,WAAW,CAACC,MAAM,CACvBC,YAAY,CACXV,aAAa,EACbC,gBAAgB,EAChBC,mBACD,CAAC,EACD,CACD,CAAC;EAEH;EACA,OAAO,CAAC;AACT;AACA,MAAMQ,YAAY,GACjBA,CAAEV,aAAa,EAAEC,gBAAgB,EAAEC,mBAAmB,KACtD,CAAES,KAAK,EAAEZ,KAAK,KAAM;EAAA,IAAAa,sBAAA;EACnB,MAAMR,SAAS,GAAGH,gBAAgB,EAAEI,QAAQ,CAAEN,KAAK,CAACO,QAAS,CAAC;EAC9D,IAAKF,SAAS,EAAG;IAChB,OAAOO,KAAK;EACb;EACA,MAAMJ,UAAU,IAAAK,sBAAA,GACfZ,aAAa,CAAED,KAAK,CAACO,QAAQ,CAAE,cAAAM,sBAAA,cAAAA,sBAAA,GAAIV,mBAAmB;EACvD,IAAKK,UAAU,IAAIR,KAAK,CAACS,WAAW,CAACK,MAAM,GAAG,CAAC,EAAG;IACjD,OACCF,KAAK,GACLb,WAAW,CACVC,KAAK,EACLC,aAAa,EACbC,gBAAgB,EAChBC,mBACD,CAAC;EAEH;EACA,OAAOS,KAAK,GAAG,CAAC;AACjB,CAAC;AAEF,MAAMG,IAAI,GAAGA,CAAA,KAAM,CAAC,CAAC;AAErB,SAASC,cAAcA,CAAEC,KAAK,EAAG;EAChC,MAAM;IACLC,MAAM;IACNC,WAAW,GAAGJ,IAAI;IAClBK,eAAe;IACfC,iBAAiB;IACjBC,KAAK,GAAG,CAAC;IACTC,IAAI,GAAG,EAAE;IACTC,gBAAgB,GAAG,KAAK;IACxBC,YAAY,GAAG,CAAC;IAChBC,eAAe;IACflB,UAAU;IACVmB,QAAQ;IACRC,qBAAqB,GAAG,IAAI;IAC5BC,cAAc,GAAG,KAAK;IACtBC,YAAY,EAAEC,gBAAgB,GAAG;EAClC,CAAC,GAAGd,KAAK;EAET,MAAMe,sBAAsB,GAAGxC,0BAA0B,CAAEmC,QAAS,CAAC;EACrE,MAAMM,YAAY,GAAGJ,cAAc,IAAI,CAAC,CAAEG,sBAAsB,EAAEE,QAAQ;EAE1E,MAAMC,eAAe,GAAGnD,SAAS,CAC9BoD,MAAM,IAAM;IACb,IAAK,CAAET,QAAQ,EAAG;MACjB,OAAO,IAAI;IACZ;IACA,OAAOS,MAAM,CAAE7C,gBAAiB,CAAC,CAAC8C,YAAY,CAAEV,QAAS,CAAC;EAC3D,CAAC,EACD,CAAEA,QAAQ,CACX,CAAC;EAED,MAAM;IACLW,iBAAiB;IACjBC,oBAAoB;IACpBC,sBAAsB;IACtBC,YAAY;IACZxC,aAAa;IACbC;EACD,CAAC,GAAGf,kBAAkB,CAAC,CAAC;EAExB,IAAK,CAAEgD,eAAe,EAAG;IACxB,OAAO,IAAI;EACZ;;EAEA;EACA,MAAML,YAAY,GAAGC,gBAAgB,IAAIT,KAAK,KAAK,CAAC;EACpD,MAAMoB,cAAc,GAAGxB,MAAM,CAACyB,MAAM,CAAEC,OAAQ,CAAC;EAC/C,MAAMC,UAAU,GAAGH,cAAc,CAAC5B,MAAM;EACxC;EACA,MAAMgC,QAAQ,GAAGhB,YAAY,GAAGe,UAAU,GAAG,CAAC,GAAGA,UAAU;EAC3D,IAAIE,YAAY,GAAGtB,YAAY;EAE/B,oBACC7B,KAAA,CAAAE,SAAA;IAAAkD,QAAA,GACGN,cAAc,CAACO,GAAG,CAAE,CAAEjD,KAAK,EAAEkD,KAAK,KAAM;MAAA,IAAAC,qBAAA;MACzC,MAAM;QAAE5C,QAAQ;QAAEE;MAAY,CAAC,GAAGT,KAAK;MAEvC,IAAKkD,KAAK,GAAG,CAAC,EAAG;QAChBH,YAAY,IAAIhD,WAAW,CAC1B2C,cAAc,CAAEQ,KAAK,GAAG,CAAC,CAAE,EAC3BjD,aAAa,EACbC,gBAAgB,EAChBM,UACD,CAAC;MACF;MAEA,MAAMH,SAAS,GAAG,CAAC,CAAEH,gBAAgB,EAAEI,QAAQ,CAAEC,QAAS,CAAC;;MAE3D;MACA;MACA;MACA,MAAM;QAAE6C,YAAY;QAAEC,oBAAoB;QAAEC;MAAU,CAAC,GACtDlE,yBAAyB,CAAE;QAC1BqD,YAAY;QACZF,oBAAoB;QACpBD,iBAAiB;QACjB/B,QAAQ;QACRiC,sBAAsB;QACtBnC;MACD,CAAE,CAAC;MAEJ,MAAM;QAAEkD;MAAW,CAAC,GAAG7B,eAAe;MACtC,MAAM8B,WAAW,GAAGD,UAAU,CAAER,YAAa,CAAC;MAE9C,MAAMU,QAAQ,GAAGP,KAAK,GAAG,CAAC;MAC1B,MAAMQ,WAAW,GAChBnC,IAAI,CAACT,MAAM,GAAG,CAAC,GACX,GAAGS,IAAM,IAAIkC,QAAU,EAAC,GACxB,GAAGA,QAAU,EAAC;MACnB,MAAME,eAAe,GAAG,CAAC,CAAElD,WAAW,EAAEK,MAAM;MAE9C,MAAM8C,YAAY,GACjBD,eAAe,IAAI/B,qBAAqB,IAAAuB,qBAAA,GACrClD,aAAa,CAAEM,QAAQ,CAAE,cAAA4C,qBAAA,cAAAA,qBAAA,GAAI3C,UAAU,GACvCqD,SAAS;;MAEb;MACA;MACA,MAAMC,UAAU,GAAGzE,kBAAkB,CACpCkB,QAAQ,EACRc,iBACD,CAAC;MACD,MAAM0C,gBAAgB,GACrBvC,gBAAgB,IAAMsC,UAAU,IAAIH,eAAiB;;MAEtD;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,MAAMK,SAAS,GACd3D,SAAS,IACTmD,WAAW,IACTM,UAAU,IAAIvD,QAAQ,KAAKc,iBAAiB,CAAE,CAAC,CAAI,IACrD6B,KAAK,KAAK,CAAC,IACXA,KAAK,KAAKL,UAAU,GAAG,CAAC;MACzB,oBACCjD,KAAA,CAACb,iBAAiB;QAAkBkF,KAAK,EAAG,CAAEH,UAAY;QAAAd,QAAA,GACvDgB,SAAS,iBACVtE,IAAA,CAACR,aAAa;UACbc,KAAK,EAAGA,KAAO;UACfmB,WAAW,EAAGA,WAAa;UAC3B2C,UAAU,EAAGA,UAAY;UACzBtC,gBAAgB,EAAGuC,gBAAkB;UACrC1D,SAAS,EAAGA,SAAW;UACvBiB,KAAK,EAAGA,KAAO;UACfmC,QAAQ,EAAGA,QAAU;UACrBX,QAAQ,EAAGA,QAAU;UACrBoB,iBAAiB,EAAGrB,UAAY;UAChCzB,eAAe,EAAGA,eAAiB;UACnCG,IAAI,EAAGmC,WAAa;UACpBlD,UAAU,EAAGH,SAAS,GAAG,KAAK,GAAGuD,YAAc;UAC/CnC,YAAY,EAAGsB,YAAc;UAC7B1B,iBAAiB,EAAGA,iBAAmB;UACvCQ,cAAc,EAAGI,YAAc;UAC/BmB,YAAY,EAAGA,YAAc;UAC7BC,oBAAoB,EAAGA,oBAAsB;UAC7CC,SAAS,EAAGA;QAAW,CACvB,CACD,EACC,CAAEU,SAAS,iBACZtE,IAAA;UAAAsD,QAAA,eACCtD,IAAA;YAAIyE,SAAS,EAAC;UAAoC,CAAE;QAAC,CAClD,CACJ,EACCR,eAAe,IAAIC,YAAY,IAAI,CAAEvD,SAAS,iBAC/CX,IAAA,CAACsB,cAAc;UACdW,QAAQ,EAAGpB,QAAU;UACrBW,MAAM,EAAGT,WAAa;UACtBU,WAAW,EAAGA,WAAa;UAC3BC,eAAe,EAAGA,eAAiB;UACnCE,KAAK,EAAGA,KAAK,GAAG,CAAG;UACnBC,IAAI,EAAGmC,WAAa;UACpBjC,YAAY,EAAGsB,YAAY,GAAG,CAAG;UACjCrB,eAAe,EAAGA,eAAiB;UACnCF,gBAAgB,EAAGuC,gBAAkB;UACrC1C,iBAAiB,EAAGA,iBAAmB;UACvCb,UAAU,EAAGA,UAAY;UACzBqB,cAAc,EAAGI;QAAc,CAC/B,CACD;MAAA,GA3CuB1B,QA4CN,CAAC;IAEtB,CAAE,CAAC,EACDuB,YAAY,iBACbpC,IAAA,CAACf,WAAW;MACX2C,KAAK,EAAGA,KAAO;MACf8C,OAAO,EAAGtB,QAAU;MACpBuB,aAAa,EAAGvB,QAAU;MAC1BtC,UAAU;MAAAwC,QAAA,eAEVtD,IAAA,CAACb,YAAY;QAAAmE,QAAA,EACRsB,iBAAiB,iBACpB5E,IAAA,CAACT,QAAQ;UACRsB,QAAQ,EAAGoB,QAAU;UACrB4C,YAAY,EAAGjD,KAAO;UACtBuB,UAAU,EAAGA,UAAY;UAAA,GACpByB;QAAiB,CACtB;MACD,CACY;IAAC,CACH,CACb;EAAA,CACA,CAAC;AAEL;AAEA,eAAexF,IAAI,CAAEkC,cAAe,CAAC","ignoreList":[]}