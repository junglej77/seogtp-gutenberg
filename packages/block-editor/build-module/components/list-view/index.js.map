{"version":3,"names":["clsx","useInstanceId","useMergeRefs","__experimentalUseFixedWindowList","useFixedWindowList","__experimentalTreeGrid","TreeGrid","VisuallyHidden","AsyncModeProvider","useSelect","deprecated","useCallback","useEffect","useMemo","useRef","useReducer","forwardRef","useState","__","ListViewBranch","ListViewContext","ListViewDropIndicatorPreview","useBlockSelection","useListViewBlockIndexes","useListViewClientIds","useListViewCollapseItems","useListViewDropZone","useListViewExpandSelectedItem","store","blockEditorStore","BlockSettingsDropdown","focusListItem","useClipboardHandler","jsx","_jsx","jsxs","_jsxs","expanded","state","action","type","Array","isArray","clientIds","reduce","newState","id","BLOCK_LIST_ITEM_HEIGHT","ListViewComponent","blocks","dropZoneElement","showBlockMovers","isExpanded","showAppender","blockSettingsMenu","BlockSettingsMenu","rootClientId","description","onSelect","additionalBlockContent","AdditionalBlockContent","ref","since","alternative","instanceId","clientIdsTree","draggedClientIds","selectedClientIds","blockIndexes","getBlock","visibleBlockCount","shouldShowInnerBlocks","select","getGlobalBlockCount","getClientIdsOfDescendants","__unstableGetEditorMode","draggedBlockCount","length","updateBlockSelection","expandedState","setExpandedState","insertedBlock","setInsertedBlock","setSelectedTreeId","firstSelectedBlockClientId","selectEditorBlock","event","blockClientId","focusPosition","dropZoneRef","target","blockDropTarget","elementRef","clipBoardRef","selectBlock","treeGridRef","current","expand","clientId","collapse","collapseAll","expandRow","row","dataset","block","collapseRow","focusRow","startRow","endRow","shiftKey","firstDraggedBlockClientId","blockDropTargetIndex","blockDropPosition","firstDraggedBlockIndex","_blockDropTargetIndex","_firstDraggedBlockIndex","foundBlockIndex","undefined","dropPosition","contextValue","listViewInstanceId","treeGridElementRef","fixedListWindow","useWindowing","windowOverscan","describedById","value","children","draggedBlockClientId","listViewRef","className","onCollapseRow","onExpandRow","onFocusRow","applicationAriaLabel","style","Provider","parentId","PrivateListView","props"],"sources":["@wordpress/block-editor/src/components/list-view/index.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport clsx from 'clsx';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport {\r\n\tuseInstanceId,\r\n\tuseMergeRefs,\r\n\t__experimentalUseFixedWindowList as useFixedWindowList,\r\n} from '@wordpress/compose';\r\nimport {\r\n\t__experimentalTreeGrid as TreeGrid,\r\n\tVisuallyHidden,\r\n} from '@wordpress/components';\r\nimport { AsyncModeProvider, useSelect } from '@wordpress/data';\r\nimport deprecated from '@wordpress/deprecated';\r\nimport {\r\n\tuseCallback,\r\n\tuseEffect,\r\n\tuseMemo,\r\n\tuseRef,\r\n\tuseReducer,\r\n\tforwardRef,\r\n\tuseState,\r\n} from '@wordpress/element';\r\nimport { __ } from '@wordpress/i18n';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport ListViewBranch from './branch';\r\nimport { ListViewContext } from './context';\r\nimport ListViewDropIndicatorPreview from './drop-indicator';\r\nimport useBlockSelection from './use-block-selection';\r\nimport useListViewBlockIndexes from './use-list-view-block-indexes';\r\nimport useListViewClientIds from './use-list-view-client-ids';\r\nimport useListViewCollapseItems from './use-list-view-collapse-items';\r\nimport useListViewDropZone from './use-list-view-drop-zone';\r\nimport useListViewExpandSelectedItem from './use-list-view-expand-selected-item';\r\nimport { store as blockEditorStore } from '../../store';\r\nimport { BlockSettingsDropdown } from '../block-settings-menu/block-settings-dropdown';\r\nimport { focusListItem } from './utils';\r\nimport useClipboardHandler from './use-clipboard-handler';\r\n\r\nconst expanded = ( state, action ) => {\r\n\tif ( action.type === 'clear' ) {\r\n\t\treturn {};\r\n\t}\r\n\tif ( Array.isArray( action.clientIds ) ) {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\t...action.clientIds.reduce(\r\n\t\t\t\t( newState, id ) => ( {\r\n\t\t\t\t\t...newState,\r\n\t\t\t\t\t[ id ]: action.type === 'expand',\r\n\t\t\t\t} ),\r\n\t\t\t\t{}\r\n\t\t\t),\r\n\t\t};\r\n\t}\r\n\treturn state;\r\n};\r\n\r\nexport const BLOCK_LIST_ITEM_HEIGHT = 32;\r\n\r\n/** @typedef {import('react').ComponentType} ComponentType */\r\n/** @typedef {import('react').Ref<HTMLElement>} Ref */\r\n\r\n/**\r\n * Show a hierarchical list of blocks.\r\n *\r\n * @param {Object}         props                        Components props.\r\n * @param {string}         props.id                     An HTML element id for the root element of ListView.\r\n * @param {Array}          props.blocks                 _deprecated_ Custom subset of block client IDs to be used instead of the default hierarchy.\r\n * @param {?HTMLElement}   props.dropZoneElement        Optional element to be used as the drop zone.\r\n * @param {?boolean}       props.showBlockMovers        Flag to enable block movers. Defaults to `false`.\r\n * @param {?boolean}       props.isExpanded             Flag to determine whether nested levels are expanded by default. Defaults to `false`.\r\n * @param {?boolean}       props.showAppender           Flag to show or hide the block appender. Defaults to `false`.\r\n * @param {?ComponentType} props.blockSettingsMenu      Optional more menu substitution. Defaults to the standard `BlockSettingsDropdown` component.\r\n * @param {string}         props.rootClientId           The client id of the root block from which we determine the blocks to show in the list.\r\n * @param {string}         props.description            Optional accessible description for the tree grid component.\r\n * @param {?Function}      props.onSelect               Optional callback to be invoked when a block is selected. Receives the block object that was selected.\r\n * @param {?ComponentType} props.additionalBlockContent Component that renders additional block content UI.\r\n * @param {Ref}            ref                          Forwarded ref\r\n */\r\nfunction ListViewComponent(\r\n\t{\r\n\t\tid,\r\n\t\tblocks,\r\n\t\tdropZoneElement,\r\n\t\tshowBlockMovers = false,\r\n\t\tisExpanded = false,\r\n\t\tshowAppender = false,\r\n\t\tblockSettingsMenu: BlockSettingsMenu = BlockSettingsDropdown,\r\n\t\trootClientId,\r\n\t\tdescription,\r\n\t\tonSelect,\r\n\t\tadditionalBlockContent: AdditionalBlockContent,\r\n\t},\r\n\tref\r\n) {\r\n\t// This can be removed once we no longer need to support the blocks prop.\r\n\tif ( blocks ) {\r\n\t\tdeprecated(\r\n\t\t\t'`blocks` property in `wp.blockEditor.__experimentalListView`',\r\n\t\t\t{\r\n\t\t\t\tsince: '6.3',\r\n\t\t\t\talternative: '`rootClientId` property',\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tconst instanceId = useInstanceId( ListViewComponent );\r\n\tconst { clientIdsTree, draggedClientIds, selectedClientIds } =\r\n\t\tuseListViewClientIds( { blocks, rootClientId } );\r\n\tconst blockIndexes = useListViewBlockIndexes( clientIdsTree );\r\n\r\n\tconst { getBlock } = useSelect( blockEditorStore );\r\n\tconst { visibleBlockCount, shouldShowInnerBlocks } = useSelect(\r\n\t\t( select ) => {\r\n\t\t\tconst {\r\n\t\t\t\tgetGlobalBlockCount,\r\n\t\t\t\tgetClientIdsOfDescendants,\r\n\t\t\t\t__unstableGetEditorMode,\r\n\t\t\t} = select( blockEditorStore );\r\n\t\t\tconst draggedBlockCount =\r\n\t\t\t\tdraggedClientIds?.length > 0\r\n\t\t\t\t\t? getClientIdsOfDescendants( draggedClientIds ).length + 1\r\n\t\t\t\t\t: 0;\r\n\t\t\treturn {\r\n\t\t\t\tvisibleBlockCount: getGlobalBlockCount() - draggedBlockCount,\r\n\t\t\t\tshouldShowInnerBlocks: __unstableGetEditorMode() !== 'zoom-out',\r\n\t\t\t};\r\n\t\t},\r\n\t\t[ draggedClientIds ]\r\n\t);\r\n\r\n\tconst { updateBlockSelection } = useBlockSelection();\r\n\r\n\tconst [ expandedState, setExpandedState ] = useReducer( expanded, {} );\r\n\r\n\tconst [ insertedBlock, setInsertedBlock ] = useState( null );\r\n\r\n\tconst { setSelectedTreeId } = useListViewExpandSelectedItem( {\r\n\t\tfirstSelectedBlockClientId: selectedClientIds[ 0 ],\r\n\t\tsetExpandedState,\r\n\t} );\r\n\tconst selectEditorBlock = useCallback(\r\n\t\t/**\r\n\t\t * @param {MouseEvent | KeyboardEvent | undefined} event\r\n\t\t * @param {string}                                 blockClientId\r\n\t\t * @param {null | undefined | -1 | 1}              focusPosition\r\n\t\t */\r\n\t\t( event, blockClientId, focusPosition ) => {\r\n\t\t\tupdateBlockSelection( event, blockClientId, null, focusPosition );\r\n\t\t\tsetSelectedTreeId( blockClientId );\r\n\t\t\tif ( onSelect ) {\r\n\t\t\t\tonSelect( getBlock( blockClientId ) );\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ setSelectedTreeId, updateBlockSelection, onSelect, getBlock ]\r\n\t);\r\n\r\n\tconst { ref: dropZoneRef, target: blockDropTarget } = useListViewDropZone( {\r\n\t\tdropZoneElement,\r\n\t\texpandedState,\r\n\t\tsetExpandedState,\r\n\t} );\r\n\tconst elementRef = useRef();\r\n\r\n\t// Allow handling of copy, cut, and paste events.\r\n\tconst clipBoardRef = useClipboardHandler( {\r\n\t\tselectBlock: selectEditorBlock,\r\n\t} );\r\n\r\n\tconst treeGridRef = useMergeRefs( [\r\n\t\tclipBoardRef,\r\n\t\telementRef,\r\n\t\tdropZoneRef,\r\n\t\tref,\r\n\t] );\r\n\r\n\tuseEffect( () => {\r\n\t\t// If a blocks are already selected when the list view is initially\r\n\t\t// mounted, shift focus to the first selected block.\r\n\t\tif ( selectedClientIds?.length ) {\r\n\t\t\tfocusListItem( selectedClientIds[ 0 ], elementRef?.current );\r\n\t\t}\r\n\t\t// Disable reason: Only focus on the selected item when the list view is mounted.\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, [] );\r\n\r\n\tconst expand = useCallback(\r\n\t\t( clientId ) => {\r\n\t\t\tif ( ! clientId ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconst clientIds = Array.isArray( clientId )\r\n\t\t\t\t? clientId\r\n\t\t\t\t: [ clientId ];\r\n\t\t\tsetExpandedState( { type: 'expand', clientIds } );\r\n\t\t},\r\n\t\t[ setExpandedState ]\r\n\t);\r\n\tconst collapse = useCallback(\r\n\t\t( clientId ) => {\r\n\t\t\tif ( ! clientId ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tsetExpandedState( { type: 'collapse', clientIds: [ clientId ] } );\r\n\t\t},\r\n\t\t[ setExpandedState ]\r\n\t);\r\n\tconst collapseAll = useCallback( () => {\r\n\t\tsetExpandedState( { type: 'clear' } );\r\n\t}, [ setExpandedState ] );\r\n\tconst expandRow = useCallback(\r\n\t\t( row ) => {\r\n\t\t\texpand( row?.dataset?.block );\r\n\t\t},\r\n\t\t[ expand ]\r\n\t);\r\n\tconst collapseRow = useCallback(\r\n\t\t( row ) => {\r\n\t\t\tcollapse( row?.dataset?.block );\r\n\t\t},\r\n\t\t[ collapse ]\r\n\t);\r\n\tconst focusRow = useCallback(\r\n\t\t( event, startRow, endRow ) => {\r\n\t\t\tif ( event.shiftKey ) {\r\n\t\t\t\tupdateBlockSelection(\r\n\t\t\t\t\tevent,\r\n\t\t\t\t\tstartRow?.dataset?.block,\r\n\t\t\t\t\tendRow?.dataset?.block\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ updateBlockSelection ]\r\n\t);\r\n\r\n\tuseListViewCollapseItems( {\r\n\t\tcollapseAll,\r\n\t\texpand,\r\n\t} );\r\n\r\n\tconst firstDraggedBlockClientId = draggedClientIds?.[ 0 ];\r\n\r\n\t// Convert a blockDropTarget into indexes relative to the blocks in the list view.\r\n\t// These values are used to determine which blocks should be displaced to make room\r\n\t// for the drop indicator. See `ListViewBranch` and `getDragDisplacementValues`.\r\n\tconst { blockDropTargetIndex, blockDropPosition, firstDraggedBlockIndex } =\r\n\t\tuseMemo( () => {\r\n\t\t\tlet _blockDropTargetIndex, _firstDraggedBlockIndex;\r\n\r\n\t\t\tif ( blockDropTarget?.clientId ) {\r\n\t\t\t\tconst foundBlockIndex =\r\n\t\t\t\t\tblockIndexes[ blockDropTarget.clientId ];\r\n\t\t\t\t// If dragging below or inside the block, treat the drop target as the next block.\r\n\t\t\t\t_blockDropTargetIndex =\r\n\t\t\t\t\tfoundBlockIndex === undefined ||\r\n\t\t\t\t\tblockDropTarget?.dropPosition === 'top'\r\n\t\t\t\t\t\t? foundBlockIndex\r\n\t\t\t\t\t\t: foundBlockIndex + 1;\r\n\t\t\t} else if ( blockDropTarget === null ) {\r\n\t\t\t\t// A `null` value is used to indicate that the user is dragging outside of the list view.\r\n\t\t\t\t_blockDropTargetIndex = null;\r\n\t\t\t}\r\n\r\n\t\t\tif ( firstDraggedBlockClientId ) {\r\n\t\t\t\tconst foundBlockIndex =\r\n\t\t\t\t\tblockIndexes[ firstDraggedBlockClientId ];\r\n\t\t\t\t_firstDraggedBlockIndex =\r\n\t\t\t\t\tfoundBlockIndex === undefined ||\r\n\t\t\t\t\tblockDropTarget?.dropPosition === 'top'\r\n\t\t\t\t\t\t? foundBlockIndex\r\n\t\t\t\t\t\t: foundBlockIndex + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tblockDropTargetIndex: _blockDropTargetIndex,\r\n\t\t\t\tblockDropPosition: blockDropTarget?.dropPosition,\r\n\t\t\t\tfirstDraggedBlockIndex: _firstDraggedBlockIndex,\r\n\t\t\t};\r\n\t\t}, [ blockDropTarget, blockIndexes, firstDraggedBlockClientId ] );\r\n\r\n\tconst contextValue = useMemo(\r\n\t\t() => ( {\r\n\t\t\tblockDropPosition,\r\n\t\t\tblockDropTargetIndex,\r\n\t\t\tblockIndexes,\r\n\t\t\tdraggedClientIds,\r\n\t\t\texpandedState,\r\n\t\t\texpand,\r\n\t\t\tfirstDraggedBlockIndex,\r\n\t\t\tcollapse,\r\n\t\t\tcollapseAll,\r\n\t\t\tBlockSettingsMenu,\r\n\t\t\tlistViewInstanceId: instanceId,\r\n\t\t\tAdditionalBlockContent,\r\n\t\t\tinsertedBlock,\r\n\t\t\tsetInsertedBlock,\r\n\t\t\ttreeGridElementRef: elementRef,\r\n\t\t\trootClientId,\r\n\t\t} ),\r\n\t\t[\r\n\t\t\tblockDropPosition,\r\n\t\t\tblockDropTargetIndex,\r\n\t\t\tblockIndexes,\r\n\t\t\tdraggedClientIds,\r\n\t\t\texpandedState,\r\n\t\t\texpand,\r\n\t\t\tfirstDraggedBlockIndex,\r\n\t\t\tcollapse,\r\n\t\t\tcollapseAll,\r\n\t\t\tBlockSettingsMenu,\r\n\t\t\tinstanceId,\r\n\t\t\tAdditionalBlockContent,\r\n\t\t\tinsertedBlock,\r\n\t\t\tsetInsertedBlock,\r\n\t\t\trootClientId,\r\n\t\t]\r\n\t);\r\n\r\n\t// List View renders a fixed number of items and relies on each having a fixed item height of 36px.\r\n\t// If this value changes, we should also change the itemHeight value set in useFixedWindowList.\r\n\t// See: https://github.com/WordPress/gutenberg/pull/35230 for additional context.\r\n\tconst [ fixedListWindow ] = useFixedWindowList(\r\n\t\telementRef,\r\n\t\tBLOCK_LIST_ITEM_HEIGHT,\r\n\t\tvisibleBlockCount,\r\n\t\t{\r\n\t\t\t// Ensure that the windowing logic is recalculated when the expanded state changes.\r\n\t\t\t// This is necessary because expanding a collapsed block in a short list view can\r\n\t\t\t// switch the list view to a tall list view with a scrollbar, and vice versa.\r\n\t\t\t// When this happens, the windowing logic needs to be recalculated to ensure that\r\n\t\t\t// the correct number of blocks are rendered, by rechecking for a scroll container.\r\n\t\t\texpandedState,\r\n\t\t\tuseWindowing: true,\r\n\t\t\twindowOverscan: 40,\r\n\t\t}\r\n\t);\r\n\r\n\t// If there are no blocks to show and we're not showing the appender, do not render the list view.\r\n\tif ( ! clientIdsTree.length && ! showAppender ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst describedById =\r\n\t\tdescription && `block-editor-list-view-description-${ instanceId }`;\r\n\r\n\treturn (\r\n\t\t<AsyncModeProvider value>\r\n\t\t\t<ListViewDropIndicatorPreview\r\n\t\t\t\tdraggedBlockClientId={ firstDraggedBlockClientId }\r\n\t\t\t\tlistViewRef={ elementRef }\r\n\t\t\t\tblockDropTarget={ blockDropTarget }\r\n\t\t\t/>\r\n\t\t\t{ description && (\r\n\t\t\t\t<VisuallyHidden id={ describedById }>\r\n\t\t\t\t\t{ description }\r\n\t\t\t\t</VisuallyHidden>\r\n\t\t\t) }\r\n\t\t\t<TreeGrid\r\n\t\t\t\tid={ id }\r\n\t\t\t\tclassName={ clsx( 'block-editor-list-view-tree', {\r\n\t\t\t\t\t'is-dragging':\r\n\t\t\t\t\t\tdraggedClientIds?.length > 0 &&\r\n\t\t\t\t\t\tblockDropTargetIndex !== undefined,\r\n\t\t\t\t} ) }\r\n\t\t\t\taria-label={ __( 'Block navigation structure' ) }\r\n\t\t\t\tref={ treeGridRef }\r\n\t\t\t\tonCollapseRow={ collapseRow }\r\n\t\t\t\tonExpandRow={ expandRow }\r\n\t\t\t\tonFocusRow={ focusRow }\r\n\t\t\t\tapplicationAriaLabel={ __( 'Block navigation structure' ) }\r\n\t\t\t\taria-describedby={ describedById }\r\n\t\t\t\tstyle={ {\r\n\t\t\t\t\t'--wp-admin--list-view-dragged-items-height':\r\n\t\t\t\t\t\tdraggedClientIds?.length\r\n\t\t\t\t\t\t\t? `${\r\n\t\t\t\t\t\t\t\t\tBLOCK_LIST_ITEM_HEIGHT *\r\n\t\t\t\t\t\t\t\t\t( draggedClientIds.length - 1 )\r\n\t\t\t\t\t\t\t  }px`\r\n\t\t\t\t\t\t\t: null,\r\n\t\t\t\t} }\r\n\t\t\t>\r\n\t\t\t\t<ListViewContext.Provider value={ contextValue }>\r\n\t\t\t\t\t<ListViewBranch\r\n\t\t\t\t\t\tblocks={ clientIdsTree }\r\n\t\t\t\t\t\tparentId={ rootClientId }\r\n\t\t\t\t\t\tselectBlock={ selectEditorBlock }\r\n\t\t\t\t\t\tshowBlockMovers={ showBlockMovers }\r\n\t\t\t\t\t\tfixedListWindow={ fixedListWindow }\r\n\t\t\t\t\t\tselectedClientIds={ selectedClientIds }\r\n\t\t\t\t\t\tisExpanded={ isExpanded }\r\n\t\t\t\t\t\tshouldShowInnerBlocks={ shouldShowInnerBlocks }\r\n\t\t\t\t\t\tshowAppender={ showAppender }\r\n\t\t\t\t\t/>\r\n\t\t\t\t</ListViewContext.Provider>\r\n\t\t\t</TreeGrid>\r\n\t\t</AsyncModeProvider>\r\n\t);\r\n}\r\n\r\n// This is the private API for the ListView component.\r\n// It allows access to all props, not just the public ones.\r\nexport const PrivateListView = forwardRef( ListViewComponent );\r\n\r\n// This is the public API for the ListView component.\r\n// We wrap the PrivateListView component to hide some props from the public API.\r\nexport default forwardRef( ( props, ref ) => {\r\n\treturn (\r\n\t\t<PrivateListView\r\n\t\t\tref={ ref }\r\n\t\t\t{ ...props }\r\n\t\t\tshowAppender={ false }\r\n\t\t\trootClientId={ null }\r\n\t\t\tonSelect={ null }\r\n\t\t\tadditionalBlockContent={ null }\r\n\t\t\tblockSettingsMenu={ undefined }\r\n\t\t/>\r\n\t);\r\n} );\r\n"],"mappings":"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","ignoreList":[]}