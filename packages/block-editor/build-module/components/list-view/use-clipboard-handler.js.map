{"version":3,"names":["useDispatch","useRegistry","useSelect","useRefEffect","store","blockEditorStore","useNotifyCopy","focusListItem","getPasteBlocks","setClipboardBlocks","useClipboardHandler","selectBlock","registry","getBlockOrder","getBlockRootClientId","getBlocksByClientId","getPreviousBlockClientId","getSelectedBlockClientIds","getSettings","canInsertBlockType","canRemoveBlocks","flashBlock","removeBlocks","replaceBlocks","insertBlocks","notifyCopy","node","updateFocusAndSelection","focusClientId","shouldSelectBlock","undefined","getBlocksToUpdate","clientId","selectedBlockClientIds","isUpdatingSelectedBlocks","includes","firstBlockClientId","firstBlockRootClientId","blocksToUpdate","originallySelectedBlockClientIds","handler","event","defaultPrevented","contains","target","ownerDocument","activeElement","listViewRow","closest","dataset","block","length","preventDefault","type","blocks","_getPreviousBlockClie","blockToFocus","shouldUpdateSelection","__experimentalCanUserUseUnfilteredHTML","canUserUseUnfilteredHTML","selectedBlockClientId","every","name","addEventListener","removeEventListener"],"sources":["@wordpress/block-editor/src/components/list-view/use-clipboard-handler.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useDispatch, useRegistry, useSelect } from '@wordpress/data';\r\nimport { useRefEffect } from '@wordpress/compose';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store as blockEditorStore } from '../../store';\r\nimport { useNotifyCopy } from '../../utils/use-notify-copy';\r\nimport { focusListItem } from './utils';\r\nimport { getPasteBlocks, setClipboardBlocks } from '../writing-flow/utils';\r\n\r\n// This hook borrows from useClipboardHandler in ../writing-flow/use-clipboard-handler.js\r\n// and adds behaviour for the list view, while skipping partial selection.\r\nexport default function useClipboardHandler( { selectBlock } ) {\r\n\tconst registry = useRegistry();\r\n\tconst {\r\n\t\tgetBlockOrder,\r\n\t\tgetBlockRootClientId,\r\n\t\tgetBlocksByClientId,\r\n\t\tgetPreviousBlockClientId,\r\n\t\tgetSelectedBlockClientIds,\r\n\t\tgetSettings,\r\n\t\tcanInsertBlockType,\r\n\t\tcanRemoveBlocks,\r\n\t} = useSelect( blockEditorStore );\r\n\tconst { flashBlock, removeBlocks, replaceBlocks, insertBlocks } =\r\n\t\tuseDispatch( blockEditorStore );\r\n\tconst notifyCopy = useNotifyCopy();\r\n\r\n\treturn useRefEffect( ( node ) => {\r\n\t\tfunction updateFocusAndSelection( focusClientId, shouldSelectBlock ) {\r\n\t\t\tif ( shouldSelectBlock ) {\r\n\t\t\t\tselectBlock( undefined, focusClientId, null, null );\r\n\t\t\t}\r\n\r\n\t\t\tfocusListItem( focusClientId, node );\r\n\t\t}\r\n\r\n\t\t// Determine which blocks to update:\r\n\t\t// If the current (focused) block is part of the block selection, use the whole selection.\r\n\t\t// If the focused block is not part of the block selection, only update the focused block.\r\n\t\tfunction getBlocksToUpdate( clientId ) {\r\n\t\t\tconst selectedBlockClientIds = getSelectedBlockClientIds();\r\n\t\t\tconst isUpdatingSelectedBlocks =\r\n\t\t\t\tselectedBlockClientIds.includes( clientId );\r\n\t\t\tconst firstBlockClientId = isUpdatingSelectedBlocks\r\n\t\t\t\t? selectedBlockClientIds[ 0 ]\r\n\t\t\t\t: clientId;\r\n\t\t\tconst firstBlockRootClientId =\r\n\t\t\t\tgetBlockRootClientId( firstBlockClientId );\r\n\r\n\t\t\tconst blocksToUpdate = isUpdatingSelectedBlocks\r\n\t\t\t\t? selectedBlockClientIds\r\n\t\t\t\t: [ clientId ];\r\n\r\n\t\t\treturn {\r\n\t\t\t\tblocksToUpdate,\r\n\t\t\t\tfirstBlockClientId,\r\n\t\t\t\tfirstBlockRootClientId,\r\n\t\t\t\toriginallySelectedBlockClientIds: selectedBlockClientIds,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tfunction handler( event ) {\r\n\t\t\tif ( event.defaultPrevented ) {\r\n\t\t\t\t// This was possibly already handled in rich-text/use-paste-handler.js.\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Only handle events that occur within the list view.\r\n\t\t\tif ( ! node.contains( event.target.ownerDocument.activeElement ) ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Retrieve the block clientId associated with the focused list view row.\r\n\t\t\t// This enables applying copy / cut / paste behavior to the focused block,\r\n\t\t\t// rather than just the blocks that are currently selected.\r\n\t\t\tconst listViewRow =\r\n\t\t\t\tevent.target.ownerDocument.activeElement?.closest(\r\n\t\t\t\t\t'[role=row]'\r\n\t\t\t\t);\r\n\t\t\tconst clientId = listViewRow?.dataset?.block;\r\n\t\t\tif ( ! clientId ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst {\r\n\t\t\t\tblocksToUpdate: selectedBlockClientIds,\r\n\t\t\t\tfirstBlockClientId,\r\n\t\t\t\tfirstBlockRootClientId,\r\n\t\t\t\toriginallySelectedBlockClientIds,\r\n\t\t\t} = getBlocksToUpdate( clientId );\r\n\r\n\t\t\tif ( selectedBlockClientIds.length === 0 ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tevent.preventDefault();\r\n\r\n\t\t\tif ( event.type === 'copy' || event.type === 'cut' ) {\r\n\t\t\t\tif ( selectedBlockClientIds.length === 1 ) {\r\n\t\t\t\t\tflashBlock( selectedBlockClientIds[ 0 ] );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnotifyCopy( event.type, selectedBlockClientIds );\r\n\t\t\t\tconst blocks = getBlocksByClientId( selectedBlockClientIds );\r\n\t\t\t\tsetClipboardBlocks( event, blocks, registry );\r\n\t\t\t}\r\n\r\n\t\t\tif ( event.type === 'cut' ) {\r\n\t\t\t\t// Don't update the selection if the blocks cannot be deleted.\r\n\t\t\t\tif ( ! canRemoveBlocks( selectedBlockClientIds ) ) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet blockToFocus =\r\n\t\t\t\t\tgetPreviousBlockClientId( firstBlockClientId ) ??\r\n\t\t\t\t\t// If the previous block is not found (when the first block is deleted),\r\n\t\t\t\t\t// fallback to focus the parent block.\r\n\t\t\t\t\tfirstBlockRootClientId;\r\n\r\n\t\t\t\t// Remove blocks, but don't update selection, and it will be handled below.\r\n\t\t\t\tremoveBlocks( selectedBlockClientIds, false );\r\n\r\n\t\t\t\t// Update the selection if the original selection has been removed.\r\n\t\t\t\tconst shouldUpdateSelection =\r\n\t\t\t\t\toriginallySelectedBlockClientIds.length > 0 &&\r\n\t\t\t\t\tgetSelectedBlockClientIds().length === 0;\r\n\r\n\t\t\t\t// If there's no previous block nor parent block, focus the first block.\r\n\t\t\t\tif ( ! blockToFocus ) {\r\n\t\t\t\t\tblockToFocus = getBlockOrder()[ 0 ];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tupdateFocusAndSelection( blockToFocus, shouldUpdateSelection );\r\n\t\t\t} else if ( event.type === 'paste' ) {\r\n\t\t\t\tconst {\r\n\t\t\t\t\t__experimentalCanUserUseUnfilteredHTML:\r\n\t\t\t\t\t\tcanUserUseUnfilteredHTML,\r\n\t\t\t\t} = getSettings();\r\n\t\t\t\tconst blocks = getPasteBlocks(\r\n\t\t\t\t\tevent,\r\n\t\t\t\t\tcanUserUseUnfilteredHTML\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif ( selectedBlockClientIds.length === 1 ) {\r\n\t\t\t\t\tconst [ selectedBlockClientId ] = selectedBlockClientIds;\r\n\r\n\t\t\t\t\t// If a single block is focused, and the blocks to be posted can\r\n\t\t\t\t\t// be inserted within the block, then append the pasted blocks\r\n\t\t\t\t\t// within the focused block. For example, if you have copied a paragraph\r\n\t\t\t\t\t// block and paste it within a single Group block, this will append\r\n\t\t\t\t\t// the paragraph block within the Group block.\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tblocks.every( ( block ) =>\r\n\t\t\t\t\t\t\tcanInsertBlockType(\r\n\t\t\t\t\t\t\t\tblock.name,\r\n\t\t\t\t\t\t\t\tselectedBlockClientId\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tinsertBlocks(\r\n\t\t\t\t\t\t\tblocks,\r\n\t\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\t\tselectedBlockClientId\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tupdateFocusAndSelection( blocks[ 0 ]?.clientId, false );\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treplaceBlocks(\r\n\t\t\t\t\tselectedBlockClientIds,\r\n\t\t\t\t\tblocks,\r\n\t\t\t\t\tblocks.length - 1,\r\n\t\t\t\t\t-1\r\n\t\t\t\t);\r\n\t\t\t\tupdateFocusAndSelection( blocks[ 0 ]?.clientId, false );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tnode.ownerDocument.addEventListener( 'copy', handler );\r\n\t\tnode.ownerDocument.addEventListener( 'cut', handler );\r\n\t\tnode.ownerDocument.addEventListener( 'paste', handler );\r\n\r\n\t\treturn () => {\r\n\t\t\tnode.ownerDocument.removeEventListener( 'copy', handler );\r\n\t\t\tnode.ownerDocument.removeEventListener( 'cut', handler );\r\n\t\t\tnode.ownerDocument.removeEventListener( 'paste', handler );\r\n\t\t};\r\n\t}, [] );\r\n}\r\n"],"mappings":"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","ignoreList":[]}