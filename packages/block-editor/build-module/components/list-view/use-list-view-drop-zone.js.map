{"version":3,"names":["useSelect","useState","useCallback","useEffect","useThrottle","__experimentalUseDropZone","useDropZone","usePrevious","isRTL","getDistanceToNearestEdge","isPointContainedByRect","useOnBlockDrop","store","blockEditorStore","NESTING_LEVEL_INDENTATION","isUpGesture","point","rect","nestingLevel","rtl","blockIndentPosition","right","left","x","getDesiredRelativeParentLevel","distanceBetweenPointAndBlockIndentPosition","desiredParentLevel","Math","round","abs","getCandidateBlockParents","candidateBlockData","blocksData","candidateBlockParents","currentBlockData","push","find","blockData","clientId","rootClientId","getNextNonDraggedBlock","index","nextBlockData","isDraggedBlock","isNestingGesture","isNestingHorizontalGesture","y","bottom","ALLOWED_DROP_EDGES","getListViewDropTarget","position","candidateEdge","candidateDistance","candidateRect","candidateBlockIndex","i","length","element","getBoundingClientRect","distance","edge","isCursorWithinBlock","undefined","indexOf","previousBlockData","isDraggingBelow","canInsertDraggedBlocksAsChild","innerBlockCount","isExpanded","newBlockIndex","blockIndex","dropPosition","nextBlock","currentLevel","nextLevel","desiredRelativeLevel","targetParentIndex","max","min","canInsertDraggedBlocksAsSibling","offset","EXPAND_THROTTLE_OPTIONS","leading","trailing","useListViewDropZone","dropZoneElement","expandedState","setExpandedState","getBlockRootClientId","getBlockIndex","getBlockCount","getDraggedBlockClientIds","canInsertBlocks","target","setTarget","targetRootClientId","targetBlockIndex","onBlockDrop","previousRootClientId","maybeExpandBlock","_expandedState","_target","type","clientIds","throttledMaybeExpandBlock","cancel","draggedBlockClientIds","throttled","event","currentTarget","clientX","clientY","isBlockDrag","blockElements","Array","from","querySelectorAll","map","blockElement","dataset","block","expanded","classList","contains","parseInt","getAttribute","newTarget","ref","onDrop","onDragLeave","onDragOver","onDragEnd"],"sources":["@wordpress/block-editor/src/components/list-view/use-list-view-drop-zone.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useSelect } from '@wordpress/data';\r\nimport { useState, useCallback, useEffect } from '@wordpress/element';\r\nimport {\r\n\tuseThrottle,\r\n\t__experimentalUseDropZone as useDropZone,\r\n\tusePrevious,\r\n} from '@wordpress/compose';\r\nimport { isRTL } from '@wordpress/i18n';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport {\r\n\tgetDistanceToNearestEdge,\r\n\tisPointContainedByRect,\r\n} from '../../utils/math';\r\nimport useOnBlockDrop from '../use-on-block-drop';\r\nimport { store as blockEditorStore } from '../../store';\r\n\r\n/** @typedef {import('../../utils/math').WPPoint} WPPoint */\r\n\r\n/**\r\n * The type of a drag event.\r\n *\r\n * @typedef {'default'|'file'|'html'} WPDragEventType\r\n */\r\n\r\n/**\r\n * An object representing data for blocks in the DOM used by drag and drop.\r\n *\r\n * @typedef {Object} WPListViewDropZoneBlock\r\n * @property {string}  clientId                        The client id for the block.\r\n * @property {string}  rootClientId                    The root client id for the block.\r\n * @property {number}  blockIndex                      The block's index.\r\n * @property {Element} element                         The DOM element representing the block.\r\n * @property {number}  innerBlockCount                 The number of inner blocks the block has.\r\n * @property {boolean} isDraggedBlock                  Whether the block is currently being dragged.\r\n * @property {boolean} isExpanded                      Whether the block is expanded in the UI.\r\n * @property {boolean} canInsertDraggedBlocksAsSibling Whether the dragged block can be a sibling of this block.\r\n * @property {boolean} canInsertDraggedBlocksAsChild   Whether the dragged block can be a child of this block.\r\n */\r\n\r\n/**\r\n * An array representing data for blocks in the DOM used by drag and drop.\r\n *\r\n * @typedef {WPListViewDropZoneBlock[]} WPListViewDropZoneBlocks\r\n */\r\n\r\n/**\r\n * An object containing details of a drop target.\r\n *\r\n * @typedef {Object} WPListViewDropZoneTarget\r\n * @property {string}                  blockIndex   The insertion index.\r\n * @property {string}                  rootClientId The root client id for the block.\r\n * @property {string|undefined}        clientId     The client id for the block.\r\n * @property {'top'|'bottom'|'inside'} dropPosition The position relative to the block that the user is dropping to.\r\n *                                                  'inside' refers to nesting as an inner block.\r\n */\r\n\r\n// When the indentation level, the corresponding left margin in `style.scss`\r\n// must be updated as well to ensure the drop zone is aligned with the indentation.\r\nexport const NESTING_LEVEL_INDENTATION = 24;\r\n\r\n/**\r\n * Determines whether the user is positioning the dragged block to be\r\n * moved up to a parent level.\r\n *\r\n * Determined based on nesting level indentation of the current block.\r\n *\r\n * @param {WPPoint} point        The point representing the cursor position when dragging.\r\n * @param {DOMRect} rect         The rectangle.\r\n * @param {number}  nestingLevel The nesting level of the block.\r\n * @param {boolean} rtl          Whether the editor is in RTL mode.\r\n * @return {boolean} Whether the gesture is an upward gesture.\r\n */\r\nfunction isUpGesture( point, rect, nestingLevel = 1, rtl = false ) {\r\n\t// If the block is nested, and the user is dragging to the bottom\r\n\t// left of the block (or bottom right in RTL languages), then it is an upward gesture.\r\n\tconst blockIndentPosition = rtl\r\n\t\t? rect.right - nestingLevel * NESTING_LEVEL_INDENTATION\r\n\t\t: rect.left + nestingLevel * NESTING_LEVEL_INDENTATION;\r\n\treturn rtl ? point.x > blockIndentPosition : point.x < blockIndentPosition;\r\n}\r\n\r\n/**\r\n * Returns how many nesting levels up the user is attempting to drag to.\r\n *\r\n * The relative parent level is calculated based on how far\r\n * the cursor is from the provided nesting level (e.g. of a candidate block\r\n * that the user is hovering over). The nesting level is considered \"desired\"\r\n * because it is not guaranteed that the user will be able to drag to the desired level.\r\n *\r\n * The returned integer can be used to access an ascending array\r\n * of parent blocks, where the first item is the block the user\r\n * is hovering over, and the last item is the root block.\r\n *\r\n * @param {WPPoint} point        The point representing the cursor position when dragging.\r\n * @param {DOMRect} rect         The rectangle.\r\n * @param {number}  nestingLevel The nesting level of the block.\r\n * @param {boolean} rtl          Whether the editor is in RTL mode.\r\n * @return {number} The desired relative parent level.\r\n */\r\nfunction getDesiredRelativeParentLevel(\r\n\tpoint,\r\n\trect,\r\n\tnestingLevel = 1,\r\n\trtl = false\r\n) {\r\n\t// In RTL languages, the block indent position is from the right edge of the block.\r\n\t// In LTR languages, the block indent position is from the left edge of the block.\r\n\tconst blockIndentPosition = rtl\r\n\t\t? rect.right - nestingLevel * NESTING_LEVEL_INDENTATION\r\n\t\t: rect.left + nestingLevel * NESTING_LEVEL_INDENTATION;\r\n\r\n\tconst distanceBetweenPointAndBlockIndentPosition = rtl\r\n\t\t? blockIndentPosition - point.x\r\n\t\t: point.x - blockIndentPosition;\r\n\r\n\tconst desiredParentLevel = Math.round(\r\n\t\tdistanceBetweenPointAndBlockIndentPosition / NESTING_LEVEL_INDENTATION\r\n\t);\r\n\r\n\treturn Math.abs( desiredParentLevel );\r\n}\r\n\r\n/**\r\n * Returns an array of the parent blocks of the block the user is dropping to.\r\n *\r\n * @param {WPListViewDropZoneBlock}  candidateBlockData The block the user is dropping to.\r\n * @param {WPListViewDropZoneBlocks} blocksData         Data about the blocks in list view.\r\n * @return {WPListViewDropZoneBlocks} An array of block parents, including the block the user is dropping to.\r\n */\r\nfunction getCandidateBlockParents( candidateBlockData, blocksData ) {\r\n\tconst candidateBlockParents = [];\r\n\tlet currentBlockData = candidateBlockData;\r\n\r\n\twhile ( currentBlockData ) {\r\n\t\tcandidateBlockParents.push( { ...currentBlockData } );\r\n\t\tcurrentBlockData = blocksData.find(\r\n\t\t\t( blockData ) =>\r\n\t\t\t\tblockData.clientId === currentBlockData.rootClientId\r\n\t\t);\r\n\t}\r\n\r\n\treturn candidateBlockParents;\r\n}\r\n\r\n/**\r\n * Given a list of blocks data and a block index, return the next non-dragged\r\n * block. This is used to determine the block that the user is dropping to,\r\n * while ignoring the dragged block.\r\n *\r\n * @param {WPListViewDropZoneBlocks} blocksData Data about the blocks in list view.\r\n * @param {number}                   index      The index to begin searching from.\r\n * @return {WPListViewDropZoneBlock | undefined} The next non-dragged block.\r\n */\r\nfunction getNextNonDraggedBlock( blocksData, index ) {\r\n\tconst nextBlockData = blocksData[ index + 1 ];\r\n\tif ( nextBlockData && nextBlockData.isDraggedBlock ) {\r\n\t\treturn getNextNonDraggedBlock( blocksData, index + 1 );\r\n\t}\r\n\r\n\treturn nextBlockData;\r\n}\r\n\r\n/**\r\n * Determines whether the user positioning the dragged block to nest as an\r\n * inner block.\r\n *\r\n * Determined based on nesting level indentation of the current block, plus\r\n * the indentation of the next level of nesting. The vertical position of the\r\n * cursor must also be within the block.\r\n *\r\n * @param {WPPoint} point        The point representing the cursor position when dragging.\r\n * @param {DOMRect} rect         The rectangle.\r\n * @param {number}  nestingLevel The nesting level of the block.\r\n * @param {boolean} rtl          Whether the editor is in RTL mode.\r\n */\r\nfunction isNestingGesture( point, rect, nestingLevel = 1, rtl = false ) {\r\n\tconst blockIndentPosition = rtl\r\n\t\t? rect.right - nestingLevel * NESTING_LEVEL_INDENTATION\r\n\t\t: rect.left + nestingLevel * NESTING_LEVEL_INDENTATION;\r\n\r\n\tconst isNestingHorizontalGesture = rtl\r\n\t\t? point.x < blockIndentPosition - NESTING_LEVEL_INDENTATION\r\n\t\t: point.x > blockIndentPosition + NESTING_LEVEL_INDENTATION;\r\n\r\n\treturn isNestingHorizontalGesture && point.y < rect.bottom;\r\n}\r\n\r\n// Block navigation is always a vertical list, so only allow dropping\r\n// to the above or below a block.\r\nconst ALLOWED_DROP_EDGES = [ 'top', 'bottom' ];\r\n\r\n/**\r\n * Given blocks data and the cursor position, compute the drop target.\r\n *\r\n * @param {WPListViewDropZoneBlocks} blocksData Data about the blocks in list view.\r\n * @param {WPPoint}                  position   The point representing the cursor position when dragging.\r\n * @param {boolean}                  rtl        Whether the editor is in RTL mode.\r\n *\r\n * @return {WPListViewDropZoneTarget | undefined} An object containing data about the drop target.\r\n */\r\nexport function getListViewDropTarget( blocksData, position, rtl = false ) {\r\n\tlet candidateEdge;\r\n\tlet candidateBlockData;\r\n\tlet candidateDistance;\r\n\tlet candidateRect;\r\n\tlet candidateBlockIndex;\r\n\r\n\tfor ( let i = 0; i < blocksData.length; i++ ) {\r\n\t\tconst blockData = blocksData[ i ];\r\n\t\tif ( blockData.isDraggedBlock ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tconst rect = blockData.element.getBoundingClientRect();\r\n\t\tconst [ distance, edge ] = getDistanceToNearestEdge(\r\n\t\t\tposition,\r\n\t\t\trect,\r\n\t\t\tALLOWED_DROP_EDGES\r\n\t\t);\r\n\r\n\t\tconst isCursorWithinBlock = isPointContainedByRect( position, rect );\r\n\t\tif (\r\n\t\t\tcandidateDistance === undefined ||\r\n\t\t\tdistance < candidateDistance ||\r\n\t\t\tisCursorWithinBlock\r\n\t\t) {\r\n\t\t\tcandidateDistance = distance;\r\n\r\n\t\t\tconst index = blocksData.indexOf( blockData );\r\n\t\t\tconst previousBlockData = blocksData[ index - 1 ];\r\n\r\n\t\t\t// If dragging near the top of a block and the preceding block\r\n\t\t\t// is at the same level, use the preceding block as the candidate\r\n\t\t\t// instead, as later it makes determining a nesting drop easier.\r\n\t\t\tif (\r\n\t\t\t\tedge === 'top' &&\r\n\t\t\t\tpreviousBlockData &&\r\n\t\t\t\tpreviousBlockData.rootClientId === blockData.rootClientId &&\r\n\t\t\t\t! previousBlockData.isDraggedBlock\r\n\t\t\t) {\r\n\t\t\t\tcandidateBlockData = previousBlockData;\r\n\t\t\t\tcandidateEdge = 'bottom';\r\n\t\t\t\tcandidateRect =\r\n\t\t\t\t\tpreviousBlockData.element.getBoundingClientRect();\r\n\t\t\t\tcandidateBlockIndex = index - 1;\r\n\t\t\t} else {\r\n\t\t\t\tcandidateBlockData = blockData;\r\n\t\t\t\tcandidateEdge = edge;\r\n\t\t\t\tcandidateRect = rect;\r\n\t\t\t\tcandidateBlockIndex = index;\r\n\t\t\t}\r\n\r\n\t\t\t// If the mouse position is within the block, break early\r\n\t\t\t// as the user would intend to drop either before or after\r\n\t\t\t// this block.\r\n\t\t\t//\r\n\t\t\t// This solves an issue where some rows in the list view\r\n\t\t\t// tree overlap slightly due to sub-pixel rendering.\r\n\t\t\tif ( isCursorWithinBlock ) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif ( ! candidateBlockData ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst candidateBlockParents = getCandidateBlockParents(\r\n\t\tcandidateBlockData,\r\n\t\tblocksData\r\n\t);\r\n\r\n\tconst isDraggingBelow = candidateEdge === 'bottom';\r\n\r\n\t// If the user is dragging towards the bottom of the block check whether\r\n\t// they might be trying to nest the block as a child.\r\n\t// If the block already has inner blocks, and is expanded, this should be treated\r\n\t// as nesting since the next block in the tree will be the first child.\r\n\t// However, if the block is collapsed, dragging beneath the block should\r\n\t// still be allowed, as the next visible block in the tree will be a sibling.\r\n\tif (\r\n\t\tisDraggingBelow &&\r\n\t\tcandidateBlockData.canInsertDraggedBlocksAsChild &&\r\n\t\t( ( candidateBlockData.innerBlockCount > 0 &&\r\n\t\t\tcandidateBlockData.isExpanded ) ||\r\n\t\t\tisNestingGesture(\r\n\t\t\t\tposition,\r\n\t\t\t\tcandidateRect,\r\n\t\t\t\tcandidateBlockParents.length,\r\n\t\t\t\trtl\r\n\t\t\t) )\r\n\t) {\r\n\t\t// If the block is expanded, insert the block as the first child.\r\n\t\t// Otherwise, for collapsed blocks, insert the block as the last child.\r\n\t\tconst newBlockIndex = candidateBlockData.isExpanded\r\n\t\t\t? 0\r\n\t\t\t: candidateBlockData.innerBlockCount || 0;\r\n\r\n\t\treturn {\r\n\t\t\trootClientId: candidateBlockData.clientId,\r\n\t\t\tclientId: candidateBlockData.clientId,\r\n\t\t\tblockIndex: newBlockIndex,\r\n\t\t\tdropPosition: 'inside',\r\n\t\t};\r\n\t}\r\n\r\n\t// If the user is dragging towards the bottom of the block check whether\r\n\t// they might be trying to move the block to be at a parent level.\r\n\tif (\r\n\t\tisDraggingBelow &&\r\n\t\tcandidateBlockData.rootClientId &&\r\n\t\tisUpGesture(\r\n\t\t\tposition,\r\n\t\t\tcandidateRect,\r\n\t\t\tcandidateBlockParents.length,\r\n\t\t\trtl\r\n\t\t)\r\n\t) {\r\n\t\tconst nextBlock = getNextNonDraggedBlock(\r\n\t\t\tblocksData,\r\n\t\t\tcandidateBlockIndex\r\n\t\t);\r\n\t\tconst currentLevel = candidateBlockData.nestingLevel;\r\n\t\tconst nextLevel = nextBlock ? nextBlock.nestingLevel : 1;\r\n\r\n\t\tif ( currentLevel && nextLevel ) {\r\n\t\t\t// Determine the desired relative level of the block to be dropped.\r\n\t\t\tconst desiredRelativeLevel = getDesiredRelativeParentLevel(\r\n\t\t\t\tposition,\r\n\t\t\t\tcandidateRect,\r\n\t\t\t\tcandidateBlockParents.length,\r\n\t\t\t\trtl\r\n\t\t\t);\r\n\r\n\t\t\tconst targetParentIndex = Math.max(\r\n\t\t\t\tMath.min( desiredRelativeLevel, currentLevel - nextLevel ),\r\n\t\t\t\t0\r\n\t\t\t);\r\n\r\n\t\t\tif ( candidateBlockParents[ targetParentIndex ] ) {\r\n\t\t\t\t// Default to the block index of the candidate block.\r\n\t\t\t\tlet newBlockIndex = candidateBlockData.blockIndex;\r\n\r\n\t\t\t\t// If the next block is at the same level, use that as the default\r\n\t\t\t\t// block index. This ensures that the block is dropped in the correct\r\n\t\t\t\t// position when dragging to the bottom of a block.\r\n\t\t\t\tif (\r\n\t\t\t\t\tcandidateBlockParents[ targetParentIndex ].nestingLevel ===\r\n\t\t\t\t\tnextBlock?.nestingLevel\r\n\t\t\t\t) {\r\n\t\t\t\t\tnewBlockIndex = nextBlock?.blockIndex;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Otherwise, search from the current block index back\r\n\t\t\t\t\t// to find the last block index within the same target parent.\r\n\t\t\t\t\tfor ( let i = candidateBlockIndex; i >= 0; i-- ) {\r\n\t\t\t\t\t\tconst blockData = blocksData[ i ];\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tblockData.rootClientId ===\r\n\t\t\t\t\t\t\tcandidateBlockParents[ targetParentIndex ]\r\n\t\t\t\t\t\t\t\t.rootClientId\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tnewBlockIndex = blockData.blockIndex + 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\trootClientId:\r\n\t\t\t\t\t\tcandidateBlockParents[ targetParentIndex ].rootClientId,\r\n\t\t\t\t\tclientId: candidateBlockData.clientId,\r\n\t\t\t\t\tblockIndex: newBlockIndex,\r\n\t\t\t\t\tdropPosition: candidateEdge,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If dropping as a sibling, but block cannot be inserted in\r\n\t// this context, return early.\r\n\tif ( ! candidateBlockData.canInsertDraggedBlocksAsSibling ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst offset = isDraggingBelow ? 1 : 0;\r\n\treturn {\r\n\t\trootClientId: candidateBlockData.rootClientId,\r\n\t\tclientId: candidateBlockData.clientId,\r\n\t\tblockIndex: candidateBlockData.blockIndex + offset,\r\n\t\tdropPosition: candidateEdge,\r\n\t};\r\n}\r\n\r\n// Throttle options need to be defined outside of the hook to avoid\r\n// re-creating the object on every render. This is due to a limitation\r\n// of the `useThrottle` hook, where the options object is included\r\n// in the dependency array for memoization.\r\nconst EXPAND_THROTTLE_OPTIONS = {\r\n\tleading: false, // Don't call the function immediately on the first call.\r\n\ttrailing: true, // Do call the function on the last call.\r\n};\r\n\r\n/**\r\n * A react hook for implementing a drop zone in list view.\r\n *\r\n * @param {Object}       props                    Named parameters.\r\n * @param {?HTMLElement} [props.dropZoneElement]  Optional element to be used as the drop zone.\r\n * @param {Object}       [props.expandedState]    The expanded state of the blocks in the list view.\r\n * @param {Function}     [props.setExpandedState] Function to set the expanded state of a list of block clientIds.\r\n *\r\n * @return {WPListViewDropZoneTarget} The drop target.\r\n */\r\nexport default function useListViewDropZone( {\r\n\tdropZoneElement,\r\n\texpandedState,\r\n\tsetExpandedState,\r\n} ) {\r\n\tconst {\r\n\t\tgetBlockRootClientId,\r\n\t\tgetBlockIndex,\r\n\t\tgetBlockCount,\r\n\t\tgetDraggedBlockClientIds,\r\n\t\tcanInsertBlocks,\r\n\t} = useSelect( blockEditorStore );\r\n\tconst [ target, setTarget ] = useState();\r\n\tconst { rootClientId: targetRootClientId, blockIndex: targetBlockIndex } =\r\n\t\ttarget || {};\r\n\r\n\tconst onBlockDrop = useOnBlockDrop( targetRootClientId, targetBlockIndex );\r\n\r\n\tconst rtl = isRTL();\r\n\r\n\tconst previousRootClientId = usePrevious( targetRootClientId );\r\n\r\n\tconst maybeExpandBlock = useCallback(\r\n\t\t( _expandedState, _target ) => {\r\n\t\t\t// If the user is attempting to drop a block inside a collapsed block,\r\n\t\t\t// that is, using a nesting gesture flagged by 'inside' dropPosition,\r\n\t\t\t// expand the block within the list view, if it isn't already.\r\n\t\t\tconst { rootClientId } = _target || {};\r\n\t\t\tif ( ! rootClientId ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (\r\n\t\t\t\t_target?.dropPosition === 'inside' &&\r\n\t\t\t\t! _expandedState[ rootClientId ]\r\n\t\t\t) {\r\n\t\t\t\tsetExpandedState( {\r\n\t\t\t\t\ttype: 'expand',\r\n\t\t\t\t\tclientIds: [ rootClientId ],\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ setExpandedState ]\r\n\t);\r\n\r\n\t// Throttle the maybeExpandBlock function to avoid expanding the block\r\n\t// too quickly when the user is dragging over the block. This is to\r\n\t// avoid expanding the block when the user is just passing over it.\r\n\tconst throttledMaybeExpandBlock = useThrottle(\r\n\t\tmaybeExpandBlock,\r\n\t\t500,\r\n\t\tEXPAND_THROTTLE_OPTIONS\r\n\t);\r\n\r\n\tuseEffect( () => {\r\n\t\tif (\r\n\t\t\ttarget?.dropPosition !== 'inside' ||\r\n\t\t\tpreviousRootClientId !== target?.rootClientId\r\n\t\t) {\r\n\t\t\tthrottledMaybeExpandBlock.cancel();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthrottledMaybeExpandBlock( expandedState, target );\r\n\t}, [\r\n\t\texpandedState,\r\n\t\tpreviousRootClientId,\r\n\t\ttarget,\r\n\t\tthrottledMaybeExpandBlock,\r\n\t] );\r\n\r\n\tconst draggedBlockClientIds = getDraggedBlockClientIds();\r\n\tconst throttled = useThrottle(\r\n\t\tuseCallback(\r\n\t\t\t( event, currentTarget ) => {\r\n\t\t\t\tconst position = { x: event.clientX, y: event.clientY };\r\n\t\t\t\tconst isBlockDrag = !! draggedBlockClientIds?.length;\r\n\r\n\t\t\t\tconst blockElements = Array.from(\r\n\t\t\t\t\tcurrentTarget.querySelectorAll( '[data-block]' )\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst blocksData = blockElements.map( ( blockElement ) => {\r\n\t\t\t\t\tconst clientId = blockElement.dataset.block;\r\n\t\t\t\t\tconst isExpanded = blockElement.dataset.expanded === 'true';\r\n\t\t\t\t\tconst isDraggedBlock =\r\n\t\t\t\t\t\tblockElement.classList.contains( 'is-dragging' );\r\n\r\n\t\t\t\t\t// Get nesting level from `aria-level` attribute because Firefox does not support `element.ariaLevel`.\r\n\t\t\t\t\tconst nestingLevel = parseInt(\r\n\t\t\t\t\t\tblockElement.getAttribute( 'aria-level' ),\r\n\t\t\t\t\t\t10\r\n\t\t\t\t\t);\r\n\t\t\t\t\tconst rootClientId = getBlockRootClientId( clientId );\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tclientId,\r\n\t\t\t\t\t\tisExpanded,\r\n\t\t\t\t\t\trootClientId,\r\n\t\t\t\t\t\tblockIndex: getBlockIndex( clientId ),\r\n\t\t\t\t\t\telement: blockElement,\r\n\t\t\t\t\t\tnestingLevel: nestingLevel || undefined,\r\n\t\t\t\t\t\tisDraggedBlock: isBlockDrag ? isDraggedBlock : false,\r\n\t\t\t\t\t\tinnerBlockCount: getBlockCount( clientId ),\r\n\t\t\t\t\t\tcanInsertDraggedBlocksAsSibling: isBlockDrag\r\n\t\t\t\t\t\t\t? canInsertBlocks(\r\n\t\t\t\t\t\t\t\t\tdraggedBlockClientIds,\r\n\t\t\t\t\t\t\t\t\trootClientId\r\n\t\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t\t: true,\r\n\t\t\t\t\t\tcanInsertDraggedBlocksAsChild: isBlockDrag\r\n\t\t\t\t\t\t\t? canInsertBlocks( draggedBlockClientIds, clientId )\r\n\t\t\t\t\t\t\t: true,\r\n\t\t\t\t\t};\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tconst newTarget = getListViewDropTarget(\r\n\t\t\t\t\tblocksData,\r\n\t\t\t\t\tposition,\r\n\t\t\t\t\trtl\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif ( newTarget ) {\r\n\t\t\t\t\tsetTarget( newTarget );\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t[\r\n\t\t\t\tcanInsertBlocks,\r\n\t\t\t\tdraggedBlockClientIds,\r\n\t\t\t\tgetBlockCount,\r\n\t\t\t\tgetBlockIndex,\r\n\t\t\t\tgetBlockRootClientId,\r\n\t\t\t\trtl,\r\n\t\t\t]\r\n\t\t),\r\n\t\t50\r\n\t);\r\n\r\n\tconst ref = useDropZone( {\r\n\t\tdropZoneElement,\r\n\t\tonDrop( event ) {\r\n\t\t\tthrottled.cancel();\r\n\t\t\tif ( target ) {\r\n\t\t\t\tonBlockDrop( event );\r\n\t\t\t}\r\n\t\t\t// Use `undefined` value to indicate that the drag has concluded.\r\n\t\t\t// This allows styling rules that are active only when a user is\r\n\t\t\t// dragging to be removed.\r\n\t\t\tsetTarget( undefined );\r\n\t\t},\r\n\t\tonDragLeave() {\r\n\t\t\tthrottled.cancel();\r\n\t\t\t// Use `null` value to indicate that the drop target is not valid,\r\n\t\t\t// but that the drag is still active. This allows for styling rules\r\n\t\t\t// that are active only when a user drags outside of the list view.\r\n\t\t\tsetTarget( null );\r\n\t\t},\r\n\t\tonDragOver( event ) {\r\n\t\t\t// `currentTarget` is only available while the event is being\r\n\t\t\t// handled, so get it now and pass it to the thottled function.\r\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\r\n\t\t\tthrottled( event, event.currentTarget );\r\n\t\t},\r\n\t\tonDragEnd() {\r\n\t\t\tthrottled.cancel();\r\n\t\t\t// Use `undefined` value to indicate that the drag has concluded.\r\n\t\t\t// This allows styling rules that are active only when a user is\r\n\t\t\t// dragging to be removed.\r\n\t\t\tsetTarget( undefined );\r\n\t\t},\r\n\t} );\r\n\r\n\treturn { ref, target };\r\n}\r\n"],"mappings":"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","ignoreList":[]}