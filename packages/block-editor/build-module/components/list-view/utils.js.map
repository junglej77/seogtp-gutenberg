{"version":3,"names":["__","sprintf","focus","getBlockPositionDescription","position","siblingCount","level","getBlockPropertiesDescription","blockInformation","isLocked","positionLabel","undefined","filter","Boolean","join","isClientIdSelected","clientId","selectedBlockClientIds","Array","isArray","length","indexOf","getCommonDepthClientIds","startId","endId","startParents","endParents","startPath","endPath","depth","Math","min","start","end","focusListItem","focusClientId","treeGridElement","getFocusElement","row","querySelector","focusable","find","focusElement","window","requestAnimationFrame","getDragDisplacementValues","blockIndexes","blockDropTargetIndex","blockDropPosition","firstDraggedBlockIndex","isDragged","displacement","isNesting","isAfterDraggedBlocks","thisBlockIndex"],"sources":["@wordpress/block-editor/src/components/list-view/utils.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { __, sprintf } from '@wordpress/i18n';\r\nimport { focus } from '@wordpress/dom';\r\n\r\nexport const getBlockPositionDescription = ( position, siblingCount, level ) =>\r\n\tsprintf(\r\n\t\t/* translators: 1: The numerical position of the block. 2: The total number of blocks. 3. The level of nesting for the block. */\r\n\t\t__( 'Block %1$d of %2$d, Level %3$d.' ),\r\n\t\tposition,\r\n\t\tsiblingCount,\r\n\t\tlevel\r\n\t);\r\n\r\nexport const getBlockPropertiesDescription = ( blockInformation, isLocked ) =>\r\n\t[\r\n\t\tblockInformation?.positionLabel\r\n\t\t\t? `${ sprintf(\r\n\t\t\t\t\t// translators: %s: Position of selected block, e.g. \"Sticky\" or \"Fixed\".\r\n\t\t\t\t\t__( 'Position: %s' ),\r\n\t\t\t\t\tblockInformation.positionLabel\r\n\t\t\t  ) }.`\r\n\t\t\t: undefined,\r\n\t\tisLocked ? __( 'This block is locked.' ) : undefined,\r\n\t]\r\n\t\t.filter( Boolean )\r\n\t\t.join( ' ' );\r\n\r\n/**\r\n * Returns true if the client ID occurs within the block selection or multi-selection,\r\n * or false otherwise.\r\n *\r\n * @param {string}          clientId               Block client ID.\r\n * @param {string|string[]} selectedBlockClientIds Selected block client ID, or an array of multi-selected blocks client IDs.\r\n *\r\n * @return {boolean} Whether the block is in multi-selection set.\r\n */\r\nexport const isClientIdSelected = ( clientId, selectedBlockClientIds ) =>\r\n\tArray.isArray( selectedBlockClientIds ) && selectedBlockClientIds.length\r\n\t\t? selectedBlockClientIds.indexOf( clientId ) !== -1\r\n\t\t: selectedBlockClientIds === clientId;\r\n\r\n/**\r\n * From a start and end clientId of potentially different nesting levels,\r\n * return the nearest-depth ids that have a common level of depth in the\r\n * nesting hierarchy. For multiple block selection, this ensure that the\r\n * selection is always at the same nesting level, and not split across\r\n * separate levels.\r\n *\r\n * @param {string}   startId      The first id of a selection.\r\n * @param {string}   endId        The end id of a selection, usually one that has been clicked on.\r\n * @param {string[]} startParents An array of ancestor ids for the start id, in descending order.\r\n * @param {string[]} endParents   An array of ancestor ids for the end id, in descending order.\r\n * @return {Object} An object containing the start and end ids.\r\n */\r\nexport function getCommonDepthClientIds(\r\n\tstartId,\r\n\tendId,\r\n\tstartParents,\r\n\tendParents\r\n) {\r\n\tconst startPath = [ ...startParents, startId ];\r\n\tconst endPath = [ ...endParents, endId ];\r\n\tconst depth = Math.min( startPath.length, endPath.length ) - 1;\r\n\tconst start = startPath[ depth ];\r\n\tconst end = endPath[ depth ];\r\n\r\n\treturn {\r\n\t\tstart,\r\n\t\tend,\r\n\t};\r\n}\r\n\r\n/**\r\n * Shift focus to the list view item associated with a particular clientId.\r\n *\r\n * @typedef {import('@wordpress/element').RefObject} RefObject\r\n *\r\n * @param {string}       focusClientId   The client ID of the block to focus.\r\n * @param {?HTMLElement} treeGridElement The container element to search within.\r\n */\r\nexport function focusListItem( focusClientId, treeGridElement ) {\r\n\tconst getFocusElement = () => {\r\n\t\tconst row = treeGridElement?.querySelector(\r\n\t\t\t`[role=row][data-block=\"${ focusClientId }\"]`\r\n\t\t);\r\n\t\tif ( ! row ) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t// Focus the first focusable in the row, which is the ListViewBlockSelectButton.\r\n\t\treturn focus.focusable.find( row )[ 0 ];\r\n\t};\r\n\r\n\tlet focusElement = getFocusElement();\r\n\tif ( focusElement ) {\r\n\t\tfocusElement.focus();\r\n\t} else {\r\n\t\t// The element hasn't been painted yet. Defer focusing on the next frame.\r\n\t\t// This could happen when all blocks have been deleted and the default block\r\n\t\t// hasn't been added to the editor yet.\r\n\t\twindow.requestAnimationFrame( () => {\r\n\t\t\tfocusElement = getFocusElement();\r\n\r\n\t\t\t// Ignore if the element still doesn't exist.\r\n\t\t\tif ( focusElement ) {\r\n\t\t\t\tfocusElement.focus();\r\n\t\t\t}\r\n\t\t} );\r\n\t}\r\n}\r\n\r\n/**\r\n * Get values for the block that flag whether the block should be displaced up or down,\r\n * whether the block is being nested, and whether the block appears after the dragged\r\n * blocks. These values are used to determine the class names to apply to the block.\r\n * The list view rows are displaced visually via CSS rules. Displacement rules:\r\n * - `normal`: no displacement â€” used to apply a translateY of `0` so that the block\r\n *  appears in its original position, and moves to that position smoothly when dragging\r\n *  outside of the list view area.\r\n * - `up`: the block should be displaced up, creating room beneath the block for the drop indicator.\r\n * - `down`: the block should be displaced down, creating room above the block for the drop indicator.\r\n *\r\n * @param {Object}                props\r\n * @param {Object}                props.blockIndexes           The indexes of all the blocks in the list view, keyed by clientId.\r\n * @param {number|null|undefined} props.blockDropTargetIndex   The index of the block that the user is dropping to.\r\n * @param {?string}               props.blockDropPosition      The position relative to the block that the user is dropping to.\r\n * @param {string}                props.clientId               The client id for the current block.\r\n * @param {?number}               props.firstDraggedBlockIndex The index of the first dragged block.\r\n * @param {?boolean}              props.isDragged              Whether the current block is being dragged. Dragged blocks skip displacement.\r\n * @return {Object} An object containing the `displacement`, `isAfterDraggedBlocks` and `isNesting` values.\r\n */\r\nexport function getDragDisplacementValues( {\r\n\tblockIndexes,\r\n\tblockDropTargetIndex,\r\n\tblockDropPosition,\r\n\tclientId,\r\n\tfirstDraggedBlockIndex,\r\n\tisDragged,\r\n} ) {\r\n\tlet displacement;\r\n\tlet isNesting;\r\n\tlet isAfterDraggedBlocks;\r\n\r\n\tif ( ! isDragged ) {\r\n\t\tisNesting = false;\r\n\t\tconst thisBlockIndex = blockIndexes[ clientId ];\r\n\t\tisAfterDraggedBlocks = thisBlockIndex > firstDraggedBlockIndex;\r\n\r\n\t\t// Determine where to displace the position of the current block, relative\r\n\t\t// to the blocks being dragged (in their original position) and the drop target\r\n\t\t// (the position where a user is currently dragging the blocks to).\r\n\t\tif (\r\n\t\t\tblockDropTargetIndex !== undefined &&\r\n\t\t\tblockDropTargetIndex !== null &&\r\n\t\t\tfirstDraggedBlockIndex !== undefined\r\n\t\t) {\r\n\t\t\t// If the block is being dragged and there is a valid drop target,\r\n\t\t\t// determine if the block being rendered should be displaced up or down.\r\n\r\n\t\t\tif ( thisBlockIndex !== undefined ) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tthisBlockIndex >= firstDraggedBlockIndex &&\r\n\t\t\t\t\tthisBlockIndex < blockDropTargetIndex\r\n\t\t\t\t) {\r\n\t\t\t\t\t// If the current block appears after the set of dragged blocks\r\n\t\t\t\t\t// (in their original position), but is before the drop target,\r\n\t\t\t\t\t// then the current block should be displaced up.\r\n\t\t\t\t\tdisplacement = 'up';\r\n\t\t\t\t} else if (\r\n\t\t\t\t\tthisBlockIndex < firstDraggedBlockIndex &&\r\n\t\t\t\t\tthisBlockIndex >= blockDropTargetIndex\r\n\t\t\t\t) {\r\n\t\t\t\t\t// If the current block appears before the set of dragged blocks\r\n\t\t\t\t\t// (in their original position), but is after the drop target,\r\n\t\t\t\t\t// then the current block should be displaced down.\r\n\t\t\t\t\tdisplacement = 'down';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdisplacement = 'normal';\r\n\t\t\t\t}\r\n\t\t\t\tisNesting =\r\n\t\t\t\t\ttypeof blockDropTargetIndex === 'number' &&\r\n\t\t\t\t\tblockDropTargetIndex - 1 === thisBlockIndex &&\r\n\t\t\t\t\tblockDropPosition === 'inside';\r\n\t\t\t}\r\n\t\t} else if (\r\n\t\t\tblockDropTargetIndex === null &&\r\n\t\t\tfirstDraggedBlockIndex !== undefined\r\n\t\t) {\r\n\t\t\t// A `null` value for `blockDropTargetIndex` indicates that the\r\n\t\t\t// drop target is outside of the valid areas within the list view.\r\n\t\t\t// In this case, the drag is still active, but as there is no\r\n\t\t\t// valid drop target, we should remove the gap indicating where\r\n\t\t\t// the block would be inserted.\r\n\t\t\tif (\r\n\t\t\t\tthisBlockIndex !== undefined &&\r\n\t\t\t\tthisBlockIndex >= firstDraggedBlockIndex\r\n\t\t\t) {\r\n\t\t\t\tdisplacement = 'up';\r\n\t\t\t} else {\r\n\t\t\t\tdisplacement = 'normal';\r\n\t\t\t}\r\n\t\t} else if (\r\n\t\t\tblockDropTargetIndex !== undefined &&\r\n\t\t\tblockDropTargetIndex !== null &&\r\n\t\t\tfirstDraggedBlockIndex === undefined\r\n\t\t) {\r\n\t\t\t// If the blockdrop target is defined, but there are no dragged blocks,\r\n\t\t\t// then the block should be displaced relative to the drop target.\r\n\t\t\tif ( thisBlockIndex !== undefined ) {\r\n\t\t\t\tif ( thisBlockIndex < blockDropTargetIndex ) {\r\n\t\t\t\t\tdisplacement = 'normal';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdisplacement = 'down';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if ( blockDropTargetIndex === null ) {\r\n\t\t\tdisplacement = 'normal';\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tdisplacement,\r\n\t\tisNesting,\r\n\t\tisAfterDraggedBlocks,\r\n\t};\r\n}\r\n"],"mappings":"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","ignoreList":[]}