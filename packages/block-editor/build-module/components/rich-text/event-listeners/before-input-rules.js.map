{"version":3,"names":["insert","isCollapsed","applyFilters","store","blockEditorStore","wrapSelectionSettings","props","element","onInput","event","inputType","data","value","onChange","registry","current","pair","find","startChar","endChar","start","end","length","newValue","__unstableMarkLastChangeAsPersistent","__unstableMarkAutomaticChange","dispatch","init","key","ownerDocument","defaultView","newEvent","InputEvent","window","queueMicrotask","target","dispatchEvent","preventDefault","addEventListener","removeEventListener"],"sources":["@wordpress/block-editor/src/components/rich-text/event-listeners/before-input-rules.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { insert, isCollapsed } from '@wordpress/rich-text';\r\nimport { applyFilters } from '@wordpress/hooks';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store as blockEditorStore } from '../../../store';\r\n\r\n/**\r\n * When typing over a selection, the selection will we wrapped by a matching\r\n * character pair. The second character is optional, it defaults to the first\r\n * character.\r\n *\r\n * @type {string[]} Array of character pairs.\r\n */\r\nconst wrapSelectionSettings = [ '`', '\"', \"'\", '“”', '‘’' ];\r\n\r\nexport default ( props ) => ( element ) => {\r\n\tfunction onInput( event ) {\r\n\t\tconst { inputType, data } = event;\r\n\t\tconst { value, onChange, registry } = props.current;\r\n\r\n\t\t// Only run the rules when inserting text.\r\n\t\tif ( inputType !== 'insertText' ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( isCollapsed( value ) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst pair = applyFilters(\r\n\t\t\t'blockEditor.wrapSelectionSettings',\r\n\t\t\twrapSelectionSettings\r\n\t\t).find(\r\n\t\t\t( [ startChar, endChar ] ) => startChar === data || endChar === data\r\n\t\t);\r\n\r\n\t\tif ( ! pair ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst [ startChar, endChar = startChar ] = pair;\r\n\t\tconst start = value.start;\r\n\t\tconst end = value.end + startChar.length;\r\n\r\n\t\tlet newValue = insert( value, startChar, start, start );\r\n\t\tnewValue = insert( newValue, endChar, end, end );\r\n\r\n\t\tconst {\r\n\t\t\t__unstableMarkLastChangeAsPersistent,\r\n\t\t\t__unstableMarkAutomaticChange,\r\n\t\t} = registry.dispatch( blockEditorStore );\r\n\r\n\t\t__unstableMarkLastChangeAsPersistent();\r\n\t\tonChange( newValue );\r\n\t\t__unstableMarkAutomaticChange();\r\n\r\n\t\tconst init = {};\r\n\r\n\t\tfor ( const key in event ) {\r\n\t\t\tinit[ key ] = event[ key ];\r\n\t\t}\r\n\r\n\t\tinit.data = endChar;\r\n\r\n\t\tconst { ownerDocument } = element;\r\n\t\tconst { defaultView } = ownerDocument;\r\n\t\tconst newEvent = new defaultView.InputEvent( 'input', init );\r\n\r\n\t\t// Dispatch an `input` event with the new data. This will trigger the\r\n\t\t// input rules.\r\n\t\t// Postpone the `input` to the next event loop tick so that the dispatch\r\n\t\t// doesn't happen synchronously in the middle of `beforeinput` dispatch.\r\n\t\t// This is closer to how native `input` event would be timed, and also\r\n\t\t// makes sure that the `input` event is dispatched only after the `onChange`\r\n\t\t// call few lines above has fully updated the data store state and rerendered\r\n\t\t// all affected components.\r\n\t\twindow.queueMicrotask( () => {\r\n\t\t\tevent.target.dispatchEvent( newEvent );\r\n\t\t} );\r\n\t\tevent.preventDefault();\r\n\t}\r\n\r\n\telement.addEventListener( 'beforeinput', onInput );\r\n\treturn () => {\r\n\t\telement.removeEventListener( 'beforeinput', onInput );\r\n\t};\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,MAAM,EAAEC,WAAW,QAAQ,sBAAsB;AAC1D,SAASC,YAAY,QAAQ,kBAAkB;;AAE/C;AACA;AACA;AACA,SAASC,KAAK,IAAIC,gBAAgB,QAAQ,gBAAgB;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAE;AAE3D,gBAAiBC,KAAK,IAAQC,OAAO,IAAM;EAC1C,SAASC,OAAOA,CAAEC,KAAK,EAAG;IACzB,MAAM;MAAEC,SAAS;MAAEC;IAAK,CAAC,GAAGF,KAAK;IACjC,MAAM;MAAEG,KAAK;MAAEC,QAAQ;MAAEC;IAAS,CAAC,GAAGR,KAAK,CAACS,OAAO;;IAEnD;IACA,IAAKL,SAAS,KAAK,YAAY,EAAG;MACjC;IACD;IAEA,IAAKT,WAAW,CAAEW,KAAM,CAAC,EAAG;MAC3B;IACD;IAEA,MAAMI,IAAI,GAAGd,YAAY,CACxB,mCAAmC,EACnCG,qBACD,CAAC,CAACY,IAAI,CACL,CAAE,CAAEC,SAAS,EAAEC,OAAO,CAAE,KAAMD,SAAS,KAAKP,IAAI,IAAIQ,OAAO,KAAKR,IACjE,CAAC;IAED,IAAK,CAAEK,IAAI,EAAG;MACb;IACD;IAEA,MAAM,CAAEE,SAAS,EAAEC,OAAO,GAAGD,SAAS,CAAE,GAAGF,IAAI;IAC/C,MAAMI,KAAK,GAAGR,KAAK,CAACQ,KAAK;IACzB,MAAMC,GAAG,GAAGT,KAAK,CAACS,GAAG,GAAGH,SAAS,CAACI,MAAM;IAExC,IAAIC,QAAQ,GAAGvB,MAAM,CAAEY,KAAK,EAAEM,SAAS,EAAEE,KAAK,EAAEA,KAAM,CAAC;IACvDG,QAAQ,GAAGvB,MAAM,CAAEuB,QAAQ,EAAEJ,OAAO,EAAEE,GAAG,EAAEA,GAAI,CAAC;IAEhD,MAAM;MACLG,oCAAoC;MACpCC;IACD,CAAC,GAAGX,QAAQ,CAACY,QAAQ,CAAEtB,gBAAiB,CAAC;IAEzCoB,oCAAoC,CAAC,CAAC;IACtCX,QAAQ,CAAEU,QAAS,CAAC;IACpBE,6BAA6B,CAAC,CAAC;IAE/B,MAAME,IAAI,GAAG,CAAC,CAAC;IAEf,KAAM,MAAMC,GAAG,IAAInB,KAAK,EAAG;MAC1BkB,IAAI,CAAEC,GAAG,CAAE,GAAGnB,KAAK,CAAEmB,GAAG,CAAE;IAC3B;IAEAD,IAAI,CAAChB,IAAI,GAAGQ,OAAO;IAEnB,MAAM;MAAEU;IAAc,CAAC,GAAGtB,OAAO;IACjC,MAAM;MAAEuB;IAAY,CAAC,GAAGD,aAAa;IACrC,MAAME,QAAQ,GAAG,IAAID,WAAW,CAACE,UAAU,CAAE,OAAO,EAAEL,IAAK,CAAC;;IAE5D;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAM,MAAM,CAACC,cAAc,CAAE,MAAM;MAC5BzB,KAAK,CAAC0B,MAAM,CAACC,aAAa,CAAEL,QAAS,CAAC;IACvC,CAAE,CAAC;IACHtB,KAAK,CAAC4B,cAAc,CAAC,CAAC;EACvB;EAEA9B,OAAO,CAAC+B,gBAAgB,CAAE,aAAa,EAAE9B,OAAQ,CAAC;EAClD,OAAO,MAAM;IACZD,OAAO,CAACgC,mBAAmB,CAAE,aAAa,EAAE/B,OAAQ,CAAC;EACtD,CAAC;AACF,CAAC","ignoreList":[]}