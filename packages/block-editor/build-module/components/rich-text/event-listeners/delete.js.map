{"version":3,"names":["DELETE","BACKSPACE","isCollapsed","isEmpty","props","element","onKeyDown","event","keyCode","defaultPrevented","value","onMerge","onRemove","current","start","end","text","isReverse","hasActiveFormats","activeFormats","length","preventDefault","addEventListener","removeEventListener"],"sources":["@wordpress/block-editor/src/components/rich-text/event-listeners/delete.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { DELETE, BACKSPACE } from '@wordpress/keycodes';\r\nimport { isCollapsed, isEmpty } from '@wordpress/rich-text';\r\n\r\nexport default ( props ) => ( element ) => {\r\n\tfunction onKeyDown( event ) {\r\n\t\tconst { keyCode } = event;\r\n\r\n\t\tif ( event.defaultPrevented ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst { value, onMerge, onRemove } = props.current;\r\n\r\n\t\tif ( keyCode === DELETE || keyCode === BACKSPACE ) {\r\n\t\t\tconst { start, end, text } = value;\r\n\t\t\tconst isReverse = keyCode === BACKSPACE;\r\n\t\t\tconst hasActiveFormats =\r\n\t\t\t\tvalue.activeFormats && !! value.activeFormats.length;\r\n\r\n\t\t\t// Only process delete if the key press occurs at an uncollapsed edge.\r\n\t\t\tif (\r\n\t\t\t\t! isCollapsed( value ) ||\r\n\t\t\t\thasActiveFormats ||\r\n\t\t\t\t( isReverse && start !== 0 ) ||\r\n\t\t\t\t( ! isReverse && end !== text.length )\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif ( onMerge ) {\r\n\t\t\t\tonMerge( ! isReverse );\r\n\t\t\t}\r\n\r\n\t\t\t// Only handle remove on Backspace. This serves dual-purpose of being\r\n\t\t\t// an intentional user interaction distinguishing between Backspace and\r\n\t\t\t// Delete to remove the empty field, but also to avoid merge & remove\r\n\t\t\t// causing destruction of two fields (merge, then removed merged).\r\n\t\t\telse if ( onRemove && isEmpty( value ) && isReverse ) {\r\n\t\t\t\tonRemove( ! isReverse );\r\n\t\t\t}\r\n\r\n\t\t\tevent.preventDefault();\r\n\t\t}\r\n\t}\r\n\r\n\telement.addEventListener( 'keydown', onKeyDown );\r\n\treturn () => {\r\n\t\telement.removeEventListener( 'keydown', onKeyDown );\r\n\t};\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,MAAM,EAAEC,SAAS,QAAQ,qBAAqB;AACvD,SAASC,WAAW,EAAEC,OAAO,QAAQ,sBAAsB;AAE3D,gBAAiBC,KAAK,IAAQC,OAAO,IAAM;EAC1C,SAASC,SAASA,CAAEC,KAAK,EAAG;IAC3B,MAAM;MAAEC;IAAQ,CAAC,GAAGD,KAAK;IAEzB,IAAKA,KAAK,CAACE,gBAAgB,EAAG;MAC7B;IACD;IAEA,MAAM;MAAEC,KAAK;MAAEC,OAAO;MAAEC;IAAS,CAAC,GAAGR,KAAK,CAACS,OAAO;IAElD,IAAKL,OAAO,KAAKR,MAAM,IAAIQ,OAAO,KAAKP,SAAS,EAAG;MAClD,MAAM;QAAEa,KAAK;QAAEC,GAAG;QAAEC;MAAK,CAAC,GAAGN,KAAK;MAClC,MAAMO,SAAS,GAAGT,OAAO,KAAKP,SAAS;MACvC,MAAMiB,gBAAgB,GACrBR,KAAK,CAACS,aAAa,IAAI,CAAC,CAAET,KAAK,CAACS,aAAa,CAACC,MAAM;;MAErD;MACA,IACC,CAAElB,WAAW,CAAEQ,KAAM,CAAC,IACtBQ,gBAAgB,IACdD,SAAS,IAAIH,KAAK,KAAK,CAAG,IAC1B,CAAEG,SAAS,IAAIF,GAAG,KAAKC,IAAI,CAACI,MAAQ,EACrC;QACD;MACD;MAEA,IAAKT,OAAO,EAAG;QACdA,OAAO,CAAE,CAAEM,SAAU,CAAC;MACvB;;MAEA;MACA;MACA;MACA;MAAA,KACK,IAAKL,QAAQ,IAAIT,OAAO,CAAEO,KAAM,CAAC,IAAIO,SAAS,EAAG;QACrDL,QAAQ,CAAE,CAAEK,SAAU,CAAC;MACxB;MAEAV,KAAK,CAACc,cAAc,CAAC,CAAC;IACvB;EACD;EAEAhB,OAAO,CAACiB,gBAAgB,CAAE,SAAS,EAAEhB,SAAU,CAAC;EAChD,OAAO,MAAM;IACZD,OAAO,CAACkB,mBAAmB,CAAE,SAAS,EAAEjB,SAAU,CAAC;EACpD,CAAC;AACF,CAAC","ignoreList":[]}