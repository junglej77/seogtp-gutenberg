{"version":3,"names":["pasteHandler","isEmpty","insert","create","isURL","addActiveFormats","getPasteEventData","props","element","_onPaste","event","disableFormats","onChange","value","formatTypes","tagName","onReplace","__unstableEmbedURLOnPaste","preserveWhiteSpace","pastePlainText","current","ownerDocument","defaultView","anchorNode","focusNode","getSelection","containsSelection","contains","defaultPrevented","plainText","html","preventDefault","window","console","log","isInternal","clipboardData","getData","pasteInline","content","transformed","reduce","accumulator","__unstablePasteRule","valueToInsert","activeFormats","text","mode","trimmedPlainText","trim","test","HTML","length","addEventListener","removeEventListener"],"sources":["@wordpress/block-editor/src/components/rich-text/event-listeners/paste-handler.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { pasteHandler } from '@wordpress/blocks';\r\nimport { isEmpty, insert, create } from '@wordpress/rich-text';\r\nimport { isURL } from '@wordpress/url';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { addActiveFormats } from '../utils';\r\nimport { getPasteEventData } from '../../../utils/pasting';\r\n\r\n/** @typedef {import('@wordpress/rich-text').RichTextValue} RichTextValue */\r\n\r\nexport default ( props ) => ( element ) => {\r\n\tfunction _onPaste( event ) {\r\n\t\tconst {\r\n\t\t\tdisableFormats,\r\n\t\t\tonChange,\r\n\t\t\tvalue,\r\n\t\t\tformatTypes,\r\n\t\t\ttagName,\r\n\t\t\tonReplace,\r\n\t\t\t__unstableEmbedURLOnPaste,\r\n\t\t\tpreserveWhiteSpace,\r\n\t\t\tpastePlainText,\r\n\t\t} = props.current;\r\n\t\tconst { ownerDocument } = element;\r\n\t\tconst { defaultView } = ownerDocument;\r\n\t\tconst { anchorNode, focusNode } = defaultView.getSelection();\r\n\t\tconst containsSelection =\r\n\t\t\telement.contains( anchorNode ) && element.contains( focusNode );\r\n\r\n\t\t// The event listener is attached to the window, so we need to check if\r\n\t\t// the target is the element.\r\n\t\tif ( ! containsSelection ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( event.defaultPrevented ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst { plainText, html } = getPasteEventData( event );\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t\t// Allows us to ask for this information when we get a report.\r\n\t\twindow.console.log( 'Received HTML:\\n\\n', html );\r\n\t\twindow.console.log( 'Received plain text:\\n\\n', plainText );\r\n\r\n\t\tif ( disableFormats ) {\r\n\t\t\tonChange( insert( value, plainText ) );\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst isInternal =\r\n\t\t\tevent.clipboardData.getData( 'rich-text' ) === 'true';\r\n\r\n\t\tfunction pasteInline( content ) {\r\n\t\t\tconst transformed = formatTypes.reduce(\r\n\t\t\t\t( accumulator, { __unstablePasteRule } ) => {\r\n\t\t\t\t\t// Only allow one transform.\r\n\t\t\t\t\tif ( __unstablePasteRule && accumulator === value ) {\r\n\t\t\t\t\t\taccumulator = __unstablePasteRule( value, {\r\n\t\t\t\t\t\t\thtml,\r\n\t\t\t\t\t\t\tplainText,\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn accumulator;\r\n\t\t\t\t},\r\n\t\t\t\tvalue\r\n\t\t\t);\r\n\t\t\tif ( transformed !== value ) {\r\n\t\t\t\tonChange( transformed );\r\n\t\t\t} else {\r\n\t\t\t\tconst valueToInsert = create( { html: content } );\r\n\t\t\t\taddActiveFormats( valueToInsert, value.activeFormats );\r\n\t\t\t\tonChange( insert( value, valueToInsert ) );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If the data comes from a rich text instance, we can directly use it\r\n\t\t// without filtering the data. The filters are only meant for externally\r\n\t\t// pasted content and remove inline styles.\r\n\t\tif ( isInternal ) {\r\n\t\t\tpasteInline( html );\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( pastePlainText ) {\r\n\t\t\tonChange( insert( value, create( { text: plainText } ) ) );\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet mode = 'INLINE';\r\n\r\n\t\tconst trimmedPlainText = plainText.trim();\r\n\r\n\t\tif (\r\n\t\t\t__unstableEmbedURLOnPaste &&\r\n\t\t\tisEmpty( value ) &&\r\n\t\t\tisURL( trimmedPlainText ) &&\r\n\t\t\t// For the link pasting feature, allow only http(s) protocols.\r\n\t\t\t/^https?:/.test( trimmedPlainText )\r\n\t\t) {\r\n\t\t\tmode = 'BLOCKS';\r\n\t\t}\r\n\r\n\t\tconst content = pasteHandler( {\r\n\t\t\tHTML: html,\r\n\t\t\tplainText,\r\n\t\t\tmode,\r\n\t\t\ttagName,\r\n\t\t\tpreserveWhiteSpace,\r\n\t\t} );\r\n\r\n\t\tif ( typeof content === 'string' ) {\r\n\t\t\tpasteInline( content );\r\n\t\t} else if ( content.length > 0 ) {\r\n\t\t\tif ( onReplace && isEmpty( value ) ) {\r\n\t\t\t\tonReplace( content, content.length - 1, -1 );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst { defaultView } = element.ownerDocument;\r\n\r\n\t// Attach the listener to the window so parent elements have the chance to\r\n\t// prevent the default behavior.\r\n\tdefaultView.addEventListener( 'paste', _onPaste );\r\n\treturn () => {\r\n\t\tdefaultView.removeEventListener( 'paste', _onPaste );\r\n\t};\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,mBAAmB;AAChD,SAASC,OAAO,EAAEC,MAAM,EAAEC,MAAM,QAAQ,sBAAsB;AAC9D,SAASC,KAAK,QAAQ,gBAAgB;;AAEtC;AACA;AACA;AACA,SAASC,gBAAgB,QAAQ,UAAU;AAC3C,SAASC,iBAAiB,QAAQ,wBAAwB;;AAE1D;;AAEA,gBAAiBC,KAAK,IAAQC,OAAO,IAAM;EAC1C,SAASC,QAAQA,CAAEC,KAAK,EAAG;IAC1B,MAAM;MACLC,cAAc;MACdC,QAAQ;MACRC,KAAK;MACLC,WAAW;MACXC,OAAO;MACPC,SAAS;MACTC,yBAAyB;MACzBC,kBAAkB;MAClBC;IACD,CAAC,GAAGZ,KAAK,CAACa,OAAO;IACjB,MAAM;MAAEC;IAAc,CAAC,GAAGb,OAAO;IACjC,MAAM;MAAEc;IAAY,CAAC,GAAGD,aAAa;IACrC,MAAM;MAAEE,UAAU;MAAEC;IAAU,CAAC,GAAGF,WAAW,CAACG,YAAY,CAAC,CAAC;IAC5D,MAAMC,iBAAiB,GACtBlB,OAAO,CAACmB,QAAQ,CAAEJ,UAAW,CAAC,IAAIf,OAAO,CAACmB,QAAQ,CAAEH,SAAU,CAAC;;IAEhE;IACA;IACA,IAAK,CAAEE,iBAAiB,EAAG;MAC1B;IACD;IAEA,IAAKhB,KAAK,CAACkB,gBAAgB,EAAG;MAC7B;IACD;IAEA,MAAM;MAAEC,SAAS;MAAEC;IAAK,CAAC,GAAGxB,iBAAiB,CAAEI,KAAM,CAAC;IAEtDA,KAAK,CAACqB,cAAc,CAAC,CAAC;;IAEtB;IACAC,MAAM,CAACC,OAAO,CAACC,GAAG,CAAE,oBAAoB,EAAEJ,IAAK,CAAC;IAChDE,MAAM,CAACC,OAAO,CAACC,GAAG,CAAE,0BAA0B,EAAEL,SAAU,CAAC;IAE3D,IAAKlB,cAAc,EAAG;MACrBC,QAAQ,CAAEV,MAAM,CAAEW,KAAK,EAAEgB,SAAU,CAAE,CAAC;MACtC;IACD;IAEA,MAAMM,UAAU,GACfzB,KAAK,CAAC0B,aAAa,CAACC,OAAO,CAAE,WAAY,CAAC,KAAK,MAAM;IAEtD,SAASC,WAAWA,CAAEC,OAAO,EAAG;MAC/B,MAAMC,WAAW,GAAG1B,WAAW,CAAC2B,MAAM,CACrC,CAAEC,WAAW,EAAE;QAAEC;MAAoB,CAAC,KAAM;QAC3C;QACA,IAAKA,mBAAmB,IAAID,WAAW,KAAK7B,KAAK,EAAG;UACnD6B,WAAW,GAAGC,mBAAmB,CAAE9B,KAAK,EAAE;YACzCiB,IAAI;YACJD;UACD,CAAE,CAAC;QACJ;QAEA,OAAOa,WAAW;MACnB,CAAC,EACD7B,KACD,CAAC;MACD,IAAK2B,WAAW,KAAK3B,KAAK,EAAG;QAC5BD,QAAQ,CAAE4B,WAAY,CAAC;MACxB,CAAC,MAAM;QACN,MAAMI,aAAa,GAAGzC,MAAM,CAAE;UAAE2B,IAAI,EAAES;QAAQ,CAAE,CAAC;QACjDlC,gBAAgB,CAAEuC,aAAa,EAAE/B,KAAK,CAACgC,aAAc,CAAC;QACtDjC,QAAQ,CAAEV,MAAM,CAAEW,KAAK,EAAE+B,aAAc,CAAE,CAAC;MAC3C;IACD;;IAEA;IACA;IACA;IACA,IAAKT,UAAU,EAAG;MACjBG,WAAW,CAAER,IAAK,CAAC;MACnB;IACD;IAEA,IAAKX,cAAc,EAAG;MACrBP,QAAQ,CAAEV,MAAM,CAAEW,KAAK,EAAEV,MAAM,CAAE;QAAE2C,IAAI,EAAEjB;MAAU,CAAE,CAAE,CAAE,CAAC;MAC1D;IACD;IAEA,IAAIkB,IAAI,GAAG,QAAQ;IAEnB,MAAMC,gBAAgB,GAAGnB,SAAS,CAACoB,IAAI,CAAC,CAAC;IAEzC,IACChC,yBAAyB,IACzBhB,OAAO,CAAEY,KAAM,CAAC,IAChBT,KAAK,CAAE4C,gBAAiB,CAAC;IACzB;IACA,UAAU,CAACE,IAAI,CAAEF,gBAAiB,CAAC,EAClC;MACDD,IAAI,GAAG,QAAQ;IAChB;IAEA,MAAMR,OAAO,GAAGvC,YAAY,CAAE;MAC7BmD,IAAI,EAAErB,IAAI;MACVD,SAAS;MACTkB,IAAI;MACJhC,OAAO;MACPG;IACD,CAAE,CAAC;IAEH,IAAK,OAAOqB,OAAO,KAAK,QAAQ,EAAG;MAClCD,WAAW,CAAEC,OAAQ,CAAC;IACvB,CAAC,MAAM,IAAKA,OAAO,CAACa,MAAM,GAAG,CAAC,EAAG;MAChC,IAAKpC,SAAS,IAAIf,OAAO,CAAEY,KAAM,CAAC,EAAG;QACpCG,SAAS,CAAEuB,OAAO,EAAEA,OAAO,CAACa,MAAM,GAAG,CAAC,EAAE,CAAC,CAAE,CAAC;MAC7C;IACD;EACD;EAEA,MAAM;IAAE9B;EAAY,CAAC,GAAGd,OAAO,CAACa,aAAa;;EAE7C;EACA;EACAC,WAAW,CAAC+B,gBAAgB,CAAE,OAAO,EAAE5C,QAAS,CAAC;EACjD,OAAO,MAAM;IACZa,WAAW,CAACgC,mBAAmB,CAAE,OAAO,EAAE7C,QAAS,CAAC;EACrD,CAAC;AACF,CAAC","ignoreList":[]}