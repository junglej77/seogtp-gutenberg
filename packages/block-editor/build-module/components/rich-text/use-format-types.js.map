{"version":3,"names":["useMemo","useSelect","useDispatch","store","richTextStore","formatTypesSelector","select","getFormatTypes","interactiveContentTags","Set","prefixSelectKeys","selected","prefix","Object","fromEntries","entries","map","key","value","getPrefixedSelectKeys","keys","filter","startsWith","reduce","accumulator","slice","length","useFormatTypes","clientId","identifier","withoutInteractiveFormatting","allowedFormats","allFormatTypes","formatTypes","name","interactive","tagName","includes","has","keyedSelected","type","__experimentalGetPropsForEditableTreePreparation","richTextIdentifier","blockClientId","dispatch","prepareHandlers","valueHandlers","changeHandlers","dependencies","push","forEach","__experimentalCreatePrepareEditableTree","handler","__experimentalCreateOnChangeEditableValue","dispatchers","__experimentalGetPropsForEditableTreeChangeHandler"],"sources":["@wordpress/block-editor/src/components/rich-text/use-format-types.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useMemo } from '@wordpress/element';\r\nimport { useSelect, useDispatch } from '@wordpress/data';\r\nimport { store as richTextStore } from '@wordpress/rich-text';\r\n\r\nfunction formatTypesSelector( select ) {\r\n\treturn select( richTextStore ).getFormatTypes();\r\n}\r\n\r\n/**\r\n * Set of all interactive content tags.\r\n *\r\n * @see https://html.spec.whatwg.org/multipage/dom.html#interactive-content\r\n */\r\nconst interactiveContentTags = new Set( [\r\n\t'a',\r\n\t'audio',\r\n\t'button',\r\n\t'details',\r\n\t'embed',\r\n\t'iframe',\r\n\t'input',\r\n\t'label',\r\n\t'select',\r\n\t'textarea',\r\n\t'video',\r\n] );\r\n\r\nfunction prefixSelectKeys( selected, prefix ) {\r\n\tif ( typeof selected !== 'object' ) {\r\n\t\treturn { [ prefix ]: selected };\r\n\t}\r\n\treturn Object.fromEntries(\r\n\t\tObject.entries( selected ).map( ( [ key, value ] ) => [\r\n\t\t\t`${ prefix }.${ key }`,\r\n\t\t\tvalue,\r\n\t\t] )\r\n\t);\r\n}\r\n\r\nfunction getPrefixedSelectKeys( selected, prefix ) {\r\n\tif ( selected[ prefix ] ) {\r\n\t\treturn selected[ prefix ];\r\n\t}\r\n\treturn Object.keys( selected )\r\n\t\t.filter( ( key ) => key.startsWith( prefix + '.' ) )\r\n\t\t.reduce( ( accumulator, key ) => {\r\n\t\t\taccumulator[ key.slice( prefix.length + 1 ) ] = selected[ key ];\r\n\t\t\treturn accumulator;\r\n\t\t}, {} );\r\n}\r\n\r\n/**\r\n * This hook provides RichText with the `formatTypes` and its derived props from\r\n * experimental format type settings.\r\n *\r\n * @param {Object}  $0                              Options\r\n * @param {string}  $0.clientId                     Block client ID.\r\n * @param {string}  $0.identifier                   Block attribute.\r\n * @param {boolean} $0.withoutInteractiveFormatting Whether to clean the interactive formattings or not.\r\n * @param {Array}   $0.allowedFormats               Allowed formats\r\n */\r\nexport function useFormatTypes( {\r\n\tclientId,\r\n\tidentifier,\r\n\twithoutInteractiveFormatting,\r\n\tallowedFormats,\r\n} ) {\r\n\tconst allFormatTypes = useSelect( formatTypesSelector, [] );\r\n\tconst formatTypes = useMemo( () => {\r\n\t\treturn allFormatTypes.filter( ( { name, interactive, tagName } ) => {\r\n\t\t\tif ( allowedFormats && ! allowedFormats.includes( name ) ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (\r\n\t\t\t\twithoutInteractiveFormatting &&\r\n\t\t\t\t( interactive || interactiveContentTags.has( tagName ) )\r\n\t\t\t) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t} );\r\n\t}, [ allFormatTypes, allowedFormats, withoutInteractiveFormatting ] );\r\n\tconst keyedSelected = useSelect(\r\n\t\t( select ) =>\r\n\t\t\tformatTypes.reduce( ( accumulator, type ) => {\r\n\t\t\t\tif ( ! type.__experimentalGetPropsForEditableTreePreparation ) {\r\n\t\t\t\t\treturn accumulator;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...accumulator,\r\n\t\t\t\t\t...prefixSelectKeys(\r\n\t\t\t\t\t\ttype.__experimentalGetPropsForEditableTreePreparation(\r\n\t\t\t\t\t\t\tselect,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\trichTextIdentifier: identifier,\r\n\t\t\t\t\t\t\t\tblockClientId: clientId,\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\ttype.name\r\n\t\t\t\t\t),\r\n\t\t\t\t};\r\n\t\t\t}, {} ),\r\n\t\t[ formatTypes, clientId, identifier ]\r\n\t);\r\n\tconst dispatch = useDispatch();\r\n\tconst prepareHandlers = [];\r\n\tconst valueHandlers = [];\r\n\tconst changeHandlers = [];\r\n\tconst dependencies = [];\r\n\r\n\tfor ( const key in keyedSelected ) {\r\n\t\tdependencies.push( keyedSelected[ key ] );\r\n\t}\r\n\r\n\tformatTypes.forEach( ( type ) => {\r\n\t\tif ( type.__experimentalCreatePrepareEditableTree ) {\r\n\t\t\tconst handler = type.__experimentalCreatePrepareEditableTree(\r\n\t\t\t\tgetPrefixedSelectKeys( keyedSelected, type.name ),\r\n\t\t\t\t{\r\n\t\t\t\t\trichTextIdentifier: identifier,\r\n\t\t\t\t\tblockClientId: clientId,\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tif ( type.__experimentalCreateOnChangeEditableValue ) {\r\n\t\t\t\tvalueHandlers.push( handler );\r\n\t\t\t} else {\r\n\t\t\t\tprepareHandlers.push( handler );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( type.__experimentalCreateOnChangeEditableValue ) {\r\n\t\t\tlet dispatchers = {};\r\n\r\n\t\t\tif ( type.__experimentalGetPropsForEditableTreeChangeHandler ) {\r\n\t\t\t\tdispatchers =\r\n\t\t\t\t\ttype.__experimentalGetPropsForEditableTreeChangeHandler(\r\n\t\t\t\t\t\tdispatch,\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\trichTextIdentifier: identifier,\r\n\t\t\t\t\t\t\tblockClientId: clientId,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tconst selected = getPrefixedSelectKeys( keyedSelected, type.name );\r\n\t\t\tchangeHandlers.push(\r\n\t\t\t\ttype.__experimentalCreateOnChangeEditableValue(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t...( typeof selected === 'object' ? selected : {} ),\r\n\t\t\t\t\t\t...dispatchers,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trichTextIdentifier: identifier,\r\n\t\t\t\t\t\tblockClientId: clientId,\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\t} );\r\n\r\n\treturn {\r\n\t\tformatTypes,\r\n\t\tprepareHandlers,\r\n\t\tvalueHandlers,\r\n\t\tchangeHandlers,\r\n\t\tdependencies,\r\n\t};\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,SAAS,EAAEC,WAAW,QAAQ,iBAAiB;AACxD,SAASC,KAAK,IAAIC,aAAa,QAAQ,sBAAsB;AAE7D,SAASC,mBAAmBA,CAAEC,MAAM,EAAG;EACtC,OAAOA,MAAM,CAAEF,aAAc,CAAC,CAACG,cAAc,CAAC,CAAC;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,IAAIC,GAAG,CAAE,CACvC,GAAG,EACH,OAAO,EACP,QAAQ,EACR,SAAS,EACT,OAAO,EACP,QAAQ,EACR,OAAO,EACP,OAAO,EACP,QAAQ,EACR,UAAU,EACV,OAAO,CACN,CAAC;AAEH,SAASC,gBAAgBA,CAAEC,QAAQ,EAAEC,MAAM,EAAG;EAC7C,IAAK,OAAOD,QAAQ,KAAK,QAAQ,EAAG;IACnC,OAAO;MAAE,CAAEC,MAAM,GAAID;IAAS,CAAC;EAChC;EACA,OAAOE,MAAM,CAACC,WAAW,CACxBD,MAAM,CAACE,OAAO,CAAEJ,QAAS,CAAC,CAACK,GAAG,CAAE,CAAE,CAAEC,GAAG,EAAEC,KAAK,CAAE,KAAM,CACpD,GAAGN,MAAQ,IAAIK,GAAK,EAAC,EACtBC,KAAK,CACJ,CACH,CAAC;AACF;AAEA,SAASC,qBAAqBA,CAAER,QAAQ,EAAEC,MAAM,EAAG;EAClD,IAAKD,QAAQ,CAAEC,MAAM,CAAE,EAAG;IACzB,OAAOD,QAAQ,CAAEC,MAAM,CAAE;EAC1B;EACA,OAAOC,MAAM,CAACO,IAAI,CAAET,QAAS,CAAC,CAC5BU,MAAM,CAAIJ,GAAG,IAAMA,GAAG,CAACK,UAAU,CAAEV,MAAM,GAAG,GAAI,CAAE,CAAC,CACnDW,MAAM,CAAE,CAAEC,WAAW,EAAEP,GAAG,KAAM;IAChCO,WAAW,CAAEP,GAAG,CAACQ,KAAK,CAAEb,MAAM,CAACc,MAAM,GAAG,CAAE,CAAC,CAAE,GAAGf,QAAQ,CAAEM,GAAG,CAAE;IAC/D,OAAOO,WAAW;EACnB,CAAC,EAAE,CAAC,CAAE,CAAC;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,cAAcA,CAAE;EAC/BC,QAAQ;EACRC,UAAU;EACVC,4BAA4B;EAC5BC;AACD,CAAC,EAAG;EACH,MAAMC,cAAc,GAAG/B,SAAS,CAAEI,mBAAmB,EAAE,EAAG,CAAC;EAC3D,MAAM4B,WAAW,GAAGjC,OAAO,CAAE,MAAM;IAClC,OAAOgC,cAAc,CAACX,MAAM,CAAE,CAAE;MAAEa,IAAI;MAAEC,WAAW;MAAEC;IAAQ,CAAC,KAAM;MACnE,IAAKL,cAAc,IAAI,CAAEA,cAAc,CAACM,QAAQ,CAAEH,IAAK,CAAC,EAAG;QAC1D,OAAO,KAAK;MACb;MAEA,IACCJ,4BAA4B,KAC1BK,WAAW,IAAI3B,sBAAsB,CAAC8B,GAAG,CAAEF,OAAQ,CAAC,CAAE,EACvD;QACD,OAAO,KAAK;MACb;MAEA,OAAO,IAAI;IACZ,CAAE,CAAC;EACJ,CAAC,EAAE,CAAEJ,cAAc,EAAED,cAAc,EAAED,4BAA4B,CAAG,CAAC;EACrE,MAAMS,aAAa,GAAGtC,SAAS,CAC5BK,MAAM,IACP2B,WAAW,CAACV,MAAM,CAAE,CAAEC,WAAW,EAAEgB,IAAI,KAAM;IAC5C,IAAK,CAAEA,IAAI,CAACC,gDAAgD,EAAG;MAC9D,OAAOjB,WAAW;IACnB;IAEA,OAAO;MACN,GAAGA,WAAW;MACd,GAAGd,gBAAgB,CAClB8B,IAAI,CAACC,gDAAgD,CACpDnC,MAAM,EACN;QACCoC,kBAAkB,EAAEb,UAAU;QAC9Bc,aAAa,EAAEf;MAChB,CACD,CAAC,EACDY,IAAI,CAACN,IACN;IACD,CAAC;EACF,CAAC,EAAE,CAAC,CAAE,CAAC,EACR,CAAED,WAAW,EAAEL,QAAQ,EAAEC,UAAU,CACpC,CAAC;EACD,MAAMe,QAAQ,GAAG1C,WAAW,CAAC,CAAC;EAC9B,MAAM2C,eAAe,GAAG,EAAE;EAC1B,MAAMC,aAAa,GAAG,EAAE;EACxB,MAAMC,cAAc,GAAG,EAAE;EACzB,MAAMC,YAAY,GAAG,EAAE;EAEvB,KAAM,MAAM/B,GAAG,IAAIsB,aAAa,EAAG;IAClCS,YAAY,CAACC,IAAI,CAAEV,aAAa,CAAEtB,GAAG,CAAG,CAAC;EAC1C;EAEAgB,WAAW,CAACiB,OAAO,CAAIV,IAAI,IAAM;IAChC,IAAKA,IAAI,CAACW,uCAAuC,EAAG;MACnD,MAAMC,OAAO,GAAGZ,IAAI,CAACW,uCAAuC,CAC3DhC,qBAAqB,CAAEoB,aAAa,EAAEC,IAAI,CAACN,IAAK,CAAC,EACjD;QACCQ,kBAAkB,EAAEb,UAAU;QAC9Bc,aAAa,EAAEf;MAChB,CACD,CAAC;MAED,IAAKY,IAAI,CAACa,yCAAyC,EAAG;QACrDP,aAAa,CAACG,IAAI,CAAEG,OAAQ,CAAC;MAC9B,CAAC,MAAM;QACNP,eAAe,CAACI,IAAI,CAAEG,OAAQ,CAAC;MAChC;IACD;IAEA,IAAKZ,IAAI,CAACa,yCAAyC,EAAG;MACrD,IAAIC,WAAW,GAAG,CAAC,CAAC;MAEpB,IAAKd,IAAI,CAACe,kDAAkD,EAAG;QAC9DD,WAAW,GACVd,IAAI,CAACe,kDAAkD,CACtDX,QAAQ,EACR;UACCF,kBAAkB,EAAEb,UAAU;UAC9Bc,aAAa,EAAEf;QAChB,CACD,CAAC;MACH;MAEA,MAAMjB,QAAQ,GAAGQ,qBAAqB,CAAEoB,aAAa,EAAEC,IAAI,CAACN,IAAK,CAAC;MAClEa,cAAc,CAACE,IAAI,CAClBT,IAAI,CAACa,yCAAyC,CAC7C;QACC,IAAK,OAAO1C,QAAQ,KAAK,QAAQ,GAAGA,QAAQ,GAAG,CAAC,CAAC,CAAE;QACnD,GAAG2C;MACJ,CAAC,EACD;QACCZ,kBAAkB,EAAEb,UAAU;QAC9Bc,aAAa,EAAEf;MAChB,CACD,CACD,CAAC;IACF;EACD,CAAE,CAAC;EAEH,OAAO;IACNK,WAAW;IACXY,eAAe;IACfC,aAAa;IACbC,cAAc;IACdC;EACD,CAAC;AACF","ignoreList":[]}