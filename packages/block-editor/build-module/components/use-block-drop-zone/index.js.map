{"version":3,"names":["useDispatch","useSelect","useRegistry","useCallback","useState","useThrottle","__experimentalUseDropZone","useDropZone","isRTL","isUnmodifiedDefaultBlock","getIsUnmodifiedDefaultBlock","store","blocksStore","useOnBlockDrop","getDistanceToNearestEdge","isPointContainedByRect","isPointWithinTopAndBottomBoundariesOfRect","blockEditorStore","unlock","THRESHOLD_DISTANCE","MINIMUM_HEIGHT_FOR_THRESHOLD","MINIMUM_WIDTH_FOR_THRESHOLD","getDropTargetPosition","blocksData","position","orientation","options","allowedEdges","nearestIndex","insertPosition","minDistance","Infinity","targetBlockIndex","nearestSide","dropZoneElement","parentBlockOrientation","rootBlockIndex","rect","getBoundingClientRect","distance","edge","height","isRightToLeft","width","forEach","blockIndex","blockOrientation","sideDistance","sideEdge","isPointInsideRect","adjacentIndex","isNearestBlockUnmodifiedDefaultBlock","isAdjacentBlockUnmodifiedDefaultBlock","insertionIndex","isDropTargetValid","getBlockType","allowedBlocks","draggedBlockNames","targetBlockName","areBlocksAllowed","allowedBlockNames","map","name","every","includes","draggedBlockTypes","targetMatchesDraggedBlockParents","block","allowedParentName","parent","isInsertionPoint","targetToCheck","ownerDocument","defaultView","HTMLElement","dataset","useBlockDropZone","rootClientId","targetRootClientId","parentClientId","parentBlockClientId","isDisabled","registry","dropTarget","setDropTarget","index","operation","getBlockVariations","getGroupingBlockName","canInsertBlockType","getBlockListSettings","getBlocks","getBlockIndex","getDraggedBlockClientIds","getBlockNamesByClientId","getAllowedBlocks","isDragging","isGroupable","isZoomOutMode","getSectionRootClientId","showInsertionPoint","hideInsertionPoint","startDragging","stopDragging","onBlockDrop","throttled","event","isBlockDroppingAllowed","sectionRootClientId","blocks","length","batch","clientId","getElementById","dropTargetPosition","x","clientX","y","clientY","undefined","targetIndex","targetBlock","areAllImages","canInsertGalleryBlock","areGroupableBlocks","groupBlockVariations","canInsertRow","find","insertionPointClientId","onDrop","onDragOver","currentTarget","onDragLeave","relatedTarget","target","cancel","onDragEnd"],"sources":["@wordpress/block-editor/src/components/use-block-drop-zone/index.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useDispatch, useSelect, useRegistry } from '@wordpress/data';\r\nimport { useCallback, useState } from '@wordpress/element';\r\nimport {\r\n\tuseThrottle,\r\n\t__experimentalUseDropZone as useDropZone,\r\n} from '@wordpress/compose';\r\nimport { isRTL } from '@wordpress/i18n';\r\nimport {\r\n\tisUnmodifiedDefaultBlock as getIsUnmodifiedDefaultBlock,\r\n\tstore as blocksStore,\r\n} from '@wordpress/blocks';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport useOnBlockDrop from '../use-on-block-drop';\r\nimport {\r\n\tgetDistanceToNearestEdge,\r\n\tisPointContainedByRect,\r\n\tisPointWithinTopAndBottomBoundariesOfRect,\r\n} from '../../utils/math';\r\nimport { store as blockEditorStore } from '../../store';\r\nimport { unlock } from '../../lock-unlock';\r\n\r\nconst THRESHOLD_DISTANCE = 30;\r\nconst MINIMUM_HEIGHT_FOR_THRESHOLD = 120;\r\nconst MINIMUM_WIDTH_FOR_THRESHOLD = 120;\r\n\r\n/** @typedef {import('../../utils/math').WPPoint} WPPoint */\r\n/** @typedef {import('../use-on-block-drop/types').WPDropOperation} WPDropOperation */\r\n\r\n/**\r\n * The orientation of a block list.\r\n *\r\n * @typedef {'horizontal'|'vertical'|undefined} WPBlockListOrientation\r\n */\r\n\r\n/**\r\n * The insert position when dropping a block.\r\n *\r\n * @typedef {'before'|'after'} WPInsertPosition\r\n */\r\n\r\n/**\r\n * @typedef {Object} WPBlockData\r\n * @property {boolean}       isUnmodifiedDefaultBlock Is the block unmodified default block.\r\n * @property {() => DOMRect} getBoundingClientRect    Get the bounding client rect of the block.\r\n * @property {number}        blockIndex               The index of the block.\r\n */\r\n\r\n/**\r\n * Get the drop target position from a given drop point and the orientation.\r\n *\r\n * @param {WPBlockData[]}          blocksData  The block data list.\r\n * @param {WPPoint}                position    The position of the item being dragged.\r\n * @param {WPBlockListOrientation} orientation The orientation of the block list.\r\n * @param {Object}                 options     Additional options.\r\n * @return {[number, WPDropOperation]} The drop target position.\r\n */\r\nexport function getDropTargetPosition(\r\n\tblocksData,\r\n\tposition,\r\n\torientation = 'vertical',\r\n\toptions = {}\r\n) {\r\n\tconst allowedEdges =\r\n\t\torientation === 'horizontal'\r\n\t\t\t? [ 'left', 'right' ]\r\n\t\t\t: [ 'top', 'bottom' ];\r\n\r\n\tlet nearestIndex = 0;\r\n\tlet insertPosition = 'before';\r\n\tlet minDistance = Infinity;\r\n\tlet targetBlockIndex = null;\r\n\tlet nearestSide = 'right';\r\n\r\n\tconst {\r\n\t\tdropZoneElement,\r\n\t\tparentBlockOrientation,\r\n\t\trootBlockIndex = 0,\r\n\t} = options;\r\n\r\n\t// Allow before/after when dragging over the top/bottom edges of the drop zone.\r\n\tif ( dropZoneElement && parentBlockOrientation !== 'horizontal' ) {\r\n\t\tconst rect = dropZoneElement.getBoundingClientRect();\r\n\t\tconst [ distance, edge ] = getDistanceToNearestEdge( position, rect, [\r\n\t\t\t'top',\r\n\t\t\t'bottom',\r\n\t\t] );\r\n\r\n\t\t// If dragging over the top or bottom of the drop zone, insert the block\r\n\t\t// before or after the parent block. This only applies to blocks that use\r\n\t\t// a drop zone element, typically container blocks such as Group or Cover.\r\n\t\tif (\r\n\t\t\trect.height > MINIMUM_HEIGHT_FOR_THRESHOLD &&\r\n\t\t\tdistance < THRESHOLD_DISTANCE\r\n\t\t) {\r\n\t\t\tif ( edge === 'top' ) {\r\n\t\t\t\treturn [ rootBlockIndex, 'before' ];\r\n\t\t\t}\r\n\t\t\tif ( edge === 'bottom' ) {\r\n\t\t\t\treturn [ rootBlockIndex + 1, 'after' ];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst isRightToLeft = isRTL();\r\n\r\n\t// Allow before/after when dragging over the left/right edges of the drop zone.\r\n\tif ( dropZoneElement && parentBlockOrientation === 'horizontal' ) {\r\n\t\tconst rect = dropZoneElement.getBoundingClientRect();\r\n\t\tconst [ distance, edge ] = getDistanceToNearestEdge( position, rect, [\r\n\t\t\t'left',\r\n\t\t\t'right',\r\n\t\t] );\r\n\r\n\t\t// If dragging over the left or right of the drop zone, insert the block\r\n\t\t// before or after the parent block. This only applies to blocks that use\r\n\t\t// a drop zone element, typically container blocks such as Group.\r\n\t\tif (\r\n\t\t\trect.width > MINIMUM_WIDTH_FOR_THRESHOLD &&\r\n\t\t\tdistance < THRESHOLD_DISTANCE\r\n\t\t) {\r\n\t\t\tif (\r\n\t\t\t\t( isRightToLeft && edge === 'right' ) ||\r\n\t\t\t\t( ! isRightToLeft && edge === 'left' )\r\n\t\t\t) {\r\n\t\t\t\treturn [ rootBlockIndex, 'before' ];\r\n\t\t\t}\r\n\t\t\tif (\r\n\t\t\t\t( isRightToLeft && edge === 'left' ) ||\r\n\t\t\t\t( ! isRightToLeft && edge === 'right' )\r\n\t\t\t) {\r\n\t\t\t\treturn [ rootBlockIndex + 1, 'after' ];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tblocksData.forEach(\r\n\t\t( {\r\n\t\t\tisUnmodifiedDefaultBlock,\r\n\t\t\tgetBoundingClientRect,\r\n\t\t\tblockIndex,\r\n\t\t\tblockOrientation,\r\n\t\t} ) => {\r\n\t\t\tconst rect = getBoundingClientRect();\r\n\r\n\t\t\tlet [ distance, edge ] = getDistanceToNearestEdge(\r\n\t\t\t\tposition,\r\n\t\t\t\trect,\r\n\t\t\t\tallowedEdges\r\n\t\t\t);\r\n\t\t\t// If the the point is close to a side, prioritize that side.\r\n\t\t\tconst [ sideDistance, sideEdge ] = getDistanceToNearestEdge(\r\n\t\t\t\tposition,\r\n\t\t\t\trect,\r\n\t\t\t\t[ 'left', 'right' ]\r\n\t\t\t);\r\n\r\n\t\t\tconst isPointInsideRect = isPointContainedByRect( position, rect );\r\n\r\n\t\t\t// Prioritize the element if the point is inside of an unmodified default block.\r\n\t\t\tif ( isUnmodifiedDefaultBlock && isPointInsideRect ) {\r\n\t\t\t\tdistance = 0;\r\n\t\t\t} else if (\r\n\t\t\t\torientation === 'vertical' &&\r\n\t\t\t\tblockOrientation !== 'horizontal' &&\r\n\t\t\t\t( ( isPointInsideRect && sideDistance < THRESHOLD_DISTANCE ) ||\r\n\t\t\t\t\t( ! isPointInsideRect &&\r\n\t\t\t\t\t\tisPointWithinTopAndBottomBoundariesOfRect(\r\n\t\t\t\t\t\t\tposition,\r\n\t\t\t\t\t\t\trect\r\n\t\t\t\t\t\t) ) )\r\n\t\t\t) {\r\n\t\t\t\t/**\r\n\t\t\t\t * This condition should only apply when the layout is vertical (otherwise there's\r\n\t\t\t\t * no need to create a Row) and dropzones should only activate when the block is\r\n\t\t\t\t * either within and close to the sides of the target block or on its outer sides.\r\n\t\t\t\t */\r\n\t\t\t\ttargetBlockIndex = blockIndex;\r\n\t\t\t\tnearestSide = sideEdge;\r\n\t\t\t}\r\n\r\n\t\t\tif ( distance < minDistance ) {\r\n\t\t\t\t// Where the dropped block will be inserted on the nearest block.\r\n\t\t\t\tinsertPosition =\r\n\t\t\t\t\tedge === 'bottom' ||\r\n\t\t\t\t\t( ! isRightToLeft && edge === 'right' ) ||\r\n\t\t\t\t\t( isRightToLeft && edge === 'left' )\r\n\t\t\t\t\t\t? 'after'\r\n\t\t\t\t\t\t: 'before';\r\n\r\n\t\t\t\t// Update the currently known best candidate.\r\n\t\t\t\tminDistance = distance;\r\n\t\t\t\tnearestIndex = blockIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\tconst adjacentIndex =\r\n\t\tnearestIndex + ( insertPosition === 'after' ? 1 : -1 );\r\n\tconst isNearestBlockUnmodifiedDefaultBlock =\r\n\t\t!! blocksData[ nearestIndex ]?.isUnmodifiedDefaultBlock;\r\n\tconst isAdjacentBlockUnmodifiedDefaultBlock =\r\n\t\t!! blocksData[ adjacentIndex ]?.isUnmodifiedDefaultBlock;\r\n\r\n\t// If the target index is set then group with the block at that index.\r\n\tif ( targetBlockIndex !== null ) {\r\n\t\treturn [ targetBlockIndex, 'group', nearestSide ];\r\n\t}\r\n\t// If both blocks are not unmodified default blocks then just insert between them.\r\n\tif (\r\n\t\t! isNearestBlockUnmodifiedDefaultBlock &&\r\n\t\t! isAdjacentBlockUnmodifiedDefaultBlock\r\n\t) {\r\n\t\t// If the user is dropping to the trailing edge of the block\r\n\t\t// add 1 to the index to represent dragging after.\r\n\t\tconst insertionIndex =\r\n\t\t\tinsertPosition === 'after' ? nearestIndex + 1 : nearestIndex;\r\n\t\treturn [ insertionIndex, 'insert' ];\r\n\t}\r\n\r\n\t// Otherwise, replace the nearest unmodified default block.\r\n\treturn [\r\n\t\tisNearestBlockUnmodifiedDefaultBlock ? nearestIndex : adjacentIndex,\r\n\t\t'replace',\r\n\t];\r\n}\r\n\r\n/**\r\n * Check if the dragged blocks can be dropped on the target.\r\n * @param {Function} getBlockType\r\n * @param {Object[]} allowedBlocks\r\n * @param {string[]} draggedBlockNames\r\n * @param {string}   targetBlockName\r\n * @return {boolean} Whether the dragged blocks can be dropped on the target.\r\n */\r\nexport function isDropTargetValid(\r\n\tgetBlockType,\r\n\tallowedBlocks,\r\n\tdraggedBlockNames,\r\n\ttargetBlockName\r\n) {\r\n\t// At root level allowedBlocks is undefined and all blocks are allowed.\r\n\t// Otherwise, check if all dragged blocks are allowed.\r\n\tlet areBlocksAllowed = true;\r\n\tif ( allowedBlocks ) {\r\n\t\tconst allowedBlockNames = allowedBlocks?.map( ( { name } ) => name );\r\n\r\n\t\tareBlocksAllowed = draggedBlockNames.every( ( name ) =>\r\n\t\t\tallowedBlockNames?.includes( name )\r\n\t\t);\r\n\t}\r\n\r\n\t// Work out if dragged blocks have an allowed parent and if so\r\n\t// check target block matches the allowed parent.\r\n\tconst draggedBlockTypes = draggedBlockNames.map( ( name ) =>\r\n\t\tgetBlockType( name )\r\n\t);\r\n\tconst targetMatchesDraggedBlockParents = draggedBlockTypes.every(\r\n\t\t( block ) => {\r\n\t\t\tconst [ allowedParentName ] = block?.parent || [];\r\n\t\t\tif ( ! allowedParentName ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn allowedParentName === targetBlockName;\r\n\t\t}\r\n\t);\r\n\r\n\treturn areBlocksAllowed && targetMatchesDraggedBlockParents;\r\n}\r\n\r\n/**\r\n * Checks if the given element is an insertion point.\r\n *\r\n * @param {EventTarget|null} targetToCheck - The element to check.\r\n * @param {Document}         ownerDocument - The owner document of the element.\r\n * @return {boolean} True if the element is a insertion point, false otherwise.\r\n */\r\nfunction isInsertionPoint( targetToCheck, ownerDocument ) {\r\n\tconst { defaultView } = ownerDocument;\r\n\r\n\treturn !! (\r\n\t\tdefaultView &&\r\n\t\ttargetToCheck instanceof defaultView.HTMLElement &&\r\n\t\ttargetToCheck.dataset.isInsertionPoint\r\n\t);\r\n}\r\n\r\n/**\r\n * @typedef  {Object} WPBlockDropZoneConfig\r\n * @property {?HTMLElement} dropZoneElement Optional element to be used as the drop zone.\r\n * @property {string}       rootClientId    The root client id for the block list.\r\n */\r\n\r\n/**\r\n * A React hook that can be used to make a block list handle drag and drop.\r\n *\r\n * @param {WPBlockDropZoneConfig} dropZoneConfig configuration data for the drop zone.\r\n */\r\nexport default function useBlockDropZone( {\r\n\tdropZoneElement,\r\n\t// An undefined value represents a top-level block. Default to an empty\r\n\t// string for this so that `targetRootClientId` can be easily compared to\r\n\t// values returned by the `getRootBlockClientId` selector, which also uses\r\n\t// an empty string to represent top-level blocks.\r\n\trootClientId: targetRootClientId = '',\r\n\tparentClientId: parentBlockClientId = '',\r\n\tisDisabled = false,\r\n} = {} ) {\r\n\tconst registry = useRegistry();\r\n\tconst [ dropTarget, setDropTarget ] = useState( {\r\n\t\tindex: null,\r\n\t\toperation: 'insert',\r\n\t} );\r\n\r\n\tconst { getBlockType, getBlockVariations, getGroupingBlockName } =\r\n\t\tuseSelect( blocksStore );\r\n\tconst {\r\n\t\tcanInsertBlockType,\r\n\t\tgetBlockListSettings,\r\n\t\tgetBlocks,\r\n\t\tgetBlockIndex,\r\n\t\tgetDraggedBlockClientIds,\r\n\t\tgetBlockNamesByClientId,\r\n\t\tgetAllowedBlocks,\r\n\t\tisDragging,\r\n\t\tisGroupable,\r\n\t\tisZoomOutMode,\r\n\t\tgetSectionRootClientId,\r\n\t} = unlock( useSelect( blockEditorStore ) );\r\n\tconst {\r\n\t\tshowInsertionPoint,\r\n\t\thideInsertionPoint,\r\n\t\tstartDragging,\r\n\t\tstopDragging,\r\n\t} = unlock( useDispatch( blockEditorStore ) );\r\n\r\n\tconst onBlockDrop = useOnBlockDrop(\r\n\t\tdropTarget.operation === 'before' || dropTarget.operation === 'after'\r\n\t\t\t? parentBlockClientId\r\n\t\t\t: targetRootClientId,\r\n\t\tdropTarget.index,\r\n\t\t{\r\n\t\t\toperation: dropTarget.operation,\r\n\t\t\tnearestSide: dropTarget.nearestSide,\r\n\t\t}\r\n\t);\r\n\tconst throttled = useThrottle(\r\n\t\tuseCallback(\r\n\t\t\t( event, ownerDocument ) => {\r\n\t\t\t\tif ( ! isDragging() ) {\r\n\t\t\t\t\t// When dragging from the desktop, no drag start event is fired.\r\n\t\t\t\t\t// So, ensure that the drag state is set when the user drags over a drop zone.\r\n\t\t\t\t\tstartDragging();\r\n\t\t\t\t}\r\n\t\t\t\tconst allowedBlocks = getAllowedBlocks( targetRootClientId );\r\n\t\t\t\tconst targetBlockName = getBlockNamesByClientId( [\r\n\t\t\t\t\ttargetRootClientId,\r\n\t\t\t\t] )[ 0 ];\r\n\r\n\t\t\t\tconst draggedBlockNames = getBlockNamesByClientId(\r\n\t\t\t\t\tgetDraggedBlockClientIds()\r\n\t\t\t\t);\r\n\t\t\t\tconst isBlockDroppingAllowed = isDropTargetValid(\r\n\t\t\t\t\tgetBlockType,\r\n\t\t\t\t\tallowedBlocks,\r\n\t\t\t\t\tdraggedBlockNames,\r\n\t\t\t\t\ttargetBlockName\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif ( ! isBlockDroppingAllowed ) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst sectionRootClientId = getSectionRootClientId();\r\n\r\n\t\t\t\t// In Zoom Out mode, if the target is not the section root provided by settings then\r\n\t\t\t\t// do not allow dropping as the drop target is not within the root (that which is\r\n\t\t\t\t// treated as \"the content\" by Zoom Out Mode).\r\n\t\t\t\tif (\r\n\t\t\t\t\tisZoomOutMode() &&\r\n\t\t\t\t\tsectionRootClientId !== targetRootClientId\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst blocks = getBlocks( targetRootClientId );\r\n\r\n\t\t\t\t// The block list is empty, don't show the insertion point but still allow dropping.\r\n\t\t\t\tif ( blocks.length === 0 ) {\r\n\t\t\t\t\tregistry.batch( () => {\r\n\t\t\t\t\t\tsetDropTarget( {\r\n\t\t\t\t\t\t\tindex: 0,\r\n\t\t\t\t\t\t\toperation: 'insert',\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t\tshowInsertionPoint( targetRootClientId, 0, {\r\n\t\t\t\t\t\t\toperation: 'insert',\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t} );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst blocksData = blocks.map( ( block ) => {\r\n\t\t\t\t\tconst clientId = block.clientId;\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tisUnmodifiedDefaultBlock:\r\n\t\t\t\t\t\t\tgetIsUnmodifiedDefaultBlock( block ),\r\n\t\t\t\t\t\tgetBoundingClientRect: () =>\r\n\t\t\t\t\t\t\townerDocument\r\n\t\t\t\t\t\t\t\t.getElementById( `block-${ clientId }` )\r\n\t\t\t\t\t\t\t\t.getBoundingClientRect(),\r\n\t\t\t\t\t\tblockIndex: getBlockIndex( clientId ),\r\n\t\t\t\t\t\tblockOrientation:\r\n\t\t\t\t\t\t\tgetBlockListSettings( clientId )?.orientation,\r\n\t\t\t\t\t};\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tconst dropTargetPosition = getDropTargetPosition(\r\n\t\t\t\t\tblocksData,\r\n\t\t\t\t\t{ x: event.clientX, y: event.clientY },\r\n\t\t\t\t\tgetBlockListSettings( targetRootClientId )?.orientation,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdropZoneElement,\r\n\t\t\t\t\t\tparentBlockClientId,\r\n\t\t\t\t\t\tparentBlockOrientation: parentBlockClientId\r\n\t\t\t\t\t\t\t? getBlockListSettings( parentBlockClientId )\r\n\t\t\t\t\t\t\t\t\t?.orientation\r\n\t\t\t\t\t\t\t: undefined,\r\n\t\t\t\t\t\trootBlockIndex: getBlockIndex( targetRootClientId ),\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst [ targetIndex, operation, nearestSide ] =\r\n\t\t\t\t\tdropTargetPosition;\r\n\r\n\t\t\t\tif ( isZoomOutMode() && operation !== 'insert' ) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( operation === 'group' ) {\r\n\t\t\t\t\tconst targetBlock = blocks[ targetIndex ];\r\n\t\t\t\t\tconst areAllImages = [\r\n\t\t\t\t\t\ttargetBlock.name,\r\n\t\t\t\t\t\t...draggedBlockNames,\r\n\t\t\t\t\t].every( ( name ) => name === 'core/image' );\r\n\t\t\t\t\tconst canInsertGalleryBlock = canInsertBlockType(\r\n\t\t\t\t\t\t'core/gallery',\r\n\t\t\t\t\t\ttargetRootClientId\r\n\t\t\t\t\t);\r\n\t\t\t\t\tconst areGroupableBlocks = isGroupable( [\r\n\t\t\t\t\t\ttargetBlock.clientId,\r\n\t\t\t\t\t\tgetDraggedBlockClientIds(),\r\n\t\t\t\t\t] );\r\n\t\t\t\t\tconst groupBlockVariations = getBlockVariations(\r\n\t\t\t\t\t\tgetGroupingBlockName(),\r\n\t\t\t\t\t\t'block'\r\n\t\t\t\t\t);\r\n\t\t\t\t\tconst canInsertRow =\r\n\t\t\t\t\t\tgroupBlockVariations &&\r\n\t\t\t\t\t\tgroupBlockVariations.find(\r\n\t\t\t\t\t\t\t( { name } ) => name === 'group-row'\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// If the dragged blocks and the target block are all images,\r\n\t\t\t\t\t// check if it is creatable either a Row variation or a Gallery block.\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tareAllImages &&\r\n\t\t\t\t\t\t! canInsertGalleryBlock &&\r\n\t\t\t\t\t\t( ! areGroupableBlocks || ! canInsertRow )\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// If the dragged blocks and the target block are not all images,\r\n\t\t\t\t\t// check if it is creatable a Row variation.\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t! areAllImages &&\r\n\t\t\t\t\t\t( ! areGroupableBlocks || ! canInsertRow )\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tregistry.batch( () => {\r\n\t\t\t\t\tsetDropTarget( {\r\n\t\t\t\t\t\tindex: targetIndex,\r\n\t\t\t\t\t\toperation,\r\n\t\t\t\t\t\tnearestSide,\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tconst insertionPointClientId = [\r\n\t\t\t\t\t\t'before',\r\n\t\t\t\t\t\t'after',\r\n\t\t\t\t\t].includes( operation )\r\n\t\t\t\t\t\t? parentBlockClientId\r\n\t\t\t\t\t\t: targetRootClientId;\r\n\r\n\t\t\t\t\tshowInsertionPoint( insertionPointClientId, targetIndex, {\r\n\t\t\t\t\t\toperation,\r\n\t\t\t\t\t\tnearestSide,\r\n\t\t\t\t\t} );\r\n\t\t\t\t} );\r\n\t\t\t},\r\n\t\t\t[\r\n\t\t\t\tisDragging,\r\n\t\t\t\tgetAllowedBlocks,\r\n\t\t\t\ttargetRootClientId,\r\n\t\t\t\tgetBlockNamesByClientId,\r\n\t\t\t\tgetDraggedBlockClientIds,\r\n\t\t\t\tgetBlockType,\r\n\t\t\t\tgetSectionRootClientId,\r\n\t\t\t\tisZoomOutMode,\r\n\t\t\t\tgetBlocks,\r\n\t\t\t\tgetBlockListSettings,\r\n\t\t\t\tdropZoneElement,\r\n\t\t\t\tparentBlockClientId,\r\n\t\t\t\tgetBlockIndex,\r\n\t\t\t\tregistry,\r\n\t\t\t\tstartDragging,\r\n\t\t\t\tshowInsertionPoint,\r\n\t\t\t\tcanInsertBlockType,\r\n\t\t\t\tisGroupable,\r\n\t\t\t\tgetBlockVariations,\r\n\t\t\t\tgetGroupingBlockName,\r\n\t\t\t]\r\n\t\t),\r\n\t\t200\r\n\t);\r\n\r\n\treturn useDropZone( {\r\n\t\tdropZoneElement,\r\n\t\tisDisabled,\r\n\t\tonDrop: onBlockDrop,\r\n\t\tonDragOver( event ) {\r\n\t\t\t// `currentTarget` is only available while the event is being\r\n\t\t\t// handled, so get it now and pass it to the thottled function.\r\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\r\n\t\t\tthrottled( event, event.currentTarget.ownerDocument );\r\n\t\t},\r\n\t\tonDragLeave( event ) {\r\n\t\t\tconst { ownerDocument } = event.currentTarget;\r\n\r\n\t\t\t// If the drag event is leaving the drop zone and entering an insertion point,\r\n\t\t\t// do not hide the insertion point as it is conceptually within the dropzone.\r\n\t\t\tif (\r\n\t\t\t\tisInsertionPoint( event.relatedTarget, ownerDocument ) ||\r\n\t\t\t\tisInsertionPoint( event.target, ownerDocument )\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthrottled.cancel();\r\n\t\t\thideInsertionPoint();\r\n\t\t},\r\n\t\tonDragEnd() {\r\n\t\t\tthrottled.cancel();\r\n\t\t\tstopDragging();\r\n\t\t\thideInsertionPoint();\r\n\t\t},\r\n\t} );\r\n}\r\n"],"mappings":"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","ignoreList":[]}