{"version":3,"names":["useCallback","cloneBlock","createBlock","findTransform","getBlockTransforms","pasteHandler","store","blocksStore","useDispatch","useSelect","useRegistry","getFilesFromDataTransfer","blockEditorStore","parseDropEvent","event","result","srcRootClientId","srcClientIds","srcIndex","type","blocks","dataTransfer","Object","assign","JSON","parse","getData","err","onBlockDrop","targetRootClientId","targetBlockIndex","getBlockIndex","getClientIdsOfDescendants","moveBlocks","insertOrReplaceBlocks","clearSelectedBlock","operation","getBlock","sourceRootClientId","sourceClientIds","dropType","blocksToInsert","map","block","sourceBlockIndex","includes","some","id","clientId","isAtSameLevel","draggedBlockCount","length","insertIndex","onFilesDrop","getSettings","updateBlockAttributes","canInsertBlockType","files","mediaUpload","transformation","transform","blockName","isMatch","onHTMLDrop","HTML","mode","useOnBlockDrop","options","nearestSide","getBlockOrder","getBlocksByClientId","getGroupingBlockName","insertBlocks","moveBlocksToPosition","replaceBlocks","removeBlocks","registry","updateSelection","initialPosition","clientIdsToReplace","Array","isArray","clientIds","undefined","targetBlock","push","unshift","groupInnerBlocks","name","attributes","innerBlocks","areAllImages","every","galleryBlock","wrappedBlocks","layout","flexWrap","sourceBlocks","targetBlockClientIds","targetBlockClientId","batch","_onDrop","_onFilesDrop","_onHTMLDrop","html"],"sources":["@wordpress/block-editor/src/components/use-on-block-drop/index.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useCallback } from '@wordpress/element';\r\nimport {\r\n\tcloneBlock,\r\n\tcreateBlock,\r\n\tfindTransform,\r\n\tgetBlockTransforms,\r\n\tpasteHandler,\r\n\tstore as blocksStore,\r\n} from '@wordpress/blocks';\r\nimport { useDispatch, useSelect, useRegistry } from '@wordpress/data';\r\nimport { getFilesFromDataTransfer } from '@wordpress/dom';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store as blockEditorStore } from '../../store';\r\n\r\n/** @typedef {import('react').SyntheticEvent} SyntheticEvent */\r\n/** @typedef {import('./types').WPDropOperation} WPDropOperation */\r\n\r\n/**\r\n * Retrieve the data for a block drop event.\r\n *\r\n * @param {SyntheticEvent} event The drop event.\r\n *\r\n * @return {Object} An object with block drag and drop data.\r\n */\r\nexport function parseDropEvent( event ) {\r\n\tlet result = {\r\n\t\tsrcRootClientId: null,\r\n\t\tsrcClientIds: null,\r\n\t\tsrcIndex: null,\r\n\t\ttype: null,\r\n\t\tblocks: null,\r\n\t};\r\n\r\n\tif ( ! event.dataTransfer ) {\r\n\t\treturn result;\r\n\t}\r\n\r\n\ttry {\r\n\t\tresult = Object.assign(\r\n\t\t\tresult,\r\n\t\t\tJSON.parse( event.dataTransfer.getData( 'wp-blocks' ) )\r\n\t\t);\r\n\t} catch ( err ) {\r\n\t\treturn result;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * A function that returns an event handler function for block drop events.\r\n *\r\n * @param {string}   targetRootClientId        The root client id where the block(s) will be inserted.\r\n * @param {number}   targetBlockIndex          The index where the block(s) will be inserted.\r\n * @param {Function} getBlockIndex             A function that gets the index of a block.\r\n * @param {Function} getClientIdsOfDescendants A function that gets the client ids of descendant blocks.\r\n * @param {Function} moveBlocks                A function that moves blocks.\r\n * @param {Function} insertOrReplaceBlocks     A function that inserts or replaces blocks.\r\n * @param {Function} clearSelectedBlock        A function that clears block selection.\r\n * @param {string}   operation                 The type of operation to perform on drop. Could be `insert` or `replace` or `group`.\r\n * @param {Function} getBlock                  A function that returns a block given its client id.\r\n * @return {Function} The event handler for a block drop event.\r\n */\r\nexport function onBlockDrop(\r\n\ttargetRootClientId,\r\n\ttargetBlockIndex,\r\n\tgetBlockIndex,\r\n\tgetClientIdsOfDescendants,\r\n\tmoveBlocks,\r\n\tinsertOrReplaceBlocks,\r\n\tclearSelectedBlock,\r\n\toperation,\r\n\tgetBlock\r\n) {\r\n\treturn ( event ) => {\r\n\t\tconst {\r\n\t\t\tsrcRootClientId: sourceRootClientId,\r\n\t\t\tsrcClientIds: sourceClientIds,\r\n\t\t\ttype: dropType,\r\n\t\t\tblocks,\r\n\t\t} = parseDropEvent( event );\r\n\r\n\t\t// If the user is inserting a block.\r\n\t\tif ( dropType === 'inserter' ) {\r\n\t\t\tclearSelectedBlock();\r\n\t\t\tconst blocksToInsert = blocks.map( ( block ) =>\r\n\t\t\t\tcloneBlock( block )\r\n\t\t\t);\r\n\t\t\tinsertOrReplaceBlocks( blocksToInsert, true, null );\r\n\t\t}\r\n\r\n\t\t// If the user is moving a block.\r\n\t\tif ( dropType === 'block' ) {\r\n\t\t\tconst sourceBlockIndex = getBlockIndex( sourceClientIds[ 0 ] );\r\n\r\n\t\t\t// If the user is dropping to the same position, return early.\r\n\t\t\tif (\r\n\t\t\t\tsourceRootClientId === targetRootClientId &&\r\n\t\t\t\tsourceBlockIndex === targetBlockIndex\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// If the user is attempting to drop a block within its own\r\n\t\t\t// nested blocks, return early as this would create infinite\r\n\t\t\t// recursion.\r\n\t\t\tif (\r\n\t\t\t\tsourceClientIds.includes( targetRootClientId ) ||\r\n\t\t\t\tgetClientIdsOfDescendants( sourceClientIds ).some(\r\n\t\t\t\t\t( id ) => id === targetRootClientId\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// If the user is dropping a block over another block, replace both blocks\r\n\t\t\t// with a group block containing them\r\n\t\t\tif ( operation === 'group' ) {\r\n\t\t\t\tconst blocksToInsert = sourceClientIds.map( ( clientId ) =>\r\n\t\t\t\t\tgetBlock( clientId )\r\n\t\t\t\t);\r\n\t\t\t\tinsertOrReplaceBlocks(\r\n\t\t\t\t\tblocksToInsert,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\tsourceClientIds\r\n\t\t\t\t);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst isAtSameLevel = sourceRootClientId === targetRootClientId;\r\n\t\t\tconst draggedBlockCount = sourceClientIds.length;\r\n\r\n\t\t\t// If the block is kept at the same level and moved downwards,\r\n\t\t\t// subtract to take into account that the blocks being dragged\r\n\t\t\t// were removed from the block list above the insertion point.\r\n\t\t\tconst insertIndex =\r\n\t\t\t\tisAtSameLevel && sourceBlockIndex < targetBlockIndex\r\n\t\t\t\t\t? targetBlockIndex - draggedBlockCount\r\n\t\t\t\t\t: targetBlockIndex;\r\n\r\n\t\t\tmoveBlocks( sourceClientIds, sourceRootClientId, insertIndex );\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/**\r\n * A function that returns an event handler function for block-related file drop events.\r\n *\r\n * @param {string}   targetRootClientId    The root client id where the block(s) will be inserted.\r\n * @param {Function} getSettings           A function that gets the block editor settings.\r\n * @param {Function} updateBlockAttributes A function that updates a block's attributes.\r\n * @param {Function} canInsertBlockType    A function that returns checks whether a block type can be inserted.\r\n * @param {Function} insertOrReplaceBlocks A function that inserts or replaces blocks.\r\n *\r\n * @return {Function} The event handler for a block-related file drop event.\r\n */\r\nexport function onFilesDrop(\r\n\ttargetRootClientId,\r\n\tgetSettings,\r\n\tupdateBlockAttributes,\r\n\tcanInsertBlockType,\r\n\tinsertOrReplaceBlocks\r\n) {\r\n\treturn ( files ) => {\r\n\t\tif ( ! getSettings().mediaUpload ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst transformation = findTransform(\r\n\t\t\tgetBlockTransforms( 'from' ),\r\n\t\t\t( transform ) =>\r\n\t\t\t\ttransform.type === 'files' &&\r\n\t\t\t\tcanInsertBlockType( transform.blockName, targetRootClientId ) &&\r\n\t\t\t\ttransform.isMatch( files )\r\n\t\t);\r\n\r\n\t\tif ( transformation ) {\r\n\t\t\tconst blocks = transformation.transform(\r\n\t\t\t\tfiles,\r\n\t\t\t\tupdateBlockAttributes\r\n\t\t\t);\r\n\t\t\tinsertOrReplaceBlocks( blocks );\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/**\r\n * A function that returns an event handler function for block-related HTML drop events.\r\n *\r\n * @param {Function} insertOrReplaceBlocks A function that inserts or replaces blocks.\r\n *\r\n * @return {Function} The event handler for a block-related HTML drop event.\r\n */\r\nexport function onHTMLDrop( insertOrReplaceBlocks ) {\r\n\treturn ( HTML ) => {\r\n\t\tconst blocks = pasteHandler( { HTML, mode: 'BLOCKS' } );\r\n\r\n\t\tif ( blocks.length ) {\r\n\t\t\tinsertOrReplaceBlocks( blocks );\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/**\r\n * A React hook for handling block drop events.\r\n *\r\n * @param {string}          targetRootClientId  The root client id where the block(s) will be inserted.\r\n * @param {number}          targetBlockIndex    The index where the block(s) will be inserted.\r\n * @param {Object}          options             The optional options.\r\n * @param {WPDropOperation} [options.operation] The type of operation to perform on drop. Could be `insert` or `replace` for now.\r\n *\r\n * @return {Function} A function to be passed to the onDrop handler.\r\n */\r\nexport default function useOnBlockDrop(\r\n\ttargetRootClientId,\r\n\ttargetBlockIndex,\r\n\toptions = {}\r\n) {\r\n\tconst { operation = 'insert', nearestSide = 'right' } = options;\r\n\tconst {\r\n\t\tcanInsertBlockType,\r\n\t\tgetBlockIndex,\r\n\t\tgetClientIdsOfDescendants,\r\n\t\tgetBlockOrder,\r\n\t\tgetBlocksByClientId,\r\n\t\tgetSettings,\r\n\t\tgetBlock,\r\n\t} = useSelect( blockEditorStore );\r\n\tconst { getGroupingBlockName } = useSelect( blocksStore );\r\n\tconst {\r\n\t\tinsertBlocks,\r\n\t\tmoveBlocksToPosition,\r\n\t\tupdateBlockAttributes,\r\n\t\tclearSelectedBlock,\r\n\t\treplaceBlocks,\r\n\t\tremoveBlocks,\r\n\t} = useDispatch( blockEditorStore );\r\n\tconst registry = useRegistry();\r\n\r\n\tconst insertOrReplaceBlocks = useCallback(\r\n\t\t(\r\n\t\t\tblocks,\r\n\t\t\tupdateSelection = true,\r\n\t\t\tinitialPosition = 0,\r\n\t\t\tclientIdsToReplace = []\r\n\t\t) => {\r\n\t\t\tif ( ! Array.isArray( blocks ) ) {\r\n\t\t\t\tblocks = [ blocks ];\r\n\t\t\t}\r\n\t\t\tconst clientIds = getBlockOrder( targetRootClientId );\r\n\t\t\tconst clientId = clientIds[ targetBlockIndex ];\r\n\t\t\tif ( operation === 'replace' ) {\r\n\t\t\t\treplaceBlocks( clientId, blocks, undefined, initialPosition );\r\n\t\t\t} else if ( operation === 'group' ) {\r\n\t\t\t\tconst targetBlock = getBlock( clientId );\r\n\t\t\t\tif ( nearestSide === 'left' ) {\r\n\t\t\t\t\tblocks.push( targetBlock );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tblocks.unshift( targetBlock );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst groupInnerBlocks = blocks.map( ( block ) => {\r\n\t\t\t\t\treturn createBlock(\r\n\t\t\t\t\t\tblock.name,\r\n\t\t\t\t\t\tblock.attributes,\r\n\t\t\t\t\t\tblock.innerBlocks\r\n\t\t\t\t\t);\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tconst areAllImages = blocks.every( ( block ) => {\r\n\t\t\t\t\treturn block.name === 'core/image';\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tconst galleryBlock = canInsertBlockType(\r\n\t\t\t\t\t'core/gallery',\r\n\t\t\t\t\ttargetRootClientId\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst wrappedBlocks = createBlock(\r\n\t\t\t\t\tareAllImages && galleryBlock\r\n\t\t\t\t\t\t? 'core/gallery'\r\n\t\t\t\t\t\t: getGroupingBlockName(),\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlayout: {\r\n\t\t\t\t\t\t\ttype: 'flex',\r\n\t\t\t\t\t\t\tflexWrap:\r\n\t\t\t\t\t\t\t\tareAllImages && galleryBlock ? null : 'nowrap',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t\tgroupInnerBlocks\r\n\t\t\t\t);\r\n\t\t\t\t// Need to make sure both the target block and the block being dragged are replaced\r\n\t\t\t\t// otherwise the dragged block will be duplicated.\r\n\t\t\t\treplaceBlocks(\r\n\t\t\t\t\t[ clientId, ...clientIdsToReplace ],\r\n\t\t\t\t\twrappedBlocks,\r\n\t\t\t\t\tundefined,\r\n\t\t\t\t\tinitialPosition\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tinsertBlocks(\r\n\t\t\t\t\tblocks,\r\n\t\t\t\t\ttargetBlockIndex,\r\n\t\t\t\t\ttargetRootClientId,\r\n\t\t\t\t\tupdateSelection,\r\n\t\t\t\t\tinitialPosition\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[\r\n\t\t\tgetBlockOrder,\r\n\t\t\ttargetRootClientId,\r\n\t\t\ttargetBlockIndex,\r\n\t\t\toperation,\r\n\t\t\treplaceBlocks,\r\n\t\t\tgetBlock,\r\n\t\t\tnearestSide,\r\n\t\t\tcanInsertBlockType,\r\n\t\t\tgetGroupingBlockName,\r\n\t\t\tinsertBlocks,\r\n\t\t]\r\n\t);\r\n\r\n\tconst moveBlocks = useCallback(\r\n\t\t( sourceClientIds, sourceRootClientId, insertIndex ) => {\r\n\t\t\tif ( operation === 'replace' ) {\r\n\t\t\t\tconst sourceBlocks = getBlocksByClientId( sourceClientIds );\r\n\t\t\t\tconst targetBlockClientIds =\r\n\t\t\t\t\tgetBlockOrder( targetRootClientId );\r\n\t\t\t\tconst targetBlockClientId =\r\n\t\t\t\t\ttargetBlockClientIds[ targetBlockIndex ];\r\n\r\n\t\t\t\tregistry.batch( () => {\r\n\t\t\t\t\t// Remove the source blocks.\r\n\t\t\t\t\tremoveBlocks( sourceClientIds, false );\r\n\t\t\t\t\t// Replace the target block with the source blocks.\r\n\t\t\t\t\treplaceBlocks(\r\n\t\t\t\t\t\ttargetBlockClientId,\r\n\t\t\t\t\t\tsourceBlocks,\r\n\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\t0\r\n\t\t\t\t\t);\r\n\t\t\t\t} );\r\n\t\t\t} else {\r\n\t\t\t\tmoveBlocksToPosition(\r\n\t\t\t\t\tsourceClientIds,\r\n\t\t\t\t\tsourceRootClientId,\r\n\t\t\t\t\ttargetRootClientId,\r\n\t\t\t\t\tinsertIndex\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[\r\n\t\t\toperation,\r\n\t\t\tgetBlockOrder,\r\n\t\t\tgetBlocksByClientId,\r\n\t\t\tmoveBlocksToPosition,\r\n\t\t\tregistry,\r\n\t\t\tremoveBlocks,\r\n\t\t\treplaceBlocks,\r\n\t\t\ttargetBlockIndex,\r\n\t\t\ttargetRootClientId,\r\n\t\t]\r\n\t);\r\n\r\n\tconst _onDrop = onBlockDrop(\r\n\t\ttargetRootClientId,\r\n\t\ttargetBlockIndex,\r\n\t\tgetBlockIndex,\r\n\t\tgetClientIdsOfDescendants,\r\n\t\tmoveBlocks,\r\n\t\tinsertOrReplaceBlocks,\r\n\t\tclearSelectedBlock,\r\n\t\toperation,\r\n\t\tgetBlock\r\n\t);\r\n\tconst _onFilesDrop = onFilesDrop(\r\n\t\ttargetRootClientId,\r\n\t\tgetSettings,\r\n\t\tupdateBlockAttributes,\r\n\t\tcanInsertBlockType,\r\n\t\tinsertOrReplaceBlocks\r\n\t);\r\n\tconst _onHTMLDrop = onHTMLDrop( insertOrReplaceBlocks );\r\n\r\n\treturn ( event ) => {\r\n\t\tconst files = getFilesFromDataTransfer( event.dataTransfer );\r\n\t\tconst html = event.dataTransfer.getData( 'text/html' );\r\n\r\n\t\t/**\r\n\t\t * From Windows Chrome 96, the `event.dataTransfer` returns both file object and HTML.\r\n\t\t * The order of the checks is important to recognise the HTML drop.\r\n\t\t */\r\n\t\tif ( html ) {\r\n\t\t\t_onHTMLDrop( html );\r\n\t\t} else if ( files.length ) {\r\n\t\t\t_onFilesDrop( files );\r\n\t\t} else {\r\n\t\t\t_onDrop( event );\r\n\t\t}\r\n\t};\r\n}\r\n"],"mappings":"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","ignoreList":[]}