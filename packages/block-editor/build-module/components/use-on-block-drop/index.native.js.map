{"version":3,"names":["cloneBlock","useDispatch","useSelect","store","blockEditorStore","onBlockDrop","getBlockIndex","getClientIdsOfDescendants","moveBlocksToPosition","insertBlocks","clearSelectedBlock","blocks","srcClientIds","sourceClientIds","srcRootClientId","sourceRootClientId","targetBlockIndex","targetRootClientId","type","dropType","blocksToInsert","map","block","sourceBlockIndex","includes","some","id","isAtSameLevel","draggedBlockCount","length","insertIndex","useOnBlockDrop"],"sources":["@wordpress/block-editor/src/components/use-on-block-drop/index.native.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { cloneBlock } from '@wordpress/blocks';\r\nimport { useDispatch, useSelect } from '@wordpress/data';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store as blockEditorStore } from '../../store';\r\n\r\n/**\r\n * A function that returns an event handler function for block drop events.\r\n *\r\n * @param {Function} getBlockIndex             A function that gets the index of a block.\r\n * @param {Function} getClientIdsOfDescendants A function that gets the client ids of descendant blocks.\r\n * @param {Function} moveBlocksToPosition      A function that moves blocks.\r\n * @param {Function} insertBlocks              A function that inserts blocks.\r\n * @param {Function} clearSelectedBlock        A function that clears block selection.\r\n * @return {Function} The event handler for a block drop event.\r\n */\r\nexport function onBlockDrop(\r\n\tgetBlockIndex,\r\n\tgetClientIdsOfDescendants,\r\n\tmoveBlocksToPosition,\r\n\tinsertBlocks,\r\n\tclearSelectedBlock\r\n) {\r\n\treturn ( {\r\n\t\tblocks,\r\n\t\tsrcClientIds: sourceClientIds,\r\n\t\tsrcRootClientId: sourceRootClientId,\r\n\t\ttargetBlockIndex,\r\n\t\ttargetRootClientId,\r\n\t\ttype: dropType,\r\n\t} ) => {\r\n\t\t// If the user is inserting a block.\r\n\t\tif ( dropType === 'inserter' ) {\r\n\t\t\tclearSelectedBlock();\r\n\t\t\tconst blocksToInsert = blocks.map( ( block ) =>\r\n\t\t\t\tcloneBlock( block )\r\n\t\t\t);\r\n\t\t\tinsertBlocks(\r\n\t\t\t\tblocksToInsert,\r\n\t\t\t\ttargetBlockIndex,\r\n\t\t\t\ttargetRootClientId,\r\n\t\t\t\ttrue,\r\n\t\t\t\tnull\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// If the user is moving a block.\r\n\t\tif ( dropType === 'block' ) {\r\n\t\t\tconst sourceBlockIndex = getBlockIndex( sourceClientIds[ 0 ] );\r\n\r\n\t\t\t// If the user is dropping to the same position, return early.\r\n\t\t\tif (\r\n\t\t\t\tsourceRootClientId === targetRootClientId &&\r\n\t\t\t\tsourceBlockIndex === targetBlockIndex\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// If the user is attempting to drop a block within its own\r\n\t\t\t// nested blocks, return early as this would create infinite\r\n\t\t\t// recursion.\r\n\t\t\tif (\r\n\t\t\t\tsourceClientIds.includes( targetRootClientId ) ||\r\n\t\t\t\tgetClientIdsOfDescendants( sourceClientIds ).some(\r\n\t\t\t\t\t( id ) => id === targetRootClientId\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst isAtSameLevel = sourceRootClientId === targetRootClientId;\r\n\t\t\tconst draggedBlockCount = sourceClientIds.length;\r\n\r\n\t\t\t// If the block is kept at the same level and moved downwards,\r\n\t\t\t// subtract to take into account that the blocks being dragged\r\n\t\t\t// were removed from the block list above the insertion point.\r\n\t\t\tconst insertIndex =\r\n\t\t\t\tisAtSameLevel && sourceBlockIndex < targetBlockIndex\r\n\t\t\t\t\t? targetBlockIndex - draggedBlockCount\r\n\t\t\t\t\t: targetBlockIndex;\r\n\r\n\t\t\tmoveBlocksToPosition(\r\n\t\t\t\tsourceClientIds,\r\n\t\t\t\tsourceRootClientId,\r\n\t\t\t\ttargetRootClientId,\r\n\t\t\t\tinsertIndex\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/**\r\n * A React hook for handling block drop events.\r\n *\r\n * @return {Function} The event handler for a block drop event.\r\n */\r\nexport default function useOnBlockDrop() {\r\n\tconst { getBlockIndex, getClientIdsOfDescendants } =\r\n\t\tuseSelect( blockEditorStore );\r\n\tconst { insertBlocks, moveBlocksToPosition, clearSelectedBlock } =\r\n\t\tuseDispatch( blockEditorStore );\r\n\r\n\treturn onBlockDrop(\r\n\t\tgetBlockIndex,\r\n\t\tgetClientIdsOfDescendants,\r\n\t\tmoveBlocksToPosition,\r\n\t\tinsertBlocks,\r\n\t\tclearSelectedBlock\r\n\t);\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,WAAW,EAAEC,SAAS,QAAQ,iBAAiB;;AAExD;AACA;AACA;AACA,SAASC,KAAK,IAAIC,gBAAgB,QAAQ,aAAa;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAC1BC,aAAa,EACbC,yBAAyB,EACzBC,oBAAoB,EACpBC,YAAY,EACZC,kBAAkB,EACjB;EACD,OAAO,CAAE;IACRC,MAAM;IACNC,YAAY,EAAEC,eAAe;IAC7BC,eAAe,EAAEC,kBAAkB;IACnCC,gBAAgB;IAChBC,kBAAkB;IAClBC,IAAI,EAAEC;EACP,CAAC,KAAM;IACN;IACA,IAAKA,QAAQ,KAAK,UAAU,EAAG;MAC9BT,kBAAkB,CAAC,CAAC;MACpB,MAAMU,cAAc,GAAGT,MAAM,CAACU,GAAG,CAAIC,KAAK,IACzCtB,UAAU,CAAEsB,KAAM,CACnB,CAAC;MACDb,YAAY,CACXW,cAAc,EACdJ,gBAAgB,EAChBC,kBAAkB,EAClB,IAAI,EACJ,IACD,CAAC;IACF;;IAEA;IACA,IAAKE,QAAQ,KAAK,OAAO,EAAG;MAC3B,MAAMI,gBAAgB,GAAGjB,aAAa,CAAEO,eAAe,CAAE,CAAC,CAAG,CAAC;;MAE9D;MACA,IACCE,kBAAkB,KAAKE,kBAAkB,IACzCM,gBAAgB,KAAKP,gBAAgB,EACpC;QACD;MACD;;MAEA;MACA;MACA;MACA,IACCH,eAAe,CAACW,QAAQ,CAAEP,kBAAmB,CAAC,IAC9CV,yBAAyB,CAAEM,eAAgB,CAAC,CAACY,IAAI,CAC9CC,EAAE,IAAMA,EAAE,KAAKT,kBAClB,CAAC,EACA;QACD;MACD;MAEA,MAAMU,aAAa,GAAGZ,kBAAkB,KAAKE,kBAAkB;MAC/D,MAAMW,iBAAiB,GAAGf,eAAe,CAACgB,MAAM;;MAEhD;MACA;MACA;MACA,MAAMC,WAAW,GAChBH,aAAa,IAAIJ,gBAAgB,GAAGP,gBAAgB,GACjDA,gBAAgB,GAAGY,iBAAiB,GACpCZ,gBAAgB;MAEpBR,oBAAoB,CACnBK,eAAe,EACfE,kBAAkB,EAClBE,kBAAkB,EAClBa,WACD,CAAC;IACF;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,cAAcA,CAAA,EAAG;EACxC,MAAM;IAAEzB,aAAa;IAAEC;EAA0B,CAAC,GACjDL,SAAS,CAAEE,gBAAiB,CAAC;EAC9B,MAAM;IAAEK,YAAY;IAAED,oBAAoB;IAAEE;EAAmB,CAAC,GAC/DT,WAAW,CAAEG,gBAAiB,CAAC;EAEhC,OAAOC,WAAW,CACjBC,aAAa,EACbC,yBAAyB,EACzBC,oBAAoB,EACpBC,YAAY,EACZC,kBACD,CAAC;AACF","ignoreList":[]}