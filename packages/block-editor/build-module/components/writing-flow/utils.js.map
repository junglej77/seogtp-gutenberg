{"version":3,"names":["__unstableStripHTML","stripHTML","serialize","createBlock","pasteHandler","findTransform","getBlockTransforms","store","blocksStore","getPasteEventData","blockEditorStore","requiresWrapperOnCopy","Symbol","setClipboardBlocks","event","blocks","registry","_blocks","firstBlock","firstBlockType","select","getBlockType","name","getBlockRootClientId","getBlockName","getBlockAttributes","wrapperBlockClientId","clientId","wrapperBlockName","serialized","clipboardData","setData","toPlainText","getPasteBlocks","canUserUseUnfilteredHTML","plainText","html","files","length","fromTransforms","reduce","accumulator","file","transformation","transform","type","isMatch","push","flat","HTML","mode","replace","trim","getSelectionRoot","ownerDocument","defaultView","anchorNode","focusNode","getSelection","anchorElement","nodeType","ELEMENT_NODE","parentElement","closest","contains"],"sources":["@wordpress/block-editor/src/components/writing-flow/utils.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { __unstableStripHTML as stripHTML } from '@wordpress/dom';\r\nimport {\r\n\tserialize,\r\n\tcreateBlock,\r\n\tpasteHandler,\r\n\tfindTransform,\r\n\tgetBlockTransforms,\r\n\tstore as blocksStore,\r\n} from '@wordpress/blocks';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { getPasteEventData } from '../../utils/pasting';\r\nimport { store as blockEditorStore } from '../../store';\r\n\r\nexport const requiresWrapperOnCopy = Symbol( 'requiresWrapperOnCopy' );\r\n\r\n/**\r\n * Sets the clipboard data for the provided blocks, with both HTML and plain\r\n * text representations.\r\n *\r\n * @param {ClipboardEvent} event    Clipboard event.\r\n * @param {WPBlock[]}      blocks   Blocks to set as clipboard data.\r\n * @param {Object}         registry The registry to select from.\r\n */\r\nexport function setClipboardBlocks( event, blocks, registry ) {\r\n\tlet _blocks = blocks;\r\n\r\n\tconst [ firstBlock ] = blocks;\r\n\r\n\tif ( firstBlock ) {\r\n\t\tconst firstBlockType = registry\r\n\t\t\t.select( blocksStore )\r\n\t\t\t.getBlockType( firstBlock.name );\r\n\r\n\t\tif ( firstBlockType[ requiresWrapperOnCopy ] ) {\r\n\t\t\tconst { getBlockRootClientId, getBlockName, getBlockAttributes } =\r\n\t\t\t\tregistry.select( blockEditorStore );\r\n\t\t\tconst wrapperBlockClientId = getBlockRootClientId(\r\n\t\t\t\tfirstBlock.clientId\r\n\t\t\t);\r\n\t\t\tconst wrapperBlockName = getBlockName( wrapperBlockClientId );\r\n\r\n\t\t\tif ( wrapperBlockName ) {\r\n\t\t\t\t_blocks = createBlock(\r\n\t\t\t\t\twrapperBlockName,\r\n\t\t\t\t\tgetBlockAttributes( wrapperBlockClientId ),\r\n\t\t\t\t\t_blocks\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst serialized = serialize( _blocks );\r\n\r\n\tevent.clipboardData.setData( 'text/plain', toPlainText( serialized ) );\r\n\tevent.clipboardData.setData( 'text/html', serialized );\r\n}\r\n\r\n/**\r\n * Returns the blocks to be pasted from the clipboard event.\r\n *\r\n * @param {ClipboardEvent} event                    The clipboard event.\r\n * @param {boolean}        canUserUseUnfilteredHTML Whether the user can or can't post unfiltered HTML.\r\n * @return {Array|string} A list of blocks or a string, depending on `handlerMode`.\r\n */\r\nexport function getPasteBlocks( event, canUserUseUnfilteredHTML ) {\r\n\tconst { plainText, html, files } = getPasteEventData( event );\r\n\tlet blocks = [];\r\n\r\n\tif ( files.length ) {\r\n\t\tconst fromTransforms = getBlockTransforms( 'from' );\r\n\t\tblocks = files\r\n\t\t\t.reduce( ( accumulator, file ) => {\r\n\t\t\t\tconst transformation = findTransform(\r\n\t\t\t\t\tfromTransforms,\r\n\t\t\t\t\t( transform ) =>\r\n\t\t\t\t\t\ttransform.type === 'files' &&\r\n\t\t\t\t\t\ttransform.isMatch( [ file ] )\r\n\t\t\t\t);\r\n\t\t\t\tif ( transformation ) {\r\n\t\t\t\t\taccumulator.push( transformation.transform( [ file ] ) );\r\n\t\t\t\t}\r\n\t\t\t\treturn accumulator;\r\n\t\t\t}, [] )\r\n\t\t\t.flat();\r\n\t} else {\r\n\t\tblocks = pasteHandler( {\r\n\t\t\tHTML: html,\r\n\t\t\tplainText,\r\n\t\t\tmode: 'BLOCKS',\r\n\t\t\tcanUserUseUnfilteredHTML,\r\n\t\t} );\r\n\t}\r\n\r\n\treturn blocks;\r\n}\r\n\r\n/**\r\n * Given a string of HTML representing serialized blocks, returns the plain\r\n * text extracted after stripping the HTML of any tags and fixing line breaks.\r\n *\r\n * @param {string} html Serialized blocks.\r\n * @return {string} The plain-text content with any html removed.\r\n */\r\nfunction toPlainText( html ) {\r\n\t// Manually handle BR tags as line breaks prior to `stripHTML` call\r\n\thtml = html.replace( /<br>/g, '\\n' );\r\n\r\n\tconst plainText = stripHTML( html ).trim();\r\n\r\n\t// Merge any consecutive line breaks\r\n\treturn plainText.replace( /\\n\\n+/g, '\\n\\n' );\r\n}\r\n\r\n/**\r\n * Gets the current content editable root element based on the selection.\r\n * @param {Document} ownerDocument\r\n * @return {Element|undefined} The content editable root element.\r\n */\r\nexport function getSelectionRoot( ownerDocument ) {\r\n\tconst { defaultView } = ownerDocument;\r\n\tconst { anchorNode, focusNode } = defaultView.getSelection();\r\n\r\n\tif ( ! anchorNode || ! focusNode ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst anchorElement = (\r\n\t\tanchorNode.nodeType === anchorNode.ELEMENT_NODE\r\n\t\t\t? anchorNode\r\n\t\t\t: anchorNode.parentElement\r\n\t).closest( '[contenteditable]' );\r\n\r\n\tif ( ! anchorElement ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif ( ! anchorElement.contains( focusNode ) ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\treturn anchorElement;\r\n}\r\n"],"mappings":"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","ignoreList":[]}