{"version":3,"names":["clsx","addFilter","getBlockSupport","getBlockType","hasBlockSupport","BlockControls","BlockAlignmentControl","useAvailableAlignments","useBlockEditingMode","jsx","_jsx","ALL_ALIGNMENTS","WIDE_ALIGNMENTS","getValidAlignments","blockAlign","hasWideBlockSupport","hasWideEnabled","validAlignments","Array","isArray","filter","value","includes","alignment","addAttribute","settings","_settings$attributes$","attributes","align","type","enum","BlockEditAlignmentToolbarControlsPure","name","blockName","setAttributes","blockAllowedAlignments","map","blockEditingMode","length","updateAlignment","nextAlign","blockType","blockDefaultAlign","default","group","__experimentalShareWithChildBlocks","children","onChange","controls","shareWithChildBlocks","edit","useBlockProps","addSaveProps","addAssignedAlign","attributeKeys","hasSupport","some","props","isAlignValid","className"],"sources":["@wordpress/block-editor/src/hooks/align.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport clsx from 'clsx';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { addFilter } from '@wordpress/hooks';\r\nimport {\r\n\tgetBlockSupport,\r\n\tgetBlockType,\r\n\thasBlockSupport,\r\n} from '@wordpress/blocks';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { BlockControls, BlockAlignmentControl } from '../components';\r\nimport useAvailableAlignments from '../components/block-alignment-control/use-available-alignments';\r\nimport { useBlockEditingMode } from '../components/block-editing-mode';\r\n\r\n/**\r\n * An array which includes all possible valid alignments,\r\n * used to validate if an alignment is valid or not.\r\n *\r\n * @constant\r\n * @type {string[]}\r\n */\r\nconst ALL_ALIGNMENTS = [ 'left', 'center', 'right', 'wide', 'full' ];\r\n\r\n/**\r\n * An array which includes all wide alignments.\r\n * In order for this alignments to be valid they need to be supported by the block,\r\n * and by the theme.\r\n *\r\n * @constant\r\n * @type {string[]}\r\n */\r\nconst WIDE_ALIGNMENTS = [ 'wide', 'full' ];\r\n\r\n/**\r\n * Returns the valid alignments.\r\n * Takes into consideration the aligns supported by a block, if the block supports wide controls or not and if theme supports wide controls or not.\r\n * Exported just for testing purposes, not exported outside the module.\r\n *\r\n * @param {?boolean|string[]} blockAlign          Aligns supported by the block.\r\n * @param {?boolean}          hasWideBlockSupport True if block supports wide alignments. And False otherwise.\r\n * @param {?boolean}          hasWideEnabled      True if theme supports wide alignments. And False otherwise.\r\n *\r\n * @return {string[]} Valid alignments.\r\n */\r\nexport function getValidAlignments(\r\n\tblockAlign,\r\n\thasWideBlockSupport = true,\r\n\thasWideEnabled = true\r\n) {\r\n\tlet validAlignments;\r\n\tif ( Array.isArray( blockAlign ) ) {\r\n\t\tvalidAlignments = ALL_ALIGNMENTS.filter( ( value ) =>\r\n\t\t\tblockAlign.includes( value )\r\n\t\t);\r\n\t} else if ( blockAlign === true ) {\r\n\t\t// `true` includes all alignments...\r\n\t\tvalidAlignments = [ ...ALL_ALIGNMENTS ];\r\n\t} else {\r\n\t\tvalidAlignments = [];\r\n\t}\r\n\r\n\tif (\r\n\t\t! hasWideEnabled ||\r\n\t\t( blockAlign === true && ! hasWideBlockSupport )\r\n\t) {\r\n\t\treturn validAlignments.filter(\r\n\t\t\t( alignment ) => ! WIDE_ALIGNMENTS.includes( alignment )\r\n\t\t);\r\n\t}\r\n\r\n\treturn validAlignments;\r\n}\r\n\r\n/**\r\n * Filters registered block settings, extending attributes to include `align`.\r\n *\r\n * @param {Object} settings Original block settings.\r\n *\r\n * @return {Object} Filtered block settings.\r\n */\r\nexport function addAttribute( settings ) {\r\n\t// Allow blocks to specify their own attribute definition with default values if needed.\r\n\tif ( 'type' in ( settings.attributes?.align ?? {} ) ) {\r\n\t\treturn settings;\r\n\t}\r\n\tif ( hasBlockSupport( settings, 'align' ) ) {\r\n\t\t// Gracefully handle if settings.attributes is undefined.\r\n\t\tsettings.attributes = {\r\n\t\t\t...settings.attributes,\r\n\t\t\talign: {\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\t// Allow for '' since it is used by the `updateAlignment` function\r\n\t\t\t\t// in toolbar controls for special cases with defined default values.\r\n\t\t\t\tenum: [ ...ALL_ALIGNMENTS, '' ],\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n\r\n\treturn settings;\r\n}\r\n\r\nfunction BlockEditAlignmentToolbarControlsPure( {\r\n\tname: blockName,\r\n\talign,\r\n\tsetAttributes,\r\n} ) {\r\n\t// Compute the block valid alignments by taking into account,\r\n\t// if the theme supports wide alignments or not and the layout's\r\n\t// available alignments. We do that for conditionally rendering\r\n\t// Slot.\r\n\tconst blockAllowedAlignments = getValidAlignments(\r\n\t\tgetBlockSupport( blockName, 'align' ),\r\n\t\thasBlockSupport( blockName, 'alignWide', true )\r\n\t);\r\n\r\n\tconst validAlignments = useAvailableAlignments(\r\n\t\tblockAllowedAlignments\r\n\t).map( ( { name } ) => name );\r\n\tconst blockEditingMode = useBlockEditingMode();\r\n\tif ( ! validAlignments.length || blockEditingMode !== 'default' ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst updateAlignment = ( nextAlign ) => {\r\n\t\tif ( ! nextAlign ) {\r\n\t\t\tconst blockType = getBlockType( blockName );\r\n\t\t\tconst blockDefaultAlign = blockType?.attributes?.align?.default;\r\n\t\t\tif ( blockDefaultAlign ) {\r\n\t\t\t\tnextAlign = '';\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetAttributes( { align: nextAlign } );\r\n\t};\r\n\r\n\treturn (\r\n\t\t<BlockControls group=\"block\" __experimentalShareWithChildBlocks>\r\n\t\t\t<BlockAlignmentControl\r\n\t\t\t\tvalue={ align }\r\n\t\t\t\tonChange={ updateAlignment }\r\n\t\t\t\tcontrols={ validAlignments }\r\n\t\t\t/>\r\n\t\t</BlockControls>\r\n\t);\r\n}\r\n\r\nexport default {\r\n\tshareWithChildBlocks: true,\r\n\tedit: BlockEditAlignmentToolbarControlsPure,\r\n\tuseBlockProps,\r\n\taddSaveProps: addAssignedAlign,\r\n\tattributeKeys: [ 'align' ],\r\n\thasSupport( name ) {\r\n\t\treturn hasBlockSupport( name, 'align', false );\r\n\t},\r\n};\r\n\r\nfunction useBlockProps( { name, align } ) {\r\n\tconst blockAllowedAlignments = getValidAlignments(\r\n\t\tgetBlockSupport( name, 'align' ),\r\n\t\thasBlockSupport( name, 'alignWide', true )\r\n\t);\r\n\tconst validAlignments = useAvailableAlignments( blockAllowedAlignments );\r\n\r\n\tif ( validAlignments.some( ( alignment ) => alignment.name === align ) ) {\r\n\t\treturn { 'data-align': align };\r\n\t}\r\n\r\n\treturn {};\r\n}\r\n\r\n/**\r\n * Override props assigned to save component to inject alignment class name if\r\n * block supports it.\r\n *\r\n * @param {Object} props      Additional props applied to save element.\r\n * @param {Object} blockType  Block type.\r\n * @param {Object} attributes Block attributes.\r\n *\r\n * @return {Object} Filtered props applied to save element.\r\n */\r\nexport function addAssignedAlign( props, blockType, attributes ) {\r\n\tconst { align } = attributes;\r\n\tconst blockAlign = getBlockSupport( blockType, 'align' );\r\n\tconst hasWideBlockSupport = hasBlockSupport( blockType, 'alignWide', true );\r\n\r\n\t// Compute valid alignments without taking into account if\r\n\t// the theme supports wide alignments or not.\r\n\t// This way changing themes does not impact the block save.\r\n\tconst isAlignValid = getValidAlignments(\r\n\t\tblockAlign,\r\n\t\thasWideBlockSupport\r\n\t).includes( align );\r\n\tif ( isAlignValid ) {\r\n\t\tprops.className = clsx( `align${ align }`, props.className );\r\n\t}\r\n\r\n\treturn props;\r\n}\r\n\r\naddFilter(\r\n\t'blocks.registerBlockType',\r\n\t'core/editor/align/addAttribute',\r\n\taddAttribute\r\n);\r\n"],"mappings":"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","ignoreList":[]}