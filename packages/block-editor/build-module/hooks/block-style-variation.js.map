{"version":3,"names":["getBlockTypes","store","blocksStore","useSelect","useContext","useMemo","GlobalStylesContext","toStyles","getBlockSelectors","usePrivateStyleOverride","getValueFromObjectPath","blockEditorStore","globalStylesDataKey","unlock","jsx","_jsx","Fragment","_Fragment","VARIATION_PREFIX","getVariationMatches","className","split","reduce","matches","name","startsWith","match","slice","length","push","getVariationNameFromClass","registeredStyles","variation","some","style","OverrideStyles","override","__unstableBlockStyleVariationOverridesWithConfig","config","getBlockStyles","overrides","select","getStyleOverrides","getBlockName","overridesWithConfig","newOverrides","overriddenClientIds","clientId","includes","blockName","configStyles","styles","blocks","variations","variationConfig","settings","blockSelectors","hasBlockGapSupport","hasFallbackGapSupport","disableLayoutStyles","disableRootPadding","variationStyles","blockGap","blockStyles","layoutStyles","marginReset","presets","rootPadding","id","css","__unstableType","children","map","getVariationStylesWithRefValues","globalStyles","replaceRefs","Object","keys","forEach","key","value","ref","undefined","trim","refValue","JSON","parse","stringify","useBlockStyleVariation","merged","mergedConfig","globalSettings","getSettings","__experimentalFeatures","_mergedConfig$setting","_mergedConfig$styles","_mergedConfig$setting2","useBlockProps","variationClass","hasSupport","attributeKeys","isMatch"],"sources":["@wordpress/block-editor/src/hooks/block-style-variation.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { getBlockTypes, store as blocksStore } from '@wordpress/blocks';\r\nimport { useSelect } from '@wordpress/data';\r\nimport { useContext, useMemo } from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport {\r\n\tGlobalStylesContext,\r\n\ttoStyles,\r\n\tgetBlockSelectors,\r\n} from '../components/global-styles';\r\nimport { usePrivateStyleOverride } from './utils';\r\nimport { getValueFromObjectPath } from '../utils/object';\r\nimport { store as blockEditorStore } from '../store';\r\nimport { globalStylesDataKey } from '../store/private-keys';\r\nimport { unlock } from '../lock-unlock';\r\n\r\nconst VARIATION_PREFIX = 'is-style-';\r\n\r\nfunction getVariationMatches( className ) {\r\n\tif ( ! className ) {\r\n\t\treturn [];\r\n\t}\r\n\treturn className.split( /\\s+/ ).reduce( ( matches, name ) => {\r\n\t\tif ( name.startsWith( VARIATION_PREFIX ) ) {\r\n\t\t\tconst match = name.slice( VARIATION_PREFIX.length );\r\n\t\t\tif ( match !== 'default' ) {\r\n\t\t\t\tmatches.push( match );\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn matches;\r\n\t}, [] );\r\n}\r\n\r\n/**\r\n * Get the first block style variation that has been registered from the class string.\r\n *\r\n * @param {string} className        CSS class string for a block.\r\n * @param {Array}  registeredStyles Currently registered block styles.\r\n *\r\n * @return {string|null} The name of the first registered variation.\r\n */\r\nfunction getVariationNameFromClass( className, registeredStyles = [] ) {\r\n\t// The global flag affects how capturing groups work in JS. So the regex\r\n\t// below will only return full CSS classes not just the variation name.\r\n\tconst matches = getVariationMatches( className );\r\n\r\n\tif ( ! matches ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfor ( const variation of matches ) {\r\n\t\tif ( registeredStyles.some( ( style ) => style.name === variation ) ) {\r\n\t\t\treturn variation;\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n}\r\n\r\n// A helper component to apply a style override using the useStyleOverride hook.\r\nfunction OverrideStyles( { override } ) {\r\n\tusePrivateStyleOverride( override );\r\n}\r\n\r\n/**\r\n * This component is used to generate new block style variation overrides\r\n * based on an incoming theme config. If a matching style is found in the config,\r\n * a new override is created and returned. The overrides can be used in conjunction with\r\n * useStyleOverride to apply the new styles to the editor. Its use is\r\n * subject to change.\r\n *\r\n * @param {Object} props        Props.\r\n * @param {Object} props.config A global styles object, containing settings and styles.\r\n * @return {JSX.Element|undefined} An array of new block variation overrides.\r\n */\r\nexport function __unstableBlockStyleVariationOverridesWithConfig( { config } ) {\r\n\tconst { getBlockStyles, overrides } = useSelect(\r\n\t\t( select ) => ( {\r\n\t\t\tgetBlockStyles: select( blocksStore ).getBlockStyles,\r\n\t\t\toverrides: unlock( select( blockEditorStore ) ).getStyleOverrides(),\r\n\t\t} ),\r\n\t\t[]\r\n\t);\r\n\tconst { getBlockName } = useSelect( blockEditorStore );\r\n\r\n\tconst overridesWithConfig = useMemo( () => {\r\n\t\tif ( ! overrides?.length ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst newOverrides = [];\r\n\t\tconst overriddenClientIds = [];\r\n\t\tfor ( const [ , override ] of overrides ) {\r\n\t\t\tif (\r\n\t\t\t\toverride?.variation &&\r\n\t\t\t\toverride?.clientId &&\r\n\t\t\t\t/*\r\n\t\t\t\t * Because this component overwrites existing style overrides,\r\n\t\t\t\t * filter out any overrides that are already present in the store.\r\n\t\t\t\t */\r\n\t\t\t\t! overriddenClientIds.includes( override.clientId )\r\n\t\t\t) {\r\n\t\t\t\tconst blockName = getBlockName( override.clientId );\r\n\t\t\t\tconst configStyles =\r\n\t\t\t\t\tconfig?.styles?.blocks?.[ blockName ]?.variations?.[\r\n\t\t\t\t\t\toverride.variation\r\n\t\t\t\t\t];\r\n\t\t\t\tif ( configStyles ) {\r\n\t\t\t\t\tconst variationConfig = {\r\n\t\t\t\t\t\tsettings: config?.settings,\r\n\t\t\t\t\t\t// The variation style data is all that is needed to generate\r\n\t\t\t\t\t\t// the styles for the current application to a block. The variation\r\n\t\t\t\t\t\t// name is updated to match the instance specific class name.\r\n\t\t\t\t\t\tstyles: {\r\n\t\t\t\t\t\t\tblocks: {\r\n\t\t\t\t\t\t\t\t[ blockName ]: {\r\n\t\t\t\t\t\t\t\t\tvariations: {\r\n\t\t\t\t\t\t\t\t\t\t[ `${ override.variation }-${ override.clientId }` ]:\r\n\t\t\t\t\t\t\t\t\t\t\tconfigStyles,\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconst blockSelectors = getBlockSelectors(\r\n\t\t\t\t\t\tgetBlockTypes(),\r\n\t\t\t\t\t\tgetBlockStyles,\r\n\t\t\t\t\t\toverride.clientId\r\n\t\t\t\t\t);\r\n\t\t\t\t\tconst hasBlockGapSupport = false;\r\n\t\t\t\t\tconst hasFallbackGapSupport = true;\r\n\t\t\t\t\tconst disableLayoutStyles = true;\r\n\t\t\t\t\tconst disableRootPadding = true;\r\n\t\t\t\t\tconst variationStyles = toStyles(\r\n\t\t\t\t\t\tvariationConfig,\r\n\t\t\t\t\t\tblockSelectors,\r\n\t\t\t\t\t\thasBlockGapSupport,\r\n\t\t\t\t\t\thasFallbackGapSupport,\r\n\t\t\t\t\t\tdisableLayoutStyles,\r\n\t\t\t\t\t\tdisableRootPadding,\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tblockGap: false,\r\n\t\t\t\t\t\t\tblockStyles: true,\r\n\t\t\t\t\t\t\tlayoutStyles: false,\r\n\t\t\t\t\t\t\tmarginReset: false,\r\n\t\t\t\t\t\t\tpresets: false,\r\n\t\t\t\t\t\t\trootPadding: false,\r\n\t\t\t\t\t\t\tvariationStyles: true,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t\tnewOverrides.push( {\r\n\t\t\t\t\t\tid: `${ override.variation }-${ override.clientId }`,\r\n\t\t\t\t\t\tcss: variationStyles,\r\n\t\t\t\t\t\t__unstableType: 'variation',\r\n\t\t\t\t\t\tvariation: override.variation,\r\n\t\t\t\t\t\t// The clientId will be stored with the override and used to ensure\r\n\t\t\t\t\t\t// the order of overrides matches the order of blocks so that the\r\n\t\t\t\t\t\t// correct CSS cascade is maintained.\r\n\t\t\t\t\t\tclientId: override.clientId,\r\n\t\t\t\t\t} );\r\n\t\t\t\t\toverriddenClientIds.push( override.clientId );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn newOverrides;\r\n\t}, [ config, overrides, getBlockStyles, getBlockName ] );\r\n\r\n\tif ( ! overridesWithConfig || ! overridesWithConfig.length ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{ overridesWithConfig.map( ( override ) => (\r\n\t\t\t\t<OverrideStyles key={ override.id } override={ override } />\r\n\t\t\t) ) }\r\n\t\t</>\r\n\t);\r\n}\r\n\r\n/**\r\n * Retrieves any variation styles data and resolves any referenced values.\r\n *\r\n * @param {Object}    globalStyles A complete global styles object, containing settings and styles.\r\n * @param {string}    name         The name of the desired block type.\r\n * @param {variation} variation    The of the block style variation to retrieve data for.\r\n *\r\n * @return {Object|undefined} The global styles data for the specified variation.\r\n */\r\nexport function getVariationStylesWithRefValues(\r\n\tglobalStyles,\r\n\tname,\r\n\tvariation\r\n) {\r\n\tif ( ! globalStyles?.styles?.blocks?.[ name ]?.variations?.[ variation ] ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Helper to recursively look for `ref` values to resolve.\r\n\tconst replaceRefs = ( variationStyles ) => {\r\n\t\tObject.keys( variationStyles ).forEach( ( key ) => {\r\n\t\t\tconst value = variationStyles[ key ];\r\n\r\n\t\t\t// Only process objects.\r\n\t\t\tif ( typeof value === 'object' && value !== null ) {\r\n\t\t\t\t// Process `ref` value if present.\r\n\t\t\t\tif ( value.ref !== undefined ) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\ttypeof value.ref !== 'string' ||\r\n\t\t\t\t\t\tvalue.ref.trim() === ''\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\t// Remove invalid ref.\r\n\t\t\t\t\t\tdelete variationStyles[ key ];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Resolve `ref` value.\r\n\t\t\t\t\t\tconst refValue = getValueFromObjectPath(\r\n\t\t\t\t\t\t\tglobalStyles,\r\n\t\t\t\t\t\t\tvalue.ref\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tif ( refValue ) {\r\n\t\t\t\t\t\t\tvariationStyles[ key ] = refValue;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdelete variationStyles[ key ];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Recursively resolve `ref` values in nested objects.\r\n\t\t\t\t\treplaceRefs( value );\r\n\r\n\t\t\t\t\t// After recursion, if value is empty due to explicitly\r\n\t\t\t\t\t// `undefined` ref value, remove it.\r\n\t\t\t\t\tif ( Object.keys( value ).length === 0 ) {\r\n\t\t\t\t\t\tdelete variationStyles[ key ];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\t};\r\n\r\n\t// Deep clone variation node to avoid mutating it within global styles and losing refs.\r\n\tconst styles = JSON.parse(\r\n\t\tJSON.stringify(\r\n\t\t\tglobalStyles.styles.blocks[ name ].variations[ variation ]\r\n\t\t)\r\n\t);\r\n\treplaceRefs( styles );\r\n\r\n\treturn styles;\r\n}\r\n\r\nfunction useBlockStyleVariation( name, variation, clientId ) {\r\n\t// Prefer global styles data in GlobalStylesContext, which are available\r\n\t// if in the site editor. Otherwise fall back to whatever is in the\r\n\t// editor settings and available in the post editor.\r\n\tconst { merged: mergedConfig } = useContext( GlobalStylesContext );\r\n\tconst { globalSettings, globalStyles } = useSelect( ( select ) => {\r\n\t\tconst settings = select( blockEditorStore ).getSettings();\r\n\t\treturn {\r\n\t\t\tglobalSettings: settings.__experimentalFeatures,\r\n\t\t\tglobalStyles: settings[ globalStylesDataKey ],\r\n\t\t};\r\n\t}, [] );\r\n\r\n\treturn useMemo( () => {\r\n\t\tconst variationStyles = getVariationStylesWithRefValues(\r\n\t\t\t{\r\n\t\t\t\tsettings: mergedConfig?.settings ?? globalSettings,\r\n\t\t\t\tstyles: mergedConfig?.styles ?? globalStyles,\r\n\t\t\t},\r\n\t\t\tname,\r\n\t\t\tvariation\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tsettings: mergedConfig?.settings ?? globalSettings,\r\n\t\t\t// The variation style data is all that is needed to generate\r\n\t\t\t// the styles for the current application to a block. The variation\r\n\t\t\t// name is updated to match the instance specific class name.\r\n\t\t\tstyles: {\r\n\t\t\t\tblocks: {\r\n\t\t\t\t\t[ name ]: {\r\n\t\t\t\t\t\tvariations: {\r\n\t\t\t\t\t\t\t[ `${ variation }-${ clientId }` ]: variationStyles,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t};\r\n\t}, [\r\n\t\tmergedConfig,\r\n\t\tglobalSettings,\r\n\t\tglobalStyles,\r\n\t\tvariation,\r\n\t\tclientId,\r\n\t\tname,\r\n\t] );\r\n}\r\n\r\n// Rather than leveraging `useInstanceId` here, the `clientId` is used.\r\n// This is so that the variation style override's ID is predictable\r\n// when the order of applied style variations changes.\r\nfunction useBlockProps( { name, className, clientId } ) {\r\n\tconst { getBlockStyles } = useSelect( blocksStore );\r\n\r\n\tconst registeredStyles = getBlockStyles( name );\r\n\tconst variation = getVariationNameFromClass( className, registeredStyles );\r\n\tconst variationClass = `${ VARIATION_PREFIX }${ variation }-${ clientId }`;\r\n\r\n\tconst { settings, styles } = useBlockStyleVariation(\r\n\t\tname,\r\n\t\tvariation,\r\n\t\tclientId\r\n\t);\r\n\r\n\tconst variationStyles = useMemo( () => {\r\n\t\tif ( ! variation ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst variationConfig = { settings, styles };\r\n\t\tconst blockSelectors = getBlockSelectors(\r\n\t\t\tgetBlockTypes(),\r\n\t\t\tgetBlockStyles,\r\n\t\t\tclientId\r\n\t\t);\r\n\t\tconst hasBlockGapSupport = false;\r\n\t\tconst hasFallbackGapSupport = true;\r\n\t\tconst disableLayoutStyles = true;\r\n\t\tconst disableRootPadding = true;\r\n\r\n\t\treturn toStyles(\r\n\t\t\tvariationConfig,\r\n\t\t\tblockSelectors,\r\n\t\t\thasBlockGapSupport,\r\n\t\t\thasFallbackGapSupport,\r\n\t\t\tdisableLayoutStyles,\r\n\t\t\tdisableRootPadding,\r\n\t\t\t{\r\n\t\t\t\tblockGap: false,\r\n\t\t\t\tblockStyles: true,\r\n\t\t\t\tlayoutStyles: false,\r\n\t\t\t\tmarginReset: false,\r\n\t\t\t\tpresets: false,\r\n\t\t\t\trootPadding: false,\r\n\t\t\t\tvariationStyles: true,\r\n\t\t\t}\r\n\t\t);\r\n\t}, [ variation, settings, styles, getBlockStyles, clientId ] );\r\n\r\n\tusePrivateStyleOverride( {\r\n\t\tid: `variation-${ clientId }`,\r\n\t\tcss: variationStyles,\r\n\t\t__unstableType: 'variation',\r\n\t\tvariation,\r\n\t\t// The clientId will be stored with the override and used to ensure\r\n\t\t// the order of overrides matches the order of blocks so that the\r\n\t\t// correct CSS cascade is maintained.\r\n\t\tclientId,\r\n\t} );\r\n\r\n\treturn variation ? { className: variationClass } : {};\r\n}\r\n\r\nexport default {\r\n\thasSupport: () => true,\r\n\tattributeKeys: [ 'className' ],\r\n\tisMatch: ( { className } ) => getVariationMatches( className ).length > 0,\r\n\tuseBlockProps,\r\n};\r\n"],"mappings":"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","ignoreList":[]}