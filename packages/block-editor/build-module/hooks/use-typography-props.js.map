{"version":3,"names":["clsx","privateApis","componentsPrivateApis","getInlineStyles","getFontSizeClass","getTypographyFontSizeValue","unlock","kebabCase","getTypographyClassesAndStyles","attributes","settings","typographyStyles","style","typography","fontSize","size","fontFamilyClassName","fontFamily","textAlignClassName","textAlign","className"],"sources":["@wordpress/block-editor/src/hooks/use-typography-props.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport clsx from 'clsx';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { privateApis as componentsPrivateApis } from '@wordpress/components';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { getInlineStyles } from './style';\r\nimport { getFontSizeClass } from '../components/font-sizes';\r\nimport { getTypographyFontSizeValue } from '../components/global-styles/typography-utils';\r\nimport { unlock } from '../lock-unlock';\r\n\r\nconst { kebabCase } = unlock( componentsPrivateApis );\r\n\r\n/*\r\n * This utility is intended to assist where the serialization of the typography\r\n * block support is being skipped for a block but the typography related CSS\r\n * styles still need to be generated so they can be applied to inner elements.\r\n */\r\n/**\r\n * Provides the CSS class names and inline styles for a block's typography support\r\n * attributes.\r\n *\r\n * @param {Object}         attributes Block attributes.\r\n * @param {Object|boolean} settings   Merged theme.json settings\r\n *\r\n * @return {Object} Typography block support derived CSS classes & styles.\r\n */\r\nexport function getTypographyClassesAndStyles( attributes, settings ) {\r\n\tlet typographyStyles = attributes?.style?.typography || {};\r\n\ttypographyStyles = {\r\n\t\t...typographyStyles,\r\n\t\tfontSize: getTypographyFontSizeValue(\r\n\t\t\t{ size: attributes?.style?.typography?.fontSize },\r\n\t\t\tsettings\r\n\t\t),\r\n\t};\r\n\r\n\tconst style = getInlineStyles( { typography: typographyStyles } );\r\n\tconst fontFamilyClassName = !! attributes?.fontFamily\r\n\t\t? `has-${ kebabCase( attributes.fontFamily ) }-font-family`\r\n\t\t: '';\r\n\tconst textAlignClassName = !! attributes?.style?.typography?.textAlign\r\n\t\t? `has-text-align-${ attributes?.style?.typography?.textAlign }`\r\n\t\t: '';\r\n\tconst className = clsx(\r\n\t\tfontFamilyClassName,\r\n\t\ttextAlignClassName,\r\n\t\tgetFontSizeClass( attributes?.fontSize )\r\n\t);\r\n\r\n\treturn {\r\n\t\tclassName,\r\n\t\tstyle,\r\n\t};\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,IAAI,MAAM,MAAM;;AAEvB;AACA;AACA;AACA,SAASC,WAAW,IAAIC,qBAAqB,QAAQ,uBAAuB;;AAE5E;AACA;AACA;AACA,SAASC,eAAe,QAAQ,SAAS;AACzC,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,0BAA0B,QAAQ,8CAA8C;AACzF,SAASC,MAAM,QAAQ,gBAAgB;AAEvC,MAAM;EAAEC;AAAU,CAAC,GAAGD,MAAM,CAAEJ,qBAAsB,CAAC;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,6BAA6BA,CAAEC,UAAU,EAAEC,QAAQ,EAAG;EACrE,IAAIC,gBAAgB,GAAGF,UAAU,EAAEG,KAAK,EAAEC,UAAU,IAAI,CAAC,CAAC;EAC1DF,gBAAgB,GAAG;IAClB,GAAGA,gBAAgB;IACnBG,QAAQ,EAAET,0BAA0B,CACnC;MAAEU,IAAI,EAAEN,UAAU,EAAEG,KAAK,EAAEC,UAAU,EAAEC;IAAS,CAAC,EACjDJ,QACD;EACD,CAAC;EAED,MAAME,KAAK,GAAGT,eAAe,CAAE;IAAEU,UAAU,EAAEF;EAAiB,CAAE,CAAC;EACjE,MAAMK,mBAAmB,GAAG,CAAC,CAAEP,UAAU,EAAEQ,UAAU,GACjD,OAAOV,SAAS,CAAEE,UAAU,CAACQ,UAAW,CAAG,cAAa,GACzD,EAAE;EACL,MAAMC,kBAAkB,GAAG,CAAC,CAAET,UAAU,EAAEG,KAAK,EAAEC,UAAU,EAAEM,SAAS,GAClE,kBAAkBV,UAAU,EAAEG,KAAK,EAAEC,UAAU,EAAEM,SAAW,EAAC,GAC9D,EAAE;EACL,MAAMC,SAAS,GAAGpB,IAAI,CACrBgB,mBAAmB,EACnBE,kBAAkB,EAClBd,gBAAgB,CAAEK,UAAU,EAAEK,QAAS,CACxC,CAAC;EAED,OAAO;IACNM,SAAS;IACTR;EACD,CAAC;AACF","ignoreList":[]}