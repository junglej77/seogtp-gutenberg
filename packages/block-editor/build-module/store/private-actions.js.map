{"version":3,"names":["Platform","store","blockEditorStore","unlock","castArray","maybeArray","Array","isArray","privateSettings","__experimentalUpdateSettings","settings","stripExperimentalSettings","reset","cleanSettings","OS","key","includes","type","hideBlockInterface","showBlockInterface","privateRemoveBlocks","clientIds","selectPrevious","forceRemove","select","dispatch","registry","length","canRemoveBlocks","rules","getBlockRemovalRules","flattenBlocks","blocks","result","stack","innerBlocks","block","shift","push","blockList","map","getBlock","flattenedBlocks","message","rule","callback","displayBlockRemovalPrompt","selectPreviousBlock","batch","ensureDefaultBlock","count","getBlockCount","__unstableHasCustomAppender","getSettings","insertDefaultBlock","clearBlockRemovalPrompt","setBlockRemovalRules","setOpenedBlockSettingsMenu","clientId","setStyleOverride","id","style","deleteStyleOverride","setLastFocus","lastFocus","stopEditingAsBlocks","focusModeToRevert","getTemporarilyEditingFocusModeToRevert","__unstableMarkNextChangeAsNotPersistent","updateBlockAttributes","templateLock","updateBlockListSettings","getBlockListSettings","updateSettings","focusMode","__unstableSetTemporarilyEditingAsBlocks","startDragging","stopDragging","expandBlock","modifyContentLockBlock","selectBlock","undefined"],"sources":["@wordpress/block-editor/src/store/private-actions.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { Platform } from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store as blockEditorStore } from './index';\r\nimport { unlock } from '../lock-unlock';\r\n\r\nconst castArray = ( maybeArray ) =>\r\n\tArray.isArray( maybeArray ) ? maybeArray : [ maybeArray ];\r\n\r\n/**\r\n * A list of private/experimental block editor settings that\r\n * should not become a part of the WordPress public API.\r\n * BlockEditorProvider will remove these settings from the\r\n * settings object it receives.\r\n *\r\n * @see https://github.com/WordPress/gutenberg/pull/46131\r\n */\r\nconst privateSettings = [\r\n\t'inserterMediaCategories',\r\n\t'blockInspectorAnimation',\r\n];\r\n\r\n/**\r\n * Action that updates the block editor settings and\r\n * conditionally preserves the experimental ones.\r\n *\r\n * @param {Object}  settings                          Updated settings\r\n * @param {Object}  options                           Options object.\r\n * @param {boolean} options.stripExperimentalSettings Whether to strip experimental settings.\r\n * @param {boolean} options.reset                     Whether to reset the settings.\r\n * @return {Object} Action object\r\n */\r\nexport function __experimentalUpdateSettings(\r\n\tsettings,\r\n\t{ stripExperimentalSettings = false, reset = false } = {}\r\n) {\r\n\tlet cleanSettings = settings;\r\n\t// There are no plugins in the mobile apps, so there is no\r\n\t// need to strip the experimental settings:\r\n\tif ( stripExperimentalSettings && Platform.OS === 'web' ) {\r\n\t\tcleanSettings = {};\r\n\t\tfor ( const key in settings ) {\r\n\t\t\tif ( ! privateSettings.includes( key ) ) {\r\n\t\t\t\tcleanSettings[ key ] = settings[ key ];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\ttype: 'UPDATE_SETTINGS',\r\n\t\tsettings: cleanSettings,\r\n\t\treset,\r\n\t};\r\n}\r\n\r\n/**\r\n * Hides the block interface (eg. toolbar, outline, etc.)\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function hideBlockInterface() {\r\n\treturn {\r\n\t\ttype: 'HIDE_BLOCK_INTERFACE',\r\n\t};\r\n}\r\n\r\n/**\r\n * Shows the block interface (eg. toolbar, outline, etc.)\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function showBlockInterface() {\r\n\treturn {\r\n\t\ttype: 'SHOW_BLOCK_INTERFACE',\r\n\t};\r\n}\r\n\r\n/**\r\n * Yields action objects used in signalling that the blocks corresponding to\r\n * the set of specified client IDs are to be removed.\r\n *\r\n * Compared to `removeBlocks`, this private interface exposes an additional\r\n * parameter; see `forceRemove`.\r\n *\r\n * @param {string|string[]} clientIds      Client IDs of blocks to remove.\r\n * @param {boolean}         selectPrevious True if the previous block\r\n *                                         or the immediate parent\r\n *                                         (if no previous block exists)\r\n *                                         should be selected\r\n *                                         when a block is removed.\r\n * @param {boolean}         forceRemove    Whether to force the operation,\r\n *                                         bypassing any checks for certain\r\n *                                         block types.\r\n */\r\nexport const privateRemoveBlocks =\r\n\t( clientIds, selectPrevious = true, forceRemove = false ) =>\r\n\t( { select, dispatch, registry } ) => {\r\n\t\tif ( ! clientIds || ! clientIds.length ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tclientIds = castArray( clientIds );\r\n\t\tconst canRemoveBlocks = select.canRemoveBlocks( clientIds );\r\n\r\n\t\tif ( ! canRemoveBlocks ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// In certain editing contexts, we'd like to prevent accidental removal\r\n\t\t// of important blocks. For example, in the site editor, the Query Loop\r\n\t\t// block is deemed important. In such cases, we'll ask the user for\r\n\t\t// confirmation that they intended to remove such block(s). However,\r\n\t\t// the editor instance is responsible for presenting those confirmation\r\n\t\t// prompts to the user. Any instance opting into removal prompts must\r\n\t\t// register using `setBlockRemovalRules()`.\r\n\t\t//\r\n\t\t// @see https://github.com/WordPress/gutenberg/pull/51145\r\n\t\tconst rules = ! forceRemove && select.getBlockRemovalRules();\r\n\r\n\t\tif ( rules ) {\r\n\t\t\tfunction flattenBlocks( blocks ) {\r\n\t\t\t\tconst result = [];\r\n\t\t\t\tconst stack = [ ...blocks ];\r\n\t\t\t\twhile ( stack.length ) {\r\n\t\t\t\t\tconst { innerBlocks, ...block } = stack.shift();\r\n\t\t\t\t\tstack.push( ...innerBlocks );\r\n\t\t\t\t\tresult.push( block );\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\r\n\t\t\tconst blockList = clientIds.map( select.getBlock );\r\n\t\t\tconst flattenedBlocks = flattenBlocks( blockList );\r\n\r\n\t\t\t// Find the first message and use it.\r\n\t\t\tlet message;\r\n\t\t\tfor ( const rule of rules ) {\r\n\t\t\t\tmessage = rule.callback( flattenedBlocks );\r\n\t\t\t\tif ( message ) {\r\n\t\t\t\t\tdispatch(\r\n\t\t\t\t\t\tdisplayBlockRemovalPrompt(\r\n\t\t\t\t\t\t\tclientIds,\r\n\t\t\t\t\t\t\tselectPrevious,\r\n\t\t\t\t\t\t\tmessage\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( selectPrevious ) {\r\n\t\t\tdispatch.selectPreviousBlock( clientIds[ 0 ], selectPrevious );\r\n\t\t}\r\n\r\n\t\t// We're batching these two actions because an extra `undo/redo` step can\r\n\t\t// be created, based on whether we insert a default block or not.\r\n\t\tregistry.batch( () => {\r\n\t\t\tdispatch( { type: 'REMOVE_BLOCKS', clientIds } );\r\n\t\t\t// To avoid a focus loss when removing the last block, assure there is\r\n\t\t\t// always a default block if the last of the blocks have been removed.\r\n\t\t\tdispatch( ensureDefaultBlock() );\r\n\t\t} );\r\n\t};\r\n\r\n/**\r\n * Action which will insert a default block insert action if there\r\n * are no other blocks at the root of the editor. This action should be used\r\n * in actions which may result in no blocks remaining in the editor (removal,\r\n * replacement, etc).\r\n */\r\nexport const ensureDefaultBlock =\r\n\t() =>\r\n\t( { select, dispatch } ) => {\r\n\t\t// To avoid a focus loss when removing the last block, assure there is\r\n\t\t// always a default block if the last of the blocks have been removed.\r\n\t\tconst count = select.getBlockCount();\r\n\t\tif ( count > 0 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// If there's an custom appender, don't insert default block.\r\n\t\t// We have to remember to manually move the focus elsewhere to\r\n\t\t// prevent it from being lost though.\r\n\t\tconst { __unstableHasCustomAppender } = select.getSettings();\r\n\t\tif ( __unstableHasCustomAppender ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdispatch.insertDefaultBlock();\r\n\t};\r\n\r\n/**\r\n * Returns an action object used in signalling that a block removal prompt must\r\n * be displayed.\r\n *\r\n * Contrast with `setBlockRemovalRules`.\r\n *\r\n * @param {string|string[]} clientIds      Client IDs of blocks to remove.\r\n * @param {boolean}         selectPrevious True if the previous block or the\r\n *                                         immediate parent (if no previous\r\n *                                         block exists) should be selected\r\n *                                         when a block is removed.\r\n * @param {string}          message        Message to display in the prompt.\r\n *\r\n * @return {Object} Action object.\r\n */\r\nfunction displayBlockRemovalPrompt( clientIds, selectPrevious, message ) {\r\n\treturn {\r\n\t\ttype: 'DISPLAY_BLOCK_REMOVAL_PROMPT',\r\n\t\tclientIds,\r\n\t\tselectPrevious,\r\n\t\tmessage,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used in signalling that a block removal prompt must\r\n * be cleared, either be cause the user has confirmed or canceled the request\r\n * for removal.\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function clearBlockRemovalPrompt() {\r\n\treturn {\r\n\t\ttype: 'CLEAR_BLOCK_REMOVAL_PROMPT',\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used to set up any rules that a block editor may\r\n * provide in order to prevent a user from accidentally removing certain\r\n * blocks. These rules are then used to display a confirmation prompt to the\r\n * user. For instance, in the Site Editor, the Query Loop block is important\r\n * enough to warrant such confirmation.\r\n *\r\n * IMPORTANT: Registering rules implicitly signals to the `privateRemoveBlocks`\r\n * action that the editor will be responsible for displaying block removal\r\n * prompts and confirming deletions. This action is meant to be used by\r\n * component `BlockRemovalWarningModal` only.\r\n *\r\n * The data is a record whose keys are block types (e.g. 'core/query') and\r\n * whose values are the explanation to be shown to users (e.g. 'Query Loop\r\n * displays a list of posts or pages.').\r\n *\r\n * Contrast with `displayBlockRemovalPrompt`.\r\n *\r\n * @param {Record<string,string>|false} rules Block removal rules.\r\n * @return {Object} Action object.\r\n */\r\nexport function setBlockRemovalRules( rules = false ) {\r\n\treturn {\r\n\t\ttype: 'SET_BLOCK_REMOVAL_RULES',\r\n\t\trules,\r\n\t};\r\n}\r\n\r\n/**\r\n * Sets the client ID of the block settings menu that is currently open.\r\n *\r\n * @param {?string} clientId The block client ID.\r\n * @return {Object} Action object.\r\n */\r\nexport function setOpenedBlockSettingsMenu( clientId ) {\r\n\treturn {\r\n\t\ttype: 'SET_OPENED_BLOCK_SETTINGS_MENU',\r\n\t\tclientId,\r\n\t};\r\n}\r\n\r\nexport function setStyleOverride( id, style ) {\r\n\treturn {\r\n\t\ttype: 'SET_STYLE_OVERRIDE',\r\n\t\tid,\r\n\t\tstyle,\r\n\t};\r\n}\r\n\r\nexport function deleteStyleOverride( id ) {\r\n\treturn {\r\n\t\ttype: 'DELETE_STYLE_OVERRIDE',\r\n\t\tid,\r\n\t};\r\n}\r\n\r\n/**\r\n * Action that sets the element that had focus when focus leaves the editor canvas.\r\n *\r\n * @param {Object} lastFocus The last focused element.\r\n *\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function setLastFocus( lastFocus = null ) {\r\n\treturn {\r\n\t\ttype: 'LAST_FOCUS',\r\n\t\tlastFocus,\r\n\t};\r\n}\r\n\r\n/**\r\n * Action that stops temporarily editing as blocks.\r\n *\r\n * @param {string} clientId The block's clientId.\r\n */\r\nexport function stopEditingAsBlocks( clientId ) {\r\n\treturn ( { select, dispatch, registry } ) => {\r\n\t\tconst focusModeToRevert = unlock(\r\n\t\t\tregistry.select( blockEditorStore )\r\n\t\t).getTemporarilyEditingFocusModeToRevert();\r\n\t\tdispatch.__unstableMarkNextChangeAsNotPersistent();\r\n\t\tdispatch.updateBlockAttributes( clientId, {\r\n\t\t\ttemplateLock: 'contentOnly',\r\n\t\t} );\r\n\t\tdispatch.updateBlockListSettings( clientId, {\r\n\t\t\t...select.getBlockListSettings( clientId ),\r\n\t\t\ttemplateLock: 'contentOnly',\r\n\t\t} );\r\n\t\tdispatch.updateSettings( { focusMode: focusModeToRevert } );\r\n\t\tdispatch.__unstableSetTemporarilyEditingAsBlocks();\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used in signalling that the user has begun to drag.\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function startDragging() {\r\n\treturn {\r\n\t\ttype: 'START_DRAGGING',\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used in signalling that the user has stopped dragging.\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function stopDragging() {\r\n\treturn {\r\n\t\ttype: 'STOP_DRAGGING',\r\n\t};\r\n}\r\n\r\n/**\r\n * @param {string|null} clientId The block's clientId, or `null` to clear.\r\n *\r\n * @return  {Object} Action object.\r\n */\r\nexport function expandBlock( clientId ) {\r\n\treturn {\r\n\t\ttype: 'SET_BLOCK_EXPANDED_IN_LIST_VIEW',\r\n\t\tclientId,\r\n\t};\r\n}\r\n\r\n/**\r\n * Temporarily modify/unlock the content-only block for editions.\r\n *\r\n * @param {string} clientId The client id of the block.\r\n */\r\nexport const modifyContentLockBlock =\r\n\t( clientId ) =>\r\n\t( { select, dispatch } ) => {\r\n\t\tdispatch.selectBlock( clientId );\r\n\t\tdispatch.__unstableMarkNextChangeAsNotPersistent();\r\n\t\tdispatch.updateBlockAttributes( clientId, {\r\n\t\t\ttemplateLock: undefined,\r\n\t\t} );\r\n\t\tdispatch.updateBlockListSettings( clientId, {\r\n\t\t\t...select.getBlockListSettings( clientId ),\r\n\t\t\ttemplateLock: false,\r\n\t\t} );\r\n\t\tconst focusModeToRevert = select.getSettings().focusMode;\r\n\t\tdispatch.updateSettings( { focusMode: true } );\r\n\t\tdispatch.__unstableSetTemporarilyEditingAsBlocks(\r\n\t\t\tclientId,\r\n\t\t\tfocusModeToRevert\r\n\t\t);\r\n\t};\r\n"],"mappings":"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","ignoreList":[]}