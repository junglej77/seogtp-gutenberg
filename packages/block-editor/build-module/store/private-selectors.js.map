{"version":3,"names":["createSelector","createRegistrySelector","getBlockOrder","getBlockParents","getBlockEditingMode","getSettings","canInsertBlockType","getBlockName","getTemplateLock","getClientIdsWithDescendants","checkAllowListRecursive","getAllPatternsDependants","getInsertBlockTypeDependants","getGrammar","INSERTER_PATTERN_TYPES","STORE_NAME","unlock","selectBlockPatternsKey","reusableBlocksSelectKey","sectionRootClientIdKey","getBlockSettings","isBlockInterfaceHidden","state","getLastInsertedBlocksClientIds","lastBlockInserted","clientIds","getBlockWithoutAttributes","clientId","blocks","byClientId","get","isBlockSubtreeDisabled","isChildSubtreeDisabled","childClientId","every","getEnabledClientIdsTreeUnmemoized","rootClientId","blockOrder","result","innerBlocks","push","getEnabledClientIdsTree","order","blockEditingModes","settings","templateLock","blockListSettings","getEnabledBlockParents","ascending","filter","parent","parents","getRemovalPromptData","removalPromptData","getBlockRemovalRules","blockRemovalRules","getOpenedBlockSettingsMenu","openedBlockSettingsMenu","getStyleOverrides","clientIdMap","reduce","acc","index","styleOverrides","sort","overrideA","overrideB","_clientIdMap$clientId","_clientIdMap$clientId2","clientIdA","clientIdB","aIndex","bIndex","getRegisteredInserterMediaCategories","registeredInserterMediaCategories","getInserterMediaCategories","inserterMediaCategories","allowedMimeTypes","enableOpenverseMediaCategory","length","coreInserterMediaCategoriesNames","map","name","mergedCategories","includes","category","Object","values","some","mimeType","startsWith","mediaType","hasAllowedPatterns","select","getAllPatterns","patterns","allowedBlockTypes","pattern","inserter","grammar","blockName","mapUserPattern","userPattern","__experimentalUserPatternCategories","id","type","user","title","raw","categories","wp_pattern_category","catId","find","slug","content","syncStatus","wp_pattern_sync_status","getPatternBySlug","patternName","_state$settings$__exp","_state$settings$selec","_id","parseInt","slice","block","getReusableBlocks","__experimentalBlockPatterns","__experimentalReusableBlocks","_state$settings$__exp2","_state$settings$selec2","x","arr","findIndex","y","isResolvingPatterns","blockPatternsSelect","reusableBlocksSelect","undefined","EMPTY_ARRAY","_state$settings$__exp3","getLastFocus","lastFocus","isDragging","getExpandedBlock","expandedBlock","getContentLockingParent","current","getTemporarilyEditingAsBlocks","temporarilyEditingAsBlocks","getTemporarilyEditingFocusModeToRevert","temporarilyEditingFocusModeRevert","getBlockStyles","styles","attributes","style","isZoomOutMode","editorMode","getSectionRootClientId"],"sources":["@wordpress/block-editor/src/store/private-selectors.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { createSelector, createRegistrySelector } from '@wordpress/data';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport {\r\n\tgetBlockOrder,\r\n\tgetBlockParents,\r\n\tgetBlockEditingMode,\r\n\tgetSettings,\r\n\tcanInsertBlockType,\r\n\tgetBlockName,\r\n\tgetTemplateLock,\r\n\tgetClientIdsWithDescendants,\r\n} from './selectors';\r\nimport {\r\n\tcheckAllowListRecursive,\r\n\tgetAllPatternsDependants,\r\n\tgetInsertBlockTypeDependants,\r\n\tgetGrammar,\r\n} from './utils';\r\nimport { INSERTER_PATTERN_TYPES } from '../components/inserter/block-patterns-tab/utils';\r\nimport { STORE_NAME } from './constants';\r\nimport { unlock } from '../lock-unlock';\r\nimport {\r\n\tselectBlockPatternsKey,\r\n\treusableBlocksSelectKey,\r\n\tsectionRootClientIdKey,\r\n} from './private-keys';\r\n\r\nexport { getBlockSettings } from './get-block-settings';\r\n\r\n/**\r\n * Returns true if the block interface is hidden, or false otherwise.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the block toolbar is hidden.\r\n */\r\nexport function isBlockInterfaceHidden( state ) {\r\n\treturn state.isBlockInterfaceHidden;\r\n}\r\n\r\n/**\r\n * Gets the client ids of the last inserted blocks.\r\n *\r\n * @param {Object} state Global application state.\r\n * @return {Array|undefined} Client Ids of the last inserted block(s).\r\n */\r\nexport function getLastInsertedBlocksClientIds( state ) {\r\n\treturn state?.lastBlockInserted?.clientIds;\r\n}\r\n\r\nexport function getBlockWithoutAttributes( state, clientId ) {\r\n\treturn state.blocks.byClientId.get( clientId );\r\n}\r\n\r\n/**\r\n * Returns true if all of the descendants of a block with the given client ID\r\n * have an editing mode of 'disabled', or false otherwise.\r\n *\r\n * @param {Object} state    Global application state.\r\n * @param {string} clientId The block client ID.\r\n *\r\n * @return {boolean} Whether the block descendants are disabled.\r\n */\r\nexport const isBlockSubtreeDisabled = ( state, clientId ) => {\r\n\tconst isChildSubtreeDisabled = ( childClientId ) => {\r\n\t\treturn (\r\n\t\t\tgetBlockEditingMode( state, childClientId ) === 'disabled' &&\r\n\t\t\tgetBlockOrder( state, childClientId ).every(\r\n\t\t\t\tisChildSubtreeDisabled\r\n\t\t\t)\r\n\t\t);\r\n\t};\r\n\treturn getBlockOrder( state, clientId ).every( isChildSubtreeDisabled );\r\n};\r\n\r\nfunction getEnabledClientIdsTreeUnmemoized( state, rootClientId ) {\r\n\tconst blockOrder = getBlockOrder( state, rootClientId );\r\n\tconst result = [];\r\n\r\n\tfor ( const clientId of blockOrder ) {\r\n\t\tconst innerBlocks = getEnabledClientIdsTreeUnmemoized(\r\n\t\t\tstate,\r\n\t\t\tclientId\r\n\t\t);\r\n\t\tif ( getBlockEditingMode( state, clientId ) !== 'disabled' ) {\r\n\t\t\tresult.push( { clientId, innerBlocks } );\r\n\t\t} else {\r\n\t\t\tresult.push( ...innerBlocks );\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Returns a tree of block objects with only clientID and innerBlocks set.\r\n * Blocks with a 'disabled' editing mode are not included.\r\n *\r\n * @param {Object}  state        Global application state.\r\n * @param {?string} rootClientId Optional root client ID of block list.\r\n *\r\n * @return {Object[]} Tree of block objects with only clientID and innerBlocks set.\r\n */\r\nexport const getEnabledClientIdsTree = createSelector(\r\n\tgetEnabledClientIdsTreeUnmemoized,\r\n\t( state ) => [\r\n\t\tstate.blocks.order,\r\n\t\tstate.blockEditingModes,\r\n\t\tstate.settings.templateLock,\r\n\t\tstate.blockListSettings,\r\n\t]\r\n);\r\n\r\n/**\r\n * Returns a list of a given block's ancestors, from top to bottom. Blocks with\r\n * a 'disabled' editing mode are excluded.\r\n *\r\n * @see getBlockParents\r\n *\r\n * @param {Object}  state     Global application state.\r\n * @param {string}  clientId  The block client ID.\r\n * @param {boolean} ascending Order results from bottom to top (true) or top\r\n *                            to bottom (false).\r\n */\r\nexport const getEnabledBlockParents = createSelector(\r\n\t( state, clientId, ascending = false ) => {\r\n\t\treturn getBlockParents( state, clientId, ascending ).filter(\r\n\t\t\t( parent ) => getBlockEditingMode( state, parent ) !== 'disabled'\r\n\t\t);\r\n\t},\r\n\t( state ) => [\r\n\t\tstate.blocks.parents,\r\n\t\tstate.blockEditingModes,\r\n\t\tstate.settings.templateLock,\r\n\t\tstate.blockListSettings,\r\n\t]\r\n);\r\n\r\n/**\r\n * Selector that returns the data needed to display a prompt when certain\r\n * blocks are removed, or `false` if no such prompt is requested.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Object|false} Data for removal prompt display, if any.\r\n */\r\nexport function getRemovalPromptData( state ) {\r\n\treturn state.removalPromptData;\r\n}\r\n\r\n/**\r\n * Returns true if removal prompt exists, or false otherwise.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether removal prompt exists.\r\n */\r\nexport function getBlockRemovalRules( state ) {\r\n\treturn state.blockRemovalRules;\r\n}\r\n\r\n/**\r\n * Returns the client ID of the block settings menu that is currently open.\r\n *\r\n * @param {Object} state Global application state.\r\n * @return {string|null} The client ID of the block menu that is currently open.\r\n */\r\nexport function getOpenedBlockSettingsMenu( state ) {\r\n\treturn state.openedBlockSettingsMenu;\r\n}\r\n\r\n/**\r\n * Returns all style overrides, intended to be merged with global editor styles.\r\n *\r\n * Overrides are sorted to match the order of the blocks they relate to. This\r\n * is useful to maintain correct CSS cascade order.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Array} An array of style ID to style override pairs.\r\n */\r\nexport const getStyleOverrides = createSelector(\r\n\t( state ) => {\r\n\t\tconst clientIds = getClientIdsWithDescendants( state );\r\n\t\tconst clientIdMap = clientIds.reduce( ( acc, clientId, index ) => {\r\n\t\t\tacc[ clientId ] = index;\r\n\t\t\treturn acc;\r\n\t\t}, {} );\r\n\r\n\t\treturn [ ...state.styleOverrides ].sort( ( overrideA, overrideB ) => {\r\n\t\t\t// Once the overrides Map is spread to an array, the first element\r\n\t\t\t// is the key, while the second is the override itself including\r\n\t\t\t// the clientId to sort by.\r\n\t\t\tconst [ , { clientId: clientIdA } ] = overrideA;\r\n\t\t\tconst [ , { clientId: clientIdB } ] = overrideB;\r\n\r\n\t\t\tconst aIndex = clientIdMap[ clientIdA ] ?? -1;\r\n\t\t\tconst bIndex = clientIdMap[ clientIdB ] ?? -1;\r\n\r\n\t\t\treturn aIndex - bIndex;\r\n\t\t} );\r\n\t},\r\n\t( state ) => [ state.blocks.order, state.styleOverrides ]\r\n);\r\n\r\n/** @typedef {import('./actions').InserterMediaCategory} InserterMediaCategory */\r\n/**\r\n * Returns the registered inserter media categories through the public API.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {InserterMediaCategory[]} Inserter media categories.\r\n */\r\nexport function getRegisteredInserterMediaCategories( state ) {\r\n\treturn state.registeredInserterMediaCategories;\r\n}\r\n\r\n/**\r\n * Returns an array containing the allowed inserter media categories.\r\n * It merges the registered media categories from extenders with the\r\n * core ones. It also takes into account the allowed `mime_types`, which\r\n * can be altered by `upload_mimes` filter and restrict some of them.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {InserterMediaCategory[]} Client IDs of descendants.\r\n */\r\nexport const getInserterMediaCategories = createSelector(\r\n\t( state ) => {\r\n\t\tconst {\r\n\t\t\tsettings: {\r\n\t\t\t\tinserterMediaCategories,\r\n\t\t\t\tallowedMimeTypes,\r\n\t\t\t\tenableOpenverseMediaCategory,\r\n\t\t\t},\r\n\t\t\tregisteredInserterMediaCategories,\r\n\t\t} = state;\r\n\t\t// The allowed `mime_types` can be altered by `upload_mimes` filter and restrict\r\n\t\t// some of them. In this case we shouldn't add the category to the available media\r\n\t\t// categories list in the inserter.\r\n\t\tif (\r\n\t\t\t( ! inserterMediaCategories &&\r\n\t\t\t\t! registeredInserterMediaCategories.length ) ||\r\n\t\t\t! allowedMimeTypes\r\n\t\t) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst coreInserterMediaCategoriesNames =\r\n\t\t\tinserterMediaCategories?.map( ( { name } ) => name ) || [];\r\n\t\tconst mergedCategories = [\r\n\t\t\t...( inserterMediaCategories || [] ),\r\n\t\t\t...( registeredInserterMediaCategories || [] ).filter(\r\n\t\t\t\t( { name } ) =>\r\n\t\t\t\t\t! coreInserterMediaCategoriesNames.includes( name )\r\n\t\t\t),\r\n\t\t];\r\n\t\treturn mergedCategories.filter( ( category ) => {\r\n\t\t\t// Check if Openverse category is enabled.\r\n\t\t\tif (\r\n\t\t\t\t! enableOpenverseMediaCategory &&\r\n\t\t\t\tcategory.name === 'openverse'\r\n\t\t\t) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn Object.values( allowedMimeTypes ).some( ( mimeType ) =>\r\n\t\t\t\tmimeType.startsWith( `${ category.mediaType }/` )\r\n\t\t\t);\r\n\t\t} );\r\n\t},\r\n\t( state ) => [\r\n\t\tstate.settings.inserterMediaCategories,\r\n\t\tstate.settings.allowedMimeTypes,\r\n\t\tstate.settings.enableOpenverseMediaCategory,\r\n\t\tstate.registeredInserterMediaCategories,\r\n\t]\r\n);\r\n\r\n/**\r\n * Returns whether there is at least one allowed pattern for inner blocks children.\r\n * This is useful for deferring the parsing of all patterns until needed.\r\n *\r\n * @param {Object} state               Editor state.\r\n * @param {string} [rootClientId=null] Target root client ID.\r\n *\r\n * @return {boolean} If there is at least one allowed pattern.\r\n */\r\nexport const hasAllowedPatterns = createRegistrySelector( ( select ) =>\r\n\tcreateSelector(\r\n\t\t( state, rootClientId = null ) => {\r\n\t\t\tconst { getAllPatterns } = unlock( select( STORE_NAME ) );\r\n\t\t\tconst patterns = getAllPatterns();\r\n\t\t\tconst { allowedBlockTypes } = getSettings( state );\r\n\t\t\treturn patterns.some( ( pattern ) => {\r\n\t\t\t\tconst { inserter = true } = pattern;\r\n\t\t\t\tif ( ! inserter ) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tconst grammar = getGrammar( pattern );\r\n\t\t\t\treturn (\r\n\t\t\t\t\tcheckAllowListRecursive( grammar, allowedBlockTypes ) &&\r\n\t\t\t\t\tgrammar.every( ( { name: blockName } ) =>\r\n\t\t\t\t\t\tcanInsertBlockType( state, blockName, rootClientId )\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\t} );\r\n\t\t},\r\n\t\t( state, rootClientId ) => [\r\n\t\t\t...getAllPatternsDependants( select )( state ),\r\n\t\t\t...getInsertBlockTypeDependants( state, rootClientId ),\r\n\t\t]\r\n\t)\r\n);\r\n\r\nfunction mapUserPattern(\r\n\tuserPattern,\r\n\t__experimentalUserPatternCategories = []\r\n) {\r\n\treturn {\r\n\t\tname: `core/block/${ userPattern.id }`,\r\n\t\tid: userPattern.id,\r\n\t\ttype: INSERTER_PATTERN_TYPES.user,\r\n\t\ttitle: userPattern.title.raw,\r\n\t\tcategories: userPattern.wp_pattern_category.map( ( catId ) => {\r\n\t\t\tconst category = __experimentalUserPatternCategories.find(\r\n\t\t\t\t( { id } ) => id === catId\r\n\t\t\t);\r\n\t\t\treturn category ? category.slug : catId;\r\n\t\t} ),\r\n\t\tcontent: userPattern.content.raw,\r\n\t\tsyncStatus: userPattern.wp_pattern_sync_status,\r\n\t};\r\n}\r\n\r\nexport const getPatternBySlug = createRegistrySelector( ( select ) =>\r\n\tcreateSelector(\r\n\t\t( state, patternName ) => {\r\n\t\t\t// Only fetch reusable blocks if we know we need them. To do: maybe\r\n\t\t\t// use the entity record API to retrieve the block by slug.\r\n\t\t\tif ( patternName?.startsWith( 'core/block/' ) ) {\r\n\t\t\t\tconst _id = parseInt(\r\n\t\t\t\t\tpatternName.slice( 'core/block/'.length ),\r\n\t\t\t\t\t10\r\n\t\t\t\t);\r\n\t\t\t\tconst block = unlock( select( STORE_NAME ) )\r\n\t\t\t\t\t.getReusableBlocks()\r\n\t\t\t\t\t.find( ( { id } ) => id === _id );\r\n\r\n\t\t\t\tif ( ! block ) {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn mapUserPattern(\r\n\t\t\t\t\tblock,\r\n\t\t\t\t\tstate.settings.__experimentalUserPatternCategories\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\treturn [\r\n\t\t\t\t// This setting is left for back compat.\r\n\t\t\t\t...( state.settings.__experimentalBlockPatterns ?? [] ),\r\n\t\t\t\t...( state.settings[ selectBlockPatternsKey ]?.( select ) ??\r\n\t\t\t\t\t[] ),\r\n\t\t\t].find( ( { name } ) => name === patternName );\r\n\t\t},\r\n\t\t( state, patternName ) =>\r\n\t\t\tpatternName?.startsWith( 'core/block/' )\r\n\t\t\t\t? [\r\n\t\t\t\t\t\tunlock( select( STORE_NAME ) ).getReusableBlocks(),\r\n\t\t\t\t\t\tstate.settings.__experimentalReusableBlocks,\r\n\t\t\t\t  ]\r\n\t\t\t\t: [\r\n\t\t\t\t\t\tstate.settings.__experimentalBlockPatterns,\r\n\t\t\t\t\t\tstate.settings[ selectBlockPatternsKey ]?.( select ),\r\n\t\t\t\t  ]\r\n\t)\r\n);\r\n\r\nexport const getAllPatterns = createRegistrySelector( ( select ) =>\r\n\tcreateSelector( ( state ) => {\r\n\t\treturn [\r\n\t\t\t...unlock( select( STORE_NAME ) )\r\n\t\t\t\t.getReusableBlocks()\r\n\t\t\t\t.map( ( userPattern ) =>\r\n\t\t\t\t\tmapUserPattern(\r\n\t\t\t\t\t\tuserPattern,\r\n\t\t\t\t\t\tstate.settings.__experimentalUserPatternCategories\r\n\t\t\t\t\t)\r\n\t\t\t\t),\r\n\t\t\t// This setting is left for back compat.\r\n\t\t\t...( state.settings.__experimentalBlockPatterns ?? [] ),\r\n\t\t\t...( state.settings[ selectBlockPatternsKey ]?.( select ) ?? [] ),\r\n\t\t].filter(\r\n\t\t\t( x, index, arr ) =>\r\n\t\t\t\tindex === arr.findIndex( ( y ) => x.name === y.name )\r\n\t\t);\r\n\t}, getAllPatternsDependants( select ) )\r\n);\r\n\r\nexport const isResolvingPatterns = createRegistrySelector( ( select ) =>\r\n\tcreateSelector( ( state ) => {\r\n\t\tconst blockPatternsSelect = state.settings[ selectBlockPatternsKey ];\r\n\t\tconst reusableBlocksSelect = state.settings[ reusableBlocksSelectKey ];\r\n\t\treturn (\r\n\t\t\t( blockPatternsSelect\r\n\t\t\t\t? blockPatternsSelect( select ) === undefined\r\n\t\t\t\t: false ) ||\r\n\t\t\t( reusableBlocksSelect\r\n\t\t\t\t? reusableBlocksSelect( select ) === undefined\r\n\t\t\t\t: false )\r\n\t\t);\r\n\t}, getAllPatternsDependants( select ) )\r\n);\r\n\r\nconst EMPTY_ARRAY = [];\r\n\r\nexport const getReusableBlocks = createRegistrySelector(\r\n\t( select ) => ( state ) => {\r\n\t\tconst reusableBlocksSelect = state.settings[ reusableBlocksSelectKey ];\r\n\t\treturn reusableBlocksSelect\r\n\t\t\t? reusableBlocksSelect( select )\r\n\t\t\t: state.settings.__experimentalReusableBlocks ?? EMPTY_ARRAY;\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns the element of the last element that had focus when focus left the editor canvas.\r\n *\r\n * @param {Object} state Block editor state.\r\n *\r\n * @return {Object} Element.\r\n */\r\nexport function getLastFocus( state ) {\r\n\treturn state.lastFocus;\r\n}\r\n\r\n/**\r\n * Returns true if the user is dragging anything, or false otherwise. It is possible for a\r\n * user to be dragging data from outside of the editor, so this selector is separate from\r\n * the `isDraggingBlocks` selector which only returns true if the user is dragging blocks.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether user is dragging.\r\n */\r\nexport function isDragging( state ) {\r\n\treturn state.isDragging;\r\n}\r\n\r\n/**\r\n * Retrieves the expanded block from the state.\r\n *\r\n * @param {Object} state Block editor state.\r\n *\r\n * @return {string|null} The client ID of the expanded block, if set.\r\n */\r\nexport function getExpandedBlock( state ) {\r\n\treturn state.expandedBlock;\r\n}\r\n\r\n/**\r\n * Retrieves the client ID of the ancestor block that is content locking the block\r\n * with the provided client ID.\r\n *\r\n * @param {Object} state    Global application state.\r\n * @param {Object} clientId Client Id of the block.\r\n *\r\n * @return {?string} Client ID of the ancestor block that is content locking the block.\r\n */\r\nexport const getContentLockingParent = createSelector(\r\n\t( state, clientId ) => {\r\n\t\tlet current = clientId;\r\n\t\tlet result;\r\n\t\twhile ( ( current = state.blocks.parents.get( current ) ) ) {\r\n\t\t\tif (\r\n\t\t\t\tgetBlockName( state, current ) === 'core/block' ||\r\n\t\t\t\tgetTemplateLock( state, current ) === 'contentOnly'\r\n\t\t\t) {\r\n\t\t\t\tresult = current;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t},\r\n\t( state ) => [ state.blocks.parents, state.blockListSettings ]\r\n);\r\n\r\n/**\r\n * Retrieves the client ID of the block that is content locked but is\r\n * currently being temporarily edited as a non-locked block.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {?string} The client ID of the block being temporarily edited as a non-locked block.\r\n */\r\nexport function getTemporarilyEditingAsBlocks( state ) {\r\n\treturn state.temporarilyEditingAsBlocks;\r\n}\r\n\r\n/**\r\n * Returns the focus mode that should be reapplied when the user stops editing\r\n * a content locked blocks as a block without locking.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {?string} The focus mode that should be re-set when temporarily editing as blocks stops.\r\n */\r\nexport function getTemporarilyEditingFocusModeToRevert( state ) {\r\n\treturn state.temporarilyEditingFocusModeRevert;\r\n}\r\n\r\n/**\r\n * Returns the style attributes of multiple blocks.\r\n *\r\n * @param {Object}   state     Global application state.\r\n * @param {string[]} clientIds An array of block client IDs.\r\n *\r\n * @return {Object} An object where keys are client IDs and values are the corresponding block styles or undefined.\r\n */\r\nexport const getBlockStyles = createSelector(\r\n\t( state, clientIds ) =>\r\n\t\tclientIds.reduce( ( styles, clientId ) => {\r\n\t\t\tstyles[ clientId ] = state.blocks.attributes.get( clientId )?.style;\r\n\t\t\treturn styles;\r\n\t\t}, {} ),\r\n\t( state, clientIds ) => [\r\n\t\t...clientIds.map(\r\n\t\t\t( clientId ) => state.blocks.attributes.get( clientId )?.style\r\n\t\t),\r\n\t]\r\n);\r\n\r\n/**\r\n * Returns whether zoom out mode is enabled.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {boolean} Is zoom out mode enabled.\r\n */\r\nexport function isZoomOutMode( state ) {\r\n\treturn state.editorMode === 'zoom-out';\r\n}\r\n\r\nexport function getSectionRootClientId( state ) {\r\n\treturn state.settings?.[ sectionRootClientIdKey ];\r\n}\r\n"],"mappings":"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","ignoreList":[]}