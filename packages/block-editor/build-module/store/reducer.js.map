{"version":3,"names":["fastDeepEqual","pipe","combineReducers","select","store","blocksStore","PREFERENCES_DEFAULTS","SETTINGS_DEFAULTS","insertAt","moveTo","identity","x","mapBlockOrder","blocks","rootClientId","result","Map","current","set","forEach","block","clientId","innerBlocks","push","order","subClientId","mapBlockParents","stack","length","parent","currentBlocks","shift","flattenBlocks","transform","getFlattenedClientIds","getFlattenedBlocksWithoutAttributes","attributes","restBlock","getFlattenedBlockAttributes","hasSameKeys","a","b","Object","keys","isUpdatingSameBlockAttribute","action","lastAction","type","undefined","clientIds","updateBlockTreeForBlocks","state","treeToUpdate","tree","flattenedBlocks","assign","get","byClientId","map","subBlock","updateParentInnerBlocksInTree","updatedClientIds","updateChildrenOfUpdatedClientIds","uncontrolledParents","Set","controlledParents","parents","controlledInnerBlocks","add","withBlockTree","reducer","newState","inserterClientIds","replacedClientIds","delete","parentsOfRemovedBlocks","parentId","removedClientIds","updatedBlockUids","fromRootClientId","toRootClientId","name","ref","updatedId","withPersistentBlockChange","markNextChangeAsNotPersistent","explicitPersistent","nextState","nextIsPersistentChange","_state$isPersistentCh","isPersistentChange","isExplicitPersistentChange","_state$isPersistentCh2","withIgnoredBlockChange","IGNORED_ACTION_TYPES","isIgnoredChange","has","withInnerBlocksRemoveCascade","getAllChildren","i","keepControlledInnerBlocks","withBlockReset","withReplaceInnerBlocks","nestedControllers","stateAfterBlocksRemoval","stateAfterInsert","index","stateAfterInsertOrder","key","_key","withSaveReusableBlock","id","withResetControlledBlocks","tempState","value","changes","updates","values","every","hasChange","_action$attributes","updatedAttributeEntries","entries","uniqueByBlock","hasUpdatedAttributes","existingAttributes","newAttributes","_state$get","blockOrder","concat","subState","mappedBlocks","_state$get$filter","fromIndex","indexOf","filter","includes","firstClientId","firstIndex","lastClientId","newSubOrder","reduce","_order$filter","hasControlledInnerBlocks","isBlockInterfaceHidden","isTyping","isDragging","draggedBlocks","blockVisibility","selectionHelper","updateSelection","blockToSelect","indexToSelect","selection","selectionStart","attributeKey","offset","startOffset","selectionEnd","endOffset","start","end","startClientId","endClientId","some","isMultiSelecting","isSelectionEnabled","removalPromptData","selectPrevious","message","blockRemovalRules","rules","initialPosition","blocksMode","insertionPoint","__unstableWithInserter","operation","nearestSide","template","isValid","settings","reset","preferences","nextInsertUsage","prevUsage","blockName","match","getActiveBlockVariation","time","count","insertUsage","blockListSettings","fromEntries","merged","editorMode","mode","hasBlockMovingClientId","lastBlockAttributesChange","accumulator","highlightedBlock","isHighlighted","expandedBlock","lastBlockInserted","source","meta","temporarilyEditingAsBlocks","temporarilyEditingFocusModeRevert","focusModeToRevert","blockEditingModes","openedBlockSettingsMenu","_action$clientId","styleOverrides","style","registeredInserterMediaCategories","category","lastFocus","hoveredBlockClientId","combinedReducers","withAutomaticChangeReset","automaticChangeStatus"],"sources":["@wordpress/block-editor/src/store/reducer.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport fastDeepEqual from 'fast-deep-equal/es6';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { pipe } from '@wordpress/compose';\r\nimport { combineReducers, select } from '@wordpress/data';\r\nimport { store as blocksStore } from '@wordpress/blocks';\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { PREFERENCES_DEFAULTS, SETTINGS_DEFAULTS } from './defaults';\r\nimport { insertAt, moveTo } from './array';\r\n\r\nconst identity = ( x ) => x;\r\n\r\n/**\r\n * Given an array of blocks, returns an object where each key is a nesting\r\n * context, the value of which is an array of block client IDs existing within\r\n * that nesting context.\r\n *\r\n * @param {Array}   blocks       Blocks to map.\r\n * @param {?string} rootClientId Assumed root client ID.\r\n *\r\n * @return {Object} Block order map object.\r\n */\r\nfunction mapBlockOrder( blocks, rootClientId = '' ) {\r\n\tconst result = new Map();\r\n\tconst current = [];\r\n\tresult.set( rootClientId, current );\r\n\tblocks.forEach( ( block ) => {\r\n\t\tconst { clientId, innerBlocks } = block;\r\n\t\tcurrent.push( clientId );\r\n\t\tmapBlockOrder( innerBlocks, clientId ).forEach(\r\n\t\t\t( order, subClientId ) => {\r\n\t\t\t\tresult.set( subClientId, order );\r\n\t\t\t}\r\n\t\t);\r\n\t} );\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Given an array of blocks, returns an object where each key contains\r\n * the clientId of the block and the value is the parent of the block.\r\n *\r\n * @param {Array}   blocks       Blocks to map.\r\n * @param {?string} rootClientId Assumed root client ID.\r\n *\r\n * @return {Object} Block order map object.\r\n */\r\nfunction mapBlockParents( blocks, rootClientId = '' ) {\r\n\tconst result = [];\r\n\tconst stack = [ [ rootClientId, blocks ] ];\r\n\twhile ( stack.length ) {\r\n\t\tconst [ parent, currentBlocks ] = stack.shift();\r\n\t\tcurrentBlocks.forEach( ( { innerBlocks, ...block } ) => {\r\n\t\t\tresult.push( [ block.clientId, parent ] );\r\n\t\t\tif ( innerBlocks?.length ) {\r\n\t\t\t\tstack.push( [ block.clientId, innerBlocks ] );\r\n\t\t\t}\r\n\t\t} );\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Helper method to iterate through all blocks, recursing into inner blocks,\r\n * applying a transformation function to each one.\r\n * Returns a flattened object with the transformed blocks.\r\n *\r\n * @param {Array}    blocks    Blocks to flatten.\r\n * @param {Function} transform Transforming function to be applied to each block.\r\n *\r\n * @return {Array} Flattened object.\r\n */\r\nfunction flattenBlocks( blocks, transform = identity ) {\r\n\tconst result = [];\r\n\r\n\tconst stack = [ ...blocks ];\r\n\twhile ( stack.length ) {\r\n\t\tconst { innerBlocks, ...block } = stack.shift();\r\n\t\tstack.push( ...innerBlocks );\r\n\t\tresult.push( [ block.clientId, transform( block ) ] );\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nfunction getFlattenedClientIds( blocks ) {\r\n\tconst result = {};\r\n\tconst stack = [ ...blocks ];\r\n\twhile ( stack.length ) {\r\n\t\tconst { innerBlocks, ...block } = stack.shift();\r\n\t\tstack.push( ...innerBlocks );\r\n\t\tresult[ block.clientId ] = true;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Given an array of blocks, returns an object containing all blocks, without\r\n * attributes, recursing into inner blocks. Keys correspond to the block client\r\n * ID, the value of which is the attributes object.\r\n *\r\n * @param {Array} blocks Blocks to flatten.\r\n *\r\n * @return {Array} Flattened block attributes object.\r\n */\r\nfunction getFlattenedBlocksWithoutAttributes( blocks ) {\r\n\treturn flattenBlocks( blocks, ( block ) => {\r\n\t\tconst { attributes, ...restBlock } = block;\r\n\t\treturn restBlock;\r\n\t} );\r\n}\r\n\r\n/**\r\n * Given an array of blocks, returns an object containing all block attributes,\r\n * recursing into inner blocks. Keys correspond to the block client ID, the\r\n * value of which is the attributes object.\r\n *\r\n * @param {Array} blocks Blocks to flatten.\r\n *\r\n * @return {Array} Flattened block attributes object.\r\n */\r\nfunction getFlattenedBlockAttributes( blocks ) {\r\n\treturn flattenBlocks( blocks, ( block ) => block.attributes );\r\n}\r\n\r\n/**\r\n * Returns true if the two object arguments have the same keys, or false\r\n * otherwise.\r\n *\r\n * @param {Object} a First object.\r\n * @param {Object} b Second object.\r\n *\r\n * @return {boolean} Whether the two objects have the same keys.\r\n */\r\nexport function hasSameKeys( a, b ) {\r\n\treturn fastDeepEqual( Object.keys( a ), Object.keys( b ) );\r\n}\r\n\r\n/**\r\n * Returns true if, given the currently dispatching action and the previously\r\n * dispatched action, the two actions are updating the same block attribute, or\r\n * false otherwise.\r\n *\r\n * @param {Object} action     Currently dispatching action.\r\n * @param {Object} lastAction Previously dispatched action.\r\n *\r\n * @return {boolean} Whether actions are updating the same block attribute.\r\n */\r\nexport function isUpdatingSameBlockAttribute( action, lastAction ) {\r\n\treturn (\r\n\t\taction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\r\n\t\tlastAction !== undefined &&\r\n\t\tlastAction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\r\n\t\tfastDeepEqual( action.clientIds, lastAction.clientIds ) &&\r\n\t\thasSameKeys( action.attributes, lastAction.attributes )\r\n\t);\r\n}\r\n\r\nfunction updateBlockTreeForBlocks( state, blocks ) {\r\n\tconst treeToUpdate = state.tree;\r\n\tconst stack = [ ...blocks ];\r\n\tconst flattenedBlocks = [ ...blocks ];\r\n\twhile ( stack.length ) {\r\n\t\tconst block = stack.shift();\r\n\t\tstack.push( ...block.innerBlocks );\r\n\t\tflattenedBlocks.push( ...block.innerBlocks );\r\n\t}\r\n\t// Create objects before mutating them, that way it's always defined.\r\n\tfor ( const block of flattenedBlocks ) {\r\n\t\ttreeToUpdate.set( block.clientId, {} );\r\n\t}\r\n\tfor ( const block of flattenedBlocks ) {\r\n\t\ttreeToUpdate.set(\r\n\t\t\tblock.clientId,\r\n\t\t\tObject.assign( treeToUpdate.get( block.clientId ), {\r\n\t\t\t\t...state.byClientId.get( block.clientId ),\r\n\t\t\t\tattributes: state.attributes.get( block.clientId ),\r\n\t\t\t\tinnerBlocks: block.innerBlocks.map( ( subBlock ) =>\r\n\t\t\t\t\ttreeToUpdate.get( subBlock.clientId )\r\n\t\t\t\t),\r\n\t\t\t} )\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction updateParentInnerBlocksInTree(\r\n\tstate,\r\n\tupdatedClientIds,\r\n\tupdateChildrenOfUpdatedClientIds = false\r\n) {\r\n\tconst treeToUpdate = state.tree;\r\n\tconst uncontrolledParents = new Set( [] );\r\n\tconst controlledParents = new Set();\r\n\tfor ( const clientId of updatedClientIds ) {\r\n\t\tlet current = updateChildrenOfUpdatedClientIds\r\n\t\t\t? clientId\r\n\t\t\t: state.parents.get( clientId );\r\n\t\tdo {\r\n\t\t\tif ( state.controlledInnerBlocks[ current ] ) {\r\n\t\t\t\t// Should stop on controlled blocks.\r\n\t\t\t\t// If we reach a controlled parent, break out of the loop.\r\n\t\t\t\tcontrolledParents.add( current );\r\n\t\t\t\tbreak;\r\n\t\t\t} else {\r\n\t\t\t\t// Else continue traversing up through parents.\r\n\t\t\t\tuncontrolledParents.add( current );\r\n\t\t\t\tcurrent = state.parents.get( current );\r\n\t\t\t}\r\n\t\t} while ( current !== undefined );\r\n\t}\r\n\r\n\t// To make sure the order of assignments doesn't matter,\r\n\t// we first create empty objects and mutates the inner blocks later.\r\n\tfor ( const clientId of uncontrolledParents ) {\r\n\t\ttreeToUpdate.set( clientId, { ...treeToUpdate.get( clientId ) } );\r\n\t}\r\n\tfor ( const clientId of uncontrolledParents ) {\r\n\t\ttreeToUpdate.get( clientId ).innerBlocks = (\r\n\t\t\tstate.order.get( clientId ) || []\r\n\t\t).map( ( subClientId ) => treeToUpdate.get( subClientId ) );\r\n\t}\r\n\r\n\t// Controlled parent blocks, need a dedicated key for their inner blocks\r\n\t// to be used when doing getBlocks( controlledBlockClientId ).\r\n\tfor ( const clientId of controlledParents ) {\r\n\t\ttreeToUpdate.set( 'controlled||' + clientId, {\r\n\t\t\tinnerBlocks: ( state.order.get( clientId ) || [] ).map(\r\n\t\t\t\t( subClientId ) => treeToUpdate.get( subClientId )\r\n\t\t\t),\r\n\t\t} );\r\n\t}\r\n}\r\n\r\n/**\r\n * Higher-order reducer intended to compute full block objects key for each block in the post.\r\n * This is a denormalization to optimize the performance of the getBlock selectors and avoid\r\n * recomputing the block objects and avoid heavy memoization.\r\n *\r\n * @param {Function} reducer Original reducer function.\r\n *\r\n * @return {Function} Enhanced reducer function.\r\n */\r\nconst withBlockTree =\r\n\t( reducer ) =>\r\n\t( state = {}, action ) => {\r\n\t\tconst newState = reducer( state, action );\r\n\r\n\t\tif ( newState === state ) {\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\tnewState.tree = state.tree ? state.tree : new Map();\r\n\t\tswitch ( action.type ) {\r\n\t\t\tcase 'RECEIVE_BLOCKS':\r\n\t\t\tcase 'INSERT_BLOCKS': {\r\n\t\t\t\tnewState.tree = new Map( newState.tree );\r\n\t\t\t\tupdateBlockTreeForBlocks( newState, action.blocks );\r\n\t\t\t\tupdateParentInnerBlocksInTree(\r\n\t\t\t\t\tnewState,\r\n\t\t\t\t\taction.rootClientId ? [ action.rootClientId ] : [ '' ],\r\n\t\t\t\t\ttrue\r\n\t\t\t\t);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'UPDATE_BLOCK':\r\n\t\t\t\tnewState.tree = new Map( newState.tree );\r\n\t\t\t\tnewState.tree.set( action.clientId, {\r\n\t\t\t\t\t...newState.tree.get( action.clientId ),\r\n\t\t\t\t\t...newState.byClientId.get( action.clientId ),\r\n\t\t\t\t\tattributes: newState.attributes.get( action.clientId ),\r\n\t\t\t\t} );\r\n\t\t\t\tupdateParentInnerBlocksInTree(\r\n\t\t\t\t\tnewState,\r\n\t\t\t\t\t[ action.clientId ],\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'SYNC_DERIVED_BLOCK_ATTRIBUTES':\r\n\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES': {\r\n\t\t\t\tnewState.tree = new Map( newState.tree );\r\n\t\t\t\taction.clientIds.forEach( ( clientId ) => {\r\n\t\t\t\t\tnewState.tree.set( clientId, {\r\n\t\t\t\t\t\t...newState.tree.get( clientId ),\r\n\t\t\t\t\t\tattributes: newState.attributes.get( clientId ),\r\n\t\t\t\t\t} );\r\n\t\t\t\t} );\r\n\t\t\t\tupdateParentInnerBlocksInTree(\r\n\t\t\t\t\tnewState,\r\n\t\t\t\t\taction.clientIds,\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\r\n\t\t\t\tconst inserterClientIds = getFlattenedClientIds(\r\n\t\t\t\t\taction.blocks\r\n\t\t\t\t);\r\n\t\t\t\tnewState.tree = new Map( newState.tree );\r\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\r\n\t\t\t\t\tnewState.tree.delete( clientId );\r\n\t\t\t\t\t// Controlled inner blocks are only removed\r\n\t\t\t\t\t// if the block doesn't move to another position\r\n\t\t\t\t\t// otherwise their content will be lost.\r\n\t\t\t\t\tif ( ! inserterClientIds[ clientId ] ) {\r\n\t\t\t\t\t\tnewState.tree.delete( 'controlled||' + clientId );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tupdateBlockTreeForBlocks( newState, action.blocks );\r\n\t\t\t\tupdateParentInnerBlocksInTree(\r\n\t\t\t\t\tnewState,\r\n\t\t\t\t\taction.blocks.map( ( b ) => b.clientId ),\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// If there are no replaced blocks, it means we're removing blocks so we need to update their parent.\r\n\t\t\t\tconst parentsOfRemovedBlocks = [];\r\n\t\t\t\tfor ( const clientId of action.clientIds ) {\r\n\t\t\t\t\tconst parentId = state.parents.get( clientId );\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tparentId !== undefined &&\r\n\t\t\t\t\t\t( parentId === '' ||\r\n\t\t\t\t\t\t\tnewState.byClientId.get( parentId ) )\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tparentsOfRemovedBlocks.push( parentId );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tupdateParentInnerBlocksInTree(\r\n\t\t\t\t\tnewState,\r\n\t\t\t\t\tparentsOfRemovedBlocks,\r\n\t\t\t\t\ttrue\r\n\t\t\t\t);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\r\n\t\t\t\tconst parentsOfRemovedBlocks = [];\r\n\t\t\t\tfor ( const clientId of action.clientIds ) {\r\n\t\t\t\t\tconst parentId = state.parents.get( clientId );\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tparentId !== undefined &&\r\n\t\t\t\t\t\t( parentId === '' ||\r\n\t\t\t\t\t\t\tnewState.byClientId.get( parentId ) )\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tparentsOfRemovedBlocks.push( parentId );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tnewState.tree = new Map( newState.tree );\r\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\r\n\t\t\t\t\tnewState.tree.delete( clientId );\r\n\t\t\t\t\tnewState.tree.delete( 'controlled||' + clientId );\r\n\t\t\t\t} );\r\n\t\t\t\tupdateParentInnerBlocksInTree(\r\n\t\t\t\t\tnewState,\r\n\t\t\t\t\tparentsOfRemovedBlocks,\r\n\t\t\t\t\ttrue\r\n\t\t\t\t);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\r\n\t\t\t\tconst updatedBlockUids = [];\r\n\t\t\t\tif ( action.fromRootClientId ) {\r\n\t\t\t\t\tupdatedBlockUids.push( action.fromRootClientId );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tupdatedBlockUids.push( '' );\r\n\t\t\t\t}\r\n\t\t\t\tif ( action.toRootClientId ) {\r\n\t\t\t\t\tupdatedBlockUids.push( action.toRootClientId );\r\n\t\t\t\t}\r\n\t\t\t\tnewState.tree = new Map( newState.tree );\r\n\t\t\t\tupdateParentInnerBlocksInTree(\r\n\t\t\t\t\tnewState,\r\n\t\t\t\t\tupdatedBlockUids,\r\n\t\t\t\t\ttrue\r\n\t\t\t\t);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'MOVE_BLOCKS_UP':\r\n\t\t\tcase 'MOVE_BLOCKS_DOWN': {\r\n\t\t\t\tconst updatedBlockUids = [\r\n\t\t\t\t\taction.rootClientId ? action.rootClientId : '',\r\n\t\t\t\t];\r\n\t\t\t\tnewState.tree = new Map( newState.tree );\r\n\t\t\t\tupdateParentInnerBlocksInTree(\r\n\t\t\t\t\tnewState,\r\n\t\t\t\t\tupdatedBlockUids,\r\n\t\t\t\t\ttrue\r\n\t\t\t\t);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS': {\r\n\t\t\t\tconst updatedBlockUids = [];\r\n\t\t\t\tnewState.attributes.forEach( ( attributes, clientId ) => {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tnewState.byClientId.get( clientId ).name ===\r\n\t\t\t\t\t\t\t'core/block' &&\r\n\t\t\t\t\t\tattributes.ref === action.updatedId\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tupdatedBlockUids.push( clientId );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t\tnewState.tree = new Map( newState.tree );\r\n\t\t\t\tupdatedBlockUids.forEach( ( clientId ) => {\r\n\t\t\t\t\tnewState.tree.set( clientId, {\r\n\t\t\t\t\t\t...newState.byClientId.get( clientId ),\r\n\t\t\t\t\t\tattributes: newState.attributes.get( clientId ),\r\n\t\t\t\t\t\tinnerBlocks: newState.tree.get( clientId ).innerBlocks,\r\n\t\t\t\t\t} );\r\n\t\t\t\t} );\r\n\t\t\t\tupdateParentInnerBlocksInTree(\r\n\t\t\t\t\tnewState,\r\n\t\t\t\t\tupdatedBlockUids,\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn newState;\r\n\t};\r\n\r\n/**\r\n * Higher-order reducer intended to augment the blocks reducer, assigning an\r\n * `isPersistentChange` property value corresponding to whether a change in\r\n * state can be considered as persistent. All changes are considered persistent\r\n * except when updating the same block attribute as in the previous action.\r\n *\r\n * @param {Function} reducer Original reducer function.\r\n *\r\n * @return {Function} Enhanced reducer function.\r\n */\r\nfunction withPersistentBlockChange( reducer ) {\r\n\tlet lastAction;\r\n\tlet markNextChangeAsNotPersistent = false;\r\n\tlet explicitPersistent;\r\n\r\n\treturn ( state, action ) => {\r\n\t\tlet nextState = reducer( state, action );\r\n\r\n\t\tlet nextIsPersistentChange;\r\n\t\tif ( action.type === 'SET_EXPLICIT_PERSISTENT' ) {\r\n\t\t\texplicitPersistent = action.isPersistentChange;\r\n\t\t\tnextIsPersistentChange = state.isPersistentChange ?? true;\r\n\t\t}\r\n\r\n\t\tif ( explicitPersistent !== undefined ) {\r\n\t\t\tnextIsPersistentChange = explicitPersistent;\r\n\t\t\treturn nextIsPersistentChange === nextState.isPersistentChange\r\n\t\t\t\t? nextState\r\n\t\t\t\t: {\r\n\t\t\t\t\t\t...nextState,\r\n\t\t\t\t\t\tisPersistentChange: nextIsPersistentChange,\r\n\t\t\t\t  };\r\n\t\t}\r\n\r\n\t\tconst isExplicitPersistentChange =\r\n\t\t\taction.type === 'MARK_LAST_CHANGE_AS_PERSISTENT' ||\r\n\t\t\tmarkNextChangeAsNotPersistent;\r\n\r\n\t\t// Defer to previous state value (or default) unless changing or\r\n\t\t// explicitly marking as persistent.\r\n\t\tif ( state === nextState && ! isExplicitPersistentChange ) {\r\n\t\t\tmarkNextChangeAsNotPersistent =\r\n\t\t\t\taction.type === 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT';\r\n\r\n\t\t\tnextIsPersistentChange = state?.isPersistentChange ?? true;\r\n\t\t\tif ( state.isPersistentChange === nextIsPersistentChange ) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...nextState,\r\n\t\t\t\tisPersistentChange: nextIsPersistentChange,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tnextState = {\r\n\t\t\t...nextState,\r\n\t\t\tisPersistentChange: isExplicitPersistentChange\r\n\t\t\t\t? ! markNextChangeAsNotPersistent\r\n\t\t\t\t: ! isUpdatingSameBlockAttribute( action, lastAction ),\r\n\t\t};\r\n\r\n\t\t// In comparing against the previous action, consider only those which\r\n\t\t// would have qualified as one which would have been ignored or not\r\n\t\t// have resulted in a changed state.\r\n\t\tlastAction = action;\r\n\t\tmarkNextChangeAsNotPersistent =\r\n\t\t\taction.type === 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT';\r\n\r\n\t\treturn nextState;\r\n\t};\r\n}\r\n\r\n/**\r\n * Higher-order reducer intended to augment the blocks reducer, assigning an\r\n * `isIgnoredChange` property value corresponding to whether a change in state\r\n * can be considered as ignored. A change is considered ignored when the result\r\n * of an action not incurred by direct user interaction.\r\n *\r\n * @param {Function} reducer Original reducer function.\r\n *\r\n * @return {Function} Enhanced reducer function.\r\n */\r\nfunction withIgnoredBlockChange( reducer ) {\r\n\t/**\r\n\t * Set of action types for which a blocks state change should be ignored.\r\n\t *\r\n\t * @type {Set}\r\n\t */\r\n\tconst IGNORED_ACTION_TYPES = new Set( [ 'RECEIVE_BLOCKS' ] );\r\n\r\n\treturn ( state, action ) => {\r\n\t\tconst nextState = reducer( state, action );\r\n\r\n\t\tif ( nextState !== state ) {\r\n\t\t\tnextState.isIgnoredChange = IGNORED_ACTION_TYPES.has( action.type );\r\n\t\t}\r\n\r\n\t\treturn nextState;\r\n\t};\r\n}\r\n\r\n/**\r\n * Higher-order reducer targeting the combined blocks reducer, augmenting\r\n * block client IDs in remove action to include cascade of inner blocks.\r\n *\r\n * @param {Function} reducer Original reducer function.\r\n *\r\n * @return {Function} Enhanced reducer function.\r\n */\r\nconst withInnerBlocksRemoveCascade = ( reducer ) => ( state, action ) => {\r\n\t// Gets all children which need to be removed.\r\n\tconst getAllChildren = ( clientIds ) => {\r\n\t\tlet result = clientIds;\r\n\t\tfor ( let i = 0; i < result.length; i++ ) {\r\n\t\t\tif (\r\n\t\t\t\t! state.order.get( result[ i ] ) ||\r\n\t\t\t\t( action.keepControlledInnerBlocks &&\r\n\t\t\t\t\taction.keepControlledInnerBlocks[ result[ i ] ] )\r\n\t\t\t) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif ( result === clientIds ) {\r\n\t\t\t\tresult = [ ...result ];\r\n\t\t\t}\r\n\r\n\t\t\tresult.push( ...state.order.get( result[ i ] ) );\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\tif ( state ) {\r\n\t\tswitch ( action.type ) {\r\n\t\t\tcase 'REMOVE_BLOCKS':\r\n\t\t\t\taction = {\r\n\t\t\t\t\t...action,\r\n\t\t\t\t\ttype: 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN',\r\n\t\t\t\t\tremovedClientIds: getAllChildren( action.clientIds ),\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'REPLACE_BLOCKS':\r\n\t\t\t\taction = {\r\n\t\t\t\t\t...action,\r\n\t\t\t\t\ttype: 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN',\r\n\t\t\t\t\treplacedClientIds: getAllChildren( action.clientIds ),\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\treturn reducer( state, action );\r\n};\r\n\r\n/**\r\n * Higher-order reducer which targets the combined blocks reducer and handles\r\n * the `RESET_BLOCKS` action. When dispatched, this action will replace all\r\n * blocks that exist in the post, leaving blocks that exist only in state (e.g.\r\n * reusable blocks and blocks controlled by inner blocks controllers) alone.\r\n *\r\n * @param {Function} reducer Original reducer function.\r\n *\r\n * @return {Function} Enhanced reducer function.\r\n */\r\nconst withBlockReset = ( reducer ) => ( state, action ) => {\r\n\tif ( action.type === 'RESET_BLOCKS' ) {\r\n\t\tconst newState = {\r\n\t\t\t...state,\r\n\t\t\tbyClientId: new Map(\r\n\t\t\t\tgetFlattenedBlocksWithoutAttributes( action.blocks )\r\n\t\t\t),\r\n\t\t\tattributes: new Map( getFlattenedBlockAttributes( action.blocks ) ),\r\n\t\t\torder: mapBlockOrder( action.blocks ),\r\n\t\t\tparents: new Map( mapBlockParents( action.blocks ) ),\r\n\t\t\tcontrolledInnerBlocks: {},\r\n\t\t};\r\n\r\n\t\tnewState.tree = new Map( state?.tree );\r\n\t\tupdateBlockTreeForBlocks( newState, action.blocks );\r\n\t\tnewState.tree.set( '', {\r\n\t\t\tinnerBlocks: action.blocks.map( ( subBlock ) =>\r\n\t\t\t\tnewState.tree.get( subBlock.clientId )\r\n\t\t\t),\r\n\t\t} );\r\n\r\n\t\treturn newState;\r\n\t}\r\n\r\n\treturn reducer( state, action );\r\n};\r\n\r\n/**\r\n * Higher-order reducer which targets the combined blocks reducer and handles\r\n * the `REPLACE_INNER_BLOCKS` action. When dispatched, this action the state\r\n * should become equivalent to the execution of a `REMOVE_BLOCKS` action\r\n * containing all the child's of the root block followed by the execution of\r\n * `INSERT_BLOCKS` with the new blocks.\r\n *\r\n * @param {Function} reducer Original reducer function.\r\n *\r\n * @return {Function} Enhanced reducer function.\r\n */\r\nconst withReplaceInnerBlocks = ( reducer ) => ( state, action ) => {\r\n\tif ( action.type !== 'REPLACE_INNER_BLOCKS' ) {\r\n\t\treturn reducer( state, action );\r\n\t}\r\n\r\n\t// Finds every nested inner block controller. We must check the action blocks\r\n\t// and not just the block parent state because some inner block controllers\r\n\t// should be deleted if specified, whereas others should not be deleted. If\r\n\t// a controlled should not be deleted, then we need to avoid deleting its\r\n\t// inner blocks from the block state because its inner blocks will not be\r\n\t// attached to the block in the action.\r\n\tconst nestedControllers = {};\r\n\tif ( Object.keys( state.controlledInnerBlocks ).length ) {\r\n\t\tconst stack = [ ...action.blocks ];\r\n\t\twhile ( stack.length ) {\r\n\t\t\tconst { innerBlocks, ...block } = stack.shift();\r\n\t\t\tstack.push( ...innerBlocks );\r\n\t\t\tif ( !! state.controlledInnerBlocks[ block.clientId ] ) {\r\n\t\t\t\tnestedControllers[ block.clientId ] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// The `keepControlledInnerBlocks` prop will keep the inner blocks of the\r\n\t// marked block in the block state so that they can be reattached to the\r\n\t// marked block when we re-insert everything a few lines below.\r\n\tlet stateAfterBlocksRemoval = state;\r\n\tif ( state.order.get( action.rootClientId ) ) {\r\n\t\tstateAfterBlocksRemoval = reducer( stateAfterBlocksRemoval, {\r\n\t\t\ttype: 'REMOVE_BLOCKS',\r\n\t\t\tkeepControlledInnerBlocks: nestedControllers,\r\n\t\t\tclientIds: state.order.get( action.rootClientId ),\r\n\t\t} );\r\n\t}\r\n\tlet stateAfterInsert = stateAfterBlocksRemoval;\r\n\tif ( action.blocks.length ) {\r\n\t\tstateAfterInsert = reducer( stateAfterInsert, {\r\n\t\t\t...action,\r\n\t\t\ttype: 'INSERT_BLOCKS',\r\n\t\t\tindex: 0,\r\n\t\t} );\r\n\r\n\t\t// We need to re-attach the controlled inner blocks to the blocks tree and\r\n\t\t// preserve their block order. Otherwise, an inner block controller's blocks\r\n\t\t// will be deleted entirely from its entity.\r\n\t\tconst stateAfterInsertOrder = new Map( stateAfterInsert.order );\r\n\t\tObject.keys( nestedControllers ).forEach( ( key ) => {\r\n\t\t\tif ( state.order.get( key ) ) {\r\n\t\t\t\tstateAfterInsertOrder.set( key, state.order.get( key ) );\r\n\t\t\t}\r\n\t\t} );\r\n\t\tstateAfterInsert.order = stateAfterInsertOrder;\r\n\t\tstateAfterInsert.tree = new Map( stateAfterInsert.tree );\r\n\t\tObject.keys( nestedControllers ).forEach( ( _key ) => {\r\n\t\t\tconst key = `controlled||${ _key }`;\r\n\t\t\tif ( state.tree.has( key ) ) {\r\n\t\t\t\tstateAfterInsert.tree.set( key, state.tree.get( key ) );\r\n\t\t\t}\r\n\t\t} );\r\n\t}\r\n\treturn stateAfterInsert;\r\n};\r\n\r\n/**\r\n * Higher-order reducer which targets the combined blocks reducer and handles\r\n * the `SAVE_REUSABLE_BLOCK_SUCCESS` action. This action can't be handled by\r\n * regular reducers and needs a higher-order reducer since it needs access to\r\n * both `byClientId` and `attributes` simultaneously.\r\n *\r\n * @param {Function} reducer Original reducer function.\r\n *\r\n * @return {Function} Enhanced reducer function.\r\n */\r\nconst withSaveReusableBlock = ( reducer ) => ( state, action ) => {\r\n\tif ( state && action.type === 'SAVE_REUSABLE_BLOCK_SUCCESS' ) {\r\n\t\tconst { id, updatedId } = action;\r\n\r\n\t\t// If a temporary reusable block is saved, we swap the temporary id with the final one.\r\n\t\tif ( id === updatedId ) {\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\tstate = { ...state };\r\n\t\tstate.attributes = new Map( state.attributes );\r\n\t\tstate.attributes.forEach( ( attributes, clientId ) => {\r\n\t\t\tconst { name } = state.byClientId.get( clientId );\r\n\t\t\tif ( name === 'core/block' && attributes.ref === id ) {\r\n\t\t\t\tstate.attributes.set( clientId, {\r\n\t\t\t\t\t...attributes,\r\n\t\t\t\t\tref: updatedId,\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t} );\r\n\t}\r\n\r\n\treturn reducer( state, action );\r\n};\r\n/**\r\n * Higher-order reducer which removes blocks from state when switching parent block controlled state.\r\n *\r\n * @param {Function} reducer Original reducer function.\r\n *\r\n * @return {Function} Enhanced reducer function.\r\n */\r\nconst withResetControlledBlocks = ( reducer ) => ( state, action ) => {\r\n\tif ( action.type === 'SET_HAS_CONTROLLED_INNER_BLOCKS' ) {\r\n\t\t// when switching a block from controlled to uncontrolled or inverse,\r\n\t\t// we need to remove its content first.\r\n\t\tconst tempState = reducer( state, {\r\n\t\t\ttype: 'REPLACE_INNER_BLOCKS',\r\n\t\t\trootClientId: action.clientId,\r\n\t\t\tblocks: [],\r\n\t\t} );\r\n\t\treturn reducer( tempState, action );\r\n\t}\r\n\r\n\treturn reducer( state, action );\r\n};\r\n\r\n/**\r\n * Reducer returning the blocks state.\r\n *\r\n * @param {Object} state  Current state.\r\n * @param {Object} action Dispatched action.\r\n *\r\n * @return {Object} Updated state.\r\n */\r\nexport const blocks = pipe(\r\n\tcombineReducers,\r\n\twithSaveReusableBlock, // Needs to be before withBlockCache.\r\n\twithBlockTree, // Needs to be before withInnerBlocksRemoveCascade.\r\n\twithInnerBlocksRemoveCascade,\r\n\twithReplaceInnerBlocks, // Needs to be after withInnerBlocksRemoveCascade.\r\n\twithBlockReset,\r\n\twithPersistentBlockChange,\r\n\twithIgnoredBlockChange,\r\n\twithResetControlledBlocks\r\n)( {\r\n\t// The state is using a Map instead of a plain object for performance reasons.\r\n\t// You can run the \"./test/performance.js\" unit test to check the impact\r\n\t// code changes can have on this reducer.\r\n\tbyClientId( state = new Map(), action ) {\r\n\t\tswitch ( action.type ) {\r\n\t\t\tcase 'RECEIVE_BLOCKS':\r\n\t\t\tcase 'INSERT_BLOCKS': {\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\tgetFlattenedBlocksWithoutAttributes( action.blocks ).forEach(\r\n\t\t\t\t\t( [ key, value ] ) => {\r\n\t\t\t\t\t\tnewState.set( key, value );\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\t\t\tcase 'UPDATE_BLOCK': {\r\n\t\t\t\t// Ignore updates if block isn't known.\r\n\t\t\t\tif ( ! state.has( action.clientId ) ) {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Do nothing if only attributes change.\r\n\t\t\t\tconst { attributes, ...changes } = action.updates;\r\n\t\t\t\tif ( Object.values( changes ).length === 0 ) {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\tnewState.set( action.clientId, {\r\n\t\t\t\t\t...state.get( action.clientId ),\r\n\t\t\t\t\t...changes,\r\n\t\t\t\t} );\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\r\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\r\n\t\t\t\tif ( ! action.blocks ) {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\r\n\t\t\t\t\tnewState.delete( clientId );\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tgetFlattenedBlocksWithoutAttributes( action.blocks ).forEach(\r\n\t\t\t\t\t( [ key, value ] ) => {\r\n\t\t\t\t\t\tnewState.set( key, value );\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\r\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\r\n\t\t\t\t\tnewState.delete( clientId );\r\n\t\t\t\t} );\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn state;\r\n\t},\r\n\r\n\t// The state is using a Map instead of a plain object for performance reasons.\r\n\t// You can run the \"./test/performance.js\" unit test to check the impact\r\n\t// code changes can have on this reducer.\r\n\tattributes( state = new Map(), action ) {\r\n\t\tswitch ( action.type ) {\r\n\t\t\tcase 'RECEIVE_BLOCKS':\r\n\t\t\tcase 'INSERT_BLOCKS': {\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\tgetFlattenedBlockAttributes( action.blocks ).forEach(\r\n\t\t\t\t\t( [ key, value ] ) => {\r\n\t\t\t\t\t\tnewState.set( key, value );\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\r\n\t\t\tcase 'UPDATE_BLOCK': {\r\n\t\t\t\t// Ignore updates if block isn't known or there are no attribute changes.\r\n\t\t\t\tif (\r\n\t\t\t\t\t! state.get( action.clientId ) ||\r\n\t\t\t\t\t! action.updates.attributes\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\tnewState.set( action.clientId, {\r\n\t\t\t\t\t...state.get( action.clientId ),\r\n\t\t\t\t\t...action.updates.attributes,\r\n\t\t\t\t} );\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\r\n\t\t\tcase 'SYNC_DERIVED_BLOCK_ATTRIBUTES':\r\n\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES': {\r\n\t\t\t\t// Avoid a state change if none of the block IDs are known.\r\n\t\t\t\tif ( action.clientIds.every( ( id ) => ! state.get( id ) ) ) {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet hasChange = false;\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\tfor ( const clientId of action.clientIds ) {\r\n\t\t\t\t\tconst updatedAttributeEntries = Object.entries(\r\n\t\t\t\t\t\taction.uniqueByBlock\r\n\t\t\t\t\t\t\t? action.attributes[ clientId ]\r\n\t\t\t\t\t\t\t: action.attributes ?? {}\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif ( updatedAttributeEntries.length === 0 ) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet hasUpdatedAttributes = false;\r\n\t\t\t\t\tconst existingAttributes = state.get( clientId );\r\n\t\t\t\t\tconst newAttributes = {};\r\n\t\t\t\t\tupdatedAttributeEntries.forEach( ( [ key, value ] ) => {\r\n\t\t\t\t\t\tif ( existingAttributes[ key ] !== value ) {\r\n\t\t\t\t\t\t\thasUpdatedAttributes = true;\r\n\t\t\t\t\t\t\tnewAttributes[ key ] = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t\thasChange = hasChange || hasUpdatedAttributes;\r\n\t\t\t\t\tif ( hasUpdatedAttributes ) {\r\n\t\t\t\t\t\tnewState.set( clientId, {\r\n\t\t\t\t\t\t\t...existingAttributes,\r\n\t\t\t\t\t\t\t...newAttributes,\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn hasChange ? newState : state;\r\n\t\t\t}\r\n\r\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\r\n\t\t\t\tif ( ! action.blocks ) {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\r\n\t\t\t\t\tnewState.delete( clientId );\r\n\t\t\t\t} );\r\n\t\t\t\tgetFlattenedBlockAttributes( action.blocks ).forEach(\r\n\t\t\t\t\t( [ key, value ] ) => {\r\n\t\t\t\t\t\tnewState.set( key, value );\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\r\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\r\n\t\t\t\t\tnewState.delete( clientId );\r\n\t\t\t\t} );\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn state;\r\n\t},\r\n\r\n\t// The state is using a Map instead of a plain object for performance reasons.\r\n\t// You can run the \"./test/performance.js\" unit test to check the impact\r\n\t// code changes can have on this reducer.\r\n\torder( state = new Map(), action ) {\r\n\t\tswitch ( action.type ) {\r\n\t\t\tcase 'RECEIVE_BLOCKS': {\r\n\t\t\t\tconst blockOrder = mapBlockOrder( action.blocks );\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\tblockOrder.forEach( ( order, clientId ) => {\r\n\t\t\t\t\tif ( clientId !== '' ) {\r\n\t\t\t\t\t\tnewState.set( clientId, order );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t\tnewState.set(\r\n\t\t\t\t\t'',\r\n\t\t\t\t\t( state.get( '' ) ?? [] ).concat( blockOrder[ '' ] )\r\n\t\t\t\t);\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\t\t\tcase 'INSERT_BLOCKS': {\r\n\t\t\t\tconst { rootClientId = '' } = action;\r\n\t\t\t\tconst subState = state.get( rootClientId ) || [];\r\n\t\t\t\tconst mappedBlocks = mapBlockOrder(\r\n\t\t\t\t\taction.blocks,\r\n\t\t\t\t\trootClientId\r\n\t\t\t\t);\r\n\t\t\t\tconst { index = subState.length } = action;\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\tmappedBlocks.forEach( ( order, clientId ) => {\r\n\t\t\t\t\tnewState.set( clientId, order );\r\n\t\t\t\t} );\r\n\t\t\t\tnewState.set(\r\n\t\t\t\t\trootClientId,\r\n\t\t\t\t\tinsertAt(\r\n\t\t\t\t\t\tsubState,\r\n\t\t\t\t\t\tmappedBlocks.get( rootClientId ),\r\n\t\t\t\t\t\tindex\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\r\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\r\n\t\t\t\tconst {\r\n\t\t\t\t\tfromRootClientId = '',\r\n\t\t\t\t\ttoRootClientId = '',\r\n\t\t\t\t\tclientIds,\r\n\t\t\t\t} = action;\r\n\t\t\t\tconst { index = state.get( toRootClientId ).length } = action;\r\n\r\n\t\t\t\t// Moving inside the same parent block.\r\n\t\t\t\tif ( fromRootClientId === toRootClientId ) {\r\n\t\t\t\t\tconst subState = state.get( toRootClientId );\r\n\t\t\t\t\tconst fromIndex = subState.indexOf( clientIds[ 0 ] );\r\n\t\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\t\tnewState.set(\r\n\t\t\t\t\t\ttoRootClientId,\r\n\t\t\t\t\t\tmoveTo(\r\n\t\t\t\t\t\t\tstate.get( toRootClientId ),\r\n\t\t\t\t\t\t\tfromIndex,\r\n\t\t\t\t\t\t\tindex,\r\n\t\t\t\t\t\t\tclientIds.length\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn newState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Moving from a parent block to another.\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\tnewState.set(\r\n\t\t\t\t\tfromRootClientId,\r\n\t\t\t\t\tstate\r\n\t\t\t\t\t\t.get( fromRootClientId )\r\n\t\t\t\t\t\t?.filter( ( id ) => ! clientIds.includes( id ) ) ?? []\r\n\t\t\t\t);\r\n\t\t\t\tnewState.set(\r\n\t\t\t\t\ttoRootClientId,\r\n\t\t\t\t\tinsertAt( state.get( toRootClientId ), clientIds, index )\r\n\t\t\t\t);\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\r\n\t\t\tcase 'MOVE_BLOCKS_UP': {\r\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\r\n\t\t\t\tconst firstClientId = clientIds[ 0 ];\r\n\t\t\t\tconst subState = state.get( rootClientId );\r\n\r\n\t\t\t\tif ( ! subState.length || firstClientId === subState[ 0 ] ) {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\tnewState.set(\r\n\t\t\t\t\trootClientId,\r\n\t\t\t\t\tmoveTo(\r\n\t\t\t\t\t\tsubState,\r\n\t\t\t\t\t\tfirstIndex,\r\n\t\t\t\t\t\tfirstIndex - 1,\r\n\t\t\t\t\t\tclientIds.length\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\r\n\t\t\tcase 'MOVE_BLOCKS_DOWN': {\r\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\r\n\t\t\t\tconst firstClientId = clientIds[ 0 ];\r\n\t\t\t\tconst lastClientId = clientIds[ clientIds.length - 1 ];\r\n\t\t\t\tconst subState = state.get( rootClientId );\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\t! subState.length ||\r\n\t\t\t\t\tlastClientId === subState[ subState.length - 1 ]\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\tnewState.set(\r\n\t\t\t\t\trootClientId,\r\n\t\t\t\t\tmoveTo(\r\n\t\t\t\t\t\tsubState,\r\n\t\t\t\t\t\tfirstIndex,\r\n\t\t\t\t\t\tfirstIndex + 1,\r\n\t\t\t\t\t\tclientIds.length\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\r\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\r\n\t\t\t\tconst { clientIds } = action;\r\n\t\t\t\tif ( ! action.blocks ) {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst mappedBlocks = mapBlockOrder( action.blocks );\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\r\n\t\t\t\t\tnewState.delete( clientId );\r\n\t\t\t\t} );\r\n\t\t\t\tmappedBlocks.forEach( ( order, clientId ) => {\r\n\t\t\t\t\tif ( clientId !== '' ) {\r\n\t\t\t\t\t\tnewState.set( clientId, order );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t\tnewState.forEach( ( order, clientId ) => {\r\n\t\t\t\t\tconst newSubOrder = Object.values( order ).reduce(\r\n\t\t\t\t\t\t( result, subClientId ) => {\r\n\t\t\t\t\t\t\tif ( subClientId === clientIds[ 0 ] ) {\r\n\t\t\t\t\t\t\t\treturn [ ...result, ...mappedBlocks.get( '' ) ];\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( clientIds.indexOf( subClientId ) === -1 ) {\r\n\t\t\t\t\t\t\t\tresult.push( subClientId );\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t[]\r\n\t\t\t\t\t);\r\n\t\t\t\t\tnewState.set( clientId, newSubOrder );\r\n\t\t\t\t} );\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\r\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\t// Remove inner block ordering for removed blocks.\r\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\r\n\t\t\t\t\tnewState.delete( clientId );\r\n\t\t\t\t} );\r\n\t\t\t\tnewState.forEach( ( order, clientId ) => {\r\n\t\t\t\t\tconst newSubOrder =\r\n\t\t\t\t\t\torder?.filter(\r\n\t\t\t\t\t\t\t( id ) => ! action.removedClientIds.includes( id )\r\n\t\t\t\t\t\t) ?? [];\r\n\t\t\t\t\tif ( newSubOrder.length !== order.length ) {\r\n\t\t\t\t\t\tnewState.set( clientId, newSubOrder );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn state;\r\n\t},\r\n\r\n\t// While technically redundant data as the inverse of `order`, it serves as\r\n\t// an optimization for the selectors which derive the ancestry of a block.\r\n\tparents( state = new Map(), action ) {\r\n\t\tswitch ( action.type ) {\r\n\t\t\tcase 'RECEIVE_BLOCKS': {\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\tmapBlockParents( action.blocks ).forEach(\r\n\t\t\t\t\t( [ key, value ] ) => {\r\n\t\t\t\t\t\tnewState.set( key, value );\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\t\t\tcase 'INSERT_BLOCKS': {\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\tmapBlockParents(\r\n\t\t\t\t\taction.blocks,\r\n\t\t\t\t\taction.rootClientId || ''\r\n\t\t\t\t).forEach( ( [ key, value ] ) => {\r\n\t\t\t\t\tnewState.set( key, value );\r\n\t\t\t\t} );\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\taction.clientIds.forEach( ( id ) => {\r\n\t\t\t\t\tnewState.set( id, action.toRootClientId || '' );\r\n\t\t\t\t} );\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\r\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\r\n\t\t\t\t\tnewState.delete( clientId );\r\n\t\t\t\t} );\r\n\t\t\t\tmapBlockParents(\r\n\t\t\t\t\taction.blocks,\r\n\t\t\t\t\tstate.get( action.clientIds[ 0 ] )\r\n\t\t\t\t).forEach( ( [ key, value ] ) => {\r\n\t\t\t\t\tnewState.set( key, value );\r\n\t\t\t\t} );\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\r\n\t\t\t\tconst newState = new Map( state );\r\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\r\n\t\t\t\t\tnewState.delete( clientId );\r\n\t\t\t\t} );\r\n\t\t\t\treturn newState;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn state;\r\n\t},\r\n\r\n\tcontrolledInnerBlocks(\r\n\t\tstate = {},\r\n\t\t{ type, clientId, hasControlledInnerBlocks }\r\n\t) {\r\n\t\tif ( type === 'SET_HAS_CONTROLLED_INNER_BLOCKS' ) {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[ clientId ]: hasControlledInnerBlocks,\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn state;\r\n\t},\r\n} );\r\n\r\n/**\r\n * Reducer returning visibility status of block interface.\r\n *\r\n * @param {boolean} state  Current state.\r\n * @param {Object}  action Dispatched action.\r\n *\r\n * @return {boolean} Updated state.\r\n */\r\nexport function isBlockInterfaceHidden( state = false, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'HIDE_BLOCK_INTERFACE':\r\n\t\t\treturn true;\r\n\r\n\t\tcase 'SHOW_BLOCK_INTERFACE':\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning typing state.\r\n *\r\n * @param {boolean} state  Current state.\r\n * @param {Object}  action Dispatched action.\r\n *\r\n * @return {boolean} Updated state.\r\n */\r\nexport function isTyping( state = false, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'START_TYPING':\r\n\t\t\treturn true;\r\n\r\n\t\tcase 'STOP_TYPING':\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning dragging state. It is possible for a user to be dragging\r\n * data from outside of the editor, so this state is separate from `draggedBlocks`.\r\n *\r\n * @param {boolean} state  Current state.\r\n * @param {Object}  action Dispatched action.\r\n *\r\n * @return {boolean} Updated state.\r\n */\r\nexport function isDragging( state = false, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'START_DRAGGING':\r\n\t\t\treturn true;\r\n\r\n\t\tcase 'STOP_DRAGGING':\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning dragged block client id.\r\n *\r\n * @param {string[]} state  Current state.\r\n * @param {Object}   action Dispatched action.\r\n *\r\n * @return {string[]} Updated state.\r\n */\r\nexport function draggedBlocks( state = [], action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'START_DRAGGING_BLOCKS':\r\n\t\t\treturn action.clientIds;\r\n\r\n\t\tcase 'STOP_DRAGGING_BLOCKS':\r\n\t\t\treturn [];\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer tracking the visible blocks.\r\n *\r\n * @param {Record<string,boolean>} state  Current state.\r\n * @param {Object}                 action Dispatched action.\r\n *\r\n * @return {Record<string,boolean>} Block visibility.\r\n */\r\nexport function blockVisibility( state = {}, action ) {\r\n\tif ( action.type === 'SET_BLOCK_VISIBILITY' ) {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\t...action.updates,\r\n\t\t};\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Internal helper reducer for selectionStart and selectionEnd. Can hold a block\r\n * selection, represented by an object with property clientId.\r\n *\r\n * @param {Object} state  Current state.\r\n * @param {Object} action Dispatched action.\r\n *\r\n * @return {Object} Updated state.\r\n */\r\nfunction selectionHelper( state = {}, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'CLEAR_SELECTED_BLOCK': {\r\n\t\t\tif ( state.clientId ) {\r\n\t\t\t\treturn {};\r\n\t\t\t}\r\n\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\tcase 'SELECT_BLOCK':\r\n\t\t\tif ( action.clientId === state.clientId ) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn { clientId: action.clientId };\r\n\t\tcase 'REPLACE_INNER_BLOCKS':\r\n\t\tcase 'INSERT_BLOCKS': {\r\n\t\t\tif ( ! action.updateSelection || ! action.blocks.length ) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn { clientId: action.blocks[ 0 ].clientId };\r\n\t\t}\r\n\t\tcase 'REMOVE_BLOCKS':\r\n\t\t\tif (\r\n\t\t\t\t! action.clientIds ||\r\n\t\t\t\t! action.clientIds.length ||\r\n\t\t\t\taction.clientIds.indexOf( state.clientId ) === -1\r\n\t\t\t) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn {};\r\n\t\tcase 'REPLACE_BLOCKS': {\r\n\t\t\tif ( action.clientIds.indexOf( state.clientId ) === -1 ) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tconst blockToSelect =\r\n\t\t\t\taction.blocks[ action.indexToSelect ] ||\r\n\t\t\t\taction.blocks[ action.blocks.length - 1 ];\r\n\r\n\t\t\tif ( ! blockToSelect ) {\r\n\t\t\t\treturn {};\r\n\t\t\t}\r\n\r\n\t\t\tif ( blockToSelect.clientId === state.clientId ) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn { clientId: blockToSelect.clientId };\r\n\t\t}\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning the selection state.\r\n *\r\n * @param {boolean} state  Current state.\r\n * @param {Object}  action Dispatched action.\r\n *\r\n * @return {boolean} Updated state.\r\n */\r\nexport function selection( state = {}, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'SELECTION_CHANGE':\r\n\t\t\tif ( action.clientId ) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tselectionStart: {\r\n\t\t\t\t\t\tclientId: action.clientId,\r\n\t\t\t\t\t\tattributeKey: action.attributeKey,\r\n\t\t\t\t\t\toffset: action.startOffset,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tselectionEnd: {\r\n\t\t\t\t\t\tclientId: action.clientId,\r\n\t\t\t\t\t\tattributeKey: action.attributeKey,\r\n\t\t\t\t\t\toffset: action.endOffset,\r\n\t\t\t\t\t},\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tselectionStart: action.start || state.selectionStart,\r\n\t\t\t\tselectionEnd: action.end || state.selectionEnd,\r\n\t\t\t};\r\n\t\tcase 'RESET_SELECTION':\r\n\t\t\tconst { selectionStart, selectionEnd } = action;\r\n\t\t\treturn {\r\n\t\t\t\tselectionStart,\r\n\t\t\t\tselectionEnd,\r\n\t\t\t};\r\n\t\tcase 'MULTI_SELECT':\r\n\t\t\tconst { start, end } = action;\r\n\r\n\t\t\tif (\r\n\t\t\t\tstart === state.selectionStart?.clientId &&\r\n\t\t\t\tend === state.selectionEnd?.clientId\r\n\t\t\t) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tselectionStart: { clientId: start },\r\n\t\t\t\tselectionEnd: { clientId: end },\r\n\t\t\t};\r\n\t\tcase 'RESET_BLOCKS':\r\n\t\t\tconst startClientId = state?.selectionStart?.clientId;\r\n\t\t\tconst endClientId = state?.selectionEnd?.clientId;\r\n\r\n\t\t\t// Do nothing if there's no selected block.\r\n\t\t\tif ( ! startClientId && ! endClientId ) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\t// If the start of the selection won't exist after reset, remove selection.\r\n\t\t\tif (\r\n\t\t\t\t! action.blocks.some(\r\n\t\t\t\t\t( block ) => block.clientId === startClientId\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tselectionStart: {},\r\n\t\t\t\t\tselectionEnd: {},\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// If the end of the selection won't exist after reset, collapse selection.\r\n\t\t\tif (\r\n\t\t\t\t! action.blocks.some(\r\n\t\t\t\t\t( block ) => block.clientId === endClientId\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tselectionEnd: state.selectionStart,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t}\r\n\r\n\tconst selectionStart = selectionHelper( state.selectionStart, action );\r\n\tconst selectionEnd = selectionHelper( state.selectionEnd, action );\r\n\r\n\tif (\r\n\t\tselectionStart === state.selectionStart &&\r\n\t\tselectionEnd === state.selectionEnd\r\n\t) {\r\n\t\treturn state;\r\n\t}\r\n\r\n\treturn {\r\n\t\tselectionStart,\r\n\t\tselectionEnd,\r\n\t};\r\n}\r\n\r\n/**\r\n * Reducer returning whether the user is multi-selecting.\r\n *\r\n * @param {boolean} state  Current state.\r\n * @param {Object}  action Dispatched action.\r\n *\r\n * @return {boolean} Updated state.\r\n */\r\nexport function isMultiSelecting( state = false, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'START_MULTI_SELECT':\r\n\t\t\treturn true;\r\n\r\n\t\tcase 'STOP_MULTI_SELECT':\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning whether selection is enabled.\r\n *\r\n * @param {boolean} state  Current state.\r\n * @param {Object}  action Dispatched action.\r\n *\r\n * @return {boolean} Updated state.\r\n */\r\nexport function isSelectionEnabled( state = true, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'TOGGLE_SELECTION':\r\n\t\t\treturn action.isSelectionEnabled;\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning the data needed to display a prompt when certain blocks\r\n * are removed, or `false` if no such prompt is requested.\r\n *\r\n * @param {boolean} state  Current state.\r\n * @param {Object}  action Dispatched action.\r\n *\r\n * @return {Object|false} Data for removal prompt display, if any.\r\n */\r\nfunction removalPromptData( state = false, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'DISPLAY_BLOCK_REMOVAL_PROMPT':\r\n\t\t\tconst { clientIds, selectPrevious, message } = action;\r\n\t\t\treturn {\r\n\t\t\t\tclientIds,\r\n\t\t\t\tselectPrevious,\r\n\t\t\t\tmessage,\r\n\t\t\t};\r\n\t\tcase 'CLEAR_BLOCK_REMOVAL_PROMPT':\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning any rules that a block editor may provide in order to\r\n * prevent a user from accidentally removing certain blocks. These rules are\r\n * then used to display a confirmation prompt to the user. For instance, in the\r\n * Site Editor, the Query Loop block is important enough to warrant such\r\n * confirmation.\r\n *\r\n * The data is a record whose keys are block types (e.g. 'core/query') and\r\n * whose values are the explanation to be shown to users (e.g. 'Query Loop\r\n * displays a list of posts or pages.').\r\n *\r\n * @param {boolean} state  Current state.\r\n * @param {Object}  action Dispatched action.\r\n *\r\n * @return {Record<string,string>} Updated state.\r\n */\r\nfunction blockRemovalRules( state = false, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'SET_BLOCK_REMOVAL_RULES':\r\n\t\t\treturn action.rules;\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning the initial block selection.\r\n *\r\n * Currently this in only used to restore the selection after block deletion and\r\n * pasting new content.This reducer should eventually be removed in favour of setting\r\n * selection directly.\r\n *\r\n * @param {boolean} state  Current state.\r\n * @param {Object}  action Dispatched action.\r\n *\r\n * @return {number|null} Initial position: 0, -1 or null.\r\n */\r\nexport function initialPosition( state = null, action ) {\r\n\tif (\r\n\t\taction.type === 'REPLACE_BLOCKS' &&\r\n\t\taction.initialPosition !== undefined\r\n\t) {\r\n\t\treturn action.initialPosition;\r\n\t} else if (\r\n\t\t[\r\n\t\t\t'MULTI_SELECT',\r\n\t\t\t'SELECT_BLOCK',\r\n\t\t\t'RESET_SELECTION',\r\n\t\t\t'INSERT_BLOCKS',\r\n\t\t\t'REPLACE_INNER_BLOCKS',\r\n\t\t].includes( action.type )\r\n\t) {\r\n\t\treturn action.initialPosition;\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\nexport function blocksMode( state = {}, action ) {\r\n\tif ( action.type === 'TOGGLE_BLOCK_MODE' ) {\r\n\t\tconst { clientId } = action;\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\t[ clientId ]:\r\n\t\t\t\tstate[ clientId ] && state[ clientId ] === 'html'\r\n\t\t\t\t\t? 'visual'\r\n\t\t\t\t\t: 'html',\r\n\t\t};\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning the block insertion point visibility, either null if there\r\n * is not an explicit insertion point assigned, or an object of its `index` and\r\n * `rootClientId`.\r\n *\r\n * @param {Object} state  Current state.\r\n * @param {Object} action Dispatched action.\r\n *\r\n * @return {Object} Updated state.\r\n */\r\nexport function insertionPoint( state = null, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'SHOW_INSERTION_POINT': {\r\n\t\t\tconst {\r\n\t\t\t\trootClientId,\r\n\t\t\t\tindex,\r\n\t\t\t\t__unstableWithInserter,\r\n\t\t\t\toperation,\r\n\t\t\t\tnearestSide,\r\n\t\t\t} = action;\r\n\t\t\tconst nextState = {\r\n\t\t\t\trootClientId,\r\n\t\t\t\tindex,\r\n\t\t\t\t__unstableWithInserter,\r\n\t\t\t\toperation,\r\n\t\t\t\tnearestSide,\r\n\t\t\t};\r\n\r\n\t\t\t// Bail out updates if the states are the same.\r\n\t\t\treturn fastDeepEqual( state, nextState ) ? state : nextState;\r\n\t\t}\r\n\r\n\t\tcase 'HIDE_INSERTION_POINT':\r\n\t\tcase 'CLEAR_SELECTED_BLOCK':\r\n\t\tcase 'SELECT_BLOCK':\r\n\t\t\treturn null;\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning whether the post blocks match the defined template or not.\r\n *\r\n * @param {Object} state  Current state.\r\n * @param {Object} action Dispatched action.\r\n *\r\n * @return {boolean} Updated state.\r\n */\r\nexport function template( state = { isValid: true }, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'SET_TEMPLATE_VALIDITY':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisValid: action.isValid,\r\n\t\t\t};\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning the editor setting.\r\n *\r\n * @param {Object} state  Current state.\r\n * @param {Object} action Dispatched action.\r\n *\r\n * @return {Object} Updated state.\r\n */\r\nexport function settings( state = SETTINGS_DEFAULTS, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'UPDATE_SETTINGS':\r\n\t\t\tif ( action.reset ) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...SETTINGS_DEFAULTS,\r\n\t\t\t\t\t...action.settings,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t...action.settings,\r\n\t\t\t};\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning the user preferences.\r\n *\r\n * @param {Object} state  Current state.\r\n * @param {Object} action Dispatched action.\r\n *\r\n * @return {string} Updated state.\r\n */\r\nexport function preferences( state = PREFERENCES_DEFAULTS, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'INSERT_BLOCKS':\r\n\t\tcase 'REPLACE_BLOCKS': {\r\n\t\t\tconst nextInsertUsage = action.blocks.reduce(\r\n\t\t\t\t( prevUsage, block ) => {\r\n\t\t\t\t\tconst { attributes, name: blockName } = block;\r\n\t\t\t\t\tlet id = blockName;\r\n\t\t\t\t\t// If a block variation match is found change the name to be the same with the\r\n\t\t\t\t\t// one that is used for block variations in the Inserter (`getItemFromVariation`).\r\n\t\t\t\t\tconst match = select( blocksStore ).getActiveBlockVariation(\r\n\t\t\t\t\t\tblockName,\r\n\t\t\t\t\t\tattributes\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif ( match?.name ) {\r\n\t\t\t\t\t\tid += '/' + match.name;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( blockName === 'core/block' ) {\r\n\t\t\t\t\t\tid += '/' + attributes.ref;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...prevUsage,\r\n\t\t\t\t\t\t[ id ]: {\r\n\t\t\t\t\t\t\ttime: action.time,\r\n\t\t\t\t\t\t\tcount: prevUsage[ id ]\r\n\t\t\t\t\t\t\t\t? prevUsage[ id ].count + 1\r\n\t\t\t\t\t\t\t\t: 1,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\t\t\t\t},\r\n\t\t\t\tstate.insertUsage\r\n\t\t\t);\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tinsertUsage: nextInsertUsage,\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning an object where each key is a block client ID, its value\r\n * representing the settings for its nested blocks.\r\n *\r\n * @param {Object} state  Current state.\r\n * @param {Object} action Dispatched action.\r\n *\r\n * @return {Object} Updated state.\r\n */\r\nexport const blockListSettings = ( state = {}, action ) => {\r\n\tswitch ( action.type ) {\r\n\t\t// Even if the replaced blocks have the same client ID, our logic\r\n\t\t// should correct the state.\r\n\t\tcase 'REPLACE_BLOCKS':\r\n\t\tcase 'REMOVE_BLOCKS': {\r\n\t\t\treturn Object.fromEntries(\r\n\t\t\t\tObject.entries( state ).filter(\r\n\t\t\t\t\t( [ id ] ) => ! action.clientIds.includes( id )\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\t\tcase 'UPDATE_BLOCK_LIST_SETTINGS': {\r\n\t\t\tconst updates =\r\n\t\t\t\ttypeof action.clientId === 'string'\r\n\t\t\t\t\t? { [ action.clientId ]: action.settings }\r\n\t\t\t\t\t: action.clientId;\r\n\r\n\t\t\t// Remove settings that are the same as the current state.\r\n\t\t\tfor ( const clientId in updates ) {\r\n\t\t\t\tif ( ! updates[ clientId ] ) {\r\n\t\t\t\t\tif ( ! state[ clientId ] ) {\r\n\t\t\t\t\t\tdelete updates[ clientId ];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (\r\n\t\t\t\t\tfastDeepEqual( state[ clientId ], updates[ clientId ] )\r\n\t\t\t\t) {\r\n\t\t\t\t\tdelete updates[ clientId ];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ( Object.keys( updates ).length === 0 ) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tconst merged = { ...state, ...updates };\r\n\r\n\t\t\tfor ( const clientId in updates ) {\r\n\t\t\t\tif ( ! updates[ clientId ] ) {\r\n\t\t\t\t\tdelete merged[ clientId ];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn merged;\r\n\t\t}\r\n\t}\r\n\treturn state;\r\n};\r\n\r\n/**\r\n * Reducer returning which mode is enabled.\r\n *\r\n * @param {string} state  Current state.\r\n * @param {Object} action Dispatched action.\r\n *\r\n * @return {string} Updated state.\r\n */\r\nexport function editorMode( state = 'edit', action ) {\r\n\t// Let inserting block in navigation mode always trigger Edit mode.\r\n\tif ( action.type === 'INSERT_BLOCKS' && state === 'navigation' ) {\r\n\t\treturn 'edit';\r\n\t}\r\n\r\n\tif ( action.type === 'SET_EDITOR_MODE' ) {\r\n\t\treturn action.mode;\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning whether the block moving mode is enabled or not.\r\n *\r\n * @param {string|null} state  Current state.\r\n * @param {Object}      action Dispatched action.\r\n *\r\n * @return {string|null} Updated state.\r\n */\r\nexport function hasBlockMovingClientId( state = null, action ) {\r\n\tif ( action.type === 'SET_BLOCK_MOVING_MODE' ) {\r\n\t\treturn action.hasBlockMovingClientId;\r\n\t}\r\n\r\n\tif ( action.type === 'SET_EDITOR_MODE' ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer return an updated state representing the most recent block attribute\r\n * update. The state is structured as an object where the keys represent the\r\n * client IDs of blocks, the values a subset of attributes from the most recent\r\n * block update. The state is always reset to null if the last action is\r\n * anything other than an attributes update.\r\n *\r\n * @param {Object<string,Object>} state  Current state.\r\n * @param {Object}                action Action object.\r\n *\r\n * @return {[string,Object]} Updated state.\r\n */\r\nexport function lastBlockAttributesChange( state = null, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'UPDATE_BLOCK':\r\n\t\t\tif ( ! action.updates.attributes ) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn { [ action.clientId ]: action.updates.attributes };\r\n\r\n\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\r\n\t\t\treturn action.clientIds.reduce(\r\n\t\t\t\t( accumulator, id ) => ( {\r\n\t\t\t\t\t...accumulator,\r\n\t\t\t\t\t[ id ]: action.uniqueByBlock\r\n\t\t\t\t\t\t? action.attributes[ id ]\r\n\t\t\t\t\t\t: action.attributes,\r\n\t\t\t\t} ),\r\n\t\t\t\t{}\r\n\t\t\t);\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning current highlighted block.\r\n *\r\n * @param {boolean} state  Current highlighted block.\r\n * @param {Object}  action Dispatched action.\r\n *\r\n * @return {string} Updated state.\r\n */\r\nexport function highlightedBlock( state, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'TOGGLE_BLOCK_HIGHLIGHT':\r\n\t\t\tconst { clientId, isHighlighted } = action;\r\n\r\n\t\t\tif ( isHighlighted ) {\r\n\t\t\t\treturn clientId;\r\n\t\t\t} else if ( state === clientId ) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\treturn state;\r\n\t\tcase 'SELECT_BLOCK':\r\n\t\t\tif ( action.clientId !== state ) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning current expanded block in the list view.\r\n *\r\n * @param {string|null} state  Current expanded block.\r\n * @param {Object}      action Dispatched action.\r\n *\r\n * @return {string|null} Updated state.\r\n */\r\nexport function expandedBlock( state = null, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'SET_BLOCK_EXPANDED_IN_LIST_VIEW':\r\n\t\t\treturn action.clientId;\r\n\t\tcase 'SELECT_BLOCK':\r\n\t\t\tif ( action.clientId !== state ) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning the block insertion event list state.\r\n *\r\n * @param {Object} state  Current state.\r\n * @param {Object} action Dispatched action.\r\n *\r\n * @return {Object} Updated state.\r\n */\r\nexport function lastBlockInserted( state = {}, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'INSERT_BLOCKS':\r\n\t\tcase 'REPLACE_BLOCKS':\r\n\t\t\tif ( ! action.blocks.length ) {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tconst clientIds = action.blocks.map( ( block ) => {\r\n\t\t\t\treturn block.clientId;\r\n\t\t\t} );\r\n\r\n\t\t\tconst source = action.meta?.source;\r\n\r\n\t\t\treturn { clientIds, source };\r\n\t\tcase 'RESET_BLOCKS':\r\n\t\t\treturn {};\r\n\t}\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning the block that is eding temporarily edited as blocks.\r\n *\r\n * @param {Object} state  Current state.\r\n * @param {Object} action Dispatched action.\r\n *\r\n * @return {Object} Updated state.\r\n */\r\nexport function temporarilyEditingAsBlocks( state = '', action ) {\r\n\tif ( action.type === 'SET_TEMPORARILY_EDITING_AS_BLOCKS' ) {\r\n\t\treturn action.temporarilyEditingAsBlocks;\r\n\t}\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning the focus mode that should be used when temporarily edit as blocks finishes.\r\n *\r\n * @param {Object} state  Current state.\r\n * @param {Object} action Dispatched action.\r\n *\r\n * @return {Object} Updated state.\r\n */\r\nexport function temporarilyEditingFocusModeRevert( state = '', action ) {\r\n\tif ( action.type === 'SET_TEMPORARILY_EDITING_AS_BLOCKS' ) {\r\n\t\treturn action.focusModeToRevert;\r\n\t}\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning a map of block client IDs to block editing modes.\r\n *\r\n * @param {Map}    state  Current state.\r\n * @param {Object} action Dispatched action.\r\n *\r\n * @return {Map} Updated state.\r\n */\r\nexport function blockEditingModes( state = new Map(), action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'SET_BLOCK_EDITING_MODE':\r\n\t\t\treturn new Map( state ).set( action.clientId, action.mode );\r\n\t\tcase 'UNSET_BLOCK_EDITING_MODE': {\r\n\t\t\tconst newState = new Map( state );\r\n\t\t\tnewState.delete( action.clientId );\r\n\t\t\treturn newState;\r\n\t\t}\r\n\t\tcase 'RESET_BLOCKS': {\r\n\t\t\treturn state.has( '' )\r\n\t\t\t\t? new Map().set( '', state.get( '' ) )\r\n\t\t\t\t: state;\r\n\t\t}\r\n\t}\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning the clientId of the block settings menu that is currently open.\r\n *\r\n * @param {string|null} state  Current state.\r\n * @param {Object}      action Dispatched action.\r\n *\r\n * @return {string|null} Updated state.\r\n */\r\nexport function openedBlockSettingsMenu( state = null, action ) {\r\n\tif ( 'SET_OPENED_BLOCK_SETTINGS_MENU' === action.type ) {\r\n\t\treturn action?.clientId ?? null;\r\n\t}\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning a map of style IDs to style overrides.\r\n *\r\n * @param {Map}    state  Current state.\r\n * @param {Object} action Dispatched action.\r\n *\r\n * @return {Map} Updated state.\r\n */\r\nexport function styleOverrides( state = new Map(), action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'SET_STYLE_OVERRIDE':\r\n\t\t\treturn new Map( state ).set( action.id, action.style );\r\n\t\tcase 'DELETE_STYLE_OVERRIDE': {\r\n\t\t\tconst newState = new Map( state );\r\n\t\t\tnewState.delete( action.id );\r\n\t\t\treturn newState;\r\n\t\t}\r\n\t}\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer returning a map of the registered inserter media categories.\r\n *\r\n * @param {Array}  state  Current state.\r\n * @param {Object} action Dispatched action.\r\n *\r\n * @return {Array} Updated state.\r\n */\r\nexport function registeredInserterMediaCategories( state = [], action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'REGISTER_INSERTER_MEDIA_CATEGORY':\r\n\t\t\treturn [ ...state, action.category ];\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer setting last focused element\r\n *\r\n * @param {boolean} state  Current state.\r\n * @param {Object}  action Dispatched action.\r\n *\r\n * @return {boolean} Updated state.\r\n */\r\nexport function lastFocus( state = false, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'LAST_FOCUS':\r\n\t\t\treturn action.lastFocus;\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Reducer setting currently hovered block.\r\n *\r\n * @param {boolean} state  Current state.\r\n * @param {Object}  action Dispatched action.\r\n *\r\n * @return {boolean} Updated state.\r\n */\r\nexport function hoveredBlockClientId( state = false, action ) {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'HOVER_BLOCK':\r\n\t\t\treturn action.clientId;\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\nconst combinedReducers = combineReducers( {\r\n\tblocks,\r\n\tisDragging,\r\n\tisTyping,\r\n\tisBlockInterfaceHidden,\r\n\tdraggedBlocks,\r\n\tselection,\r\n\tisMultiSelecting,\r\n\tisSelectionEnabled,\r\n\tinitialPosition,\r\n\tblocksMode,\r\n\tblockListSettings,\r\n\tinsertionPoint,\r\n\ttemplate,\r\n\tsettings,\r\n\tpreferences,\r\n\tlastBlockAttributesChange,\r\n\tlastFocus,\r\n\teditorMode,\r\n\thasBlockMovingClientId,\r\n\texpandedBlock,\r\n\thighlightedBlock,\r\n\tlastBlockInserted,\r\n\ttemporarilyEditingAsBlocks,\r\n\ttemporarilyEditingFocusModeRevert,\r\n\tblockVisibility,\r\n\tblockEditingModes,\r\n\tstyleOverrides,\r\n\tremovalPromptData,\r\n\tblockRemovalRules,\r\n\topenedBlockSettingsMenu,\r\n\tregisteredInserterMediaCategories,\r\n\thoveredBlockClientId,\r\n} );\r\n\r\nfunction withAutomaticChangeReset( reducer ) {\r\n\treturn ( state, action ) => {\r\n\t\tconst nextState = reducer( state, action );\r\n\r\n\t\tif ( ! state ) {\r\n\t\t\treturn nextState;\r\n\t\t}\r\n\r\n\t\t// Take over the last value without creating a new reference.\r\n\t\tnextState.automaticChangeStatus = state.automaticChangeStatus;\r\n\r\n\t\tif ( action.type === 'MARK_AUTOMATIC_CHANGE' ) {\r\n\t\t\treturn {\r\n\t\t\t\t...nextState,\r\n\t\t\t\tautomaticChangeStatus: 'pending',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\taction.type === 'MARK_AUTOMATIC_CHANGE_FINAL' &&\r\n\t\t\tstate.automaticChangeStatus === 'pending'\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\t...nextState,\r\n\t\t\t\tautomaticChangeStatus: 'final',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// If there's a change that doesn't affect blocks or selection, maintain\r\n\t\t// the current status.\r\n\t\tif (\r\n\t\t\tnextState.blocks === state.blocks &&\r\n\t\t\tnextState.selection === state.selection\r\n\t\t) {\r\n\t\t\treturn nextState;\r\n\t\t}\r\n\r\n\t\t// As long as the state is not final, ignore any selection changes.\r\n\t\tif (\r\n\t\t\tnextState.automaticChangeStatus !== 'final' &&\r\n\t\t\tnextState.selection !== state.selection\r\n\t\t) {\r\n\t\t\treturn nextState;\r\n\t\t}\r\n\r\n\t\t// Reset the status if blocks change or selection changes (when status is final).\r\n\t\treturn {\r\n\t\t\t...nextState,\r\n\t\t\tautomaticChangeStatus: undefined,\r\n\t\t};\r\n\t};\r\n}\r\n\r\nexport default withAutomaticChangeReset( combinedReducers );\r\n"],"mappings":"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","ignoreList":[]}