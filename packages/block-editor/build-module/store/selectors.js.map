{"version":3,"names":["getBlockType","getBlockTypes","getBlockVariations","hasBlockSupport","getPossibleBlockTransformations","switchToBlockType","store","blocksStore","Platform","applyFilters","symbol","create","remove","toHTMLString","deprecated","createSelector","createRegistrySelector","withRootClientIdOptionKey","checkAllowListRecursive","checkAllowList","getAllPatternsDependants","getInsertBlockTypeDependants","getParsedPattern","getGrammar","orderBy","STORE_NAME","unlock","getContentLockingParent","getTemporarilyEditingAsBlocks","getTemporarilyEditingFocusModeToRevert","getSectionRootClientId","MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","MILLISECONDS_PER_WEEK","EMPTY_ARRAY","EMPTY_SET","Set","EMPTY_OBJECT","getBlockName","state","clientId","block","blocks","byClientId","get","socialLinkName","OS","name","attributes","service","isBlockValid","isValid","getBlockAttributes","getBlock","has","tree","__unstableGetBlockWithoutInnerBlocks","getBlocks","rootClientId","treeKey","areInnerBlocksControlled","innerBlocks","__unstableGetClientIdWithClientIdsTree","since","version","__unstableGetClientIdsTree","order","getBlockOrder","map","getClientIdsOfDescendants","rootIds","Array","isArray","ids","rootId","push","index","length","id","splice","getClientIdsWithDescendants","getGlobalBlockCount","blockName","clientIds","count","getBlocksByName","blockNames","foundBlocks","filter","includes","__experimentalGetGlobalBlocksByName","alternative","getBlocksByClientId","getBlockNamesByClientId","Boolean","getBlockCount","getSelectionStart","selection","selectionStart","getSelectionEnd","selectionEnd","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","multiSelectedBlockCount","getMultiSelectedBlockClientIds","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","_state$blocks$parents","parents","getBlockParents","ascending","current","reverse","getBlockParentsByBlockName","hasName","getBlockHierarchyRootClientId","parent","getLowestCommonAncestorWithSelectedBlock","selectedId","clientParents","selectedParents","lowestCommonAncestor","maxDepth","Math","min","getAdjacentBlockClientId","startClientId","modifier","undefined","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","orderSet","indexOf","nextIndex","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","initialPosition","getSelectedBlockClientIds","blockOrder","startIndex","endIndex","slice","getMultiSelectedBlocks","multiSelectedBlockClientIds","getDependants","selectedClientIds","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","ancestorClientId","isMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","__unstableIsFullySelected","selectionAnchor","selectionFocus","attributeKey","offset","__unstableIsSelectionCollapsed","__unstableSelectionHasUnmergeableBlock","some","blockType","merge","__unstableIsSelectionMergeable","isForward","anchorRootClientId","focusRootClientId","anchorIndex","focusIndex","targetBlockClientId","blockToMergeClientId","targetBlockName","targetBlockType","blockToMerge","blocksToMerge","__unstableGetSelectedBlocksWithPartialSelection","blockA","blockB","htmlA","htmlB","valueA","html","valueB","text","value","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","deep","selectedBlockClientIds","hasDraggedInnerBlock","innerClientId","isBlockBeingDragged","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","blocksMode","isTyping","isDraggingBlocks","draggedBlocks","getDraggedBlockClientIds","isAncestorBeingDragged","parentClientId","isCaretWithinFormattedText","getBlockInsertionPoint","insertionPoint","isBlockInsertionPointVisible","isValidTemplate","template","getTemplate","settings","getTemplateLock","_getBlockListSettings","_state$settings$templ","templateLock","getBlockListSettings","canInsertBlockTypeUnmemoized","allowedBlockTypes","getSettings","isBlockAllowedInEditor","isLocked","getBlockEditingMode","parentBlockListSettings","parentName","parentBlockType","parentAllowedChildBlocks","allowedBlocks","hasParentAllowedBlock","parentAllowedBlocks","hasParentListAllowedBlock","blockAllowedParentBlocks","hasBlockAllowedParent","hasBlockAllowedAncestor","blockAllowedAncestorBlocks","ancestor","ancestors","canInsert","bind","canInsertBlockType","canInsertBlocks","every","canRemoveBlock","lock","canRemoveBlocks","canMoveBlock","move","canMoveBlocks","canEditBlock","edit","canLockBlockType","nameOrType","canLockBlocks","getInsertUsage","_state$preferences$in","preferences","insertUsage","canIncludeBlockTypeInInserter","getItemFromVariation","item","variation","variationId","time","icon","title","description","category","example","hasOwnProperty","initialAttributes","keywords","frecency","calculateFrecency","duration","Date","now","buildBlockTypeItem","buildScope","isDisabled","blockItemBase","inserterVariations","variations","utility","getInserterItems","select","options","buildReusableBlockInserterItem","reusableBlock","wp_pattern_sync_status","src","foreground","ref","raw","content","syncStatus","syncedPatternInserterItems","getReusableBlocks","buildBlockTypeInserterItem","blockTypeInserterItems","reduce","accumulator","sectionRootClientId","e","items","isDefault","variationMapper","groupByType","core","noncore","type","startsWith","coreItems","nonCoreItems","sortedBlockTypes","getBlockTransformItems","normalizedBlocks","buildBlockTypeTransformItem","blockTypeTransformItems","itemsByName","Object","fromEntries","entries","possibleTransforms","hasInserterItems","hasBlockType","hasReusableBlock","getAllowedBlocks","blockTypes","__experimentalGetAllowedBlocks","getDirectInsertBlock","_state$blockListSetti","defaultBlock","directInsert","blockListSettings","__experimentalGetDirectInsertBlock","__experimentalGetParsedPattern","patternName","pattern","getPatternBySlug","getAllowedPatternsDependants","__experimentalGetAllowedPatterns","getAllPatterns","patterns","parsedPatterns","inserter","availableParsedPatterns","patternsAllowed","getPatternsByBlockTypes","normalizedBlockNames","filteredPatterns","__experimentalGetPatternsByBlockTypes","__experimentalGetPatternTransformItems","selectedBlockNames","from","isLastBlockChangePersistent","isPersistentChange","__experimentalGetBlockListSettingsForBlocks","blockListSettingsForBlocks","__experimentalGetReusableBlockTitle","find","__unstableIsLastBlockChangeIgnored","isIgnoredChange","__experimentalGetLastBlockAttributeChanges","lastBlockAttributesChange","isNavigationMode","editorMode","__unstableGetEditorMode","hasBlockMovingClientId","didAutomaticChange","automaticChangeStatus","isBlockHighlighted","highlightedBlock","controlledInnerBlocks","__experimentalGetActiveBlockIdByBlockNames","validBlockNames","selectedBlockClientId","entityAreaParents","wasBlockJustInserted","source","lastBlockInserted","isBlockVisible","_state$blockVisibilit","blockVisibility","getHoveredBlockClientId","hoveredBlockClientId","__unstableGetVisibleBlocks","visibleBlocks","keys","key","size","__unstableHasActiveBlockOverlayActive","sectionClientIds","blockSupportDisable","shouldEnableIfUnselected","__unstableIsWithinBlockOverlay","sectionsClientIds","blockEditingMode","blockEditingModes","isContent","__experimentalHasContentRoleAttribute","parentMode","isUngroupable","_clientId","getGroupingBlockName","groupingBlockName","_isUngroupable","transforms","ungroup","isGroupable","_clientIds","groupingBlockAvailable","_isGroupable","__unstableGetContentLockingParent","__unstableGetTemporarilyEditingAsBlocks","__unstableGetTemporarilyEditingFocusModeToRevert"],"sources":["D:/jungle/gutenberg/packages/block-editor/src/store/selectors.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport {\r\n\tgetBlockType,\r\n\tgetBlockTypes,\r\n\tgetBlockVariations,\r\n\thasBlockSupport,\r\n\tgetPossibleBlockTransformations,\r\n\tswitchToBlockType,\r\n\tstore as blocksStore,\r\n} from '@wordpress/blocks';\r\nimport { Platform } from '@wordpress/element';\r\nimport { applyFilters } from '@wordpress/hooks';\r\nimport { symbol } from '@wordpress/icons';\r\nimport { create, remove, toHTMLString } from '@wordpress/rich-text';\r\nimport deprecated from '@wordpress/deprecated';\r\nimport { createSelector, createRegistrySelector } from '@wordpress/data';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport {\r\n\twithRootClientIdOptionKey,\r\n\tcheckAllowListRecursive,\r\n\tcheckAllowList,\r\n\tgetAllPatternsDependants,\r\n\tgetInsertBlockTypeDependants,\r\n\tgetParsedPattern,\r\n\tgetGrammar,\r\n} from './utils';\r\nimport { orderBy } from '../utils/sorting';\r\nimport { STORE_NAME } from './constants';\r\nimport { unlock } from '../lock-unlock';\r\n\r\nimport {\r\n\tgetContentLockingParent,\r\n\tgetTemporarilyEditingAsBlocks,\r\n\tgetTemporarilyEditingFocusModeToRevert,\r\n\tgetSectionRootClientId,\r\n} from './private-selectors';\r\n\r\n/**\r\n * A block selection object.\r\n *\r\n * @typedef {Object} WPBlockSelection\r\n *\r\n * @property {string} clientId     A block client ID.\r\n * @property {string} attributeKey A block attribute key.\r\n * @property {number} offset       An attribute value offset, based on the rich\r\n *                                 text value. See `wp.richText.create`.\r\n */\r\n\r\n// Module constants.\r\nconst MILLISECONDS_PER_HOUR = 3600 * 1000;\r\nconst MILLISECONDS_PER_DAY = 24 * 3600 * 1000;\r\nconst MILLISECONDS_PER_WEEK = 7 * 24 * 3600 * 1000;\r\n\r\n/**\r\n * Shared reference to an empty array for cases where it is important to avoid\r\n * returning a new array reference on every invocation, as in a connected or\r\n * other pure component which performs `shouldComponentUpdate` check on props.\r\n * This should be used as a last resort, since the normalized data should be\r\n * maintained by the reducer result in state.\r\n *\r\n * @type {Array}\r\n */\r\nconst EMPTY_ARRAY = [];\r\n\r\n/**\r\n * Shared reference to an empty Set for cases where it is important to avoid\r\n * returning a new Set reference on every invocation, as in a connected or\r\n * other pure component which performs `shouldComponentUpdate` check on props.\r\n * This should be used as a last resort, since the normalized data should be\r\n * maintained by the reducer result in state.\r\n *\r\n * @type {Set}\r\n */\r\nconst EMPTY_SET = new Set();\r\n\r\nconst EMPTY_OBJECT = {};\r\n\r\n/**\r\n * Returns a block's name given its client ID, or null if no block exists with\r\n * the client ID.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId Block client ID.\r\n *\r\n * @return {string} Block name.\r\n */\r\nexport function getBlockName( state, clientId ) {\r\n\tconst block = state.blocks.byClientId.get( clientId );\r\n\tconst socialLinkName = 'core/social-link';\r\n\r\n\tif ( Platform.OS !== 'web' && block?.name === socialLinkName ) {\r\n\t\tconst attributes = state.blocks.attributes.get( clientId );\r\n\t\tconst { service } = attributes ?? {};\r\n\r\n\t\treturn service ? `${ socialLinkName }-${ service }` : socialLinkName;\r\n\t}\r\n\treturn block ? block.name : null;\r\n}\r\n\r\n/**\r\n * Returns whether a block is valid or not.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId Block client ID.\r\n *\r\n * @return {boolean} Is Valid.\r\n */\r\nexport function isBlockValid( state, clientId ) {\r\n\tconst block = state.blocks.byClientId.get( clientId );\r\n\treturn !! block && block.isValid;\r\n}\r\n\r\n/**\r\n * Returns a block's attributes given its client ID, or null if no block exists with\r\n * the client ID.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId Block client ID.\r\n *\r\n * @return {Object?} Block attributes.\r\n */\r\nexport function getBlockAttributes( state, clientId ) {\r\n\tconst block = state.blocks.byClientId.get( clientId );\r\n\tif ( ! block ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn state.blocks.attributes.get( clientId );\r\n}\r\n\r\n/**\r\n * Returns a block given its client ID. This is a parsed copy of the block,\r\n * containing its `blockName`, `clientId`, and current `attributes` state. This\r\n * is not the block's registration settings, which must be retrieved from the\r\n * blocks module registration store.\r\n *\r\n * getBlock recurses through its inner blocks until all its children blocks have\r\n * been retrieved. Note that getBlock will not return the child inner blocks of\r\n * an inner block controller. This is because an inner block controller syncs\r\n * itself with its own entity, and should therefore not be included with the\r\n * blocks of a different entity. For example, say you call `getBlocks( TP )` to\r\n * get the blocks of a template part. If another template part is a child of TP,\r\n * then the nested template part's child blocks will not be returned. This way,\r\n * the template block itself is considered part of the parent, but the children\r\n * are not.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId Block client ID.\r\n *\r\n * @return {Object} Parsed block object.\r\n */\r\nexport function getBlock( state, clientId ) {\r\n\tif ( ! state.blocks.byClientId.has( clientId ) ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn state.blocks.tree.get( clientId );\r\n}\r\n\r\nexport const __unstableGetBlockWithoutInnerBlocks = createSelector(\r\n\t( state, clientId ) => {\r\n\t\tconst block = state.blocks.byClientId.get( clientId );\r\n\t\tif ( ! block ) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\t...block,\r\n\t\t\tattributes: getBlockAttributes( state, clientId ),\r\n\t\t};\r\n\t},\r\n\t( state, clientId ) => [\r\n\t\tstate.blocks.byClientId.get( clientId ),\r\n\t\tstate.blocks.attributes.get( clientId ),\r\n\t]\r\n);\r\n\r\n/**\r\n * Returns all block objects for the current post being edited as an array in\r\n * the order they appear in the post. Note that this will exclude child blocks\r\n * of nested inner block controllers.\r\n *\r\n * @param {Object}  state        Editor state.\r\n * @param {?string} rootClientId Optional root client ID of block list.\r\n *\r\n * @return {Object[]} Post blocks.\r\n */\r\nexport function getBlocks( state, rootClientId ) {\r\n\tconst treeKey =\r\n\t\t! rootClientId || ! areInnerBlocksControlled( state, rootClientId )\r\n\t\t\t? rootClientId || ''\r\n\t\t\t: 'controlled||' + rootClientId;\r\n\treturn state.blocks.tree.get( treeKey )?.innerBlocks || EMPTY_ARRAY;\r\n}\r\n\r\n/**\r\n * Returns a stripped down block object containing only its client ID,\r\n * and its inner blocks' client IDs.\r\n *\r\n * @deprecated\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId Client ID of the block to get.\r\n *\r\n * @return {Object} Client IDs of the post blocks.\r\n */\r\nexport const __unstableGetClientIdWithClientIdsTree = createSelector(\r\n\t( state, clientId ) => {\r\n\t\tdeprecated(\r\n\t\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetClientIdWithClientIdsTree\",\r\n\t\t\t{\r\n\t\t\t\tsince: '6.3',\r\n\t\t\t\tversion: '6.5',\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn {\r\n\t\t\tclientId,\r\n\t\t\tinnerBlocks: __unstableGetClientIdsTree( state, clientId ),\r\n\t\t};\r\n\t},\r\n\t( state ) => [ state.blocks.order ]\r\n);\r\n\r\n/**\r\n * Returns the block tree represented in the block-editor store from the\r\n * given root, consisting of stripped down block objects containing only\r\n * their client IDs, and their inner blocks' client IDs.\r\n *\r\n * @deprecated\r\n *\r\n * @param {Object}  state        Editor state.\r\n * @param {?string} rootClientId Optional root client ID of block list.\r\n *\r\n * @return {Object[]} Client IDs of the post blocks.\r\n */\r\nexport const __unstableGetClientIdsTree = createSelector(\r\n\t( state, rootClientId = '' ) => {\r\n\t\tdeprecated(\r\n\t\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetClientIdsTree\",\r\n\t\t\t{\r\n\t\t\t\tsince: '6.3',\r\n\t\t\t\tversion: '6.5',\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn getBlockOrder( state, rootClientId ).map( ( clientId ) =>\r\n\t\t\t__unstableGetClientIdWithClientIdsTree( state, clientId )\r\n\t\t);\r\n\t},\r\n\t( state ) => [ state.blocks.order ]\r\n);\r\n\r\n/**\r\n * Returns an array containing the clientIds of all descendants of the blocks\r\n * given. Returned ids are ordered first by the order of the ids given, then\r\n * by the order that they appear in the editor.\r\n *\r\n * @param {Object}          state   Global application state.\r\n * @param {string|string[]} rootIds Client ID(s) for which descendant blocks are to be returned.\r\n *\r\n * @return {Array} Client IDs of descendants.\r\n */\r\nexport const getClientIdsOfDescendants = createSelector(\r\n\t( state, rootIds ) => {\r\n\t\trootIds = Array.isArray( rootIds ) ? [ ...rootIds ] : [ rootIds ];\r\n\t\tconst ids = [];\r\n\r\n\t\t// Add the descendants of the root blocks first.\r\n\t\tfor ( const rootId of rootIds ) {\r\n\t\t\tconst order = state.blocks.order.get( rootId );\r\n\t\t\tif ( order ) {\r\n\t\t\t\tids.push( ...order );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet index = 0;\r\n\r\n\t\t// Add the descendants of the descendants, recursively.\r\n\t\twhile ( index < ids.length ) {\r\n\t\t\tconst id = ids[ index ];\r\n\t\t\tconst order = state.blocks.order.get( id );\r\n\t\t\tif ( order ) {\r\n\t\t\t\tids.splice( index + 1, 0, ...order );\r\n\t\t\t}\r\n\t\t\tindex++;\r\n\t\t}\r\n\r\n\t\treturn ids;\r\n\t},\r\n\t( state ) => [ state.blocks.order ]\r\n);\r\n\r\n/**\r\n * Returns an array containing the clientIds of the top-level blocks and\r\n * their descendants of any depth (for nested blocks). Ids are returned\r\n * in the same order that they appear in the editor.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Array} ids of top-level and descendant blocks.\r\n */\r\nexport const getClientIdsWithDescendants = ( state ) =>\r\n\tgetClientIdsOfDescendants( state, '' );\r\n\r\n/**\r\n * Returns the total number of blocks, or the total number of blocks with a specific name in a post.\r\n * The number returned includes nested blocks.\r\n *\r\n * @param {Object}  state     Global application state.\r\n * @param {?string} blockName Optional block name, if specified only blocks of that type will be counted.\r\n *\r\n * @return {number} Number of blocks in the post, or number of blocks with name equal to blockName.\r\n */\r\nexport const getGlobalBlockCount = createSelector(\r\n\t( state, blockName ) => {\r\n\t\tconst clientIds = getClientIdsWithDescendants( state );\r\n\t\tif ( ! blockName ) {\r\n\t\t\treturn clientIds.length;\r\n\t\t}\r\n\t\tlet count = 0;\r\n\t\tfor ( const clientId of clientIds ) {\r\n\t\t\tconst block = state.blocks.byClientId.get( clientId );\r\n\t\t\tif ( block.name === blockName ) {\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn count;\r\n\t},\r\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\r\n);\r\n\r\n/**\r\n * Returns all blocks that match a blockName. Results include nested blocks.\r\n *\r\n * @param {Object}   state     Global application state.\r\n * @param {string[]} blockName Block name(s) for which clientIds are to be returned.\r\n *\r\n * @return {Array} Array of clientIds of blocks with name equal to blockName.\r\n */\r\nexport const getBlocksByName = createSelector(\r\n\t( state, blockName ) => {\r\n\t\tif ( ! blockName ) {\r\n\t\t\treturn EMPTY_ARRAY;\r\n\t\t}\r\n\t\tconst blockNames = Array.isArray( blockName )\r\n\t\t\t? blockName\r\n\t\t\t: [ blockName ];\r\n\t\tconst clientIds = getClientIdsWithDescendants( state );\r\n\t\tconst foundBlocks = clientIds.filter( ( clientId ) => {\r\n\t\t\tconst block = state.blocks.byClientId.get( clientId );\r\n\t\t\treturn blockNames.includes( block.name );\r\n\t\t} );\r\n\t\treturn foundBlocks.length > 0 ? foundBlocks : EMPTY_ARRAY;\r\n\t},\r\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\r\n);\r\n\r\n/**\r\n * Returns all global blocks that match a blockName. Results include nested blocks.\r\n *\r\n * @deprecated\r\n *\r\n * @param {Object}   state     Global application state.\r\n * @param {string[]} blockName Block name(s) for which clientIds are to be returned.\r\n *\r\n * @return {Array} Array of clientIds of blocks with name equal to blockName.\r\n */\r\nexport function __experimentalGetGlobalBlocksByName( state, blockName ) {\r\n\tdeprecated(\r\n\t\t\"wp.data.select( 'core/block-editor' ).__experimentalGetGlobalBlocksByName\",\r\n\t\t{\r\n\t\t\tsince: '6.5',\r\n\t\t\talternative: `wp.data.select( 'core/block-editor' ).getBlocksByName`,\r\n\t\t}\r\n\t);\r\n\treturn getBlocksByName( state, blockName );\r\n}\r\n\r\n/**\r\n * Given an array of block client IDs, returns the corresponding array of block\r\n * objects.\r\n *\r\n * @param {Object}   state     Editor state.\r\n * @param {string[]} clientIds Client IDs for which blocks are to be returned.\r\n *\r\n * @return {WPBlock[]} Block objects.\r\n */\r\nexport const getBlocksByClientId = createSelector(\r\n\t( state, clientIds ) =>\r\n\t\t( Array.isArray( clientIds ) ? clientIds : [ clientIds ] ).map(\r\n\t\t\t( clientId ) => getBlock( state, clientId )\r\n\t\t),\r\n\t( state, clientIds ) =>\r\n\t\t( Array.isArray( clientIds ) ? clientIds : [ clientIds ] ).map(\r\n\t\t\t( clientId ) => state.blocks.tree.get( clientId )\r\n\t\t)\r\n);\r\n\r\n/**\r\n * Given an array of block client IDs, returns the corresponding array of block\r\n * names.\r\n *\r\n * @param {Object}   state     Editor state.\r\n * @param {string[]} clientIds Client IDs for which block names are to be returned.\r\n *\r\n * @return {string[]} Block names.\r\n */\r\nexport const getBlockNamesByClientId = createSelector(\r\n\t( state, clientIds ) =>\r\n\t\tgetBlocksByClientId( state, clientIds )\r\n\t\t\t.filter( Boolean )\r\n\t\t\t.map( ( block ) => block.name ),\r\n\t( state, clientIds ) => getBlocksByClientId( state, clientIds )\r\n);\r\n\r\n/**\r\n * Returns the number of blocks currently present in the post.\r\n *\r\n * @param {Object}  state        Editor state.\r\n * @param {?string} rootClientId Optional root client ID of block list.\r\n *\r\n * @return {number} Number of blocks in the post.\r\n */\r\nexport function getBlockCount( state, rootClientId ) {\r\n\treturn getBlockOrder( state, rootClientId ).length;\r\n}\r\n\r\n/**\r\n * Returns the current selection start block client ID, attribute key and text\r\n * offset.\r\n *\r\n * @param {Object} state Block editor state.\r\n *\r\n * @return {WPBlockSelection} Selection start information.\r\n */\r\nexport function getSelectionStart( state ) {\r\n\treturn state.selection.selectionStart;\r\n}\r\n\r\n/**\r\n * Returns the current selection end block client ID, attribute key and text\r\n * offset.\r\n *\r\n * @param {Object} state Block editor state.\r\n *\r\n * @return {WPBlockSelection} Selection end information.\r\n */\r\nexport function getSelectionEnd( state ) {\r\n\treturn state.selection.selectionEnd;\r\n}\r\n\r\n/**\r\n * Returns the current block selection start. This value may be null, and it\r\n * may represent either a singular block selection or multi-selection start.\r\n * A selection is singular if its start and end match.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {?string} Client ID of block selection start.\r\n */\r\nexport function getBlockSelectionStart( state ) {\r\n\treturn state.selection.selectionStart.clientId;\r\n}\r\n\r\n/**\r\n * Returns the current block selection end. This value may be null, and it\r\n * may represent either a singular block selection or multi-selection end.\r\n * A selection is singular if its start and end match.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {?string} Client ID of block selection end.\r\n */\r\nexport function getBlockSelectionEnd( state ) {\r\n\treturn state.selection.selectionEnd.clientId;\r\n}\r\n\r\n/**\r\n * Returns the number of blocks currently selected in the post.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {number} Number of blocks selected in the post.\r\n */\r\nexport function getSelectedBlockCount( state ) {\r\n\tconst multiSelectedBlockCount =\r\n\t\tgetMultiSelectedBlockClientIds( state ).length;\r\n\r\n\tif ( multiSelectedBlockCount ) {\r\n\t\treturn multiSelectedBlockCount;\r\n\t}\r\n\r\n\treturn state.selection.selectionStart.clientId ? 1 : 0;\r\n}\r\n\r\n/**\r\n * Returns true if there is a single selected block, or false otherwise.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {boolean} Whether a single block is selected.\r\n */\r\nexport function hasSelectedBlock( state ) {\r\n\tconst { selectionStart, selectionEnd } = state.selection;\r\n\treturn (\r\n\t\t!! selectionStart.clientId &&\r\n\t\tselectionStart.clientId === selectionEnd.clientId\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns the currently selected block client ID, or null if there is no\r\n * selected block.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {?string} Selected block client ID.\r\n */\r\nexport function getSelectedBlockClientId( state ) {\r\n\tconst { selectionStart, selectionEnd } = state.selection;\r\n\tconst { clientId } = selectionStart;\r\n\r\n\tif ( ! clientId || clientId !== selectionEnd.clientId ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn clientId;\r\n}\r\n\r\n/**\r\n * Returns the currently selected block, or null if there is no selected block.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {?Object} Selected block.\r\n */\r\nexport function getSelectedBlock( state ) {\r\n\tconst clientId = getSelectedBlockClientId( state );\r\n\treturn clientId ? getBlock( state, clientId ) : null;\r\n}\r\n\r\n/**\r\n * Given a block client ID, returns the root block from which the block is\r\n * nested, an empty string for top-level blocks, or null if the block does not\r\n * exist.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId Block from which to find root client ID.\r\n *\r\n * @return {?string} Root client ID, if exists\r\n */\r\nexport function getBlockRootClientId( state, clientId ) {\r\n\treturn state.blocks.parents.get( clientId ) ?? null;\r\n}\r\n\r\n/**\r\n * Given a block client ID, returns the list of all its parents from top to bottom.\r\n *\r\n * @param {Object}  state     Editor state.\r\n * @param {string}  clientId  Block from which to find root client ID.\r\n * @param {boolean} ascending Order results from bottom to top (true) or top to bottom (false).\r\n *\r\n * @return {Array} ClientIDs of the parent blocks.\r\n */\r\nexport const getBlockParents = createSelector(\r\n\t( state, clientId, ascending = false ) => {\r\n\t\tconst parents = [];\r\n\t\tlet current = clientId;\r\n\t\twhile ( ( current = state.blocks.parents.get( current ) ) ) {\r\n\t\t\tparents.push( current );\r\n\t\t}\r\n\r\n\t\tif ( ! parents.length ) {\r\n\t\t\treturn EMPTY_ARRAY;\r\n\t\t}\r\n\r\n\t\treturn ascending ? parents : parents.reverse();\r\n\t},\r\n\t( state ) => [ state.blocks.parents ]\r\n);\r\n\r\n/**\r\n * Given a block client ID and a block name, returns the list of all its parents\r\n * from top to bottom, filtered by the given name(s). For example, if passed\r\n * 'core/group' as the blockName, it will only return parents which are group\r\n * blocks. If passed `[ 'core/group', 'core/cover']`, as the blockName, it will\r\n * return parents which are group blocks and parents which are cover blocks.\r\n *\r\n * @param {Object}          state     Editor state.\r\n * @param {string}          clientId  Block from which to find root client ID.\r\n * @param {string|string[]} blockName Block name(s) to filter.\r\n * @param {boolean}         ascending Order results from bottom to top (true) or top to bottom (false).\r\n *\r\n * @return {Array} ClientIDs of the parent blocks.\r\n */\r\nexport const getBlockParentsByBlockName = createSelector(\r\n\t( state, clientId, blockName, ascending = false ) => {\r\n\t\tconst parents = getBlockParents( state, clientId, ascending );\r\n\t\tconst hasName = Array.isArray( blockName )\r\n\t\t\t? ( name ) => blockName.includes( name )\r\n\t\t\t: ( name ) => blockName === name;\r\n\t\treturn parents.filter( ( id ) => hasName( getBlockName( state, id ) ) );\r\n\t},\r\n\t( state ) => [ state.blocks.parents ]\r\n);\r\n/**\r\n * Given a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId Block from which to find root client ID.\r\n *\r\n * @return {string} Root client ID\r\n */\r\nexport function getBlockHierarchyRootClientId( state, clientId ) {\r\n\tlet current = clientId;\r\n\tlet parent;\r\n\tdo {\r\n\t\tparent = current;\r\n\t\tcurrent = state.blocks.parents.get( current );\r\n\t} while ( current );\r\n\treturn parent;\r\n}\r\n\r\n/**\r\n * Given a block client ID, returns the lowest common ancestor with selected client ID.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId Block from which to find common ancestor client ID.\r\n *\r\n * @return {string} Common ancestor client ID or undefined\r\n */\r\nexport function getLowestCommonAncestorWithSelectedBlock( state, clientId ) {\r\n\tconst selectedId = getSelectedBlockClientId( state );\r\n\tconst clientParents = [ ...getBlockParents( state, clientId ), clientId ];\r\n\tconst selectedParents = [\r\n\t\t...getBlockParents( state, selectedId ),\r\n\t\tselectedId,\r\n\t];\r\n\r\n\tlet lowestCommonAncestor;\r\n\r\n\tconst maxDepth = Math.min( clientParents.length, selectedParents.length );\r\n\tfor ( let index = 0; index < maxDepth; index++ ) {\r\n\t\tif ( clientParents[ index ] === selectedParents[ index ] ) {\r\n\t\t\tlowestCommonAncestor = clientParents[ index ];\r\n\t\t} else {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\treturn lowestCommonAncestor;\r\n}\r\n\r\n/**\r\n * Returns the client ID of the block adjacent one at the given reference\r\n * startClientId and modifier directionality. Defaults start startClientId to\r\n * the selected block, and direction as next block. Returns null if there is no\r\n * adjacent block.\r\n *\r\n * @param {Object}  state         Editor state.\r\n * @param {?string} startClientId Optional client ID of block from which to\r\n *                                search.\r\n * @param {?number} modifier      Directionality multiplier (1 next, -1\r\n *                                previous).\r\n *\r\n * @return {?string} Return the client ID of the block, or null if none exists.\r\n */\r\nexport function getAdjacentBlockClientId( state, startClientId, modifier = 1 ) {\r\n\t// Default to selected block.\r\n\tif ( startClientId === undefined ) {\r\n\t\tstartClientId = getSelectedBlockClientId( state );\r\n\t}\r\n\r\n\t// Try multi-selection starting at extent based on modifier.\r\n\tif ( startClientId === undefined ) {\r\n\t\tif ( modifier < 0 ) {\r\n\t\t\tstartClientId = getFirstMultiSelectedBlockClientId( state );\r\n\t\t} else {\r\n\t\t\tstartClientId = getLastMultiSelectedBlockClientId( state );\r\n\t\t}\r\n\t}\r\n\r\n\t// Validate working start client ID.\r\n\tif ( ! startClientId ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Retrieve start block root client ID, being careful to allow the falsey\r\n\t// empty string top-level root by explicitly testing against null.\r\n\tconst rootClientId = getBlockRootClientId( state, startClientId );\r\n\tif ( rootClientId === null ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst { order } = state.blocks;\r\n\tconst orderSet = order.get( rootClientId );\r\n\tconst index = orderSet.indexOf( startClientId );\r\n\tconst nextIndex = index + 1 * modifier;\r\n\r\n\t// Block was first in set and we're attempting to get previous.\r\n\tif ( nextIndex < 0 ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Block was last in set and we're attempting to get next.\r\n\tif ( nextIndex === orderSet.length ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Assume incremented index is within the set.\r\n\treturn orderSet[ nextIndex ];\r\n}\r\n\r\n/**\r\n * Returns the previous block's client ID from the given reference start ID.\r\n * Defaults start to the selected block. Returns null if there is no previous\r\n * block.\r\n *\r\n * @param {Object}  state         Editor state.\r\n * @param {?string} startClientId Optional client ID of block from which to\r\n *                                search.\r\n *\r\n * @return {?string} Adjacent block's client ID, or null if none exists.\r\n */\r\nexport function getPreviousBlockClientId( state, startClientId ) {\r\n\treturn getAdjacentBlockClientId( state, startClientId, -1 );\r\n}\r\n\r\n/**\r\n * Returns the next block's client ID from the given reference start ID.\r\n * Defaults start to the selected block. Returns null if there is no next\r\n * block.\r\n *\r\n * @param {Object}  state         Editor state.\r\n * @param {?string} startClientId Optional client ID of block from which to\r\n *                                search.\r\n *\r\n * @return {?string} Adjacent block's client ID, or null if none exists.\r\n */\r\nexport function getNextBlockClientId( state, startClientId ) {\r\n\treturn getAdjacentBlockClientId( state, startClientId, 1 );\r\n}\r\n\r\n/* eslint-disable jsdoc/valid-types */\r\n/**\r\n * Returns the initial caret position for the selected block.\r\n * This position is to used to position the caret properly when the selected block changes.\r\n * If the current block is not a RichText, having initial position set to 0 means \"focus block\"\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {0|-1|null} Initial position.\r\n */\r\nexport function getSelectedBlocksInitialCaretPosition( state ) {\r\n\t/* eslint-enable jsdoc/valid-types */\r\n\treturn state.initialPosition;\r\n}\r\n\r\n/**\r\n * Returns the current selection set of block client IDs (multiselection or single selection).\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {Array} Multi-selected block client IDs.\r\n */\r\nexport const getSelectedBlockClientIds = createSelector(\r\n\t( state ) => {\r\n\t\tconst { selectionStart, selectionEnd } = state.selection;\r\n\r\n\t\tif ( ! selectionStart.clientId || ! selectionEnd.clientId ) {\r\n\t\t\treturn EMPTY_ARRAY;\r\n\t\t}\r\n\r\n\t\tif ( selectionStart.clientId === selectionEnd.clientId ) {\r\n\t\t\treturn [ selectionStart.clientId ];\r\n\t\t}\r\n\r\n\t\t// Retrieve root client ID to aid in retrieving relevant nested block\r\n\t\t// order, being careful to allow the falsey empty string top-level root\r\n\t\t// by explicitly testing against null.\r\n\t\tconst rootClientId = getBlockRootClientId(\r\n\t\t\tstate,\r\n\t\t\tselectionStart.clientId\r\n\t\t);\r\n\r\n\t\tif ( rootClientId === null ) {\r\n\t\t\treturn EMPTY_ARRAY;\r\n\t\t}\r\n\r\n\t\tconst blockOrder = getBlockOrder( state, rootClientId );\r\n\t\tconst startIndex = blockOrder.indexOf( selectionStart.clientId );\r\n\t\tconst endIndex = blockOrder.indexOf( selectionEnd.clientId );\r\n\r\n\t\tif ( startIndex > endIndex ) {\r\n\t\t\treturn blockOrder.slice( endIndex, startIndex + 1 );\r\n\t\t}\r\n\r\n\t\treturn blockOrder.slice( startIndex, endIndex + 1 );\r\n\t},\r\n\t( state ) => [\r\n\t\tstate.blocks.order,\r\n\t\tstate.selection.selectionStart.clientId,\r\n\t\tstate.selection.selectionEnd.clientId,\r\n\t]\r\n);\r\n\r\n/**\r\n * Returns the current multi-selection set of block client IDs, or an empty\r\n * array if there is no multi-selection.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {Array} Multi-selected block client IDs.\r\n */\r\nexport function getMultiSelectedBlockClientIds( state ) {\r\n\tconst { selectionStart, selectionEnd } = state.selection;\r\n\r\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\r\n\t\treturn EMPTY_ARRAY;\r\n\t}\r\n\r\n\treturn getSelectedBlockClientIds( state );\r\n}\r\n\r\n/**\r\n * Returns the current multi-selection set of blocks, or an empty array if\r\n * there is no multi-selection.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {Array} Multi-selected block objects.\r\n */\r\nexport const getMultiSelectedBlocks = createSelector(\r\n\t( state ) => {\r\n\t\tconst multiSelectedBlockClientIds =\r\n\t\t\tgetMultiSelectedBlockClientIds( state );\r\n\t\tif ( ! multiSelectedBlockClientIds.length ) {\r\n\t\t\treturn EMPTY_ARRAY;\r\n\t\t}\r\n\r\n\t\treturn multiSelectedBlockClientIds.map( ( clientId ) =>\r\n\t\t\tgetBlock( state, clientId )\r\n\t\t);\r\n\t},\r\n\t( state ) => [\r\n\t\t...getSelectedBlockClientIds.getDependants( state ),\r\n\t\tstate.blocks.byClientId,\r\n\t\tstate.blocks.order,\r\n\t\tstate.blocks.attributes,\r\n\t]\r\n);\r\n\r\n/**\r\n * Returns the client ID of the first block in the multi-selection set, or null\r\n * if there is no multi-selection.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {?string} First block client ID in the multi-selection set.\r\n */\r\nexport function getFirstMultiSelectedBlockClientId( state ) {\r\n\treturn getMultiSelectedBlockClientIds( state )[ 0 ] || null;\r\n}\r\n\r\n/**\r\n * Returns the client ID of the last block in the multi-selection set, or null\r\n * if there is no multi-selection.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {?string} Last block client ID in the multi-selection set.\r\n */\r\nexport function getLastMultiSelectedBlockClientId( state ) {\r\n\tconst selectedClientIds = getMultiSelectedBlockClientIds( state );\r\n\treturn selectedClientIds[ selectedClientIds.length - 1 ] || null;\r\n}\r\n\r\n/**\r\n * Returns true if a multi-selection exists, and the block corresponding to the\r\n * specified client ID is the first block of the multi-selection set, or false\r\n * otherwise.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId Block client ID.\r\n *\r\n * @return {boolean} Whether block is first in multi-selection.\r\n */\r\nexport function isFirstMultiSelectedBlock( state, clientId ) {\r\n\treturn getFirstMultiSelectedBlockClientId( state ) === clientId;\r\n}\r\n\r\n/**\r\n * Returns true if the client ID occurs within the block multi-selection, or\r\n * false otherwise.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId Block client ID.\r\n *\r\n * @return {boolean} Whether block is in multi-selection set.\r\n */\r\nexport function isBlockMultiSelected( state, clientId ) {\r\n\treturn getMultiSelectedBlockClientIds( state ).indexOf( clientId ) !== -1;\r\n}\r\n\r\n/**\r\n * Returns true if an ancestor of the block is multi-selected, or false\r\n * otherwise.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId Block client ID.\r\n *\r\n * @return {boolean} Whether an ancestor of the block is in multi-selection\r\n *                   set.\r\n */\r\nexport const isAncestorMultiSelected = createSelector(\r\n\t( state, clientId ) => {\r\n\t\tlet ancestorClientId = clientId;\r\n\t\tlet isMultiSelected = false;\r\n\t\twhile ( ancestorClientId && ! isMultiSelected ) {\r\n\t\t\tancestorClientId = getBlockRootClientId( state, ancestorClientId );\r\n\t\t\tisMultiSelected = isBlockMultiSelected( state, ancestorClientId );\r\n\t\t}\r\n\t\treturn isMultiSelected;\r\n\t},\r\n\t( state ) => [\r\n\t\tstate.blocks.order,\r\n\t\tstate.selection.selectionStart.clientId,\r\n\t\tstate.selection.selectionEnd.clientId,\r\n\t]\r\n);\r\n\r\n/**\r\n * Returns the client ID of the block which begins the multi-selection set, or\r\n * null if there is no multi-selection.\r\n *\r\n * This is not necessarily the first client ID in the selection.\r\n *\r\n * @see getFirstMultiSelectedBlockClientId\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {?string} Client ID of block beginning multi-selection.\r\n */\r\nexport function getMultiSelectedBlocksStartClientId( state ) {\r\n\tconst { selectionStart, selectionEnd } = state.selection;\r\n\r\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn selectionStart.clientId || null;\r\n}\r\n\r\n/**\r\n * Returns the client ID of the block which ends the multi-selection set, or\r\n * null if there is no multi-selection.\r\n *\r\n * This is not necessarily the last client ID in the selection.\r\n *\r\n * @see getLastMultiSelectedBlockClientId\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {?string} Client ID of block ending multi-selection.\r\n */\r\nexport function getMultiSelectedBlocksEndClientId( state ) {\r\n\tconst { selectionStart, selectionEnd } = state.selection;\r\n\r\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn selectionEnd.clientId || null;\r\n}\r\n\r\n/**\r\n * Returns true if the selection is not partial.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {boolean} Whether the selection is mergeable.\r\n */\r\nexport function __unstableIsFullySelected( state ) {\r\n\tconst selectionAnchor = getSelectionStart( state );\r\n\tconst selectionFocus = getSelectionEnd( state );\r\n\treturn (\r\n\t\t! selectionAnchor.attributeKey &&\r\n\t\t! selectionFocus.attributeKey &&\r\n\t\ttypeof selectionAnchor.offset === 'undefined' &&\r\n\t\ttypeof selectionFocus.offset === 'undefined'\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns true if the selection is collapsed.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {boolean} Whether the selection is collapsed.\r\n */\r\nexport function __unstableIsSelectionCollapsed( state ) {\r\n\tconst selectionAnchor = getSelectionStart( state );\r\n\tconst selectionFocus = getSelectionEnd( state );\r\n\treturn (\r\n\t\t!! selectionAnchor &&\r\n\t\t!! selectionFocus &&\r\n\t\tselectionAnchor.clientId === selectionFocus.clientId &&\r\n\t\tselectionAnchor.attributeKey === selectionFocus.attributeKey &&\r\n\t\tselectionAnchor.offset === selectionFocus.offset\r\n\t);\r\n}\r\n\r\nexport function __unstableSelectionHasUnmergeableBlock( state ) {\r\n\treturn getSelectedBlockClientIds( state ).some( ( clientId ) => {\r\n\t\tconst blockName = getBlockName( state, clientId );\r\n\t\tconst blockType = getBlockType( blockName );\r\n\t\treturn ! blockType.merge;\r\n\t} );\r\n}\r\n\r\n/**\r\n * Check whether the selection is mergeable.\r\n *\r\n * @param {Object}  state     Editor state.\r\n * @param {boolean} isForward Whether to merge forwards.\r\n *\r\n * @return {boolean} Whether the selection is mergeable.\r\n */\r\nexport function __unstableIsSelectionMergeable( state, isForward ) {\r\n\tconst selectionAnchor = getSelectionStart( state );\r\n\tconst selectionFocus = getSelectionEnd( state );\r\n\r\n\t// It's not mergeable if the start and end are within the same block.\r\n\tif ( selectionAnchor.clientId === selectionFocus.clientId ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// It's not mergeable if there's no rich text selection.\r\n\tif (\r\n\t\t! selectionAnchor.attributeKey ||\r\n\t\t! selectionFocus.attributeKey ||\r\n\t\ttypeof selectionAnchor.offset === 'undefined' ||\r\n\t\ttypeof selectionFocus.offset === 'undefined'\r\n\t) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst anchorRootClientId = getBlockRootClientId(\r\n\t\tstate,\r\n\t\tselectionAnchor.clientId\r\n\t);\r\n\tconst focusRootClientId = getBlockRootClientId(\r\n\t\tstate,\r\n\t\tselectionFocus.clientId\r\n\t);\r\n\r\n\t// It's not mergeable if the selection doesn't start and end in the same\r\n\t// block list. Maybe in the future it should be allowed.\r\n\tif ( anchorRootClientId !== focusRootClientId ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst blockOrder = getBlockOrder( state, anchorRootClientId );\r\n\tconst anchorIndex = blockOrder.indexOf( selectionAnchor.clientId );\r\n\tconst focusIndex = blockOrder.indexOf( selectionFocus.clientId );\r\n\r\n\t// Reassign selection start and end based on order.\r\n\tlet selectionStart, selectionEnd;\r\n\r\n\tif ( anchorIndex > focusIndex ) {\r\n\t\tselectionStart = selectionFocus;\r\n\t\tselectionEnd = selectionAnchor;\r\n\t} else {\r\n\t\tselectionStart = selectionAnchor;\r\n\t\tselectionEnd = selectionFocus;\r\n\t}\r\n\r\n\tconst targetBlockClientId = isForward\r\n\t\t? selectionEnd.clientId\r\n\t\t: selectionStart.clientId;\r\n\tconst blockToMergeClientId = isForward\r\n\t\t? selectionStart.clientId\r\n\t\t: selectionEnd.clientId;\r\n\r\n\tconst targetBlockName = getBlockName( state, targetBlockClientId );\r\n\tconst targetBlockType = getBlockType( targetBlockName );\r\n\r\n\tif ( ! targetBlockType.merge ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst blockToMerge = getBlock( state, blockToMergeClientId );\r\n\r\n\t// It's mergeable if the blocks are of the same type.\r\n\tif ( blockToMerge.name === targetBlockName ) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// If the blocks are of a different type, try to transform the block being\r\n\t// merged into the same type of block.\r\n\tconst blocksToMerge = switchToBlockType( blockToMerge, targetBlockName );\r\n\r\n\treturn blocksToMerge && blocksToMerge.length;\r\n}\r\n\r\n/**\r\n * Get partial selected blocks with their content updated\r\n * based on the selection.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {Object[]} Updated partial selected blocks.\r\n */\r\nexport const __unstableGetSelectedBlocksWithPartialSelection = ( state ) => {\r\n\tconst selectionAnchor = getSelectionStart( state );\r\n\tconst selectionFocus = getSelectionEnd( state );\r\n\r\n\tif ( selectionAnchor.clientId === selectionFocus.clientId ) {\r\n\t\treturn EMPTY_ARRAY;\r\n\t}\r\n\r\n\t// Can't split if the selection is not set.\r\n\tif (\r\n\t\t! selectionAnchor.attributeKey ||\r\n\t\t! selectionFocus.attributeKey ||\r\n\t\ttypeof selectionAnchor.offset === 'undefined' ||\r\n\t\ttypeof selectionFocus.offset === 'undefined'\r\n\t) {\r\n\t\treturn EMPTY_ARRAY;\r\n\t}\r\n\r\n\tconst anchorRootClientId = getBlockRootClientId(\r\n\t\tstate,\r\n\t\tselectionAnchor.clientId\r\n\t);\r\n\tconst focusRootClientId = getBlockRootClientId(\r\n\t\tstate,\r\n\t\tselectionFocus.clientId\r\n\t);\r\n\r\n\t// It's not splittable if the selection doesn't start and end in the same\r\n\t// block list. Maybe in the future it should be allowed.\r\n\tif ( anchorRootClientId !== focusRootClientId ) {\r\n\t\treturn EMPTY_ARRAY;\r\n\t}\r\n\r\n\tconst blockOrder = getBlockOrder( state, anchorRootClientId );\r\n\tconst anchorIndex = blockOrder.indexOf( selectionAnchor.clientId );\r\n\tconst focusIndex = blockOrder.indexOf( selectionFocus.clientId );\r\n\r\n\t// Reassign selection start and end based on order.\r\n\tconst [ selectionStart, selectionEnd ] =\r\n\t\tanchorIndex > focusIndex\r\n\t\t\t? [ selectionFocus, selectionAnchor ]\r\n\t\t\t: [ selectionAnchor, selectionFocus ];\r\n\r\n\tconst blockA = getBlock( state, selectionStart.clientId );\r\n\tconst blockB = getBlock( state, selectionEnd.clientId );\r\n\r\n\tconst htmlA = blockA.attributes[ selectionStart.attributeKey ];\r\n\tconst htmlB = blockB.attributes[ selectionEnd.attributeKey ];\r\n\r\n\tlet valueA = create( { html: htmlA } );\r\n\tlet valueB = create( { html: htmlB } );\r\n\r\n\tvalueA = remove( valueA, 0, selectionStart.offset );\r\n\tvalueB = remove( valueB, selectionEnd.offset, valueB.text.length );\r\n\r\n\treturn [\r\n\t\t{\r\n\t\t\t...blockA,\r\n\t\t\tattributes: {\r\n\t\t\t\t...blockA.attributes,\r\n\t\t\t\t[ selectionStart.attributeKey ]: toHTMLString( {\r\n\t\t\t\t\tvalue: valueA,\r\n\t\t\t\t} ),\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\t...blockB,\r\n\t\t\tattributes: {\r\n\t\t\t\t...blockB.attributes,\r\n\t\t\t\t[ selectionEnd.attributeKey ]: toHTMLString( {\r\n\t\t\t\t\tvalue: valueB,\r\n\t\t\t\t} ),\r\n\t\t\t},\r\n\t\t},\r\n\t];\r\n};\r\n\r\n/**\r\n * Returns an array containing all block client IDs in the editor in the order\r\n * they appear. Optionally accepts a root client ID of the block list for which\r\n * the order should be returned, defaulting to the top-level block order.\r\n *\r\n * @param {Object}  state        Editor state.\r\n * @param {?string} rootClientId Optional root client ID of block list.\r\n *\r\n * @return {Array} Ordered client IDs of editor blocks.\r\n */\r\nexport function getBlockOrder( state, rootClientId ) {\r\n\treturn state.blocks.order.get( rootClientId || '' ) || EMPTY_ARRAY;\r\n}\r\n\r\n/**\r\n * Returns the index at which the block corresponding to the specified client\r\n * ID occurs within the block order, or `-1` if the block does not exist.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId Block client ID.\r\n *\r\n * @return {number} Index at which block exists in order.\r\n */\r\nexport function getBlockIndex( state, clientId ) {\r\n\tconst rootClientId = getBlockRootClientId( state, clientId );\r\n\treturn getBlockOrder( state, rootClientId ).indexOf( clientId );\r\n}\r\n\r\n/**\r\n * Returns true if the block corresponding to the specified client ID is\r\n * currently selected and no multi-selection exists, or false otherwise.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId Block client ID.\r\n *\r\n * @return {boolean} Whether block is selected and multi-selection exists.\r\n */\r\nexport function isBlockSelected( state, clientId ) {\r\n\tconst { selectionStart, selectionEnd } = state.selection;\r\n\r\n\tif ( selectionStart.clientId !== selectionEnd.clientId ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn selectionStart.clientId === clientId;\r\n}\r\n\r\n/**\r\n * Returns true if one of the block's inner blocks is selected.\r\n *\r\n * @param {Object}  state    Editor state.\r\n * @param {string}  clientId Block client ID.\r\n * @param {boolean} deep     Perform a deep check.\r\n *\r\n * @return {boolean} Whether the block has an inner block selected\r\n */\r\nexport function hasSelectedInnerBlock( state, clientId, deep = false ) {\r\n\tconst selectedBlockClientIds = getSelectedBlockClientIds( state );\r\n\r\n\tif ( ! selectedBlockClientIds.length ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif ( deep ) {\r\n\t\treturn selectedBlockClientIds.some( ( id ) =>\r\n\t\t\t// Pass true because we don't care about order and it's more\r\n\t\t\t// performant.\r\n\t\t\tgetBlockParents( state, id, true ).includes( clientId )\r\n\t\t);\r\n\t}\r\n\r\n\treturn selectedBlockClientIds.some(\r\n\t\t( id ) => getBlockRootClientId( state, id ) === clientId\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns true if one of the block's inner blocks is dragged.\r\n *\r\n * @param {Object}  state    Editor state.\r\n * @param {string}  clientId Block client ID.\r\n * @param {boolean} deep     Perform a deep check.\r\n *\r\n * @return {boolean} Whether the block has an inner block dragged\r\n */\r\nexport function hasDraggedInnerBlock( state, clientId, deep = false ) {\r\n\treturn getBlockOrder( state, clientId ).some(\r\n\t\t( innerClientId ) =>\r\n\t\t\tisBlockBeingDragged( state, innerClientId ) ||\r\n\t\t\t( deep && hasDraggedInnerBlock( state, innerClientId, deep ) )\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns true if the block corresponding to the specified client ID is\r\n * currently selected but isn't the last of the selected blocks. Here \"last\"\r\n * refers to the block sequence in the document, _not_ the sequence of\r\n * multi-selection, which is why `state.selectionEnd` isn't used.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId Block client ID.\r\n *\r\n * @return {boolean} Whether block is selected and not the last in the\r\n *                   selection.\r\n */\r\nexport function isBlockWithinSelection( state, clientId ) {\r\n\tif ( ! clientId ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst clientIds = getMultiSelectedBlockClientIds( state );\r\n\tconst index = clientIds.indexOf( clientId );\r\n\treturn index > -1 && index < clientIds.length - 1;\r\n}\r\n\r\n/**\r\n * Returns true if a multi-selection has been made, or false otherwise.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {boolean} Whether multi-selection has been made.\r\n */\r\nexport function hasMultiSelection( state ) {\r\n\tconst { selectionStart, selectionEnd } = state.selection;\r\n\treturn selectionStart.clientId !== selectionEnd.clientId;\r\n}\r\n\r\n/**\r\n * Whether in the process of multi-selecting or not. This flag is only true\r\n * while the multi-selection is being selected (by mouse move), and is false\r\n * once the multi-selection has been settled.\r\n *\r\n * @see hasMultiSelection\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} True if multi-selecting, false if not.\r\n */\r\nexport function isMultiSelecting( state ) {\r\n\treturn state.isMultiSelecting;\r\n}\r\n\r\n/**\r\n * Selector that returns if multi-selection is enabled or not.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} True if it should be possible to multi-select blocks, false if multi-selection is disabled.\r\n */\r\nexport function isSelectionEnabled( state ) {\r\n\treturn state.isSelectionEnabled;\r\n}\r\n\r\n/**\r\n * Returns the block's editing mode, defaulting to \"visual\" if not explicitly\r\n * assigned.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId Block client ID.\r\n *\r\n * @return {Object} Block editing mode.\r\n */\r\nexport function getBlockMode( state, clientId ) {\r\n\treturn state.blocksMode[ clientId ] || 'visual';\r\n}\r\n\r\n/**\r\n * Returns true if the user is typing, or false otherwise.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether user is typing.\r\n */\r\nexport function isTyping( state ) {\r\n\treturn state.isTyping;\r\n}\r\n\r\n/**\r\n * Returns true if the user is dragging blocks, or false otherwise.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether user is dragging blocks.\r\n */\r\nexport function isDraggingBlocks( state ) {\r\n\treturn !! state.draggedBlocks.length;\r\n}\r\n\r\n/**\r\n * Returns the client ids of any blocks being directly dragged.\r\n *\r\n * This does not include children of a parent being dragged.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {string[]} Array of dragged block client ids.\r\n */\r\nexport function getDraggedBlockClientIds( state ) {\r\n\treturn state.draggedBlocks;\r\n}\r\n\r\n/**\r\n * Returns whether the block is being dragged.\r\n *\r\n * Only returns true if the block is being directly dragged,\r\n * not if the block is a child of a parent being dragged.\r\n * See `isAncestorBeingDragged` for child blocks.\r\n *\r\n * @param {Object} state    Global application state.\r\n * @param {string} clientId Client id for block to check.\r\n *\r\n * @return {boolean} Whether the block is being dragged.\r\n */\r\nexport function isBlockBeingDragged( state, clientId ) {\r\n\treturn state.draggedBlocks.includes( clientId );\r\n}\r\n\r\n/**\r\n * Returns whether a parent/ancestor of the block is being dragged.\r\n *\r\n * @param {Object} state    Global application state.\r\n * @param {string} clientId Client id for block to check.\r\n *\r\n * @return {boolean} Whether the block's ancestor is being dragged.\r\n */\r\nexport function isAncestorBeingDragged( state, clientId ) {\r\n\t// Return early if no blocks are being dragged rather than\r\n\t// the more expensive check for parents.\r\n\tif ( ! isDraggingBlocks( state ) ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst parents = getBlockParents( state, clientId );\r\n\treturn parents.some( ( parentClientId ) =>\r\n\t\tisBlockBeingDragged( state, parentClientId )\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns true if the caret is within formatted text, or false otherwise.\r\n *\r\n * @deprecated\r\n *\r\n * @return {boolean} Whether the caret is within formatted text.\r\n */\r\nexport function isCaretWithinFormattedText() {\r\n\tdeprecated(\r\n\t\t'wp.data.select( \"core/block-editor\" ).isCaretWithinFormattedText',\r\n\t\t{\r\n\t\t\tsince: '6.1',\r\n\t\t\tversion: '6.3',\r\n\t\t}\r\n\t);\r\n\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Returns the insertion point, the index at which the new inserted block would\r\n * be placed. Defaults to the last index.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {Object} Insertion point object with `rootClientId`, `index`.\r\n */\r\nexport const getBlockInsertionPoint = createSelector(\r\n\t( state ) => {\r\n\t\tlet rootClientId, index;\r\n\r\n\t\tconst {\r\n\t\t\tinsertionPoint,\r\n\t\t\tselection: { selectionEnd },\r\n\t\t} = state;\r\n\t\tif ( insertionPoint !== null ) {\r\n\t\t\treturn insertionPoint;\r\n\t\t}\r\n\r\n\t\tconst { clientId } = selectionEnd;\r\n\r\n\t\tif ( clientId ) {\r\n\t\t\trootClientId = getBlockRootClientId( state, clientId ) || undefined;\r\n\t\t\tindex = getBlockIndex( state, selectionEnd.clientId ) + 1;\r\n\t\t} else {\r\n\t\t\tindex = getBlockOrder( state ).length;\r\n\t\t}\r\n\r\n\t\treturn { rootClientId, index };\r\n\t},\r\n\t( state ) => [\r\n\t\tstate.insertionPoint,\r\n\t\tstate.selection.selectionEnd.clientId,\r\n\t\tstate.blocks.parents,\r\n\t\tstate.blocks.order,\r\n\t]\r\n);\r\n\r\n/**\r\n * Returns true if we should show the block insertion point.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {?boolean} Whether the insertion point is visible or not.\r\n */\r\nexport function isBlockInsertionPointVisible( state ) {\r\n\treturn state.insertionPoint !== null;\r\n}\r\n\r\n/**\r\n * Returns whether the blocks matches the template or not.\r\n *\r\n * @param {boolean} state\r\n * @return {?boolean} Whether the template is valid or not.\r\n */\r\nexport function isValidTemplate( state ) {\r\n\treturn state.template.isValid;\r\n}\r\n\r\n/**\r\n * Returns the defined block template\r\n *\r\n * @param {boolean} state\r\n *\r\n * @return {?Array} Block Template.\r\n */\r\nexport function getTemplate( state ) {\r\n\treturn state.settings.template;\r\n}\r\n\r\n/**\r\n * Returns the defined block template lock. Optionally accepts a root block\r\n * client ID as context, otherwise defaulting to the global context.\r\n *\r\n * @param {Object}  state        Editor state.\r\n * @param {?string} rootClientId Optional block root client ID.\r\n *\r\n * @return {string|false} Block Template Lock\r\n */\r\nexport function getTemplateLock( state, rootClientId ) {\r\n\tif ( ! rootClientId ) {\r\n\t\treturn state.settings.templateLock ?? false;\r\n\t}\r\n\r\n\treturn getBlockListSettings( state, rootClientId )?.templateLock ?? false;\r\n}\r\n\r\n/**\r\n * Determines if the given block type is allowed to be inserted into the block list.\r\n * This function is not exported and not memoized because using a memoized selector\r\n * inside another memoized selector is just a waste of time.\r\n *\r\n * @param {Object}        state        Editor state.\r\n * @param {string|Object} blockName    The block type object, e.g., the response\r\n *                                     from the block directory; or a string name of\r\n *                                     an installed block type, e.g.' core/paragraph'.\r\n * @param {?string}       rootClientId Optional root client ID of block list.\r\n *\r\n * @return {boolean} Whether the given block type is allowed to be inserted.\r\n */\r\nconst canInsertBlockTypeUnmemoized = (\r\n\tstate,\r\n\tblockName,\r\n\trootClientId = null\r\n) => {\r\n\tlet blockType;\r\n\tif ( blockName && 'object' === typeof blockName ) {\r\n\t\tblockType = blockName;\r\n\t\tblockName = blockType.name;\r\n\t} else {\r\n\t\tblockType = getBlockType( blockName );\r\n\t}\r\n\tif ( ! blockType ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst { allowedBlockTypes } = getSettings( state );\r\n\r\n\tconst isBlockAllowedInEditor = checkAllowList(\r\n\t\tallowedBlockTypes,\r\n\t\tblockName,\r\n\t\ttrue\r\n\t);\r\n\tif ( ! isBlockAllowedInEditor ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst isLocked = !! getTemplateLock( state, rootClientId );\r\n\tif ( isLocked ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif ( getBlockEditingMode( state, rootClientId ?? '' ) === 'disabled' ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst parentBlockListSettings = getBlockListSettings( state, rootClientId );\r\n\r\n\t// The parent block doesn't have settings indicating it doesn't support\r\n\t// inner blocks, return false.\r\n\tif ( rootClientId && parentBlockListSettings === undefined ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst parentName = getBlockName( state, rootClientId );\r\n\tconst parentBlockType = getBlockType( parentName );\r\n\r\n\t// Look at the `blockType.allowedBlocks` field to determine whether this is an allowed child block.\r\n\tconst parentAllowedChildBlocks = parentBlockType?.allowedBlocks;\r\n\tlet hasParentAllowedBlock = checkAllowList(\r\n\t\tparentAllowedChildBlocks,\r\n\t\tblockName\r\n\t);\r\n\r\n\t// The `allowedBlocks` block list setting can further limit which blocks are allowed children.\r\n\tif ( hasParentAllowedBlock !== false ) {\r\n\t\tconst parentAllowedBlocks = parentBlockListSettings?.allowedBlocks;\r\n\t\tconst hasParentListAllowedBlock = checkAllowList(\r\n\t\t\tparentAllowedBlocks,\r\n\t\t\tblockName\r\n\t\t);\r\n\t\t// Never downgrade the result from `true` to `null`\r\n\t\tif ( hasParentListAllowedBlock !== null ) {\r\n\t\t\thasParentAllowedBlock = hasParentListAllowedBlock;\r\n\t\t}\r\n\t}\r\n\r\n\tconst blockAllowedParentBlocks = blockType.parent;\r\n\tconst hasBlockAllowedParent = checkAllowList(\r\n\t\tblockAllowedParentBlocks,\r\n\t\tparentName\r\n\t);\r\n\r\n\tlet hasBlockAllowedAncestor = true;\r\n\tconst blockAllowedAncestorBlocks = blockType.ancestor;\r\n\tif ( blockAllowedAncestorBlocks ) {\r\n\t\tconst ancestors = [\r\n\t\t\trootClientId,\r\n\t\t\t...getBlockParents( state, rootClientId ),\r\n\t\t];\r\n\r\n\t\thasBlockAllowedAncestor = ancestors.some( ( ancestorClientId ) =>\r\n\t\t\tcheckAllowList(\r\n\t\t\t\tblockAllowedAncestorBlocks,\r\n\t\t\t\tgetBlockName( state, ancestorClientId )\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tconst canInsert =\r\n\t\thasBlockAllowedAncestor &&\r\n\t\t( ( hasParentAllowedBlock === null &&\r\n\t\t\thasBlockAllowedParent === null ) ||\r\n\t\t\thasParentAllowedBlock === true ||\r\n\t\t\thasBlockAllowedParent === true );\r\n\r\n\tif ( ! canInsert ) {\r\n\t\treturn canInsert;\r\n\t}\r\n\r\n\t/**\r\n\t * This filter is an ad-hoc solution to prevent adding template parts inside post content.\r\n\t * Conceptually, having a filter inside a selector is bad pattern so this code will be\r\n\t * replaced by a declarative API that doesn't the following drawbacks:\r\n\t *\r\n\t * Filters are not reactive: Upon switching between \"template mode\" and non \"template mode\",\r\n\t * the filter and selector won't necessarily be executed again. For now, it doesn't matter much\r\n\t * because you can't switch between the two modes while the inserter stays open.\r\n\t *\r\n\t * Filters are global: Once they're defined, they will affect all editor instances and all registries.\r\n\t * An ideal API would only affect specific editor instances.\r\n\t */\r\n\treturn applyFilters(\r\n\t\t'blockEditor.__unstableCanInsertBlockType',\r\n\t\tcanInsert,\r\n\t\tblockType,\r\n\t\trootClientId,\r\n\t\t{\r\n\t\t\t// Pass bound selectors of the current registry. If we're in a nested\r\n\t\t\t// context, the data will differ from the one selected from the root\r\n\t\t\t// registry.\r\n\t\t\tgetBlock: getBlock.bind( null, state ),\r\n\t\t\tgetBlockParentsByBlockName: getBlockParentsByBlockName.bind(\r\n\t\t\t\tnull,\r\n\t\t\t\tstate\r\n\t\t\t),\r\n\t\t}\r\n\t);\r\n};\r\n\r\n/**\r\n * Determines if the given block type is allowed to be inserted into the block list.\r\n *\r\n * @param {Object}  state        Editor state.\r\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\r\n * @param {?string} rootClientId Optional root client ID of block list.\r\n *\r\n * @return {boolean} Whether the given block type is allowed to be inserted.\r\n */\r\nexport const canInsertBlockType = createSelector(\r\n\tcanInsertBlockTypeUnmemoized,\r\n\t( state, blockName, rootClientId ) =>\r\n\t\tgetInsertBlockTypeDependants( state, rootClientId )\r\n);\r\n\r\n/**\r\n * Determines if the given blocks are allowed to be inserted into the block\r\n * list.\r\n *\r\n * @param {Object}  state        Editor state.\r\n * @param {string}  clientIds    The block client IDs to be inserted.\r\n * @param {?string} rootClientId Optional root client ID of block list.\r\n *\r\n * @return {boolean} Whether the given blocks are allowed to be inserted.\r\n */\r\nexport function canInsertBlocks( state, clientIds, rootClientId = null ) {\r\n\treturn clientIds.every( ( id ) =>\r\n\t\tcanInsertBlockType( state, getBlockName( state, id ), rootClientId )\r\n\t);\r\n}\r\n\r\n/**\r\n * Determines if the given block is allowed to be deleted.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId The block client Id.\r\n *\r\n * @return {boolean} Whether the given block is allowed to be removed.\r\n */\r\nexport function canRemoveBlock( state, clientId ) {\r\n\tconst attributes = getBlockAttributes( state, clientId );\r\n\tif ( attributes === null ) {\r\n\t\treturn true;\r\n\t}\r\n\tif ( attributes.lock?.remove !== undefined ) {\r\n\t\treturn ! attributes.lock.remove;\r\n\t}\r\n\r\n\tconst rootClientId = getBlockRootClientId( state, clientId );\r\n\tif ( getTemplateLock( state, rootClientId ) ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn getBlockEditingMode( state, rootClientId ) !== 'disabled';\r\n}\r\n\r\n/**\r\n * Determines if the given blocks are allowed to be removed.\r\n *\r\n * @param {Object} state     Editor state.\r\n * @param {string} clientIds The block client IDs to be removed.\r\n *\r\n * @return {boolean} Whether the given blocks are allowed to be removed.\r\n */\r\nexport function canRemoveBlocks( state, clientIds ) {\r\n\treturn clientIds.every( ( clientId ) => canRemoveBlock( state, clientId ) );\r\n}\r\n\r\n/**\r\n * Determines if the given block is allowed to be moved.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId The block client Id.\r\n *\r\n * @return {boolean} Whether the given block is allowed to be moved.\r\n */\r\nexport function canMoveBlock( state, clientId ) {\r\n\tconst attributes = getBlockAttributes( state, clientId );\r\n\tif ( attributes === null ) {\r\n\t\treturn true;\r\n\t}\r\n\tif ( attributes.lock?.move !== undefined ) {\r\n\t\treturn ! attributes.lock.move;\r\n\t}\r\n\r\n\tconst rootClientId = getBlockRootClientId( state, clientId );\r\n\tif ( getTemplateLock( state, rootClientId ) === 'all' ) {\r\n\t\treturn false;\r\n\t}\r\n\treturn getBlockEditingMode( state, rootClientId ) !== 'disabled';\r\n}\r\n\r\n/**\r\n * Determines if the given blocks are allowed to be moved.\r\n *\r\n * @param {Object} state     Editor state.\r\n * @param {string} clientIds The block client IDs to be moved.\r\n *\r\n * @return {boolean} Whether the given blocks are allowed to be moved.\r\n */\r\nexport function canMoveBlocks( state, clientIds ) {\r\n\treturn clientIds.every( ( clientId ) => canMoveBlock( state, clientId ) );\r\n}\r\n\r\n/**\r\n * Determines if the given block is allowed to be edited.\r\n *\r\n * @param {Object} state    Editor state.\r\n * @param {string} clientId The block client Id.\r\n *\r\n * @return {boolean} Whether the given block is allowed to be edited.\r\n */\r\nexport function canEditBlock( state, clientId ) {\r\n\tconst attributes = getBlockAttributes( state, clientId );\r\n\tif ( attributes === null ) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tconst { lock } = attributes;\r\n\r\n\t// When the edit is true, we cannot edit the block.\r\n\treturn ! lock?.edit;\r\n}\r\n\r\n/**\r\n * Determines if the given block type can be locked/unlocked by a user.\r\n *\r\n * @param {Object}          state      Editor state.\r\n * @param {(string|Object)} nameOrType Block name or type object.\r\n *\r\n * @return {boolean} Whether a given block type can be locked/unlocked.\r\n */\r\nexport function canLockBlockType( state, nameOrType ) {\r\n\tif ( ! hasBlockSupport( nameOrType, 'lock', true ) ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Use block editor settings as the default value.\r\n\treturn !! state.settings?.canLockBlocks;\r\n}\r\n\r\n/**\r\n * Returns information about how recently and frequently a block has been inserted.\r\n *\r\n * @param {Object} state Global application state.\r\n * @param {string} id    A string which identifies the insert, e.g. 'core/block/12'\r\n *\r\n * @return {?{ time: number, count: number }} An object containing `time` which is when the last\r\n *                                            insert occurred as a UNIX epoch, and `count` which is\r\n *                                            the number of inserts that have occurred.\r\n */\r\nfunction getInsertUsage( state, id ) {\r\n\treturn state.preferences.insertUsage?.[ id ] ?? null;\r\n}\r\n\r\n/**\r\n * Returns whether we can show a block type in the inserter\r\n *\r\n * @param {Object}  state        Global State\r\n * @param {Object}  blockType    BlockType\r\n * @param {?string} rootClientId Optional root client ID of block list.\r\n *\r\n * @return {boolean} Whether the given block type is allowed to be shown in the inserter.\r\n */\r\nconst canIncludeBlockTypeInInserter = ( state, blockType, rootClientId ) => {\r\n\tif ( ! hasBlockSupport( blockType, 'inserter', true ) ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn canInsertBlockTypeUnmemoized( state, blockType.name, rootClientId );\r\n};\r\n\r\n/**\r\n * Return a function to be used to tranform a block variation to an inserter item\r\n *\r\n * @param {Object} state Global State\r\n * @param {Object} item  Denormalized inserter item\r\n * @return {Function} Function to transform a block variation to inserter item\r\n */\r\nconst getItemFromVariation = ( state, item ) => ( variation ) => {\r\n\tconst variationId = `${ item.id }/${ variation.name }`;\r\n\tconst { time, count = 0 } = getInsertUsage( state, variationId ) || {};\r\n\treturn {\r\n\t\t...item,\r\n\t\tid: variationId,\r\n\t\ticon: variation.icon || item.icon,\r\n\t\ttitle: variation.title || item.title,\r\n\t\tdescription: variation.description || item.description,\r\n\t\tcategory: variation.category || item.category,\r\n\t\t// If `example` is explicitly undefined for the variation, the preview will not be shown.\r\n\t\texample: variation.hasOwnProperty( 'example' )\r\n\t\t\t? variation.example\r\n\t\t\t: item.example,\r\n\t\tinitialAttributes: {\r\n\t\t\t...item.initialAttributes,\r\n\t\t\t...variation.attributes,\r\n\t\t},\r\n\t\tinnerBlocks: variation.innerBlocks,\r\n\t\tkeywords: variation.keywords || item.keywords,\r\n\t\tfrecency: calculateFrecency( time, count ),\r\n\t};\r\n};\r\n\r\n/**\r\n * Returns the calculated frecency.\r\n *\r\n * 'frecency' is a heuristic (https://en.wikipedia.org/wiki/Frecency)\r\n * that combines block usage frequenty and recency.\r\n *\r\n * @param {number} time  When the last insert occurred as a UNIX epoch\r\n * @param {number} count The number of inserts that have occurred.\r\n *\r\n * @return {number} The calculated frecency.\r\n */\r\nconst calculateFrecency = ( time, count ) => {\r\n\tif ( ! time ) {\r\n\t\treturn count;\r\n\t}\r\n\t// The selector is cached, which means Date.now() is the last time that the\r\n\t// relevant state changed. This suits our needs.\r\n\tconst duration = Date.now() - time;\r\n\tswitch ( true ) {\r\n\t\tcase duration < MILLISECONDS_PER_HOUR:\r\n\t\t\treturn count * 4;\r\n\t\tcase duration < MILLISECONDS_PER_DAY:\r\n\t\t\treturn count * 2;\r\n\t\tcase duration < MILLISECONDS_PER_WEEK:\r\n\t\t\treturn count / 2;\r\n\t\tdefault:\r\n\t\t\treturn count / 4;\r\n\t}\r\n};\r\n\r\n/**\r\n * Returns a function that accepts a block type and builds an item to be shown\r\n * in a specific context. It's used for building items for Inserter and available\r\n * block Transfroms list.\r\n *\r\n * @param {Object} state              Editor state.\r\n * @param {Object} options            Options object for handling the building of a block type.\r\n * @param {string} options.buildScope The scope for which the item is going to be used.\r\n * @return {Function} Function returns an item to be shown in a specific context (Inserter|Transforms list).\r\n */\r\nconst buildBlockTypeItem =\r\n\t( state, { buildScope = 'inserter' } ) =>\r\n\t( blockType ) => {\r\n\t\tconst id = blockType.name;\r\n\r\n\t\tlet isDisabled = false;\r\n\t\tif ( ! hasBlockSupport( blockType.name, 'multiple', true ) ) {\r\n\t\t\tisDisabled = getBlocksByClientId(\r\n\t\t\t\tstate,\r\n\t\t\t\tgetClientIdsWithDescendants( state )\r\n\t\t\t).some( ( { name } ) => name === blockType.name );\r\n\t\t}\r\n\r\n\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\r\n\t\tconst blockItemBase = {\r\n\t\t\tid,\r\n\t\t\tname: blockType.name,\r\n\t\t\ttitle: blockType.title,\r\n\t\t\ticon: blockType.icon,\r\n\t\t\tisDisabled,\r\n\t\t\tfrecency: calculateFrecency( time, count ),\r\n\t\t};\r\n\t\tif ( buildScope === 'transform' ) {\r\n\t\t\treturn blockItemBase;\r\n\t\t}\r\n\r\n\t\tconst inserterVariations = getBlockVariations(\r\n\t\t\tblockType.name,\r\n\t\t\t'inserter'\r\n\t\t);\r\n\t\treturn {\r\n\t\t\t...blockItemBase,\r\n\t\t\tinitialAttributes: {},\r\n\t\t\tdescription: blockType.description,\r\n\t\t\tcategory: blockType.category,\r\n\t\t\tkeywords: blockType.keywords,\r\n\t\t\tvariations: inserterVariations,\r\n\t\t\texample: blockType.example,\r\n\t\t\tutility: 1, // Deprecated.\r\n\t\t};\r\n\t};\r\n\r\n/**\r\n * Determines the items that appear in the inserter. Includes both static\r\n * items (e.g. a regular block type) and dynamic items (e.g. a reusable block).\r\n *\r\n * Each item object contains what's necessary to display a button in the\r\n * inserter and handle its selection.\r\n *\r\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\r\n * that combines block usage frequenty and recency.\r\n *\r\n * Items are returned ordered descendingly by their 'utility' and 'frecency'.\r\n *\r\n * @param    {Object}   state             Editor state.\r\n * @param    {?string}  rootClientId      Optional root client ID of block list.\r\n *\r\n * @return {WPEditorInserterItem[]} Items that appear in inserter.\r\n *\r\n * @typedef {Object} WPEditorInserterItem\r\n * @property {string}   id                Unique identifier for the item.\r\n * @property {string}   name              The type of block to create.\r\n * @property {Object}   initialAttributes Attributes to pass to the newly created block.\r\n * @property {string}   title             Title of the item, as it appears in the inserter.\r\n * @property {string}   icon              Dashicon for the item, as it appears in the inserter.\r\n * @property {string}   category          Block category that the item is associated with.\r\n * @property {string[]} keywords          Keywords that can be searched to find this item.\r\n * @property {boolean}  isDisabled        Whether or not the user should be prevented from inserting\r\n *                                        this item.\r\n * @property {number}   frecency          Heuristic that combines frequency and recency.\r\n */\r\nexport const getInserterItems = createRegistrySelector( ( select ) =>\r\n\tcreateSelector(\r\n\t\t( state, rootClientId = null, options = EMPTY_OBJECT ) => {\r\n\t\t\tconst buildReusableBlockInserterItem = ( reusableBlock ) => {\r\n\t\t\t\tconst icon = ! reusableBlock.wp_pattern_sync_status\r\n\t\t\t\t\t? {\r\n\t\t\t\t\t\t\tsrc: symbol,\r\n\t\t\t\t\t\t\tforeground: 'var(--wp-block-synced-color)',\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t: symbol;\r\n\t\t\t\tconst id = `core/block/${ reusableBlock.id }`;\r\n\t\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\r\n\t\t\t\tconst frecency = calculateFrecency( time, count );\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid,\r\n\t\t\t\t\tname: 'core/block',\r\n\t\t\t\t\tinitialAttributes: { ref: reusableBlock.id },\r\n\t\t\t\t\ttitle: reusableBlock.title?.raw,\r\n\t\t\t\t\ticon,\r\n\t\t\t\t\tcategory: 'reusable',\r\n\t\t\t\t\tkeywords: [ 'reusable' ],\r\n\t\t\t\t\tisDisabled: false,\r\n\t\t\t\t\tutility: 1, // Deprecated.\r\n\t\t\t\t\tfrecency,\r\n\t\t\t\t\tcontent: reusableBlock.content?.raw,\r\n\t\t\t\t\tsyncStatus: reusableBlock.wp_pattern_sync_status,\r\n\t\t\t\t};\r\n\t\t\t};\r\n\r\n\t\t\tconst syncedPatternInserterItems = canInsertBlockTypeUnmemoized(\r\n\t\t\t\tstate,\r\n\t\t\t\t'core/block',\r\n\t\t\t\trootClientId\r\n\t\t\t)\r\n\t\t\t\t? unlock( select( STORE_NAME ) )\r\n\t\t\t\t\t\t.getReusableBlocks()\r\n\t\t\t\t\t\t.map( buildReusableBlockInserterItem )\r\n\t\t\t\t: [];\r\n\r\n\t\t\tconst buildBlockTypeInserterItem = buildBlockTypeItem( state, {\r\n\t\t\t\tbuildScope: 'inserter',\r\n\t\t\t} );\r\n\r\n\t\t\tlet blockTypeInserterItems = getBlockTypes()\r\n\t\t\t\t.filter( ( blockType ) =>\r\n\t\t\t\t\thasBlockSupport( blockType, 'inserter', true )\r\n\t\t\t\t)\r\n\t\t\t\t.map( buildBlockTypeInserterItem );\r\n\r\n\t\t\tif ( options[ withRootClientIdOptionKey ] ) {\r\n\t\t\t\tblockTypeInserterItems = blockTypeInserterItems.reduce(\r\n\t\t\t\t\t( accumulator, item ) => {\r\n\t\t\t\t\t\titem.rootClientId = rootClientId ?? '';\r\n\r\n\t\t\t\t\t\twhile (\r\n\t\t\t\t\t\t\t! canInsertBlockTypeUnmemoized(\r\n\t\t\t\t\t\t\t\tstate,\r\n\t\t\t\t\t\t\t\titem.name,\r\n\t\t\t\t\t\t\t\titem.rootClientId\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tif ( ! item.rootClientId ) {\r\n\t\t\t\t\t\t\t\tlet sectionRootClientId;\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\tsectionRootClientId =\r\n\t\t\t\t\t\t\t\t\t\tgetSectionRootClientId( state );\r\n\t\t\t\t\t\t\t\t} catch ( e ) {}\r\n\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\tsectionRootClientId &&\r\n\t\t\t\t\t\t\t\t\tcanInsertBlockTypeUnmemoized(\r\n\t\t\t\t\t\t\t\t\t\tstate,\r\n\t\t\t\t\t\t\t\t\t\titem.name,\r\n\t\t\t\t\t\t\t\t\t\tsectionRootClientId\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\titem.rootClientId = sectionRootClientId;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tdelete item.rootClientId;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tconst parentClientId = getBlockRootClientId(\r\n\t\t\t\t\t\t\t\t\tstate,\r\n\t\t\t\t\t\t\t\t\titem.rootClientId\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\titem.rootClientId = parentClientId;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// We could also add non insertable items and gray them out.\r\n\t\t\t\t\t\tif ( item.hasOwnProperty( 'rootClientId' ) ) {\r\n\t\t\t\t\t\t\taccumulator.push( item );\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn accumulator;\r\n\t\t\t\t\t},\r\n\t\t\t\t\t[]\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tblockTypeInserterItems = blockTypeInserterItems.filter(\r\n\t\t\t\t\t( blockType ) =>\r\n\t\t\t\t\t\tcanIncludeBlockTypeInInserter(\r\n\t\t\t\t\t\t\tstate,\r\n\t\t\t\t\t\t\tblockType,\r\n\t\t\t\t\t\t\trootClientId\r\n\t\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tconst items = blockTypeInserterItems.reduce(\r\n\t\t\t\t( accumulator, item ) => {\r\n\t\t\t\t\tconst { variations = [] } = item;\r\n\t\t\t\t\t// Exclude any block type item that is to be replaced by a default variation.\r\n\t\t\t\t\tif ( ! variations.some( ( { isDefault } ) => isDefault ) ) {\r\n\t\t\t\t\t\taccumulator.push( item );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( variations.length ) {\r\n\t\t\t\t\t\tconst variationMapper = getItemFromVariation(\r\n\t\t\t\t\t\t\tstate,\r\n\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\taccumulator.push(\r\n\t\t\t\t\t\t\t...variations.map( variationMapper )\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn accumulator;\r\n\t\t\t\t},\r\n\t\t\t\t[]\r\n\t\t\t);\r\n\r\n\t\t\t// Ensure core blocks are prioritized in the returned results,\r\n\t\t\t// because third party blocks can be registered earlier than\r\n\t\t\t// the core blocks (usually by using the `init` action),\r\n\t\t\t// thus affecting the display order.\r\n\t\t\t// We don't sort reusable blocks as they are handled differently.\r\n\t\t\tconst groupByType = ( blocks, block ) => {\r\n\t\t\t\tconst { core, noncore } = blocks;\r\n\t\t\t\tconst type = block.name.startsWith( 'core/' ) ? core : noncore;\r\n\r\n\t\t\t\ttype.push( block );\r\n\t\t\t\treturn blocks;\r\n\t\t\t};\r\n\t\t\tconst { core: coreItems, noncore: nonCoreItems } = items.reduce(\r\n\t\t\t\tgroupByType,\r\n\t\t\t\t{ core: [], noncore: [] }\r\n\t\t\t);\r\n\t\t\tconst sortedBlockTypes = [ ...coreItems, ...nonCoreItems ];\r\n\t\t\treturn [ ...sortedBlockTypes, ...syncedPatternInserterItems ];\r\n\t\t},\r\n\t\t( state, rootClientId ) => [\r\n\t\t\tgetBlockTypes(),\r\n\t\t\tunlock( select( STORE_NAME ) ).getReusableBlocks(),\r\n\t\t\tstate.blocks.order,\r\n\t\t\tstate.preferences.insertUsage,\r\n\t\t\t...getInsertBlockTypeDependants( state, rootClientId ),\r\n\t\t]\r\n\t)\r\n);\r\n\r\n/**\r\n * Determines the items that appear in the available block transforms list.\r\n *\r\n * Each item object contains what's necessary to display a menu item in the\r\n * transform list and handle its selection.\r\n *\r\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\r\n * that combines block usage frequenty and recency.\r\n *\r\n * Items are returned ordered descendingly by their 'frecency'.\r\n *\r\n * @param    {Object}          state        Editor state.\r\n * @param    {Object|Object[]} blocks       Block object or array objects.\r\n * @param    {?string}         rootClientId Optional root client ID of block list.\r\n *\r\n * @return {WPEditorTransformItem[]} Items that appear in inserter.\r\n *\r\n * @typedef {Object} WPEditorTransformItem\r\n * @property {string}          id           Unique identifier for the item.\r\n * @property {string}          name         The type of block to create.\r\n * @property {string}          title        Title of the item, as it appears in the inserter.\r\n * @property {string}          icon         Dashicon for the item, as it appears in the inserter.\r\n * @property {boolean}         isDisabled   Whether or not the user should be prevented from inserting\r\n *                                          this item.\r\n * @property {number}          frecency     Heuristic that combines frequency and recency.\r\n */\r\nexport const getBlockTransformItems = createSelector(\r\n\t( state, blocks, rootClientId = null ) => {\r\n\t\tconst normalizedBlocks = Array.isArray( blocks ) ? blocks : [ blocks ];\r\n\t\tconst buildBlockTypeTransformItem = buildBlockTypeItem( state, {\r\n\t\t\tbuildScope: 'transform',\r\n\t\t} );\r\n\t\tconst blockTypeTransformItems = getBlockTypes()\r\n\t\t\t.filter( ( blockType ) =>\r\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\r\n\t\t\t)\r\n\t\t\t.map( buildBlockTypeTransformItem );\r\n\r\n\t\tconst itemsByName = Object.fromEntries(\r\n\t\t\tObject.entries( blockTypeTransformItems ).map( ( [ , value ] ) => [\r\n\t\t\t\tvalue.name,\r\n\t\t\t\tvalue,\r\n\t\t\t] )\r\n\t\t);\r\n\r\n\t\tconst possibleTransforms = getPossibleBlockTransformations(\r\n\t\t\tnormalizedBlocks\r\n\t\t).reduce( ( accumulator, block ) => {\r\n\t\t\tif ( itemsByName[ block?.name ] ) {\r\n\t\t\t\taccumulator.push( itemsByName[ block.name ] );\r\n\t\t\t}\r\n\t\t\treturn accumulator;\r\n\t\t}, [] );\r\n\t\treturn orderBy(\r\n\t\t\tpossibleTransforms,\r\n\t\t\t( block ) => itemsByName[ block.name ].frecency,\r\n\t\t\t'desc'\r\n\t\t);\r\n\t},\r\n\t( state, blocks, rootClientId ) => [\r\n\t\tgetBlockTypes(),\r\n\t\tstate.preferences.insertUsage,\r\n\t\t...getInsertBlockTypeDependants( state, rootClientId ),\r\n\t]\r\n);\r\n\r\n/**\r\n * Determines whether there are items to show in the inserter.\r\n *\r\n * @param {Object}  state        Editor state.\r\n * @param {?string} rootClientId Optional root client ID of block list.\r\n *\r\n * @return {boolean} Items that appear in inserter.\r\n */\r\nexport const hasInserterItems = createRegistrySelector(\r\n\t( select ) =>\r\n\t\t( state, rootClientId = null ) => {\r\n\t\t\tconst hasBlockType = getBlockTypes().some( ( blockType ) =>\r\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\r\n\t\t\t);\r\n\t\t\tif ( hasBlockType ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tconst hasReusableBlock =\r\n\t\t\t\tcanInsertBlockTypeUnmemoized(\r\n\t\t\t\t\tstate,\r\n\t\t\t\t\t'core/block',\r\n\t\t\t\t\trootClientId\r\n\t\t\t\t) &&\r\n\t\t\t\tunlock( select( STORE_NAME ) ).getReusableBlocks().length > 0;\r\n\r\n\t\t\treturn hasReusableBlock;\r\n\t\t}\r\n);\r\n\r\n/**\r\n * Returns the list of allowed inserter blocks for inner blocks children.\r\n *\r\n * @param {Object}  state        Editor state.\r\n * @param {?string} rootClientId Optional root client ID of block list.\r\n *\r\n * @return {Array?} The list of allowed block types.\r\n */\r\nexport const getAllowedBlocks = createRegistrySelector( ( select ) =>\r\n\tcreateSelector(\r\n\t\t( state, rootClientId = null ) => {\r\n\t\t\tif ( ! rootClientId ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst blockTypes = getBlockTypes().filter( ( blockType ) =>\r\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\r\n\t\t\t);\r\n\r\n\t\t\tconst hasReusableBlock =\r\n\t\t\t\tcanInsertBlockTypeUnmemoized(\r\n\t\t\t\t\tstate,\r\n\t\t\t\t\t'core/block',\r\n\t\t\t\t\trootClientId\r\n\t\t\t\t) &&\r\n\t\t\t\tunlock( select( STORE_NAME ) ).getReusableBlocks().length > 0;\r\n\r\n\t\t\tif ( hasReusableBlock ) {\r\n\t\t\t\tblockTypes.push( 'core/block' );\r\n\t\t\t}\r\n\r\n\t\t\treturn blockTypes;\r\n\t\t},\r\n\t\t( state, rootClientId ) => [\r\n\t\t\tgetBlockTypes(),\r\n\t\t\tunlock( select( STORE_NAME ) ).getReusableBlocks(),\r\n\t\t\t...getInsertBlockTypeDependants( state, rootClientId ),\r\n\t\t]\r\n\t)\r\n);\r\n\r\nexport const __experimentalGetAllowedBlocks = createSelector(\r\n\t( state, rootClientId = null ) => {\r\n\t\tdeprecated(\r\n\t\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetAllowedBlocks',\r\n\t\t\t{\r\n\t\t\t\talternative:\r\n\t\t\t\t\t'wp.data.select( \"core/block-editor\" ).getAllowedBlocks',\r\n\t\t\t\tsince: '6.2',\r\n\t\t\t\tversion: '6.4',\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn getAllowedBlocks( state, rootClientId );\r\n\t},\r\n\t( state, rootClientId ) =>\r\n\t\tgetAllowedBlocks.getDependants( state, rootClientId )\r\n);\r\n\r\n/**\r\n * Returns the block to be directly inserted by the block appender.\r\n *\r\n * @param    {Object}         state            Editor state.\r\n * @param    {?string}        rootClientId     Optional root client ID of block list.\r\n *\r\n * @return {WPDirectInsertBlock|undefined}              The block type to be directly inserted.\r\n *\r\n * @typedef {Object} WPDirectInsertBlock\r\n * @property {string}         name             The type of block.\r\n * @property {?Object}        attributes       Attributes to pass to the newly created block.\r\n * @property {?Array<string>} attributesToCopy Attributes to be copied from adjecent blocks when inserted.\r\n */\r\nexport function getDirectInsertBlock( state, rootClientId = null ) {\r\n\tif ( ! rootClientId ) {\r\n\t\treturn;\r\n\t}\r\n\tconst { defaultBlock, directInsert } =\r\n\t\tstate.blockListSettings[ rootClientId ] ?? {};\r\n\tif ( ! defaultBlock || ! directInsert ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\treturn defaultBlock;\r\n}\r\n\r\nexport function __experimentalGetDirectInsertBlock(\r\n\tstate,\r\n\trootClientId = null\r\n) {\r\n\tdeprecated(\r\n\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetDirectInsertBlock',\r\n\t\t{\r\n\t\t\talternative:\r\n\t\t\t\t'wp.data.select( \"core/block-editor\" ).getDirectInsertBlock',\r\n\t\t\tsince: '6.3',\r\n\t\t\tversion: '6.4',\r\n\t\t}\r\n\t);\r\n\treturn getDirectInsertBlock( state, rootClientId );\r\n}\r\n\r\nexport const __experimentalGetParsedPattern = createRegistrySelector(\r\n\t( select ) => ( state, patternName ) => {\r\n\t\tconst pattern = unlock( select( STORE_NAME ) ).getPatternBySlug(\r\n\t\t\tpatternName\r\n\t\t);\r\n\t\treturn pattern ? getParsedPattern( pattern ) : null;\r\n\t}\r\n);\r\n\r\nconst getAllowedPatternsDependants = ( select ) => ( state, rootClientId ) => [\r\n\t...getAllPatternsDependants( select )( state ),\r\n\t...getInsertBlockTypeDependants( state, rootClientId ),\r\n];\r\n\r\n/**\r\n * Returns the list of allowed patterns for inner blocks children.\r\n *\r\n * @param {Object}  state        Editor state.\r\n * @param {?string} rootClientId Optional target root client ID.\r\n *\r\n * @return {Array?} The list of allowed patterns.\r\n */\r\nexport const __experimentalGetAllowedPatterns = createRegistrySelector(\r\n\t( select ) => {\r\n\t\treturn createSelector( ( state, rootClientId = null ) => {\r\n\t\t\tconst { getAllPatterns } = unlock( select( STORE_NAME ) );\r\n\t\t\tconst patterns = getAllPatterns();\r\n\t\t\tconst { allowedBlockTypes } = getSettings( state );\r\n\t\t\tconst parsedPatterns = patterns\r\n\t\t\t\t.filter( ( { inserter = true } ) => !! inserter )\r\n\t\t\t\t.map( ( pattern ) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...pattern,\r\n\t\t\t\t\t\tget blocks() {\r\n\t\t\t\t\t\t\treturn getParsedPattern( pattern ).blocks;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\t\t\t\t} );\r\n\r\n\t\t\tconst availableParsedPatterns = parsedPatterns.filter(\r\n\t\t\t\t( pattern ) =>\r\n\t\t\t\t\tcheckAllowListRecursive(\r\n\t\t\t\t\t\tgetGrammar( pattern ),\r\n\t\t\t\t\t\tallowedBlockTypes\r\n\t\t\t\t\t)\r\n\t\t\t);\r\n\t\t\tconst patternsAllowed = availableParsedPatterns.filter(\r\n\t\t\t\t( pattern ) =>\r\n\t\t\t\t\tgetGrammar( pattern ).every( ( { blockName: name } ) =>\r\n\t\t\t\t\t\tcanInsertBlockType( state, name, rootClientId )\r\n\t\t\t\t\t)\r\n\t\t\t);\r\n\r\n\t\t\treturn patternsAllowed;\r\n\t\t}, getAllowedPatternsDependants( select ) );\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns the list of patterns based on their declared `blockTypes`\r\n * and a block's name.\r\n * Patterns can use `blockTypes` to integrate in work flows like\r\n * suggesting appropriate patterns in a Placeholder state(during insertion)\r\n * or blocks transformations.\r\n *\r\n * @param {Object}          state        Editor state.\r\n * @param {string|string[]} blockNames   Block's name or array of block names to find matching pattens.\r\n * @param {?string}         rootClientId Optional target root client ID.\r\n *\r\n * @return {Array} The list of matched block patterns based on declared `blockTypes` and block name.\r\n */\r\nexport const getPatternsByBlockTypes = createRegistrySelector( ( select ) =>\r\n\tcreateSelector(\r\n\t\t( state, blockNames, rootClientId = null ) => {\r\n\t\t\tif ( ! blockNames ) {\r\n\t\t\t\treturn EMPTY_ARRAY;\r\n\t\t\t}\r\n\t\t\tconst patterns =\r\n\t\t\t\tselect( STORE_NAME ).__experimentalGetAllowedPatterns(\r\n\t\t\t\t\trootClientId\r\n\t\t\t\t);\r\n\t\t\tconst normalizedBlockNames = Array.isArray( blockNames )\r\n\t\t\t\t? blockNames\r\n\t\t\t\t: [ blockNames ];\r\n\t\t\tconst filteredPatterns = patterns.filter( ( pattern ) =>\r\n\t\t\t\tpattern?.blockTypes?.some?.( ( blockName ) =>\r\n\t\t\t\t\tnormalizedBlockNames.includes( blockName )\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t\tif ( filteredPatterns.length === 0 ) {\r\n\t\t\t\treturn EMPTY_ARRAY;\r\n\t\t\t}\r\n\t\t\treturn filteredPatterns;\r\n\t\t},\r\n\t\t( state, blockNames, rootClientId ) =>\r\n\t\t\tgetAllowedPatternsDependants( select )( state, rootClientId )\r\n\t)\r\n);\r\n\r\nexport const __experimentalGetPatternsByBlockTypes = createRegistrySelector(\r\n\t( select ) => {\r\n\t\tdeprecated(\r\n\t\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetPatternsByBlockTypes',\r\n\t\t\t{\r\n\t\t\t\talternative:\r\n\t\t\t\t\t'wp.data.select( \"core/block-editor\" ).getPatternsByBlockTypes',\r\n\t\t\t\tsince: '6.2',\r\n\t\t\t\tversion: '6.4',\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn select( STORE_NAME ).getPatternsByBlockTypes;\r\n\t}\r\n);\r\n\r\n/**\r\n * Determines the items that appear in the available pattern transforms list.\r\n *\r\n * For now we only handle blocks without InnerBlocks and take into account\r\n * the `__experimentalRole` property of blocks' attributes for the transformation.\r\n *\r\n * We return the first set of possible eligible block patterns,\r\n * by checking the `blockTypes` property. We still have to recurse through\r\n * block pattern's blocks and try to find matches from the selected blocks.\r\n * Now this happens in the consumer to avoid heavy operations in the selector.\r\n *\r\n * @param {Object}   state        Editor state.\r\n * @param {Object[]} blocks       The selected blocks.\r\n * @param {?string}  rootClientId Optional root client ID of block list.\r\n *\r\n * @return {WPBlockPattern[]} Items that are eligible for a pattern transformation.\r\n */\r\nexport const __experimentalGetPatternTransformItems = createRegistrySelector(\r\n\t( select ) =>\r\n\t\tcreateSelector(\r\n\t\t\t( state, blocks, rootClientId = null ) => {\r\n\t\t\t\tif ( ! blocks ) {\r\n\t\t\t\t\treturn EMPTY_ARRAY;\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * For now we only handle blocks without InnerBlocks and take into account\r\n\t\t\t\t * the `__experimentalRole` property of blocks' attributes for the transformation.\r\n\t\t\t\t * Note that the blocks have been retrieved through `getBlock`, which doesn't\r\n\t\t\t\t * return the inner blocks of an inner block controller, so we still need\r\n\t\t\t\t * to check for this case too.\r\n\t\t\t\t */\r\n\t\t\t\tif (\r\n\t\t\t\t\tblocks.some(\r\n\t\t\t\t\t\t( { clientId, innerBlocks } ) =>\r\n\t\t\t\t\t\t\tinnerBlocks.length ||\r\n\t\t\t\t\t\t\tareInnerBlocksControlled( state, clientId )\r\n\t\t\t\t\t)\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn EMPTY_ARRAY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Create a Set of the selected block names that is used in patterns filtering.\r\n\t\t\t\tconst selectedBlockNames = Array.from(\r\n\t\t\t\t\tnew Set( blocks.map( ( { name } ) => name ) )\r\n\t\t\t\t);\r\n\t\t\t\t/**\r\n\t\t\t\t * Here we will return first set of possible eligible block patterns,\r\n\t\t\t\t * by checking the `blockTypes` property. We still have to recurse through\r\n\t\t\t\t * block pattern's blocks and try to find matches from the selected blocks.\r\n\t\t\t\t * Now this happens in the consumer to avoid heavy operations in the selector.\r\n\t\t\t\t */\r\n\t\t\t\treturn select( STORE_NAME ).getPatternsByBlockTypes(\r\n\t\t\t\t\tselectedBlockNames,\r\n\t\t\t\t\trootClientId\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t( state, blocks, rootClientId ) =>\r\n\t\t\t\tgetAllowedPatternsDependants( select )( state, rootClientId )\r\n\t\t)\r\n);\r\n\r\n/**\r\n * Returns the Block List settings of a block, if any exist.\r\n *\r\n * @param {Object}  state    Editor state.\r\n * @param {?string} clientId Block client ID.\r\n *\r\n * @return {?Object} Block settings of the block if set.\r\n */\r\nexport function getBlockListSettings( state, clientId ) {\r\n\treturn state.blockListSettings[ clientId ];\r\n}\r\n\r\n/**\r\n * Returns the editor settings.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {Object} The editor settings object.\r\n */\r\nexport function getSettings( state ) {\r\n\treturn state.settings;\r\n}\r\n\r\n/**\r\n * Returns true if the most recent block change is be considered persistent, or\r\n * false otherwise. A persistent change is one committed by BlockEditorProvider\r\n * via its `onChange` callback, in addition to `onInput`.\r\n *\r\n * @param {Object} state Block editor state.\r\n *\r\n * @return {boolean} Whether the most recent block change was persistent.\r\n */\r\nexport function isLastBlockChangePersistent( state ) {\r\n\treturn state.blocks.isPersistentChange;\r\n}\r\n\r\n/**\r\n * Returns the block list settings for an array of blocks, if any exist.\r\n *\r\n * @param {Object} state     Editor state.\r\n * @param {Array}  clientIds Block client IDs.\r\n *\r\n * @return {Object} An object where the keys are client ids and the values are\r\n *                  a block list setting object.\r\n */\r\nexport const __experimentalGetBlockListSettingsForBlocks = createSelector(\r\n\t( state, clientIds = [] ) => {\r\n\t\treturn clientIds.reduce( ( blockListSettingsForBlocks, clientId ) => {\r\n\t\t\tif ( ! state.blockListSettings[ clientId ] ) {\r\n\t\t\t\treturn blockListSettingsForBlocks;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...blockListSettingsForBlocks,\r\n\t\t\t\t[ clientId ]: state.blockListSettings[ clientId ],\r\n\t\t\t};\r\n\t\t}, {} );\r\n\t},\r\n\t( state ) => [ state.blockListSettings ]\r\n);\r\n\r\n/**\r\n * Returns the title of a given reusable block\r\n *\r\n * @param {Object}        state Global application state.\r\n * @param {number|string} ref   The shared block's ID.\r\n *\r\n * @return {string} The reusable block saved title.\r\n */\r\nexport const __experimentalGetReusableBlockTitle = createRegistrySelector(\r\n\t( select ) =>\r\n\t\tcreateSelector(\r\n\t\t\t( state, ref ) => {\r\n\t\t\t\tdeprecated(\r\n\t\t\t\t\t\"wp.data.select( 'core/block-editor' ).__experimentalGetReusableBlockTitle\",\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsince: '6.6',\r\n\t\t\t\t\t\tversion: '6.8',\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst reusableBlock = unlock( select( STORE_NAME ) )\r\n\t\t\t\t\t.getReusableBlocks()\r\n\t\t\t\t\t.find( ( block ) => block.id === ref );\r\n\t\t\t\tif ( ! reusableBlock ) {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn reusableBlock.title?.raw;\r\n\t\t\t},\r\n\t\t\t() => [ unlock( select( STORE_NAME ) ).getReusableBlocks() ]\r\n\t\t)\r\n);\r\n\r\n/**\r\n * Returns true if the most recent block change is be considered ignored, or\r\n * false otherwise. An ignored change is one not to be committed by\r\n * BlockEditorProvider, neither via `onChange` nor `onInput`.\r\n *\r\n * @param {Object} state Block editor state.\r\n *\r\n * @return {boolean} Whether the most recent block change was ignored.\r\n */\r\nexport function __unstableIsLastBlockChangeIgnored( state ) {\r\n\t// TODO: Removal Plan: Changes incurred by RECEIVE_BLOCKS should not be\r\n\t// ignored if in-fact they result in a change in blocks state. The current\r\n\t// need to ignore changes not a result of user interaction should be\r\n\t// accounted for in the refactoring of reusable blocks as occurring within\r\n\t// their own separate block editor / state (#7119).\r\n\treturn state.blocks.isIgnoredChange;\r\n}\r\n\r\n/**\r\n * Returns the block attributes changed as a result of the last dispatched\r\n * action.\r\n *\r\n * @param {Object} state Block editor state.\r\n *\r\n * @return {Object<string,Object>} Subsets of block attributes changed, keyed\r\n *                                 by block client ID.\r\n */\r\nexport function __experimentalGetLastBlockAttributeChanges( state ) {\r\n\treturn state.lastBlockAttributesChange;\r\n}\r\n\r\n/**\r\n * Returns whether the navigation mode is enabled.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {boolean} Is navigation mode enabled.\r\n */\r\nexport function isNavigationMode( state ) {\r\n\treturn state.editorMode === 'navigation';\r\n}\r\n\r\n/**\r\n * Returns the current editor mode.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {string} the editor mode.\r\n */\r\nexport function __unstableGetEditorMode( state ) {\r\n\treturn state.editorMode;\r\n}\r\n\r\n/**\r\n * Returns whether block moving mode is enabled.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {string} Client Id of moving block.\r\n */\r\nexport function hasBlockMovingClientId( state ) {\r\n\treturn state.hasBlockMovingClientId;\r\n}\r\n\r\n/**\r\n * Returns true if the last change was an automatic change, false otherwise.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the last change was automatic.\r\n */\r\nexport function didAutomaticChange( state ) {\r\n\treturn !! state.automaticChangeStatus;\r\n}\r\n\r\n/**\r\n * Returns true if the current highlighted block matches the block clientId.\r\n *\r\n * @param {Object} state    Global application state.\r\n * @param {string} clientId The block to check.\r\n *\r\n * @return {boolean} Whether the block is currently highlighted.\r\n */\r\nexport function isBlockHighlighted( state, clientId ) {\r\n\treturn state.highlightedBlock === clientId;\r\n}\r\n\r\n/**\r\n * Checks if a given block has controlled inner blocks.\r\n *\r\n * @param {Object} state    Global application state.\r\n * @param {string} clientId The block to check.\r\n *\r\n * @return {boolean} True if the block has controlled inner blocks.\r\n */\r\nexport function areInnerBlocksControlled( state, clientId ) {\r\n\treturn !! state.blocks.controlledInnerBlocks[ clientId ];\r\n}\r\n\r\n/**\r\n * Returns the clientId for the first 'active' block of a given array of block names.\r\n * A block is 'active' if it (or a child) is the selected block.\r\n * Returns the first match moving up the DOM from the selected block.\r\n *\r\n * @param {Object}   state            Global application state.\r\n * @param {string[]} validBlocksNames The names of block types to check for.\r\n *\r\n * @return {string} The matching block's clientId.\r\n */\r\nexport const __experimentalGetActiveBlockIdByBlockNames = createSelector(\r\n\t( state, validBlockNames ) => {\r\n\t\tif ( ! validBlockNames.length ) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t// Check if selected block is a valid entity area.\r\n\t\tconst selectedBlockClientId = getSelectedBlockClientId( state );\r\n\t\tif (\r\n\t\t\tvalidBlockNames.includes(\r\n\t\t\t\tgetBlockName( state, selectedBlockClientId )\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\treturn selectedBlockClientId;\r\n\t\t}\r\n\t\t// Check if first selected block is a child of a valid entity area.\r\n\t\tconst multiSelectedBlockClientIds =\r\n\t\t\tgetMultiSelectedBlockClientIds( state );\r\n\t\tconst entityAreaParents = getBlockParentsByBlockName(\r\n\t\t\tstate,\r\n\t\t\tselectedBlockClientId || multiSelectedBlockClientIds[ 0 ],\r\n\t\t\tvalidBlockNames\r\n\t\t);\r\n\t\tif ( entityAreaParents ) {\r\n\t\t\t// Last parent closest/most interior.\r\n\t\t\treturn entityAreaParents[ entityAreaParents.length - 1 ];\r\n\t\t}\r\n\t\treturn null;\r\n\t},\r\n\t( state, validBlockNames ) => [\r\n\t\tstate.selection.selectionStart.clientId,\r\n\t\tstate.selection.selectionEnd.clientId,\r\n\t\tvalidBlockNames,\r\n\t]\r\n);\r\n\r\n/**\r\n * Tells if the block with the passed clientId was just inserted.\r\n *\r\n * @param {Object}  state    Global application state.\r\n * @param {Object}  clientId Client Id of the block.\r\n * @param {?string} source   Optional insertion source of the block.\r\n * @return {boolean} True if the block matches the last block inserted from the specified source.\r\n */\r\nexport function wasBlockJustInserted( state, clientId, source ) {\r\n\tconst { lastBlockInserted } = state;\r\n\treturn (\r\n\t\tlastBlockInserted.clientIds?.includes( clientId ) &&\r\n\t\tlastBlockInserted.source === source\r\n\t);\r\n}\r\n\r\n/**\r\n * Tells if the block is visible on the canvas or not.\r\n *\r\n * @param {Object} state    Global application state.\r\n * @param {Object} clientId Client Id of the block.\r\n * @return {boolean} True if the block is visible.\r\n */\r\nexport function isBlockVisible( state, clientId ) {\r\n\treturn state.blockVisibility?.[ clientId ] ?? true;\r\n}\r\n\r\n/**\r\n * Returns the currently hovered block.\r\n *\r\n * @param {Object} state Global application state.\r\n * @return {Object} Client Id of the hovered block.\r\n */\r\nexport function getHoveredBlockClientId( state ) {\r\n\treturn state.hoveredBlockClientId;\r\n}\r\n\r\n/**\r\n * Returns the list of all hidden blocks.\r\n *\r\n * @param {Object} state Global application state.\r\n * @return {[string]} List of hidden blocks.\r\n */\r\nexport const __unstableGetVisibleBlocks = createSelector(\r\n\t( state ) => {\r\n\t\tconst visibleBlocks = new Set(\r\n\t\t\tObject.keys( state.blockVisibility ).filter(\r\n\t\t\t\t( key ) => state.blockVisibility[ key ]\r\n\t\t\t)\r\n\t\t);\r\n\t\tif ( visibleBlocks.size === 0 ) {\r\n\t\t\treturn EMPTY_SET;\r\n\t\t}\r\n\t\treturn visibleBlocks;\r\n\t},\r\n\t( state ) => [ state.blockVisibility ]\r\n);\r\n\r\nexport function __unstableHasActiveBlockOverlayActive( state, clientId ) {\r\n\t// Prevent overlay on blocks with a non-default editing mode. If the mdoe is\r\n\t// 'disabled' then the overlay is redundant since the block can't be\r\n\t// selected. If the mode is 'contentOnly' then the overlay is redundant\r\n\t// since there will be no controls to interact with once selected.\r\n\tif ( getBlockEditingMode( state, clientId ) !== 'default' ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// If the block editing is locked, the block overlay is always active.\r\n\tif ( ! canEditBlock( state, clientId ) ) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tconst editorMode = __unstableGetEditorMode( state );\r\n\r\n\t// In zoom-out mode, the block overlay is always active for section level blocks.\r\n\tif ( editorMode === 'zoom-out' ) {\r\n\t\tconst sectionRootClientId = getSectionRootClientId( state );\r\n\t\tif ( sectionRootClientId ) {\r\n\t\t\tconst sectionClientIds = getBlockOrder(\r\n\t\t\t\tstate,\r\n\t\t\t\tsectionRootClientId\r\n\t\t\t);\r\n\t\t\tif ( sectionClientIds?.includes( clientId ) ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} else if ( clientId && ! getBlockRootClientId( state, clientId ) ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t// In navigation mode, the block overlay is active when the block is not\r\n\t// selected (and doesn't contain a selected child). The same behavior is\r\n\t// also enabled in all modes for blocks that have controlled children\r\n\t// (reusable block, template part, navigation), unless explicitly disabled\r\n\t// with `supports.__experimentalDisableBlockOverlay`.\r\n\tconst blockSupportDisable = hasBlockSupport(\r\n\t\tgetBlockName( state, clientId ),\r\n\t\t'__experimentalDisableBlockOverlay',\r\n\t\tfalse\r\n\t);\r\n\tconst shouldEnableIfUnselected =\r\n\t\teditorMode === 'navigation' ||\r\n\t\t( blockSupportDisable\r\n\t\t\t? false\r\n\t\t\t: areInnerBlocksControlled( state, clientId ) );\r\n\r\n\treturn (\r\n\t\tshouldEnableIfUnselected &&\r\n\t\t! isBlockSelected( state, clientId ) &&\r\n\t\t! hasSelectedInnerBlock( state, clientId, true )\r\n\t);\r\n}\r\n\r\nexport function __unstableIsWithinBlockOverlay( state, clientId ) {\r\n\tlet parent = state.blocks.parents.get( clientId );\r\n\twhile ( !! parent ) {\r\n\t\tif ( __unstableHasActiveBlockOverlayActive( state, parent ) ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tparent = state.blocks.parents.get( parent );\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * @typedef {import('../components/block-editing-mode').BlockEditingMode} BlockEditingMode\r\n */\r\n\r\n/**\r\n * Returns the block editing mode for a given block.\r\n *\r\n * The mode can be one of three options:\r\n *\r\n * - `'disabled'`: Prevents editing the block entirely, i.e. it cannot be\r\n *   selected.\r\n * - `'contentOnly'`: Hides all non-content UI, e.g. auxiliary controls in the\r\n *   toolbar, the block movers, block settings.\r\n * - `'default'`: Allows editing the block as normal.\r\n *\r\n * Blocks can set a mode using the `useBlockEditingMode` hook.\r\n *\r\n * The mode is inherited by all of the block's inner blocks, unless they have\r\n * their own mode.\r\n *\r\n * A template lock can also set a mode. If the template lock is `'contentOnly'`,\r\n * the block's mode is overridden to `'contentOnly'` if the block has a content\r\n * role attribute, or `'disabled'` otherwise.\r\n *\r\n * @see useBlockEditingMode\r\n *\r\n * @param {Object} state    Global application state.\r\n * @param {string} clientId The block client ID, or `''` for the root container.\r\n *\r\n * @return {BlockEditingMode} The block editing mode. One of `'disabled'`,\r\n *                            `'contentOnly'`, or `'default'`.\r\n */\r\nexport const getBlockEditingMode = createRegistrySelector(\r\n\t( select ) =>\r\n\t\t( state, clientId = '' ) => {\r\n\t\t\t// Some selectors that call this provide `null` as the default\r\n\t\t\t// rootClientId, but the default rootClientId is actually `''`.\r\n\t\t\tif ( clientId === null ) {\r\n\t\t\t\tclientId = '';\r\n\t\t\t}\r\n\t\t\t// In zoom-out mode, override the behavior set by\r\n\t\t\t// __unstableSetBlockEditingMode to only allow editing the top-level\r\n\t\t\t// sections.\r\n\t\t\tconst editorMode = __unstableGetEditorMode( state );\r\n\t\t\tif ( editorMode === 'zoom-out' ) {\r\n\t\t\t\tconst sectionRootClientId = getSectionRootClientId( state );\r\n\r\n\t\t\t\tif ( clientId === '' /* ROOT_CONTAINER_CLIENT_ID */ ) {\r\n\t\t\t\t\treturn sectionRootClientId ? 'disabled' : 'contentOnly';\r\n\t\t\t\t}\r\n\t\t\t\tif ( clientId === sectionRootClientId ) {\r\n\t\t\t\t\treturn 'contentOnly';\r\n\t\t\t\t}\r\n\t\t\t\tconst sectionsClientIds = getBlockOrder(\r\n\t\t\t\t\tstate,\r\n\t\t\t\t\tsectionRootClientId\r\n\t\t\t\t);\r\n\t\t\t\tif ( ! sectionsClientIds?.includes( clientId ) ) {\r\n\t\t\t\t\treturn 'disabled';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst blockEditingMode = state.blockEditingModes.get( clientId );\r\n\t\t\tif ( blockEditingMode ) {\r\n\t\t\t\treturn blockEditingMode;\r\n\t\t\t}\r\n\t\t\tif ( ! clientId ) {\r\n\t\t\t\treturn 'default';\r\n\t\t\t}\r\n\t\t\tconst rootClientId = getBlockRootClientId( state, clientId );\r\n\t\t\tconst templateLock = getTemplateLock( state, rootClientId );\r\n\t\t\tif ( templateLock === 'contentOnly' ) {\r\n\t\t\t\tconst name = getBlockName( state, clientId );\r\n\t\t\t\tconst isContent =\r\n\t\t\t\t\tselect( blocksStore ).__experimentalHasContentRoleAttribute(\r\n\t\t\t\t\t\tname\r\n\t\t\t\t\t);\r\n\t\t\t\treturn isContent ? 'contentOnly' : 'disabled';\r\n\t\t\t}\r\n\t\t\tconst parentMode = getBlockEditingMode( state, rootClientId );\r\n\t\t\treturn parentMode === 'contentOnly' ? 'default' : parentMode;\r\n\t\t}\r\n);\r\n\r\n/**\r\n * Indicates if a block is ungroupable.\r\n * A block is ungroupable if it is a single grouping block with inner blocks.\r\n * If a block has an `ungroup` transform, it is also ungroupable, without the\r\n * requirement of being the default grouping block.\r\n * Additionally a block can only be ungrouped if it has inner blocks and can\r\n * be removed.\r\n *\r\n * @param {Object} state    Global application state.\r\n * @param {string} clientId Client Id of the block. If not passed the selected block's client id will be used.\r\n * @return {boolean} True if the block is ungroupable.\r\n */\r\nexport const isUngroupable = createRegistrySelector(\r\n\t( select ) =>\r\n\t\t( state, clientId = '' ) => {\r\n\t\t\tconst _clientId = clientId || getSelectedBlockClientId( state );\r\n\t\t\tif ( ! _clientId ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tconst { getGroupingBlockName } = select( blocksStore );\r\n\t\t\tconst block = getBlock( state, _clientId );\r\n\t\t\tconst groupingBlockName = getGroupingBlockName();\r\n\t\t\tconst _isUngroupable =\r\n\t\t\t\tblock &&\r\n\t\t\t\t( block.name === groupingBlockName ||\r\n\t\t\t\t\tgetBlockType( block.name )?.transforms?.ungroup ) &&\r\n\t\t\t\t!! block.innerBlocks.length;\r\n\r\n\t\t\treturn _isUngroupable && canRemoveBlock( state, _clientId );\r\n\t\t}\r\n);\r\n\r\n/**\r\n * Indicates if the provided blocks(by client ids) are groupable.\r\n * We need to have at least one block, have a grouping block name set and\r\n * be able to remove these blocks.\r\n *\r\n * @param {Object}   state     Global application state.\r\n * @param {string[]} clientIds Block client ids. If not passed the selected blocks client ids will be used.\r\n * @return {boolean} True if the blocks are groupable.\r\n */\r\nexport const isGroupable = createRegistrySelector(\r\n\t( select ) =>\r\n\t\t( state, clientIds = EMPTY_ARRAY ) => {\r\n\t\t\tconst { getGroupingBlockName } = select( blocksStore );\r\n\t\t\tconst groupingBlockName = getGroupingBlockName();\r\n\t\t\tconst _clientIds = clientIds?.length\r\n\t\t\t\t? clientIds\r\n\t\t\t\t: getSelectedBlockClientIds( state );\r\n\t\t\tconst rootClientId = _clientIds?.length\r\n\t\t\t\t? getBlockRootClientId( state, _clientIds[ 0 ] )\r\n\t\t\t\t: undefined;\r\n\t\t\tconst groupingBlockAvailable = canInsertBlockType(\r\n\t\t\t\tstate,\r\n\t\t\t\tgroupingBlockName,\r\n\t\t\t\trootClientId\r\n\t\t\t);\r\n\t\t\tconst _isGroupable = groupingBlockAvailable && _clientIds.length;\r\n\t\t\treturn _isGroupable && canRemoveBlocks( state, _clientIds );\r\n\t\t}\r\n);\r\n\r\n/**\r\n * DO-NOT-USE in production.\r\n * This selector is created for internal/experimental only usage and may be\r\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\r\n *\r\n * @deprecated\r\n *\r\n * @param {Object} state    Global application state.\r\n * @param {Object} clientId Client Id of the block.\r\n *\r\n * @return {?string} Client ID of the ancestor block that is content locking the block.\r\n */\r\nexport const __unstableGetContentLockingParent = ( state, clientId ) => {\r\n\tdeprecated(\r\n\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetContentLockingParent\",\r\n\t\t{\r\n\t\t\tsince: '6.1',\r\n\t\t\tversion: '6.7',\r\n\t\t}\r\n\t);\r\n\treturn getContentLockingParent( state, clientId );\r\n};\r\n\r\n/**\r\n * DO-NOT-USE in production.\r\n * This selector is created for internal/experimental only usage and may be\r\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\r\n *\r\n * @deprecated\r\n *\r\n * @param {Object} state Global application state.\r\n */\r\nexport function __unstableGetTemporarilyEditingAsBlocks( state ) {\r\n\tdeprecated(\r\n\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetTemporarilyEditingAsBlocks\",\r\n\t\t{\r\n\t\t\tsince: '6.1',\r\n\t\t\tversion: '6.7',\r\n\t\t}\r\n\t);\r\n\treturn getTemporarilyEditingAsBlocks( state );\r\n}\r\n\r\n/**\r\n * DO-NOT-USE in production.\r\n * This selector is created for internal/experimental only usage and may be\r\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\r\n *\r\n * @deprecated\r\n *\r\n * @param {Object} state Global application state.\r\n */\r\nexport function __unstableGetTemporarilyEditingFocusModeToRevert( state ) {\r\n\tdeprecated(\r\n\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetTemporarilyEditingFocusModeToRevert\",\r\n\t\t{\r\n\t\t\tsince: '6.5',\r\n\t\t\tversion: '6.7',\r\n\t\t}\r\n\t);\r\n\treturn getTemporarilyEditingFocusModeToRevert( state );\r\n}\r\n"],"mappings":"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","ignoreList":[]}