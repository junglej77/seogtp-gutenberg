{"version":3,"names":["parse","grammarParse","selectBlockPatternsKey","unlock","STORE_NAME","withRootClientIdOptionKey","Symbol","parsedPatternCache","WeakMap","grammarMapCache","parsePattern","pattern","blocks","content","__unstableSkipMigrationLogs","length","attributes","metadata","categories","patternName","name","title","getParsedPattern","parsedPattern","get","set","getGrammar","grammarMap","filter","block","blockName","checkAllowList","list","item","defaultResult","Array","isArray","includes","checkAllowListRecursive","allowedBlockTypes","blocksQueue","shift","isAllowed","innerBlocks","forEach","innerBlock","push","getAllPatternsDependants","select","state","settings","__experimentalBlockPatterns","__experimentalUserPatternCategories","__experimentalReusableBlocks","blockPatterns","getReusableBlocks","getInsertBlockTypeDependants","rootClientId","blockListSettings","byClientId","templateLock","blockEditingModes"],"sources":["@wordpress/block-editor/src/store/utils.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { parse } from '@wordpress/blocks';\r\nimport { parse as grammarParse } from '@wordpress/block-serialization-default-parser';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { selectBlockPatternsKey } from './private-keys';\r\nimport { unlock } from '../lock-unlock';\r\nimport { STORE_NAME } from './constants';\r\n\r\nexport const withRootClientIdOptionKey = Symbol( 'withRootClientId' );\r\n\r\nconst parsedPatternCache = new WeakMap();\r\nconst grammarMapCache = new WeakMap();\r\n\r\nfunction parsePattern( pattern ) {\r\n\tconst blocks = parse( pattern.content, {\r\n\t\t__unstableSkipMigrationLogs: true,\r\n\t} );\r\n\tif ( blocks.length === 1 ) {\r\n\t\tblocks[ 0 ].attributes = {\r\n\t\t\t...blocks[ 0 ].attributes,\r\n\t\t\tmetadata: {\r\n\t\t\t\t...( blocks[ 0 ].attributes.metadata || {} ),\r\n\t\t\t\tcategories: pattern.categories,\r\n\t\t\t\tpatternName: pattern.name,\r\n\t\t\t\tname: blocks[ 0 ].attributes.metadata?.name || pattern.title,\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n\treturn {\r\n\t\t...pattern,\r\n\t\tblocks,\r\n\t};\r\n}\r\n\r\nexport function getParsedPattern( pattern ) {\r\n\tlet parsedPattern = parsedPatternCache.get( pattern );\r\n\tif ( ! parsedPattern ) {\r\n\t\tparsedPattern = parsePattern( pattern );\r\n\t\tparsedPatternCache.set( pattern, parsedPattern );\r\n\t}\r\n\treturn parsedPattern;\r\n}\r\n\r\nexport function getGrammar( pattern ) {\r\n\tlet grammarMap = grammarMapCache.get( pattern );\r\n\tif ( ! grammarMap ) {\r\n\t\tgrammarMap = grammarParse( pattern.content );\r\n\t\t// Block names are null only at the top level for whitespace.\r\n\t\tgrammarMap = grammarMap.filter( ( block ) => block.blockName !== null );\r\n\t\tgrammarMapCache.set( pattern, grammarMap );\r\n\t}\r\n\treturn grammarMap;\r\n}\r\n\r\nexport const checkAllowList = ( list, item, defaultResult = null ) => {\r\n\tif ( typeof list === 'boolean' ) {\r\n\t\treturn list;\r\n\t}\r\n\tif ( Array.isArray( list ) ) {\r\n\t\t// TODO: when there is a canonical way to detect that we are editing a post\r\n\t\t// the following check should be changed to something like:\r\n\t\t// if ( list.includes( 'core/post-content' ) && getEditorMode() === 'post-content' && item === null )\r\n\t\tif ( list.includes( 'core/post-content' ) && item === null ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn list.includes( item );\r\n\t}\r\n\treturn defaultResult;\r\n};\r\n\r\nexport const checkAllowListRecursive = ( blocks, allowedBlockTypes ) => {\r\n\tif ( typeof allowedBlockTypes === 'boolean' ) {\r\n\t\treturn allowedBlockTypes;\r\n\t}\r\n\r\n\tconst blocksQueue = [ ...blocks ];\r\n\twhile ( blocksQueue.length > 0 ) {\r\n\t\tconst block = blocksQueue.shift();\r\n\r\n\t\tconst isAllowed = checkAllowList(\r\n\t\t\tallowedBlockTypes,\r\n\t\t\tblock.name || block.blockName,\r\n\t\t\ttrue\r\n\t\t);\r\n\t\tif ( ! isAllowed ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tblock.innerBlocks?.forEach( ( innerBlock ) => {\r\n\t\t\tblocksQueue.push( innerBlock );\r\n\t\t} );\r\n\t}\r\n\r\n\treturn true;\r\n};\r\n\r\nexport const getAllPatternsDependants = ( select ) => ( state ) => {\r\n\treturn [\r\n\t\tstate.settings.__experimentalBlockPatterns,\r\n\t\tstate.settings.__experimentalUserPatternCategories,\r\n\t\tstate.settings.__experimentalReusableBlocks,\r\n\t\tstate.settings[ selectBlockPatternsKey ]?.( select ),\r\n\t\tstate.blockPatterns,\r\n\t\tunlock( select( STORE_NAME ) ).getReusableBlocks(),\r\n\t];\r\n};\r\n\r\nexport function getInsertBlockTypeDependants( state, rootClientId ) {\r\n\treturn [\r\n\t\tstate.blockListSettings[ rootClientId ],\r\n\t\tstate.blocks.byClientId.get( rootClientId ),\r\n\t\tstate.settings.allowedBlockTypes,\r\n\t\tstate.settings.templateLock,\r\n\t\tstate.blockEditingModes,\r\n\t];\r\n}\r\n"],"mappings":"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","ignoreList":[]}