{"version":3,"names":["memoize","calendar","icon","Disabled","Placeholder","Spinner","useSelect","ServerSideRender","useBlockProps","store","coreStore","__","jsx","_jsx","getYearMonth","date","dateObj","Date","year","getFullYear","month","getMonth","CalendarEdit","attributes","blockProps","hasPosts","hasPostsResolved","select","getEntityRecords","hasFinishedResolution","singlePublishedPostQuery","status","per_page","posts","postsResolved","_date","editorSelectors","postType","getEditedPostAttribute","length","children","label","block"],"sources":["@wordpress/block-library/src/calendar/edit.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport memoize from 'memize';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { calendar as icon } from '@wordpress/icons';\r\nimport { Disabled, Placeholder, Spinner } from '@wordpress/components';\r\nimport { useSelect } from '@wordpress/data';\r\nimport ServerSideRender from '@wordpress/server-side-render';\r\nimport { useBlockProps } from '@wordpress/block-editor';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\nimport { __ } from '@wordpress/i18n';\r\n\r\n/**\r\n * Returns the year and month of a specified date.\r\n *\r\n * @see `WP_REST_Posts_Controller::prepare_date_response()`.\r\n *\r\n * @param {string} date Date in `ISO8601/RFC3339` format.\r\n * @return {Object} Year and date of the specified date.\r\n */\r\nconst getYearMonth = memoize( ( date ) => {\r\n\tif ( ! date ) {\r\n\t\treturn {};\r\n\t}\r\n\tconst dateObj = new Date( date );\r\n\treturn {\r\n\t\tyear: dateObj.getFullYear(),\r\n\t\tmonth: dateObj.getMonth() + 1,\r\n\t};\r\n} );\r\n\r\nexport default function CalendarEdit( { attributes } ) {\r\n\tconst blockProps = useBlockProps();\r\n\tconst { date, hasPosts, hasPostsResolved } = useSelect( ( select ) => {\r\n\t\tconst { getEntityRecords, hasFinishedResolution } = select( coreStore );\r\n\r\n\t\tconst singlePublishedPostQuery = {\r\n\t\t\tstatus: 'publish',\r\n\t\t\tper_page: 1,\r\n\t\t};\r\n\t\tconst posts = getEntityRecords(\r\n\t\t\t'postType',\r\n\t\t\t'post',\r\n\t\t\tsinglePublishedPostQuery\r\n\t\t);\r\n\t\tconst postsResolved = hasFinishedResolution( 'getEntityRecords', [\r\n\t\t\t'postType',\r\n\t\t\t'post',\r\n\t\t\tsinglePublishedPostQuery,\r\n\t\t] );\r\n\r\n\t\tlet _date;\r\n\r\n\t\t// FIXME: @wordpress/block-library should not depend on @wordpress/editor.\r\n\t\t// Blocks can be loaded into a *non-post* block editor.\r\n\t\t// eslint-disable-next-line @wordpress/data-no-store-string-literals\r\n\t\tconst editorSelectors = select( 'core/editor' );\r\n\t\tif ( editorSelectors ) {\r\n\t\t\tconst postType = editorSelectors.getEditedPostAttribute( 'type' );\r\n\t\t\t// Dates are used to overwrite year and month used on the calendar.\r\n\t\t\t// This overwrite should only happen for 'post' post types.\r\n\t\t\t// For other post types the calendar always displays the current month.\r\n\t\t\tif ( postType === 'post' ) {\r\n\t\t\t\t_date = editorSelectors.getEditedPostAttribute( 'date' );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tdate: _date,\r\n\t\t\thasPostsResolved: postsResolved,\r\n\t\t\thasPosts: postsResolved && posts?.length === 1,\r\n\t\t};\r\n\t}, [] );\r\n\r\n\tif ( ! hasPosts ) {\r\n\t\treturn (\r\n\t\t\t<div { ...blockProps }>\r\n\t\t\t\t<Placeholder icon={ icon } label={ __( 'Calendar' ) }>\r\n\t\t\t\t\t{ ! hasPostsResolved ? (\r\n\t\t\t\t\t\t<Spinner />\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t__( 'No published posts found.' )\r\n\t\t\t\t\t) }\r\n\t\t\t\t</Placeholder>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div { ...blockProps }>\r\n\t\t\t<Disabled>\r\n\t\t\t\t<ServerSideRender\r\n\t\t\t\t\tblock=\"core/calendar\"\r\n\t\t\t\t\tattributes={ { ...attributes, ...getYearMonth( date ) } }\r\n\t\t\t\t/>\r\n\t\t\t</Disabled>\r\n\t\t</div>\r\n\t);\r\n}\r\n"],"mappings":"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","ignoreList":[]}