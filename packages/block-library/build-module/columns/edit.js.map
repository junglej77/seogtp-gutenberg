{"version":3,"names":["clsx","__","Notice","PanelBody","RangeControl","ToggleControl","InspectorControls","useInnerBlocksProps","BlockControls","BlockVerticalAlignmentToolbar","__experimentalBlockVariationPicker","useBlockProps","store","blockEditorStore","useDispatch","useSelect","useRegistry","createBlock","createBlocksFromInnerBlocksTemplate","blocksStore","hasExplicitPercentColumnWidths","getMappedColumnWidths","getRedistributedColumnWidths","toWidthPrecision","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","DEFAULT_BLOCK","name","ColumnInspectorControls","clientId","setAttributes","isStackedOnMobile","count","canInsertColumnBlock","minCount","select","canInsertBlockType","canRemoveBlock","getBlocks","getBlockCount","innerBlocks","preventRemovalBlockIndexes","reduce","acc","block","index","push","Math","max","replaceInnerBlocks","updateColumns","previousColumns","newColumns","hasExplicitWidths","isAddingColumn","newColumnWidth","newlyAddedColumns","widths","Array","from","length","map","width","slice","title","children","__nextHasNoMarginBottom","__next40pxDefaultSize","label","value","onChange","min","status","isDismissible","checked","ColumnsEditContainer","attributes","verticalAlignment","templateLock","registry","getBlockOrder","updateBlockAttributes","classes","blockProps","className","innerBlocksProps","defaultBlock","directInsert","orientation","renderAppender","updateAlignment","newVerticalAlignment","innerBlockClientIds","batch","Placeholder","blockType","defaultVariation","variations","getBlockVariations","getBlockType","getDefaultBlockVariation","icon","src","instructions","onSelect","nextVariation","allowSkip","ColumnsEdit","props","hasInnerBlocks","Component"],"sources":["@wordpress/block-library/src/columns/edit.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport clsx from 'clsx';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { __ } from '@wordpress/i18n';\r\nimport {\r\n\tNotice,\r\n\tPanelBody,\r\n\tRangeControl,\r\n\tToggleControl,\r\n} from '@wordpress/components';\r\n\r\nimport {\r\n\tInspectorControls,\r\n\tuseInnerBlocksProps,\r\n\tBlockControls,\r\n\tBlockVerticalAlignmentToolbar,\r\n\t__experimentalBlockVariationPicker,\r\n\tuseBlockProps,\r\n\tstore as blockEditorStore,\r\n} from '@wordpress/block-editor';\r\nimport { useDispatch, useSelect, useRegistry } from '@wordpress/data';\r\nimport {\r\n\tcreateBlock,\r\n\tcreateBlocksFromInnerBlocksTemplate,\r\n\tstore as blocksStore,\r\n} from '@wordpress/blocks';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport {\r\n\thasExplicitPercentColumnWidths,\r\n\tgetMappedColumnWidths,\r\n\tgetRedistributedColumnWidths,\r\n\ttoWidthPrecision,\r\n} from './utils';\r\n\r\nconst DEFAULT_BLOCK = {\r\n\tname: 'core/column',\r\n};\r\n\r\nfunction ColumnInspectorControls( {\r\n\tclientId,\r\n\tsetAttributes,\r\n\tisStackedOnMobile,\r\n} ) {\r\n\tconst { count, canInsertColumnBlock, minCount } = useSelect(\r\n\t\t( select ) => {\r\n\t\t\tconst {\r\n\t\t\t\tcanInsertBlockType,\r\n\t\t\t\tcanRemoveBlock,\r\n\t\t\t\tgetBlocks,\r\n\t\t\t\tgetBlockCount,\r\n\t\t\t} = select( blockEditorStore );\r\n\t\t\tconst innerBlocks = getBlocks( clientId );\r\n\r\n\t\t\t// Get the indexes of columns for which removal is prevented.\r\n\t\t\t// The highest index will be used to determine the minimum column count.\r\n\t\t\tconst preventRemovalBlockIndexes = innerBlocks.reduce(\r\n\t\t\t\t( acc, block, index ) => {\r\n\t\t\t\t\tif ( ! canRemoveBlock( block.clientId ) ) {\r\n\t\t\t\t\t\tacc.push( index );\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn acc;\r\n\t\t\t\t},\r\n\t\t\t\t[]\r\n\t\t\t);\r\n\r\n\t\t\treturn {\r\n\t\t\t\tcount: getBlockCount( clientId ),\r\n\t\t\t\tcanInsertColumnBlock: canInsertBlockType(\r\n\t\t\t\t\t'core/column',\r\n\t\t\t\t\tclientId\r\n\t\t\t\t),\r\n\t\t\t\tminCount: Math.max( ...preventRemovalBlockIndexes ) + 1,\r\n\t\t\t};\r\n\t\t},\r\n\t\t[ clientId ]\r\n\t);\r\n\tconst { getBlocks } = useSelect( blockEditorStore );\r\n\tconst { replaceInnerBlocks } = useDispatch( blockEditorStore );\r\n\r\n\t/**\r\n\t * Updates the column count, including necessary revisions to child Column\r\n\t * blocks to grant required or redistribute available space.\r\n\t *\r\n\t * @param {number} previousColumns Previous column count.\r\n\t * @param {number} newColumns      New column count.\r\n\t */\r\n\tfunction updateColumns( previousColumns, newColumns ) {\r\n\t\tlet innerBlocks = getBlocks( clientId );\r\n\t\tconst hasExplicitWidths = hasExplicitPercentColumnWidths( innerBlocks );\r\n\r\n\t\t// Redistribute available width for existing inner blocks.\r\n\t\tconst isAddingColumn = newColumns > previousColumns;\r\n\r\n\t\tif ( isAddingColumn && hasExplicitWidths ) {\r\n\t\t\t// If adding a new column, assign width to the new column equal to\r\n\t\t\t// as if it were `1 / columns` of the total available space.\r\n\t\t\tconst newColumnWidth = toWidthPrecision( 100 / newColumns );\r\n\t\t\tconst newlyAddedColumns = newColumns - previousColumns;\r\n\r\n\t\t\t// Redistribute in consideration of pending block insertion as\r\n\t\t\t// constraining the available working width.\r\n\t\t\tconst widths = getRedistributedColumnWidths(\r\n\t\t\t\tinnerBlocks,\r\n\t\t\t\t100 - newColumnWidth * newlyAddedColumns\r\n\t\t\t);\r\n\r\n\t\t\tinnerBlocks = [\r\n\t\t\t\t...getMappedColumnWidths( innerBlocks, widths ),\r\n\t\t\t\t...Array.from( {\r\n\t\t\t\t\tlength: newlyAddedColumns,\r\n\t\t\t\t} ).map( () => {\r\n\t\t\t\t\treturn createBlock( 'core/column', {\r\n\t\t\t\t\t\twidth: `${ newColumnWidth }%`,\r\n\t\t\t\t\t} );\r\n\t\t\t\t} ),\r\n\t\t\t];\r\n\t\t} else if ( isAddingColumn ) {\r\n\t\t\tinnerBlocks = [\r\n\t\t\t\t...innerBlocks,\r\n\t\t\t\t...Array.from( {\r\n\t\t\t\t\tlength: newColumns - previousColumns,\r\n\t\t\t\t} ).map( () => {\r\n\t\t\t\t\treturn createBlock( 'core/column' );\r\n\t\t\t\t} ),\r\n\t\t\t];\r\n\t\t} else if ( newColumns < previousColumns ) {\r\n\t\t\t// The removed column will be the last of the inner blocks.\r\n\t\t\tinnerBlocks = innerBlocks.slice(\r\n\t\t\t\t0,\r\n\t\t\t\t-( previousColumns - newColumns )\r\n\t\t\t);\r\n\t\t\tif ( hasExplicitWidths ) {\r\n\t\t\t\t// Redistribute as if block is already removed.\r\n\t\t\t\tconst widths = getRedistributedColumnWidths( innerBlocks, 100 );\r\n\r\n\t\t\t\tinnerBlocks = getMappedColumnWidths( innerBlocks, widths );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treplaceInnerBlocks( clientId, innerBlocks );\r\n\t}\r\n\r\n\treturn (\r\n\t\t<PanelBody title={ __( 'Settings' ) }>\r\n\t\t\t{ canInsertColumnBlock && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<RangeControl\r\n\t\t\t\t\t\t__nextHasNoMarginBottom\r\n\t\t\t\t\t\t__next40pxDefaultSize\r\n\t\t\t\t\t\tlabel={ __( 'Columns' ) }\r\n\t\t\t\t\t\tvalue={ count }\r\n\t\t\t\t\t\tonChange={ ( value ) =>\r\n\t\t\t\t\t\t\tupdateColumns( count, Math.max( minCount, value ) )\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmin={ Math.max( 1, minCount ) }\r\n\t\t\t\t\t\tmax={ Math.max( 6, count ) }\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{ count > 6 && (\r\n\t\t\t\t\t\t<Notice status=\"warning\" isDismissible={ false }>\r\n\t\t\t\t\t\t\t{ __(\r\n\t\t\t\t\t\t\t\t'This column count exceeds the recommended amount and may cause visual breakage.'\r\n\t\t\t\t\t\t\t) }\r\n\t\t\t\t\t\t</Notice>\r\n\t\t\t\t\t) }\r\n\t\t\t\t</>\r\n\t\t\t) }\r\n\t\t\t<ToggleControl\r\n\t\t\t\t__nextHasNoMarginBottom\r\n\t\t\t\tlabel={ __( 'Stack on mobile' ) }\r\n\t\t\t\tchecked={ isStackedOnMobile }\r\n\t\t\t\tonChange={ () =>\r\n\t\t\t\t\tsetAttributes( {\r\n\t\t\t\t\t\tisStackedOnMobile: ! isStackedOnMobile,\r\n\t\t\t\t\t} )\r\n\t\t\t\t}\r\n\t\t\t/>\r\n\t\t</PanelBody>\r\n\t);\r\n}\r\n\r\nfunction ColumnsEditContainer( { attributes, setAttributes, clientId } ) {\r\n\tconst { isStackedOnMobile, verticalAlignment, templateLock } = attributes;\r\n\tconst registry = useRegistry();\r\n\tconst { getBlockOrder } = useSelect( blockEditorStore );\r\n\tconst { updateBlockAttributes } = useDispatch( blockEditorStore );\r\n\r\n\tconst classes = clsx( {\r\n\t\t[ `are-vertically-aligned-${ verticalAlignment }` ]: verticalAlignment,\r\n\t\t[ `is-not-stacked-on-mobile` ]: ! isStackedOnMobile,\r\n\t} );\r\n\r\n\tconst blockProps = useBlockProps( {\r\n\t\tclassName: classes,\r\n\t} );\r\n\tconst innerBlocksProps = useInnerBlocksProps( blockProps, {\r\n\t\tdefaultBlock: DEFAULT_BLOCK,\r\n\t\tdirectInsert: true,\r\n\t\torientation: 'horizontal',\r\n\t\trenderAppender: false,\r\n\t\ttemplateLock,\r\n\t} );\r\n\r\n\t/**\r\n\t * Update all child Column blocks with a new vertical alignment setting\r\n\t * based on whatever alignment is passed in. This allows change to parent\r\n\t * to overide anything set on a individual column basis.\r\n\t *\r\n\t * @param {string} newVerticalAlignment The vertical alignment setting.\r\n\t */\r\n\tfunction updateAlignment( newVerticalAlignment ) {\r\n\t\tconst innerBlockClientIds = getBlockOrder( clientId );\r\n\r\n\t\t// Update own and child Column block vertical alignments.\r\n\t\t// This is a single action; the batching prevents creating multiple history records.\r\n\t\tregistry.batch( () => {\r\n\t\t\tsetAttributes( { verticalAlignment: newVerticalAlignment } );\r\n\t\t\tupdateBlockAttributes( innerBlockClientIds, {\r\n\t\t\t\tverticalAlignment: newVerticalAlignment,\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<BlockControls>\r\n\t\t\t\t<BlockVerticalAlignmentToolbar\r\n\t\t\t\t\tonChange={ updateAlignment }\r\n\t\t\t\t\tvalue={ verticalAlignment }\r\n\t\t\t\t/>\r\n\t\t\t</BlockControls>\r\n\t\t\t<InspectorControls>\r\n\t\t\t\t<ColumnInspectorControls\r\n\t\t\t\t\tclientId={ clientId }\r\n\t\t\t\t\tsetAttributes={ setAttributes }\r\n\t\t\t\t\tisStackedOnMobile={ isStackedOnMobile }\r\n\t\t\t\t/>\r\n\t\t\t</InspectorControls>\r\n\t\t\t<div { ...innerBlocksProps } />\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nfunction Placeholder( { clientId, name, setAttributes } ) {\r\n\tconst { blockType, defaultVariation, variations } = useSelect(\r\n\t\t( select ) => {\r\n\t\t\tconst {\r\n\t\t\t\tgetBlockVariations,\r\n\t\t\t\tgetBlockType,\r\n\t\t\t\tgetDefaultBlockVariation,\r\n\t\t\t} = select( blocksStore );\r\n\r\n\t\t\treturn {\r\n\t\t\t\tblockType: getBlockType( name ),\r\n\t\t\t\tdefaultVariation: getDefaultBlockVariation( name, 'block' ),\r\n\t\t\t\tvariations: getBlockVariations( name, 'block' ),\r\n\t\t\t};\r\n\t\t},\r\n\t\t[ name ]\r\n\t);\r\n\tconst { replaceInnerBlocks } = useDispatch( blockEditorStore );\r\n\tconst blockProps = useBlockProps();\r\n\r\n\treturn (\r\n\t\t<div { ...blockProps }>\r\n\t\t\t<__experimentalBlockVariationPicker\r\n\t\t\t\ticon={ blockType?.icon?.src }\r\n\t\t\t\tlabel={ blockType?.title }\r\n\t\t\t\tvariations={ variations }\r\n\t\t\t\tinstructions={ __( 'Divide into columns. Select a layout:' ) }\r\n\t\t\t\tonSelect={ ( nextVariation = defaultVariation ) => {\r\n\t\t\t\t\tif ( nextVariation.attributes ) {\r\n\t\t\t\t\t\tsetAttributes( nextVariation.attributes );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( nextVariation.innerBlocks ) {\r\n\t\t\t\t\t\treplaceInnerBlocks(\r\n\t\t\t\t\t\t\tclientId,\r\n\t\t\t\t\t\t\tcreateBlocksFromInnerBlocksTemplate(\r\n\t\t\t\t\t\t\t\tnextVariation.innerBlocks\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\ttrue\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} }\r\n\t\t\t\tallowSkip\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nconst ColumnsEdit = ( props ) => {\r\n\tconst { clientId } = props;\r\n\tconst hasInnerBlocks = useSelect(\r\n\t\t( select ) =>\r\n\t\t\tselect( blockEditorStore ).getBlocks( clientId ).length > 0,\r\n\t\t[ clientId ]\r\n\t);\r\n\tconst Component = hasInnerBlocks ? ColumnsEditContainer : Placeholder;\r\n\r\n\treturn <Component { ...props } />;\r\n};\r\n\r\nexport default ColumnsEdit;\r\n"],"mappings":"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","ignoreList":[]}