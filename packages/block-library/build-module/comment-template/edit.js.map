{"version":3,"names":["useState","memo","useSelect","__","BlockContextProvider","useBlockProps","useInnerBlocksProps","store","blockEditorStore","__experimentalUseBlockPreview","useBlockPreview","Spinner","coreStore","useCommentQueryArgs","useCommentTree","jsx","_jsx","jsxs","_jsxs","TEMPLATE","getCommentsPlaceholder","perPage","pageComments","threadComments","threadCommentsDepth","commentsDepth","Math","min","buildChildrenComment","commentsLevel","nextLevel","commentId","children","placeholderComments","push","CommentTemplateInnerBlocks","comment","activeCommentId","setActiveCommentId","firstCommentId","blocks","innerBlocksProps","template","MemoizedCommentTemplatePreview","isHidden","length","CommentsList","comments","CommentTemplatePreview","blockPreviewProps","handleOnClick","style","display","undefined","tabIndex","role","onClick","onKeyPress","blockProps","map","index","value","CommentTemplateEdit","clientId","context","postId","commentOrder","commentsPerPage","select","getSettings","__experimentalDiscussionSettings","commentQuery","topLevelComments","getEntityRecords","getBlocks","commentTree","reverse"],"sources":["@wordpress/block-library/src/comment-template/edit.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useState, memo } from '@wordpress/element';\r\nimport { useSelect } from '@wordpress/data';\r\nimport { __ } from '@wordpress/i18n';\r\nimport {\r\n\tBlockContextProvider,\r\n\tuseBlockProps,\r\n\tuseInnerBlocksProps,\r\n\tstore as blockEditorStore,\r\n\t__experimentalUseBlockPreview as useBlockPreview,\r\n} from '@wordpress/block-editor';\r\nimport { Spinner } from '@wordpress/components';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { useCommentQueryArgs, useCommentTree } from './hooks';\r\n\r\nconst TEMPLATE = [\r\n\t[ 'core/avatar' ],\r\n\t[ 'core/comment-author-name' ],\r\n\t[ 'core/comment-date' ],\r\n\t[ 'core/comment-content' ],\r\n\t[ 'core/comment-reply-link' ],\r\n\t[ 'core/comment-edit-link' ],\r\n];\r\n\r\n/**\r\n * Function that returns a comment structure that will be rendered with default placehoders.\r\n *\r\n * Each comment has a `commentId` property that is always a negative number in\r\n * case of the placeholders. This is to ensure that the comment does not\r\n * conflict with the actual (real) comments.\r\n *\r\n * @param {Object}  settings                       Discussion Settings.\r\n * @param {number}  [settings.perPage]             - Comments per page setting or block attribute.\r\n * @param {boolean} [settings.pageComments]        - Enable break comments into pages setting.\r\n * @param {boolean} [settings.threadComments]      - Enable threaded (nested) comments setting.\r\n * @param {number}  [settings.threadCommentsDepth] - Level deep of threaded comments.\r\n *\r\n * @typedef {{id: null, children: EmptyComment[]}} EmptyComment\r\n * @return {EmptyComment[]}                 \t\tInner blocks of the Comment Template\r\n */\r\nconst getCommentsPlaceholder = ( {\r\n\tperPage,\r\n\tpageComments,\r\n\tthreadComments,\r\n\tthreadCommentsDepth,\r\n} ) => {\r\n\t// Limit commentsDepth to 3\r\n\tconst commentsDepth = ! threadComments\r\n\t\t? 1\r\n\t\t: Math.min( threadCommentsDepth, 3 );\r\n\r\n\tconst buildChildrenComment = ( commentsLevel ) => {\r\n\t\t// Render children comments until commentsDepth is reached\r\n\t\tif ( commentsLevel < commentsDepth ) {\r\n\t\t\tconst nextLevel = commentsLevel + 1;\r\n\r\n\t\t\treturn [\r\n\t\t\t\t{\r\n\t\t\t\t\tcommentId: -( commentsLevel + 3 ),\r\n\t\t\t\t\tchildren: buildChildrenComment( nextLevel ),\r\n\t\t\t\t},\r\n\t\t\t];\r\n\t\t}\r\n\t\treturn [];\r\n\t};\r\n\r\n\t// Add the first comment and its children\r\n\tconst placeholderComments = [\r\n\t\t{ commentId: -1, children: buildChildrenComment( 1 ) },\r\n\t];\r\n\r\n\t// Add a second comment unless the break comments setting is active and set to less than 2, and there is one nested comment max\r\n\tif ( ( ! pageComments || perPage >= 2 ) && commentsDepth < 3 ) {\r\n\t\tplaceholderComments.push( {\r\n\t\t\tcommentId: -2,\r\n\t\t\tchildren: [],\r\n\t\t} );\r\n\t}\r\n\r\n\t// Add a third comment unless the break comments setting is active and set to less than 3, and there aren't nested comments\r\n\tif ( ( ! pageComments || perPage >= 3 ) && commentsDepth < 2 ) {\r\n\t\tplaceholderComments.push( {\r\n\t\t\tcommentId: -3,\r\n\t\t\tchildren: [],\r\n\t\t} );\r\n\t}\r\n\r\n\t// In case that the value is set but larger than 3 we truncate it to 3.\r\n\treturn placeholderComments;\r\n};\r\n\r\n/**\r\n * Component which renders the inner blocks of the Comment Template.\r\n *\r\n * @param {Object} props                      Component props.\r\n * @param {Array}  [props.comment]            - A comment object.\r\n * @param {Array}  [props.activeCommentId]    - The ID of the comment that is currently active.\r\n * @param {Array}  [props.setActiveCommentId] - The setter for activeCommentId.\r\n * @param {Array}  [props.firstCommentId]     - ID of the first comment in the array.\r\n * @param {Array}  [props.blocks]             - Array of blocks returned from\r\n *                                            getBlocks() in parent .\r\n * @return {Element}                 \t\tInner blocks of the Comment Template\r\n */\r\nfunction CommentTemplateInnerBlocks( {\r\n\tcomment,\r\n\tactiveCommentId,\r\n\tsetActiveCommentId,\r\n\tfirstCommentId,\r\n\tblocks,\r\n} ) {\r\n\tconst { children, ...innerBlocksProps } = useInnerBlocksProps(\r\n\t\t{},\r\n\t\t{ template: TEMPLATE }\r\n\t);\r\n\r\n\treturn (\r\n\t\t<li { ...innerBlocksProps }>\r\n\t\t\t{ comment.commentId === ( activeCommentId || firstCommentId )\r\n\t\t\t\t? children\r\n\t\t\t\t: null }\r\n\r\n\t\t\t{ /* To avoid flicker when switching active block contexts, a preview\r\n\t\t\t is ALWAYS rendered and the preview for the active block is hidden.\r\n\t\t\t This ensures that when switching the active block, the component is not\r\n\t\t\t mounted again but rather it only toggles the `isHidden` prop.\r\n\t\t\t The same strategy is used for preventing the flicker in the Post Template\r\n\t\t\t block. */ }\r\n\t\t\t<MemoizedCommentTemplatePreview\r\n\t\t\t\tblocks={ blocks }\r\n\t\t\t\tcommentId={ comment.commentId }\r\n\t\t\t\tsetActiveCommentId={ setActiveCommentId }\r\n\t\t\t\tisHidden={\r\n\t\t\t\t\tcomment.commentId === ( activeCommentId || firstCommentId )\r\n\t\t\t\t}\r\n\t\t\t/>\r\n\r\n\t\t\t{ comment?.children?.length > 0 ? (\r\n\t\t\t\t<CommentsList\r\n\t\t\t\t\tcomments={ comment.children }\r\n\t\t\t\t\tactiveCommentId={ activeCommentId }\r\n\t\t\t\t\tsetActiveCommentId={ setActiveCommentId }\r\n\t\t\t\t\tblocks={ blocks }\r\n\t\t\t\t\tfirstCommentId={ firstCommentId }\r\n\t\t\t\t/>\r\n\t\t\t) : null }\r\n\t\t</li>\r\n\t);\r\n}\r\n\r\nconst CommentTemplatePreview = ( {\r\n\tblocks,\r\n\tcommentId,\r\n\tsetActiveCommentId,\r\n\tisHidden,\r\n} ) => {\r\n\tconst blockPreviewProps = useBlockPreview( {\r\n\t\tblocks,\r\n\t} );\r\n\r\n\tconst handleOnClick = () => {\r\n\t\tsetActiveCommentId( commentId );\r\n\t};\r\n\r\n\t// We have to hide the preview block if the `comment` props points to\r\n\t// the curently active block!\r\n\r\n\t// Or, to put it differently, every preview block is visible unless it is the\r\n\t// currently active block - in this case we render its inner blocks.\r\n\tconst style = {\r\n\t\tdisplay: isHidden ? 'none' : undefined,\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\t{ ...blockPreviewProps }\r\n\t\t\ttabIndex={ 0 }\r\n\t\t\trole=\"button\"\r\n\t\t\tstyle={ style }\r\n\t\t\t// eslint-disable-next-line jsx-a11y/no-noninteractive-element-to-interactive-role\r\n\t\t\tonClick={ handleOnClick }\r\n\t\t\tonKeyPress={ handleOnClick }\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nconst MemoizedCommentTemplatePreview = memo( CommentTemplatePreview );\r\n\r\n/**\r\n * Component that renders a list of (nested) comments. It is called recursively.\r\n *\r\n * @param {Object} props                      Component props.\r\n * @param {Array}  [props.comments]           - Array of comment objects.\r\n * @param {Array}  [props.blockProps]         - Props from parent's `useBlockProps()`.\r\n * @param {Array}  [props.activeCommentId]    - The ID of the comment that is currently active.\r\n * @param {Array}  [props.setActiveCommentId] - The setter for activeCommentId.\r\n * @param {Array}  [props.blocks]             - Array of blocks returned from getBlocks() in parent.\r\n * @param {Object} [props.firstCommentId]     - The ID of the first comment in the array of\r\n *                                            comment objects.\r\n * @return {Element}                 \t\tList of comments.\r\n */\r\nconst CommentsList = ( {\r\n\tcomments,\r\n\tblockProps,\r\n\tactiveCommentId,\r\n\tsetActiveCommentId,\r\n\tblocks,\r\n\tfirstCommentId,\r\n} ) => (\r\n\t<ol { ...blockProps }>\r\n\t\t{ comments &&\r\n\t\t\tcomments.map( ( { commentId, ...comment }, index ) => (\r\n\t\t\t\t<BlockContextProvider\r\n\t\t\t\t\tkey={ comment.commentId || index }\r\n\t\t\t\t\tvalue={ {\r\n\t\t\t\t\t\t// If the commentId is negative it means that this comment is a\r\n\t\t\t\t\t\t// \"placeholder\" and that the block is most likely being used in the\r\n\t\t\t\t\t\t// site editor. In this case, we have to set the commentId to `null`\r\n\t\t\t\t\t\t// because otherwise the (non-existent) comment with a negative ID\r\n\t\t\t\t\t\t// would be reqested from the REST API.\r\n\t\t\t\t\t\tcommentId: commentId < 0 ? null : commentId,\r\n\t\t\t\t\t} }\r\n\t\t\t\t>\r\n\t\t\t\t\t<CommentTemplateInnerBlocks\r\n\t\t\t\t\t\tcomment={ { commentId, ...comment } }\r\n\t\t\t\t\t\tactiveCommentId={ activeCommentId }\r\n\t\t\t\t\t\tsetActiveCommentId={ setActiveCommentId }\r\n\t\t\t\t\t\tblocks={ blocks }\r\n\t\t\t\t\t\tfirstCommentId={ firstCommentId }\r\n\t\t\t\t\t/>\r\n\t\t\t\t</BlockContextProvider>\r\n\t\t\t) ) }\r\n\t</ol>\r\n);\r\n\r\nexport default function CommentTemplateEdit( {\r\n\tclientId,\r\n\tcontext: { postId },\r\n} ) {\r\n\tconst blockProps = useBlockProps();\r\n\r\n\tconst [ activeCommentId, setActiveCommentId ] = useState();\r\n\tconst {\r\n\t\tcommentOrder,\r\n\t\tthreadCommentsDepth,\r\n\t\tthreadComments,\r\n\t\tcommentsPerPage,\r\n\t\tpageComments,\r\n\t} = useSelect( ( select ) => {\r\n\t\tconst { getSettings } = select( blockEditorStore );\r\n\t\treturn getSettings().__experimentalDiscussionSettings;\r\n\t} );\r\n\r\n\tconst commentQuery = useCommentQueryArgs( {\r\n\t\tpostId,\r\n\t} );\r\n\r\n\tconst { topLevelComments, blocks } = useSelect(\r\n\t\t( select ) => {\r\n\t\t\tconst { getEntityRecords } = select( coreStore );\r\n\t\t\tconst { getBlocks } = select( blockEditorStore );\r\n\t\t\treturn {\r\n\t\t\t\t// Request only top-level comments. Replies are embedded.\r\n\t\t\t\ttopLevelComments: commentQuery\r\n\t\t\t\t\t? getEntityRecords( 'root', 'comment', commentQuery )\r\n\t\t\t\t\t: null,\r\n\t\t\t\tblocks: getBlocks( clientId ),\r\n\t\t\t};\r\n\t\t},\r\n\t\t[ clientId, commentQuery ]\r\n\t);\r\n\r\n\t// Generate a tree structure of comment IDs.\r\n\tlet commentTree = useCommentTree(\r\n\t\t// Reverse the order of top comments if needed.\r\n\t\tcommentOrder === 'desc' && topLevelComments\r\n\t\t\t? [ ...topLevelComments ].reverse()\r\n\t\t\t: topLevelComments\r\n\t);\r\n\r\n\tif ( ! topLevelComments ) {\r\n\t\treturn (\r\n\t\t\t<p { ...blockProps }>\r\n\t\t\t\t<Spinner />\r\n\t\t\t</p>\r\n\t\t);\r\n\t}\r\n\r\n\tif ( ! postId ) {\r\n\t\tcommentTree = getCommentsPlaceholder( {\r\n\t\t\tperPage: commentsPerPage,\r\n\t\t\tpageComments,\r\n\t\t\tthreadComments,\r\n\t\t\tthreadCommentsDepth,\r\n\t\t} );\r\n\t}\r\n\r\n\tif ( ! commentTree.length ) {\r\n\t\treturn <p { ...blockProps }>{ __( 'No results found.' ) }</p>;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<CommentsList\r\n\t\t\tcomments={ commentTree }\r\n\t\t\tblockProps={ blockProps }\r\n\t\t\tblocks={ blocks }\r\n\t\t\tactiveCommentId={ activeCommentId }\r\n\t\t\tsetActiveCommentId={ setActiveCommentId }\r\n\t\t\tfirstCommentId={ commentTree[ 0 ]?.commentId }\r\n\t\t/>\r\n\t);\r\n}\r\n"],"mappings":"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","ignoreList":[]}