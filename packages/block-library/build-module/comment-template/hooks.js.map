{"version":3,"names":["useState","useEffect","useMemo","useSelect","store","blockEditorStore","addQueryArgs","apiFetch","MAX_COMMENTS_PER_PAGE","useCommentQueryArgs","postId","queryArgs","status","order","context","parent","_embed","pageComments","commentsPerPage","defaultCommentsPage","defaultPage","select","getSettings","__experimentalDiscussionSettings","perPage","Math","min","page","useDefaultPageIndex","post","per_page","defaultPages","setDefaultPages","key","path","_fields","method","parse","then","res","pages","parseInt","headers","get","useCommentTree","topLevelComments","commentTree","map","id","_embedded","children","commentId","child"],"sources":["@wordpress/block-library/src/comment-template/hooks.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useState, useEffect, useMemo } from '@wordpress/element';\r\nimport { useSelect } from '@wordpress/data';\r\nimport { store as blockEditorStore } from '@wordpress/block-editor';\r\nimport { addQueryArgs } from '@wordpress/url';\r\nimport apiFetch from '@wordpress/api-fetch';\r\n\r\n// This is limited by WP REST API\r\nconst MAX_COMMENTS_PER_PAGE = 100;\r\n\r\n/**\r\n * Return an object with the query args needed to fetch the default page of\r\n * comments.\r\n *\r\n * @param {Object} props        Hook props.\r\n * @param {number} props.postId ID of the post that contains the comments.\r\n *                              discussion settings.\r\n *\r\n * @return {Object} Query args to retrieve the comments.\r\n */\r\nexport const useCommentQueryArgs = ( { postId } ) => {\r\n\t// Initialize the query args that are not going to change.\r\n\tconst queryArgs = {\r\n\t\tstatus: 'approve',\r\n\t\torder: 'asc',\r\n\t\tcontext: 'embed',\r\n\t\tparent: 0,\r\n\t\t_embed: 'children',\r\n\t};\r\n\r\n\t// Get the Discussion settings that may be needed to query the comments.\r\n\tconst {\r\n\t\tpageComments,\r\n\t\tcommentsPerPage,\r\n\t\tdefaultCommentsPage: defaultPage,\r\n\t} = useSelect( ( select ) => {\r\n\t\tconst { getSettings } = select( blockEditorStore );\r\n\t\tconst { __experimentalDiscussionSettings } = getSettings();\r\n\t\treturn __experimentalDiscussionSettings;\r\n\t} );\r\n\r\n\t// WP REST API doesn't allow fetching more than max items limit set per single page of data.\r\n\t// As for the editor performance is more important than completeness of data and fetching only the\r\n\t// max allowed for single page should be enough for the purpose of design and laying out the page.\r\n\t// Fetching over the limit would return an error here but would work with backend query.\r\n\tconst perPage = pageComments\r\n\t\t? Math.min( commentsPerPage, MAX_COMMENTS_PER_PAGE )\r\n\t\t: MAX_COMMENTS_PER_PAGE;\r\n\r\n\t// Get the number of the default page.\r\n\tconst page = useDefaultPageIndex( {\r\n\t\tdefaultPage,\r\n\t\tpostId,\r\n\t\tperPage,\r\n\t\tqueryArgs,\r\n\t} );\r\n\r\n\t// Merge, memoize and return all query arguments, unless the default page's\r\n\t// number is not known yet.\r\n\treturn useMemo( () => {\r\n\t\treturn page\r\n\t\t\t? {\r\n\t\t\t\t\t...queryArgs,\r\n\t\t\t\t\tpost: postId,\r\n\t\t\t\t\tper_page: perPage,\r\n\t\t\t\t\tpage,\r\n\t\t\t  }\r\n\t\t\t: null;\r\n\t}, [ postId, perPage, page ] );\r\n};\r\n\r\n/**\r\n * Return the index of the default page, depending on whether `defaultPage` is\r\n * `newest` or `oldest`. In the first case, the only way to know the page's\r\n * index is by using the `X-WP-TotalPages` header, which forces to make an\r\n * additional request.\r\n *\r\n * @param {Object} props             Hook props.\r\n * @param {string} props.defaultPage Page shown by default (newest/oldest).\r\n * @param {number} props.postId      ID of the post that contains the comments.\r\n * @param {number} props.perPage     The number of comments included per page.\r\n * @param {Object} props.queryArgs   Other query args.\r\n *\r\n * @return {number} Index of the default comments page.\r\n */\r\nconst useDefaultPageIndex = ( { defaultPage, postId, perPage, queryArgs } ) => {\r\n\t// Store the default page indices.\r\n\tconst [ defaultPages, setDefaultPages ] = useState( {} );\r\n\tconst key = `${ postId }_${ perPage }`;\r\n\tconst page = defaultPages[ key ] || 0;\r\n\r\n\tuseEffect( () => {\r\n\t\t// Do nothing if the page is already known or not the newest page.\r\n\t\tif ( page || defaultPage !== 'newest' ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// We need to fetch comments to know the index. Use HEAD and limit\r\n\t\t// fields just to ID, to make this call as light as possible.\r\n\t\tapiFetch( {\r\n\t\t\tpath: addQueryArgs( '/wp/v2/comments', {\r\n\t\t\t\t...queryArgs,\r\n\t\t\t\tpost: postId,\r\n\t\t\t\tper_page: perPage,\r\n\t\t\t\t_fields: 'id',\r\n\t\t\t} ),\r\n\t\t\tmethod: 'HEAD',\r\n\t\t\tparse: false,\r\n\t\t} ).then( ( res ) => {\r\n\t\t\tconst pages = parseInt( res.headers.get( 'X-WP-TotalPages' ) );\r\n\t\t\tsetDefaultPages( {\r\n\t\t\t\t...defaultPages,\r\n\t\t\t\t[ key ]: pages <= 1 ? 1 : pages, // If there are 0 pages, it means that there are no comments, but there is no 0th page.\r\n\t\t\t} );\r\n\t\t} );\r\n\t}, [ defaultPage, postId, perPage, setDefaultPages ] );\r\n\r\n\t// The oldest one is always the first one.\r\n\treturn defaultPage === 'newest' ? page : 1;\r\n};\r\n\r\n/**\r\n * Generate a tree structure of comment IDs from a list of comment entities. The\r\n * children of each comment are obtained from `_embedded`.\r\n *\r\n * @typedef {{ commentId: number, children: CommentNode }} CommentNode\r\n *\r\n * @param {Object[]} topLevelComments List of comment entities.\r\n * @return {{ commentTree: CommentNode[]}} Tree of comment IDs.\r\n */\r\nexport const useCommentTree = ( topLevelComments ) => {\r\n\tconst commentTree = useMemo(\r\n\t\t() =>\r\n\t\t\ttopLevelComments?.map( ( { id, _embedded } ) => {\r\n\t\t\t\tconst [ children ] = _embedded?.children || [ [] ];\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcommentId: id,\r\n\t\t\t\t\tchildren: children.map( ( child ) => ( {\r\n\t\t\t\t\t\tcommentId: child.id,\r\n\t\t\t\t\t} ) ),\r\n\t\t\t\t};\r\n\t\t\t} ),\r\n\t\t[ topLevelComments ]\r\n\t);\r\n\r\n\treturn commentTree;\r\n};\r\n"],"mappings":"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","ignoreList":[]}