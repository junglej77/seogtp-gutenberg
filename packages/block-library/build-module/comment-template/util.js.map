{"version":3,"names":["convertToTree","data","table","forEach","item","id","commentId","children","tree","parent","push"],"sources":["@wordpress/block-library/src/comment-template/util.js"],"sourcesContent":["/**\r\n *\r\n * This function converts a flat list of comment objects with a `parent` property\r\n * to a nested list of comment objects with a `children` property. The `children`\r\n * property is itself a list of comment objects.\r\n *\r\n * @example\r\n * ```\r\n * const comments = [\r\n * \t{ id: 1, parent: 0 },\r\n * \t{ id: 2, parent: 1 },\r\n * \t{ id: 3, parent: 2 },\r\n * \t{ id: 4, parent: 1 },\r\n * ];\r\n * expect( convertToTree( comments ) ).toEqual( [\r\n * \t{\r\n * \t\tcommentId: 1,\r\n * \t\tchildren: [\r\n * \t\t\t{ commentId: 2, children: [ { commentId: 3, children: [] } ] },\r\n * \t\t\t{ commentId: 4, children: [] },\r\n * \t\t],\r\n * \t},\r\n * ] );\r\n * ```\r\n * @typedef {{id: number, parent: number}} Comment\r\n * @param {Comment[]} data - List of comment objects.\r\n *\r\n * @return {Object[]} Nested list of comment objects with a `children` property.\r\n */\r\nexport const convertToTree = ( data ) => {\r\n\tconst table = {};\r\n\r\n\tif ( ! data ) {\r\n\t\treturn [];\r\n\t}\r\n\r\n\t// First create a hash table of { [id]: { ...comment, children: [] }}\r\n\tdata.forEach( ( item ) => {\r\n\t\ttable[ item.id ] = { commentId: item.id, children: [] };\r\n\t} );\r\n\r\n\tconst tree = [];\r\n\r\n\t// Iterate over the original comments again\r\n\tdata.forEach( ( item ) => {\r\n\t\tif ( item.parent ) {\r\n\t\t\t// If the comment has a \"parent\", then find that parent in the table that\r\n\t\t\t// we have created above and push the current comment to the array of its\r\n\t\t\t// children.\r\n\t\t\ttable[ item.parent ]?.children.push( table[ item.id ] );\r\n\t\t} else {\r\n\t\t\t// Otherwise, if the comment has no parent (also works if parent is 0)\r\n\t\t\t// that means that it's a top-level comment so we can find it in the table\r\n\t\t\t// and push it to the final tree.\r\n\t\t\ttree.push( table[ item.id ] );\r\n\t\t}\r\n\t} );\r\n\treturn tree;\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,aAAa,GAAKC,IAAI,IAAM;EACxC,MAAMC,KAAK,GAAG,CAAC,CAAC;EAEhB,IAAK,CAAED,IAAI,EAAG;IACb,OAAO,EAAE;EACV;;EAEA;EACAA,IAAI,CAACE,OAAO,CAAIC,IAAI,IAAM;IACzBF,KAAK,CAAEE,IAAI,CAACC,EAAE,CAAE,GAAG;MAAEC,SAAS,EAAEF,IAAI,CAACC,EAAE;MAAEE,QAAQ,EAAE;IAAG,CAAC;EACxD,CAAE,CAAC;EAEH,MAAMC,IAAI,GAAG,EAAE;;EAEf;EACAP,IAAI,CAACE,OAAO,CAAIC,IAAI,IAAM;IACzB,IAAKA,IAAI,CAACK,MAAM,EAAG;MAClB;MACA;MACA;MACAP,KAAK,CAAEE,IAAI,CAACK,MAAM,CAAE,EAAEF,QAAQ,CAACG,IAAI,CAAER,KAAK,CAAEE,IAAI,CAACC,EAAE,CAAG,CAAC;IACxD,CAAC,MAAM;MACN;MACA;MACA;MACAG,IAAI,CAACE,IAAI,CAAER,KAAK,CAAEE,IAAI,CAACC,EAAE,CAAG,CAAC;IAC9B;EACD,CAAE,CAAC;EACH,OAAOG,IAAI;AACZ,CAAC","ignoreList":[]}