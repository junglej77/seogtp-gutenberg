{"version":3,"names":["colord","extend","namesPlugin","FastAverageColor","memoize","applyFilters","DEFAULT_BACKGROUND_COLOR","DEFAULT_OVERLAY_COLOR","compositeSourceOver","source","dest","r","a","g","b","retrieveFastAverageColor","fastAverageColor","getMediaColor","url","toRgb","imgCrossOrigin","undefined","color","getColorAsync","defaultColor","silent","process","env","NODE_ENV","crossOrigin","hex","error","compositeIsDark","dimRatio","overlayColor","backgroundColor","isDark","overlay","alpha","background","composite"],"sources":["D:/jungle/gutenberg/packages/block-library/src/cover/edit/color-utils.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport { colord, extend } from 'colord';\r\nimport namesPlugin from 'colord/plugins/names';\r\nimport { FastAverageColor } from 'fast-average-color';\r\nimport memoize from 'memize';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { applyFilters } from '@wordpress/hooks';\r\n\r\n/**\r\n * @typedef {import('colord').RgbaColor} RgbaColor\r\n */\r\n\r\nextend( [ namesPlugin ] );\r\n\r\n/**\r\n * Fallback color when the average color can't be computed. The image may be\r\n * rendering as transparent, and most sites have a light color background.\r\n */\r\nexport const DEFAULT_BACKGROUND_COLOR = '#FFF';\r\n\r\n/**\r\n * Default dim color specified in style.css.\r\n */\r\nexport const DEFAULT_OVERLAY_COLOR = '#000';\r\n\r\n/**\r\n * Performs a Porter Duff composite source over operation on two rgba colors.\r\n *\r\n * @see {@link https://www.w3.org/TR/compositing-1/#porterduffcompositingoperators_srcover}\r\n *\r\n * @param {RgbaColor} source Source color.\r\n * @param {RgbaColor} dest   Destination color.\r\n *\r\n * @return {RgbaColor} Composite color.\r\n */\r\nexport function compositeSourceOver( source, dest ) {\r\n\treturn {\r\n\t\tr: source.r * source.a + dest.r * dest.a * ( 1 - source.a ),\r\n\t\tg: source.g * source.a + dest.g * dest.a * ( 1 - source.a ),\r\n\t\tb: source.b * source.a + dest.b * dest.a * ( 1 - source.a ),\r\n\t\ta: source.a + dest.a * ( 1 - source.a ),\r\n\t};\r\n}\r\n\r\n/**\r\n * Retrieves the FastAverageColor singleton.\r\n *\r\n * @return {FastAverageColor} The FastAverageColor singleton.\r\n */\r\nexport function retrieveFastAverageColor() {\r\n\tif ( ! retrieveFastAverageColor.fastAverageColor ) {\r\n\t\tretrieveFastAverageColor.fastAverageColor = new FastAverageColor();\r\n\t}\r\n\treturn retrieveFastAverageColor.fastAverageColor;\r\n}\r\n\r\n/**\r\n * Computes the average color of an image.\r\n *\r\n * @param {string} url The url of the image.\r\n *\r\n * @return {Promise<string>} Promise of an average color as a hex string.\r\n */\r\nexport const getMediaColor = memoize( async ( url ) => {\r\n\tif ( ! url ) {\r\n\t\treturn DEFAULT_BACKGROUND_COLOR;\r\n\t}\r\n\r\n\t// making the default color rgb for compat with FAC\r\n\tconst { r, g, b, a } = colord( DEFAULT_BACKGROUND_COLOR ).toRgb();\r\n\r\n\ttry {\r\n\t\tconst imgCrossOrigin = applyFilters(\r\n\t\t\t'media.crossOrigin',\r\n\t\t\tundefined,\r\n\t\t\turl\r\n\t\t);\r\n\t\tconst color = await retrieveFastAverageColor().getColorAsync( url, {\r\n\t\t\t// The default color is white, which is the color\r\n\t\t\t// that is returned if there's an error.\r\n\t\t\t// colord returns alpga 0-1, FAC needs 0-255\r\n\t\t\tdefaultColor: [ r, g, b, a * 255 ],\r\n\t\t\t// Errors that come up don't reject the promise,\r\n\t\t\t// so error logging has to be silenced\r\n\t\t\t// with this option.\r\n\t\t\tsilent: process.env.NODE_ENV === 'production',\r\n\t\t\tcrossOrigin: imgCrossOrigin,\r\n\t\t} );\r\n\t\treturn color.hex;\r\n\t} catch ( error ) {\r\n\t\t// If there's an error return the fallback color.\r\n\t\treturn DEFAULT_BACKGROUND_COLOR;\r\n\t}\r\n} );\r\n\r\n/**\r\n * Computes if the color combination of the overlay and background color is dark.\r\n *\r\n * @param {number} dimRatio        Opacity of the overlay between 0 and 100.\r\n * @param {string} overlayColor    CSS color string for the overlay.\r\n * @param {string} backgroundColor CSS color string for the background.\r\n *\r\n * @return {boolean} true if the color combination composite result is dark.\r\n */\r\nexport function compositeIsDark( dimRatio, overlayColor, backgroundColor ) {\r\n\t// Opacity doesn't matter if you're overlaying the same color on top of itself.\r\n\t// And background doesn't matter when overlay is fully opaque.\r\n\tif ( overlayColor === backgroundColor || dimRatio === 100 ) {\r\n\t\treturn colord( overlayColor ).isDark();\r\n\t}\r\n\tconst overlay = colord( overlayColor )\r\n\t\t.alpha( dimRatio / 100 )\r\n\t\t.toRgb();\r\n\tconst background = colord( backgroundColor ).toRgb();\r\n\tconst composite = compositeSourceOver( overlay, background );\r\n\treturn colord( composite ).isDark();\r\n}\r\n"],"mappings":"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","ignoreList":[]}