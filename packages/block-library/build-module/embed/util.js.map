{"version":3,"names":["clsx","memoize","privateApis","componentsPrivateApis","renderToString","createBlock","getBlockType","getBlockVariations","metadata","$schema","apiVersion","name","title","category","description","textdomain","attributes","url","type","__experimentalRole","caption","source","selector","providerNameSlug","allowResponsive","responsive","previewable","supports","align","spacing","margin","interactivity","clientNavigation","editorStyle","style","ASPECT_RATIOS","WP_EMBED_TYPE","unlock","jsx","_jsx","DEFAULT_EMBED_BLOCK","kebabCase","getEmbedInfoByProvider","provider","find","matchesPatterns","patterns","some","pattern","match","findMoreSuitableBlock","isFromWordPress","html","includes","getPhotoHtml","photo","imageUrl","thumbnail_url","photoPreview","children","src","alt","width","createUpgradedEmbedBlock","props","attributesFromPreview","preview","restAttributes","matchedBlock","isCurrentBlockWP","shouldCreateNewBlock","wpVariation","hasAspectRatioClass","existingClassNames","className","removeAspectRatioClasses","aspectRatioClassNames","reduce","accumulator","push","outputClassNames","replace","trim","getClassNames","previewDocument","document","implementation","createHTMLDocument","body","innerHTML","iframe","querySelector","height","aspectRatio","toFixed","ratioIndex","length","potentialRatio","ratio","ratioDiff","fallback","onReplace","link","href","content","getAttributesFromPreview","currentClassNames","isResponsive","provider_name","providerName","toLowerCase","getMergedAttributesWithPreview","currentAttributes"],"sources":["@wordpress/block-library/src/embed/util.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport clsx from 'clsx';\r\nimport memoize from 'memize';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { privateApis as componentsPrivateApis } from '@wordpress/components';\r\nimport { renderToString } from '@wordpress/element';\r\nimport {\r\n\tcreateBlock,\r\n\tgetBlockType,\r\n\tgetBlockVariations,\r\n} from '@wordpress/blocks';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport metadata from './block.json';\r\nimport { ASPECT_RATIOS, WP_EMBED_TYPE } from './constants';\r\nimport { unlock } from '../lock-unlock';\r\n\r\nconst { name: DEFAULT_EMBED_BLOCK } = metadata;\r\nconst { kebabCase } = unlock( componentsPrivateApis );\r\n\r\n/** @typedef {import('@wordpress/blocks').WPBlockVariation} WPBlockVariation */\r\n\r\n/**\r\n * Returns the embed block's information by matching the provided service provider\r\n *\r\n * @param {string} provider The embed block's provider\r\n * @return {WPBlockVariation} The embed block's information\r\n */\r\nexport const getEmbedInfoByProvider = ( provider ) =>\r\n\tgetBlockVariations( DEFAULT_EMBED_BLOCK )?.find(\r\n\t\t( { name } ) => name === provider\r\n\t);\r\n\r\n/**\r\n * Returns true if any of the regular expressions match the URL.\r\n *\r\n * @param {string} url      The URL to test.\r\n * @param {Array}  patterns The list of regular expressions to test agains.\r\n * @return {boolean} True if any of the regular expressions match the URL.\r\n */\r\nexport const matchesPatterns = ( url, patterns = [] ) =>\r\n\tpatterns.some( ( pattern ) => url.match( pattern ) );\r\n\r\n/**\r\n * Finds the block variation that should be used for the URL,\r\n * based on the provided URL and the variation's patterns.\r\n *\r\n * @param {string} url The URL to test.\r\n * @return {WPBlockVariation} The block variation that should be used for this URL\r\n */\r\nexport const findMoreSuitableBlock = ( url ) =>\r\n\tgetBlockVariations( DEFAULT_EMBED_BLOCK )?.find( ( { patterns } ) =>\r\n\t\tmatchesPatterns( url, patterns )\r\n\t);\r\n\r\nexport const isFromWordPress = ( html ) =>\r\n\thtml && html.includes( 'class=\"wp-embedded-content\"' );\r\n\r\nexport const getPhotoHtml = ( photo ) => {\r\n\t// If full image url not found use thumbnail.\r\n\tconst imageUrl = photo.url || photo.thumbnail_url;\r\n\r\n\t// 100% width for the preview so it fits nicely into the document, some \"thumbnails\" are\r\n\t// actually the full size photo.\r\n\tconst photoPreview = (\r\n\t\t<p>\r\n\t\t\t<img src={ imageUrl } alt={ photo.title } width=\"100%\" />\r\n\t\t</p>\r\n\t);\r\n\treturn renderToString( photoPreview );\r\n};\r\n\r\n/**\r\n * Creates a more suitable embed block based on the passed in props\r\n * and attributes generated from an embed block's preview.\r\n *\r\n * We require `attributesFromPreview` to be generated from the latest attributes\r\n * and preview, and because of the way the react lifecycle operates, we can't\r\n * guarantee that the attributes contained in the block's props are the latest\r\n * versions, so we require that these are generated separately.\r\n * See `getAttributesFromPreview` in the generated embed edit component.\r\n *\r\n * @param {Object} props                   The block's props.\r\n * @param {Object} [attributesFromPreview] Attributes generated from the block's most up to date preview.\r\n * @return {Object|undefined} A more suitable embed block if one exists.\r\n */\r\nexport const createUpgradedEmbedBlock = (\r\n\tprops,\r\n\tattributesFromPreview = {}\r\n) => {\r\n\tconst { preview, attributes = {} } = props;\r\n\tconst { url, providerNameSlug, type, ...restAttributes } = attributes;\r\n\r\n\tif ( ! url || ! getBlockType( DEFAULT_EMBED_BLOCK ) ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst matchedBlock = findMoreSuitableBlock( url );\r\n\r\n\t// WordPress blocks can work on multiple sites, and so don't have patterns,\r\n\t// so if we're in a WordPress block, assume the user has chosen it for a WordPress URL.\r\n\tconst isCurrentBlockWP =\r\n\t\tproviderNameSlug === 'wordpress' || type === WP_EMBED_TYPE;\r\n\t// If current block is not WordPress and a more suitable block found\r\n\t// that is different from the current one, create the new matched block.\r\n\tconst shouldCreateNewBlock =\r\n\t\t! isCurrentBlockWP &&\r\n\t\tmatchedBlock &&\r\n\t\t( matchedBlock.attributes.providerNameSlug !== providerNameSlug ||\r\n\t\t\t! providerNameSlug );\r\n\tif ( shouldCreateNewBlock ) {\r\n\t\treturn createBlock( DEFAULT_EMBED_BLOCK, {\r\n\t\t\turl,\r\n\t\t\t...restAttributes,\r\n\t\t\t...matchedBlock.attributes,\r\n\t\t} );\r\n\t}\r\n\r\n\tconst wpVariation = getBlockVariations( DEFAULT_EMBED_BLOCK )?.find(\r\n\t\t( { name } ) => name === 'wordpress'\r\n\t);\r\n\r\n\t// We can't match the URL for WordPress embeds, we have to check the HTML instead.\r\n\tif (\r\n\t\t! wpVariation ||\r\n\t\t! preview ||\r\n\t\t! isFromWordPress( preview.html ) ||\r\n\t\tisCurrentBlockWP\r\n\t) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// This is not the WordPress embed block so transform it into one.\r\n\treturn createBlock( DEFAULT_EMBED_BLOCK, {\r\n\t\turl,\r\n\t\t...wpVariation.attributes,\r\n\t\t// By now we have the preview, but when the new block first renders, it\r\n\t\t// won't have had all the attributes set, and so won't get the correct\r\n\t\t// type and it won't render correctly. So, we pass through the current attributes\r\n\t\t// here so that the initial render works when we switch to the WordPress\r\n\t\t// block. This only affects the WordPress block because it can't be\r\n\t\t// rendered in the usual Sandbox (it has a sandbox of its own) and it\r\n\t\t// relies on the preview to set the correct render type.\r\n\t\t...attributesFromPreview,\r\n\t} );\r\n};\r\n\r\n/**\r\n * Determine if the block already has an aspect ratio class applied.\r\n *\r\n * @param {string} existingClassNames Existing block classes.\r\n * @return {boolean} True or false if the classnames contain an aspect ratio class.\r\n */\r\nexport const hasAspectRatioClass = ( existingClassNames ) => {\r\n\tif ( ! existingClassNames ) {\r\n\t\treturn false;\r\n\t}\r\n\treturn ASPECT_RATIOS.some( ( { className } ) =>\r\n\t\texistingClassNames.includes( className )\r\n\t);\r\n};\r\n\r\n/**\r\n * Removes all previously set aspect ratio related classes and return the rest\r\n * existing class names.\r\n *\r\n * @param {string} existingClassNames Any existing class names.\r\n * @return {string} The class names without any aspect ratio related class.\r\n */\r\nexport const removeAspectRatioClasses = ( existingClassNames ) => {\r\n\tif ( ! existingClassNames ) {\r\n\t\t// Avoids extraneous work and also, by returning the same value as\r\n\t\t// received, ensures the post is not dirtied by a change of the block\r\n\t\t// attribute from `undefined` to an empty string.\r\n\t\treturn existingClassNames;\r\n\t}\r\n\tconst aspectRatioClassNames = ASPECT_RATIOS.reduce(\r\n\t\t( accumulator, { className } ) => {\r\n\t\t\taccumulator.push( className );\r\n\t\t\treturn accumulator;\r\n\t\t},\r\n\t\t[ 'wp-has-aspect-ratio' ]\r\n\t);\r\n\tlet outputClassNames = existingClassNames;\r\n\tfor ( const className of aspectRatioClassNames ) {\r\n\t\toutputClassNames = outputClassNames.replace( className, '' );\r\n\t}\r\n\treturn outputClassNames.trim();\r\n};\r\n\r\n/**\r\n * Returns class names with any relevant responsive aspect ratio names.\r\n *\r\n * @param {string}  html               The preview HTML that possibly contains an iframe with width and height set.\r\n * @param {string}  existingClassNames Any existing class names.\r\n * @param {boolean} allowResponsive    If the responsive class names should be added, or removed.\r\n * @return {string} Deduped class names.\r\n */\r\nexport function getClassNames(\r\n\thtml,\r\n\texistingClassNames,\r\n\tallowResponsive = true\r\n) {\r\n\tif ( ! allowResponsive ) {\r\n\t\treturn removeAspectRatioClasses( existingClassNames );\r\n\t}\r\n\r\n\tconst previewDocument = document.implementation.createHTMLDocument( '' );\r\n\tpreviewDocument.body.innerHTML = html;\r\n\tconst iframe = previewDocument.body.querySelector( 'iframe' );\r\n\r\n\t// If we have a fixed aspect iframe, and it's a responsive embed block.\r\n\tif ( iframe && iframe.height && iframe.width ) {\r\n\t\tconst aspectRatio = ( iframe.width / iframe.height ).toFixed( 2 );\r\n\t\t// Given the actual aspect ratio, find the widest ratio to support it.\r\n\t\tfor (\r\n\t\t\tlet ratioIndex = 0;\r\n\t\t\tratioIndex < ASPECT_RATIOS.length;\r\n\t\t\tratioIndex++\r\n\t\t) {\r\n\t\t\tconst potentialRatio = ASPECT_RATIOS[ ratioIndex ];\r\n\t\t\tif ( aspectRatio >= potentialRatio.ratio ) {\r\n\t\t\t\t// Evaluate the difference between actual aspect ratio and closest match.\r\n\t\t\t\t// If the difference is too big, do not scale the embed according to aspect ratio.\r\n\t\t\t\tconst ratioDiff = aspectRatio - potentialRatio.ratio;\r\n\t\t\t\tif ( ratioDiff > 0.1 ) {\r\n\t\t\t\t\t// No close aspect ratio match found.\r\n\t\t\t\t\treturn removeAspectRatioClasses( existingClassNames );\r\n\t\t\t\t}\r\n\t\t\t\t// Close aspect ratio match found.\r\n\t\t\t\treturn clsx(\r\n\t\t\t\t\tremoveAspectRatioClasses( existingClassNames ),\r\n\t\t\t\t\tpotentialRatio.className,\r\n\t\t\t\t\t'wp-has-aspect-ratio'\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn existingClassNames;\r\n}\r\n\r\n/**\r\n * Fallback behaviour for unembeddable URLs.\r\n * Creates a paragraph block containing a link to the URL, and calls `onReplace`.\r\n *\r\n * @param {string}   url       The URL that could not be embedded.\r\n * @param {Function} onReplace Function to call with the created fallback block.\r\n */\r\nexport function fallback( url, onReplace ) {\r\n\tconst link = <a href={ url }>{ url }</a>;\r\n\tonReplace(\r\n\t\tcreateBlock( 'core/paragraph', { content: renderToString( link ) } )\r\n\t);\r\n}\r\n\r\n/***\r\n * Gets block attributes based on the preview and responsive state.\r\n *\r\n * @param {Object} preview The preview data.\r\n * @param {string} title The block's title, e.g. Twitter.\r\n * @param {Object} currentClassNames The block's current class names.\r\n * @param {boolean} isResponsive Boolean indicating if the block supports responsive content.\r\n * @param {boolean} allowResponsive Apply responsive classes to fixed size content.\r\n * @return {Object} Attributes and values.\r\n */\r\nexport const getAttributesFromPreview = memoize(\r\n\t(\r\n\t\tpreview,\r\n\t\ttitle,\r\n\t\tcurrentClassNames,\r\n\t\tisResponsive,\r\n\t\tallowResponsive = true\r\n\t) => {\r\n\t\tif ( ! preview ) {\r\n\t\t\treturn {};\r\n\t\t}\r\n\r\n\t\tconst attributes = {};\r\n\t\t// Some plugins only return HTML with no type info, so default this to 'rich'.\r\n\t\tlet { type = 'rich' } = preview;\r\n\t\t// If we got a provider name from the API, use it for the slug, otherwise we use the title,\r\n\t\t// because not all embed code gives us a provider name.\r\n\t\tconst { html, provider_name: providerName } = preview;\r\n\t\tconst providerNameSlug = kebabCase(\r\n\t\t\t( providerName || title ).toLowerCase()\r\n\t\t);\r\n\r\n\t\tif ( isFromWordPress( html ) ) {\r\n\t\t\ttype = WP_EMBED_TYPE;\r\n\t\t}\r\n\r\n\t\tif ( html || 'photo' === type ) {\r\n\t\t\tattributes.type = type;\r\n\t\t\tattributes.providerNameSlug = providerNameSlug;\r\n\t\t}\r\n\r\n\t\t// Aspect ratio classes are removed when the embed URL is updated.\r\n\t\t// If the embed already has an aspect ratio class, that means the URL has not changed.\r\n\t\t// Which also means no need to regenerate it with getClassNames.\r\n\t\tif ( hasAspectRatioClass( currentClassNames ) ) {\r\n\t\t\treturn attributes;\r\n\t\t}\r\n\r\n\t\tattributes.className = getClassNames(\r\n\t\t\thtml,\r\n\t\t\tcurrentClassNames,\r\n\t\t\tisResponsive && allowResponsive\r\n\t\t);\r\n\r\n\t\treturn attributes;\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns the attributes derived from the preview, merged with the current attributes.\r\n *\r\n * @param {Object}  currentAttributes The current attributes of the block.\r\n * @param {Object}  preview           The preview data.\r\n * @param {string}  title             The block's title, e.g. Twitter.\r\n * @param {boolean} isResponsive      Boolean indicating if the block supports responsive content.\r\n * @return {Object} Merged attributes.\r\n */\r\nexport const getMergedAttributesWithPreview = (\r\n\tcurrentAttributes,\r\n\tpreview,\r\n\ttitle,\r\n\tisResponsive\r\n) => {\r\n\tconst { allowResponsive, className } = currentAttributes;\r\n\r\n\treturn {\r\n\t\t...currentAttributes,\r\n\t\t...getAttributesFromPreview(\r\n\t\t\tpreview,\r\n\t\t\ttitle,\r\n\t\t\tclassName,\r\n\t\t\tisResponsive,\r\n\t\t\tallowResponsive\r\n\t\t),\r\n\t};\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,OAAO,MAAM,QAAQ;;AAE5B;AACA;AACA;AACA,SAASC,WAAW,IAAIC,qBAAqB,QAAQ,uBAAuB;AAC5E,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SACCC,WAAW,EACXC,YAAY,EACZC,kBAAkB,QACZ,mBAAmB;;AAE1B;AACA;AACA;AAFA,MAAAC,QAAA;EAAAC,OAAA;EAAAC,UAAA;EAAAC,IAAA;EAAAC,KAAA;EAAAC,QAAA;EAAAC,WAAA;EAAAC,UAAA;EAAAC,UAAA;IAAAC,GAAA;MAAAC,IAAA;MAAAC,kBAAA;IAAA;IAAAC,OAAA;MAAAF,IAAA;MAAAG,MAAA;MAAAC,QAAA;MAAAH,kBAAA;IAAA;IAAAD,IAAA;MAAAA,IAAA;MAAAC,kBAAA;IAAA;IAAAI,gBAAA;MAAAL,IAAA;MAAAC,kBAAA;IAAA;IAAAK,eAAA;MAAAN,IAAA;MAAA;IAAA;IAAAO,UAAA;MAAAP,IAAA;MAAA;MAAAC,kBAAA;IAAA;IAAAO,WAAA;MAAAR,IAAA;MAAA;MAAAC,kBAAA;IAAA;EAAA;EAAAQ,QAAA;IAAAC,KAAA;IAAAC,OAAA;MAAAC,MAAA;IAAA;IAAAC,aAAA;MAAAC,gBAAA;IAAA;EAAA;EAAAC,WAAA;EAAAC,KAAA;AAAA;AAIA,SAASC,aAAa,EAAEC,aAAa,QAAQ,aAAa;AAC1D,SAASC,MAAM,QAAQ,gBAAgB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAExC,MAAM;EAAE5B,IAAI,EAAE6B;AAAoB,CAAC,GAAGhC,QAAQ;AAC9C,MAAM;EAAEiC;AAAU,CAAC,GAAGJ,MAAM,CAAElC,qBAAsB,CAAC;;AAErD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMuC,sBAAsB,GAAKC,QAAQ,IAC/CpC,kBAAkB,CAAEiC,mBAAoB,CAAC,EAAEI,IAAI,CAC9C,CAAE;EAAEjC;AAAK,CAAC,KAAMA,IAAI,KAAKgC,QAC1B,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,eAAe,GAAGA,CAAE5B,GAAG,EAAE6B,QAAQ,GAAG,EAAE,KAClDA,QAAQ,CAACC,IAAI,CAAIC,OAAO,IAAM/B,GAAG,CAACgC,KAAK,CAAED,OAAQ,CAAE,CAAC;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,qBAAqB,GAAKjC,GAAG,IACzCV,kBAAkB,CAAEiC,mBAAoB,CAAC,EAAEI,IAAI,CAAE,CAAE;EAAEE;AAAS,CAAC,KAC9DD,eAAe,CAAE5B,GAAG,EAAE6B,QAAS,CAChC,CAAC;AAEF,OAAO,MAAMK,eAAe,GAAKC,IAAI,IACpCA,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAAE,6BAA8B,CAAC;AAEvD,OAAO,MAAMC,YAAY,GAAKC,KAAK,IAAM;EACxC;EACA,MAAMC,QAAQ,GAAGD,KAAK,CAACtC,GAAG,IAAIsC,KAAK,CAACE,aAAa;;EAEjD;EACA;EACA,MAAMC,YAAY,gBACjBnB,IAAA;IAAAoB,QAAA,eACCpB,IAAA;MAAKqB,GAAG,EAAGJ,QAAU;MAACK,GAAG,EAAGN,KAAK,CAAC3C,KAAO;MAACkD,KAAK,EAAC;IAAM,CAAE;EAAC,CACvD,CACH;EACD,OAAO1D,cAAc,CAAEsD,YAAa,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,wBAAwB,GAAGA,CACvCC,KAAK,EACLC,qBAAqB,GAAG,CAAC,CAAC,KACtB;EACJ,MAAM;IAAEC,OAAO;IAAElD,UAAU,GAAG,CAAC;EAAE,CAAC,GAAGgD,KAAK;EAC1C,MAAM;IAAE/C,GAAG;IAAEM,gBAAgB;IAAEL,IAAI;IAAE,GAAGiD;EAAe,CAAC,GAAGnD,UAAU;EAErE,IAAK,CAAEC,GAAG,IAAI,CAAEX,YAAY,CAAEkC,mBAAoB,CAAC,EAAG;IACrD;EACD;EAEA,MAAM4B,YAAY,GAAGlB,qBAAqB,CAAEjC,GAAI,CAAC;;EAEjD;EACA;EACA,MAAMoD,gBAAgB,GACrB9C,gBAAgB,KAAK,WAAW,IAAIL,IAAI,KAAKkB,aAAa;EAC3D;EACA;EACA,MAAMkC,oBAAoB,GACzB,CAAED,gBAAgB,IAClBD,YAAY,KACVA,YAAY,CAACpD,UAAU,CAACO,gBAAgB,KAAKA,gBAAgB,IAC9D,CAAEA,gBAAgB,CAAE;EACtB,IAAK+C,oBAAoB,EAAG;IAC3B,OAAOjE,WAAW,CAAEmC,mBAAmB,EAAE;MACxCvB,GAAG;MACH,GAAGkD,cAAc;MACjB,GAAGC,YAAY,CAACpD;IACjB,CAAE,CAAC;EACJ;EAEA,MAAMuD,WAAW,GAAGhE,kBAAkB,CAAEiC,mBAAoB,CAAC,EAAEI,IAAI,CAClE,CAAE;IAAEjC;EAAK,CAAC,KAAMA,IAAI,KAAK,WAC1B,CAAC;;EAED;EACA,IACC,CAAE4D,WAAW,IACb,CAAEL,OAAO,IACT,CAAEf,eAAe,CAAEe,OAAO,CAACd,IAAK,CAAC,IACjCiB,gBAAgB,EACf;IACD;EACD;;EAEA;EACA,OAAOhE,WAAW,CAAEmC,mBAAmB,EAAE;IACxCvB,GAAG;IACH,GAAGsD,WAAW,CAACvD,UAAU;IACzB;IACA;IACA;IACA;IACA;IACA;IACA;IACA,GAAGiD;EACJ,CAAE,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,mBAAmB,GAAKC,kBAAkB,IAAM;EAC5D,IAAK,CAAEA,kBAAkB,EAAG;IAC3B,OAAO,KAAK;EACb;EACA,OAAOtC,aAAa,CAACY,IAAI,CAAE,CAAE;IAAE2B;EAAU,CAAC,KACzCD,kBAAkB,CAACpB,QAAQ,CAAEqB,SAAU,CACxC,CAAC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,wBAAwB,GAAKF,kBAAkB,IAAM;EACjE,IAAK,CAAEA,kBAAkB,EAAG;IAC3B;IACA;IACA;IACA,OAAOA,kBAAkB;EAC1B;EACA,MAAMG,qBAAqB,GAAGzC,aAAa,CAAC0C,MAAM,CACjD,CAAEC,WAAW,EAAE;IAAEJ;EAAU,CAAC,KAAM;IACjCI,WAAW,CAACC,IAAI,CAAEL,SAAU,CAAC;IAC7B,OAAOI,WAAW;EACnB,CAAC,EACD,CAAE,qBAAqB,CACxB,CAAC;EACD,IAAIE,gBAAgB,GAAGP,kBAAkB;EACzC,KAAM,MAAMC,SAAS,IAAIE,qBAAqB,EAAG;IAChDI,gBAAgB,GAAGA,gBAAgB,CAACC,OAAO,CAAEP,SAAS,EAAE,EAAG,CAAC;EAC7D;EACA,OAAOM,gBAAgB,CAACE,IAAI,CAAC,CAAC;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAC5B/B,IAAI,EACJqB,kBAAkB,EAClBjD,eAAe,GAAG,IAAI,EACrB;EACD,IAAK,CAAEA,eAAe,EAAG;IACxB,OAAOmD,wBAAwB,CAAEF,kBAAmB,CAAC;EACtD;EAEA,MAAMW,eAAe,GAAGC,QAAQ,CAACC,cAAc,CAACC,kBAAkB,CAAE,EAAG,CAAC;EACxEH,eAAe,CAACI,IAAI,CAACC,SAAS,GAAGrC,IAAI;EACrC,MAAMsC,MAAM,GAAGN,eAAe,CAACI,IAAI,CAACG,aAAa,CAAE,QAAS,CAAC;;EAE7D;EACA,IAAKD,MAAM,IAAIA,MAAM,CAACE,MAAM,IAAIF,MAAM,CAAC5B,KAAK,EAAG;IAC9C,MAAM+B,WAAW,GAAG,CAAEH,MAAM,CAAC5B,KAAK,GAAG4B,MAAM,CAACE,MAAM,EAAGE,OAAO,CAAE,CAAE,CAAC;IACjE;IACA,KACC,IAAIC,UAAU,GAAG,CAAC,EAClBA,UAAU,GAAG5D,aAAa,CAAC6D,MAAM,EACjCD,UAAU,EAAE,EACX;MACD,MAAME,cAAc,GAAG9D,aAAa,CAAE4D,UAAU,CAAE;MAClD,IAAKF,WAAW,IAAII,cAAc,CAACC,KAAK,EAAG;QAC1C;QACA;QACA,MAAMC,SAAS,GAAGN,WAAW,GAAGI,cAAc,CAACC,KAAK;QACpD,IAAKC,SAAS,GAAG,GAAG,EAAG;UACtB;UACA,OAAOxB,wBAAwB,CAAEF,kBAAmB,CAAC;QACtD;QACA;QACA,OAAOzE,IAAI,CACV2E,wBAAwB,CAAEF,kBAAmB,CAAC,EAC9CwB,cAAc,CAACvB,SAAS,EACxB,qBACD,CAAC;MACF;IACD;EACD;EAEA,OAAOD,kBAAkB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS2B,QAAQA,CAAEnF,GAAG,EAAEoF,SAAS,EAAG;EAC1C,MAAMC,IAAI,gBAAG/D,IAAA;IAAGgE,IAAI,EAAGtF,GAAK;IAAA0C,QAAA,EAAG1C;EAAG,CAAK,CAAC;EACxCoF,SAAS,CACRhG,WAAW,CAAE,gBAAgB,EAAE;IAAEmG,OAAO,EAAEpG,cAAc,CAAEkG,IAAK;EAAE,CAAE,CACpE,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,wBAAwB,GAAGxG,OAAO,CAC9C,CACCiE,OAAO,EACPtD,KAAK,EACL8F,iBAAiB,EACjBC,YAAY,EACZnF,eAAe,GAAG,IAAI,KAClB;EACJ,IAAK,CAAE0C,OAAO,EAAG;IAChB,OAAO,CAAC,CAAC;EACV;EAEA,MAAMlD,UAAU,GAAG,CAAC,CAAC;EACrB;EACA,IAAI;IAAEE,IAAI,GAAG;EAAO,CAAC,GAAGgD,OAAO;EAC/B;EACA;EACA,MAAM;IAAEd,IAAI;IAAEwD,aAAa,EAAEC;EAAa,CAAC,GAAG3C,OAAO;EACrD,MAAM3C,gBAAgB,GAAGkB,SAAS,CACjC,CAAEoE,YAAY,IAAIjG,KAAK,EAAGkG,WAAW,CAAC,CACvC,CAAC;EAED,IAAK3D,eAAe,CAAEC,IAAK,CAAC,EAAG;IAC9BlC,IAAI,GAAGkB,aAAa;EACrB;EAEA,IAAKgB,IAAI,IAAI,OAAO,KAAKlC,IAAI,EAAG;IAC/BF,UAAU,CAACE,IAAI,GAAGA,IAAI;IACtBF,UAAU,CAACO,gBAAgB,GAAGA,gBAAgB;EAC/C;;EAEA;EACA;EACA;EACA,IAAKiD,mBAAmB,CAAEkC,iBAAkB,CAAC,EAAG;IAC/C,OAAO1F,UAAU;EAClB;EAEAA,UAAU,CAAC0D,SAAS,GAAGS,aAAa,CACnC/B,IAAI,EACJsD,iBAAiB,EACjBC,YAAY,IAAInF,eACjB,CAAC;EAED,OAAOR,UAAU;AAClB,CACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM+F,8BAA8B,GAAGA,CAC7CC,iBAAiB,EACjB9C,OAAO,EACPtD,KAAK,EACL+F,YAAY,KACR;EACJ,MAAM;IAAEnF,eAAe;IAAEkD;EAAU,CAAC,GAAGsC,iBAAiB;EAExD,OAAO;IACN,GAAGA,iBAAiB;IACpB,GAAGP,wBAAwB,CAC1BvC,OAAO,EACPtD,KAAK,EACL8D,SAAS,EACTiC,YAAY,EACZnF,eACD;EACD,CAAC;AACF,CAAC","ignoreList":[]}