{"version":3,"names":["memo","useMemo","SandBox","jsx","_jsx","observeAndResizeJS","WpEmbedPreview","html","rest","wpEmbedHtml","doc","window","DOMParser","parseFromString","iframe","querySelector","removeAttribute","blockQuote","innerHTML","body","customJS"],"sources":["@wordpress/block-library/src/embed/wp-embed-preview.native.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { memo, useMemo } from '@wordpress/element';\r\nimport { SandBox } from '@wordpress/components';\r\n\r\n/**\r\n * Checks for WordPress embed events signaling the height change when iframe\r\n * content loads or iframe's window is resized.  The event is sent from\r\n * WordPress core via the window.postMessage API.\r\n *\r\n * References:\r\n * window.postMessage: https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\r\n * WordPress core embed-template on load: https://github.com/WordPress/WordPress/blob/HEAD/wp-includes/js/wp-embed-template.js#L143\r\n * WordPress core embed-template on resize: https://github.com/WordPress/WordPress/blob/HEAD/wp-includes/js/wp-embed-template.js#L187\r\n */\r\nconst observeAndResizeJS = `\r\n    ( function() {\r\n        if ( ! document.body || ! window.parent ) {\r\n            return;\r\n        }\r\n\r\n        function sendResize( { data: { secret, message, value } = {} } ) {\r\n            if (\r\n                [ secret, message, value ].some(\r\n                    ( attribute ) => ! attribute\r\n                ) ||\r\n                message !== 'height'\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            document\r\n                .querySelectorAll( 'iframe[data-secret=\"' + secret + '\"' )\r\n                .forEach( ( iframe ) => {  \r\n                    if ( +iframe.height !== value ) {\r\n                        iframe.height = value;\r\n                    }\r\n                } );\r\n\r\n            // The function postMessage is exposed by the react-native-webview library \r\n            // to communicate between React Native and the WebView, in this case, \r\n            // we use it for notifying resize changes.\r\n            window.ReactNativeWebView.postMessage(JSON.stringify( {\r\n                action: 'resize',\r\n                height: value,\r\n            }));\r\n        }\r\n\r\n        window.addEventListener( 'message', sendResize );\r\n} )();`;\r\n\r\nfunction WpEmbedPreview( { html, ...rest } ) {\r\n\tconst wpEmbedHtml = useMemo( () => {\r\n\t\tconst doc = new window.DOMParser().parseFromString( html, 'text/html' );\r\n\t\tconst iframe = doc.querySelector( 'iframe' );\r\n\r\n\t\tif ( iframe ) {\r\n\t\t\tiframe.removeAttribute( 'style' );\r\n\t\t}\r\n\r\n\t\tconst blockQuote = doc.querySelector( 'blockquote' );\r\n\r\n\t\tif ( blockQuote ) {\r\n\t\t\tblockQuote.innerHTML = '';\r\n\t\t}\r\n\r\n\t\treturn doc.body.innerHTML;\r\n\t}, [ html ] );\r\n\r\n\treturn (\r\n\t\t<SandBox\r\n\t\t\tcustomJS={ observeAndResizeJS }\r\n\t\t\thtml={ wpEmbedHtml }\r\n\t\t\t{ ...rest }\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nexport default memo( WpEmbedPreview );\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,IAAI,EAAEC,OAAO,QAAQ,oBAAoB;AAClD,SAASC,OAAO,QAAQ,uBAAuB;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA,SAAAC,GAAA,IAAAC,IAAA;AAUA,MAAMC,kBAAkB,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AAEP,SAASC,cAAcA,CAAE;EAAEC,IAAI;EAAE,GAAGC;AAAK,CAAC,EAAG;EAC5C,MAAMC,WAAW,GAAGR,OAAO,CAAE,MAAM;IAClC,MAAMS,GAAG,GAAG,IAAIC,MAAM,CAACC,SAAS,CAAC,CAAC,CAACC,eAAe,CAAEN,IAAI,EAAE,WAAY,CAAC;IACvE,MAAMO,MAAM,GAAGJ,GAAG,CAACK,aAAa,CAAE,QAAS,CAAC;IAE5C,IAAKD,MAAM,EAAG;MACbA,MAAM,CAACE,eAAe,CAAE,OAAQ,CAAC;IAClC;IAEA,MAAMC,UAAU,GAAGP,GAAG,CAACK,aAAa,CAAE,YAAa,CAAC;IAEpD,IAAKE,UAAU,EAAG;MACjBA,UAAU,CAACC,SAAS,GAAG,EAAE;IAC1B;IAEA,OAAOR,GAAG,CAACS,IAAI,CAACD,SAAS;EAC1B,CAAC,EAAE,CAAEX,IAAI,CAAG,CAAC;EAEb,oBACCH,IAAA,CAACF,OAAO;IACPkB,QAAQ,EAAGf,kBAAoB;IAC/BE,IAAI,EAAGE,WAAa;IAAA,GACfD;EAAI,CACT,CAAC;AAEJ;AAEA,eAAeR,IAAI,CAAEM,cAAe,CAAC","ignoreList":[]}