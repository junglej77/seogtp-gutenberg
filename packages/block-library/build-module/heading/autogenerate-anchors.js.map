{"version":3,"names":["removeAccents","anchors","getTextWithoutMarkup","text","dummyElement","document","createElement","innerHTML","innerText","getSlug","content","replace","toLowerCase","generateAnchor","clientId","slug","anchor","i","Object","values","includes","setAnchor"],"sources":["@wordpress/block-library/src/heading/autogenerate-anchors.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport removeAccents from 'remove-accents';\r\n\r\n/**\r\n * Object map tracking anchors.\r\n *\r\n * @type {Record<string, string | null>}\r\n */\r\nconst anchors = {};\r\n\r\n/**\r\n * Returns the text without markup.\r\n *\r\n * @param {string} text The text.\r\n *\r\n * @return {string} The text without markup.\r\n */\r\nconst getTextWithoutMarkup = ( text ) => {\r\n\tconst dummyElement = document.createElement( 'div' );\r\n\tdummyElement.innerHTML = text;\r\n\treturn dummyElement.innerText;\r\n};\r\n\r\n/**\r\n * Get the slug from the content.\r\n *\r\n * @param {string} content The block content.\r\n *\r\n * @return {string} Returns the slug.\r\n */\r\nconst getSlug = ( content ) => {\r\n\t// Get the slug.\r\n\treturn (\r\n\t\tremoveAccents( getTextWithoutMarkup( content ) )\r\n\t\t\t// Convert anything that's not a letter or number to a hyphen.\r\n\t\t\t.replace( /[^\\p{L}\\p{N}]+/gu, '-' )\r\n\t\t\t// Convert to lowercase\r\n\t\t\t.toLowerCase()\r\n\t\t\t// Remove any remaining leading or trailing hyphens.\r\n\t\t\t.replace( /(^-+)|(-+$)/g, '' )\r\n\t);\r\n};\r\n\r\n/**\r\n * Generate the anchor for a heading.\r\n *\r\n * @param {string} clientId The block ID.\r\n * @param {string} content  The block content.\r\n *\r\n * @return {string|null} Return the heading anchor.\r\n */\r\nexport const generateAnchor = ( clientId, content ) => {\r\n\tconst slug = getSlug( content );\r\n\t// If slug is empty, then return null.\r\n\t// Returning null instead of an empty string allows us to check again when the content changes.\r\n\tif ( '' === slug ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tdelete anchors[ clientId ];\r\n\r\n\tlet anchor = slug;\r\n\tlet i = 0;\r\n\r\n\t// If the anchor already exists in another heading, append -i.\r\n\twhile ( Object.values( anchors ).includes( anchor ) ) {\r\n\t\ti += 1;\r\n\t\tanchor = slug + '-' + i;\r\n\t}\r\n\r\n\treturn anchor;\r\n};\r\n\r\n/**\r\n * Set the anchor for a heading.\r\n *\r\n * @param {string}      clientId The block ID.\r\n * @param {string|null} anchor   The block anchor.\r\n */\r\nexport const setAnchor = ( clientId, anchor ) => {\r\n\tanchors[ clientId ] = anchor;\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,aAAa,MAAM,gBAAgB;;AAE1C;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,CAAC,CAAC;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAKC,IAAI,IAAM;EACxC,MAAMC,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAE,KAAM,CAAC;EACpDF,YAAY,CAACG,SAAS,GAAGJ,IAAI;EAC7B,OAAOC,YAAY,CAACI,SAAS;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAKC,OAAO,IAAM;EAC9B;EACA,OACCV,aAAa,CAAEE,oBAAoB,CAAEQ,OAAQ,CAAE;EAC9C;EAAA,CACCC,OAAO,CAAE,kBAAkB,EAAE,GAAI;EAClC;EAAA,CACCC,WAAW,CAAC;EACb;EAAA,CACCD,OAAO,CAAE,cAAc,EAAE,EAAG,CAAC;AAEjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,cAAc,GAAGA,CAAEC,QAAQ,EAAEJ,OAAO,KAAM;EACtD,MAAMK,IAAI,GAAGN,OAAO,CAAEC,OAAQ,CAAC;EAC/B;EACA;EACA,IAAK,EAAE,KAAKK,IAAI,EAAG;IAClB,OAAO,IAAI;EACZ;EAEA,OAAOd,OAAO,CAAEa,QAAQ,CAAE;EAE1B,IAAIE,MAAM,GAAGD,IAAI;EACjB,IAAIE,CAAC,GAAG,CAAC;;EAET;EACA,OAAQC,MAAM,CAACC,MAAM,CAAElB,OAAQ,CAAC,CAACmB,QAAQ,CAAEJ,MAAO,CAAC,EAAG;IACrDC,CAAC,IAAI,CAAC;IACND,MAAM,GAAGD,IAAI,GAAG,GAAG,GAAGE,CAAC;EACxB;EAEA,OAAOD,MAAM;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,SAAS,GAAGA,CAAEP,QAAQ,EAAEE,MAAM,KAAM;EAChDf,OAAO,CAAEa,QAAQ,CAAE,GAAGE,MAAM;AAC7B,CAAC","ignoreList":[]}