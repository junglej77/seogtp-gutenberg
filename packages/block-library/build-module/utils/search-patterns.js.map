{"version":3,"names":["removeAccents","normalizeSearchInput","input","trim","toLowerCase","getPatternSearchRank","pattern","searchValue","normalizedSearchValue","normalizedTitle","title","rank","startsWith","searchTerms","split","hasMatchedTerms","every","searchTerm","includes","searchPatterns","patterns","rankedPatterns","map","filter","sort","rank1","rank2"],"sources":["@wordpress/block-library/src/utils/search-patterns.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport removeAccents from 'remove-accents';\r\n\r\n/**\r\n * Sanitizes the search input string.\r\n *\r\n * @param {string} input The search input to normalize.\r\n *\r\n * @return {string} The normalized search input.\r\n */\r\nexport function normalizeSearchInput( input = '' ) {\r\n\t// Disregard diacritics.\r\n\tinput = removeAccents( input );\r\n\r\n\t// Trim & Lowercase.\r\n\tinput = input.trim().toLowerCase();\r\n\r\n\treturn input;\r\n}\r\n\r\n/**\r\n * Get the search rank for a given pattern and a specific search term.\r\n *\r\n * @param {Object} pattern     Pattern to rank\r\n * @param {string} searchValue Search term\r\n * @return {number} A pattern search rank\r\n */\r\nexport function getPatternSearchRank( pattern, searchValue ) {\r\n\tconst normalizedSearchValue = normalizeSearchInput( searchValue );\r\n\tconst normalizedTitle = normalizeSearchInput( pattern.title );\r\n\r\n\tlet rank = 0;\r\n\r\n\tif ( normalizedSearchValue === normalizedTitle ) {\r\n\t\trank += 30;\r\n\t} else if ( normalizedTitle.startsWith( normalizedSearchValue ) ) {\r\n\t\trank += 20;\r\n\t} else {\r\n\t\tconst searchTerms = normalizedSearchValue.split( ' ' );\r\n\t\tconst hasMatchedTerms = searchTerms.every( ( searchTerm ) =>\r\n\t\t\tnormalizedTitle.includes( searchTerm )\r\n\t\t);\r\n\r\n\t\t// Prefer pattern with every search word in the title.\r\n\t\tif ( hasMatchedTerms ) {\r\n\t\t\trank += 10;\r\n\t\t}\r\n\t}\r\n\r\n\treturn rank;\r\n}\r\n\r\n/**\r\n * Filters an pattern list given a search term.\r\n *\r\n * @param {Array}  patterns    Item list\r\n * @param {string} searchValue Search input.\r\n *\r\n * @return {Array} Filtered pattern list.\r\n */\r\nexport function searchPatterns( patterns = [], searchValue = '' ) {\r\n\tif ( ! searchValue ) {\r\n\t\treturn patterns;\r\n\t}\r\n\r\n\tconst rankedPatterns = patterns\r\n\t\t.map( ( pattern ) => {\r\n\t\t\treturn [ pattern, getPatternSearchRank( pattern, searchValue ) ];\r\n\t\t} )\r\n\t\t.filter( ( [ , rank ] ) => rank > 0 );\r\n\r\n\trankedPatterns.sort( ( [ , rank1 ], [ , rank2 ] ) => rank2 - rank1 );\r\n\treturn rankedPatterns.map( ( [ pattern ] ) => pattern );\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,aAAa,MAAM,gBAAgB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAAEC,KAAK,GAAG,EAAE,EAAG;EAClD;EACAA,KAAK,GAAGF,aAAa,CAAEE,KAAM,CAAC;;EAE9B;EACAA,KAAK,GAAGA,KAAK,CAACC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAElC,OAAOF,KAAK;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,oBAAoBA,CAAEC,OAAO,EAAEC,WAAW,EAAG;EAC5D,MAAMC,qBAAqB,GAAGP,oBAAoB,CAAEM,WAAY,CAAC;EACjE,MAAME,eAAe,GAAGR,oBAAoB,CAAEK,OAAO,CAACI,KAAM,CAAC;EAE7D,IAAIC,IAAI,GAAG,CAAC;EAEZ,IAAKH,qBAAqB,KAAKC,eAAe,EAAG;IAChDE,IAAI,IAAI,EAAE;EACX,CAAC,MAAM,IAAKF,eAAe,CAACG,UAAU,CAAEJ,qBAAsB,CAAC,EAAG;IACjEG,IAAI,IAAI,EAAE;EACX,CAAC,MAAM;IACN,MAAME,WAAW,GAAGL,qBAAqB,CAACM,KAAK,CAAE,GAAI,CAAC;IACtD,MAAMC,eAAe,GAAGF,WAAW,CAACG,KAAK,CAAIC,UAAU,IACtDR,eAAe,CAACS,QAAQ,CAAED,UAAW,CACtC,CAAC;;IAED;IACA,IAAKF,eAAe,EAAG;MACtBJ,IAAI,IAAI,EAAE;IACX;EACD;EAEA,OAAOA,IAAI;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,cAAcA,CAAEC,QAAQ,GAAG,EAAE,EAAEb,WAAW,GAAG,EAAE,EAAG;EACjE,IAAK,CAAEA,WAAW,EAAG;IACpB,OAAOa,QAAQ;EAChB;EAEA,MAAMC,cAAc,GAAGD,QAAQ,CAC7BE,GAAG,CAAIhB,OAAO,IAAM;IACpB,OAAO,CAAEA,OAAO,EAAED,oBAAoB,CAAEC,OAAO,EAAEC,WAAY,CAAC,CAAE;EACjE,CAAE,CAAC,CACFgB,MAAM,CAAE,CAAE,GAAIZ,IAAI,CAAE,KAAMA,IAAI,GAAG,CAAE,CAAC;EAEtCU,cAAc,CAACG,IAAI,CAAE,CAAE,GAAIC,KAAK,CAAE,EAAE,GAAIC,KAAK,CAAE,KAAMA,KAAK,GAAGD,KAAM,CAAC;EACpE,OAAOJ,cAAc,CAACC,GAAG,CAAE,CAAE,CAAEhB,OAAO,CAAE,KAAMA,OAAQ,CAAC;AACxD","ignoreList":[]}