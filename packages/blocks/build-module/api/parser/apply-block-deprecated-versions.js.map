{"version":3,"names":["DEPRECATED_ENTRY_KEYS","validateBlock","getBlockAttributes","applyBuiltInValidationFixes","omit","stubFalse","applyBlockDeprecatedVersions","block","rawBlock","blockType","parsedAttributes","attrs","deprecated","deprecatedDefinitions","length","i","isEligible","isValid","innerBlocks","blockNode","deprecatedBlockType","Object","assign","migratedBlock","attributes","originalContent","migratedInnerBlocks","migratedAttributes","migrate","migrated","Array","isArray","validationIssues"],"sources":["@wordpress/blocks/src/api/parser/apply-block-deprecated-versions.js"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport { DEPRECATED_ENTRY_KEYS } from '../constants';\r\nimport { validateBlock } from '../validation';\r\nimport { getBlockAttributes } from './get-block-attributes';\r\nimport { applyBuiltInValidationFixes } from './apply-built-in-validation-fixes';\r\nimport { omit } from '../utils';\r\n\r\n/**\r\n * Function that takes no arguments and always returns false.\r\n *\r\n * @return {boolean} Always returns false.\r\n */\r\nfunction stubFalse() {\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Given a block object, returns a new copy of the block with any applicable\r\n * deprecated migrations applied, or the original block if it was both valid\r\n * and no eligible migrations exist.\r\n *\r\n * @param {import(\".\").WPBlock}                   block     Parsed and invalid block object.\r\n * @param {import(\".\").WPRawBlock}                rawBlock  Raw block object.\r\n * @param {import('../registration').WPBlockType} blockType Block type. This is normalize not necessary and\r\n *                                                          can be inferred from the block name,\r\n *                                                          but it's here for performance reasons.\r\n *\r\n * @return {import(\".\").WPBlock} Migrated block object.\r\n */\r\nexport function applyBlockDeprecatedVersions( block, rawBlock, blockType ) {\r\n\tconst parsedAttributes = rawBlock.attrs;\r\n\tconst { deprecated: deprecatedDefinitions } = blockType;\r\n\t// Bail early if there are no registered deprecations to be handled.\r\n\tif ( ! deprecatedDefinitions || ! deprecatedDefinitions.length ) {\r\n\t\treturn block;\r\n\t}\r\n\r\n\t// By design, blocks lack any sort of version tracking. Instead, to process\r\n\t// outdated content the system operates a queue out of all the defined\r\n\t// attribute shapes and tries each definition until the input produces a\r\n\t// valid result. This mechanism seeks to avoid polluting the user-space with\r\n\t// machine-specific code. An invalid block is thus a block that could not be\r\n\t// matched successfully with any of the registered deprecation definitions.\r\n\tfor ( let i = 0; i < deprecatedDefinitions.length; i++ ) {\r\n\t\t// A block can opt into a migration even if the block is valid by\r\n\t\t// defining `isEligible` on its deprecation. If the block is both valid\r\n\t\t// and does not opt to migrate, skip.\r\n\t\tconst { isEligible = stubFalse } = deprecatedDefinitions[ i ];\r\n\t\tif (\r\n\t\t\tblock.isValid &&\r\n\t\t\t! isEligible( parsedAttributes, block.innerBlocks, {\r\n\t\t\t\tblockNode: rawBlock,\r\n\t\t\t\tblock,\r\n\t\t\t} )\r\n\t\t) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\t// Block type properties which could impact either serialization or\r\n\t\t// parsing are not considered in the deprecated block type by default,\r\n\t\t// and must be explicitly provided.\r\n\t\tconst deprecatedBlockType = Object.assign(\r\n\t\t\tomit( blockType, DEPRECATED_ENTRY_KEYS ),\r\n\t\t\tdeprecatedDefinitions[ i ]\r\n\t\t);\r\n\r\n\t\tlet migratedBlock = {\r\n\t\t\t...block,\r\n\t\t\tattributes: getBlockAttributes(\r\n\t\t\t\tdeprecatedBlockType,\r\n\t\t\t\tblock.originalContent,\r\n\t\t\t\tparsedAttributes\r\n\t\t\t),\r\n\t\t};\r\n\r\n\t\t// Ignore the deprecation if it produces a block which is not valid.\r\n\t\tlet [ isValid ] = validateBlock( migratedBlock, deprecatedBlockType );\r\n\r\n\t\t// If the migrated block is not valid initially, try the built-in fixes.\r\n\t\tif ( ! isValid ) {\r\n\t\t\tmigratedBlock = applyBuiltInValidationFixes(\r\n\t\t\t\tmigratedBlock,\r\n\t\t\t\tdeprecatedBlockType\r\n\t\t\t);\r\n\t\t\t[ isValid ] = validateBlock( migratedBlock, deprecatedBlockType );\r\n\t\t}\r\n\r\n\t\t// An invalid block does not imply incorrect HTML but the fact block\r\n\t\t// source information could be lost on re-serialization.\r\n\t\tif ( ! isValid ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tlet migratedInnerBlocks = migratedBlock.innerBlocks;\r\n\t\tlet migratedAttributes = migratedBlock.attributes;\r\n\r\n\t\t// A block may provide custom behavior to assign new attributes and/or\r\n\t\t// inner blocks.\r\n\t\tconst { migrate } = deprecatedBlockType;\r\n\t\tif ( migrate ) {\r\n\t\t\tlet migrated = migrate( migratedAttributes, block.innerBlocks );\r\n\t\t\tif ( ! Array.isArray( migrated ) ) {\r\n\t\t\t\tmigrated = [ migrated ];\r\n\t\t\t}\r\n\r\n\t\t\t[\r\n\t\t\t\tmigratedAttributes = parsedAttributes,\r\n\t\t\t\tmigratedInnerBlocks = block.innerBlocks,\r\n\t\t\t] = migrated;\r\n\t\t}\r\n\r\n\t\tblock = {\r\n\t\t\t...block,\r\n\t\t\tattributes: migratedAttributes,\r\n\t\t\tinnerBlocks: migratedInnerBlocks,\r\n\t\t\tisValid: true,\r\n\t\t\tvalidationIssues: [],\r\n\t\t};\r\n\t}\r\n\r\n\treturn block;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,qBAAqB,QAAQ,cAAc;AACpD,SAASC,aAAa,QAAQ,eAAe;AAC7C,SAASC,kBAAkB,QAAQ,wBAAwB;AAC3D,SAASC,2BAA2B,QAAQ,mCAAmC;AAC/E,SAASC,IAAI,QAAQ,UAAU;;AAE/B;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAAA,EAAG;EACpB,OAAO,KAAK;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,4BAA4BA,CAAEC,KAAK,EAAEC,QAAQ,EAAEC,SAAS,EAAG;EAC1E,MAAMC,gBAAgB,GAAGF,QAAQ,CAACG,KAAK;EACvC,MAAM;IAAEC,UAAU,EAAEC;EAAsB,CAAC,GAAGJ,SAAS;EACvD;EACA,IAAK,CAAEI,qBAAqB,IAAI,CAAEA,qBAAqB,CAACC,MAAM,EAAG;IAChE,OAAOP,KAAK;EACb;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA,KAAM,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,qBAAqB,CAACC,MAAM,EAAEC,CAAC,EAAE,EAAG;IACxD;IACA;IACA;IACA,MAAM;MAAEC,UAAU,GAAGX;IAAU,CAAC,GAAGQ,qBAAqB,CAAEE,CAAC,CAAE;IAC7D,IACCR,KAAK,CAACU,OAAO,IACb,CAAED,UAAU,CAAEN,gBAAgB,EAAEH,KAAK,CAACW,WAAW,EAAE;MAClDC,SAAS,EAAEX,QAAQ;MACnBD;IACD,CAAE,CAAC,EACF;MACD;IACD;;IAEA;IACA;IACA;IACA,MAAMa,mBAAmB,GAAGC,MAAM,CAACC,MAAM,CACxClB,IAAI,CAAEK,SAAS,EAAET,qBAAsB,CAAC,EACxCa,qBAAqB,CAAEE,CAAC,CACzB,CAAC;IAED,IAAIQ,aAAa,GAAG;MACnB,GAAGhB,KAAK;MACRiB,UAAU,EAAEtB,kBAAkB,CAC7BkB,mBAAmB,EACnBb,KAAK,CAACkB,eAAe,EACrBf,gBACD;IACD,CAAC;;IAED;IACA,IAAI,CAAEO,OAAO,CAAE,GAAGhB,aAAa,CAAEsB,aAAa,EAAEH,mBAAoB,CAAC;;IAErE;IACA,IAAK,CAAEH,OAAO,EAAG;MAChBM,aAAa,GAAGpB,2BAA2B,CAC1CoB,aAAa,EACbH,mBACD,CAAC;MACD,CAAEH,OAAO,CAAE,GAAGhB,aAAa,CAAEsB,aAAa,EAAEH,mBAAoB,CAAC;IAClE;;IAEA;IACA;IACA,IAAK,CAAEH,OAAO,EAAG;MAChB;IACD;IAEA,IAAIS,mBAAmB,GAAGH,aAAa,CAACL,WAAW;IACnD,IAAIS,kBAAkB,GAAGJ,aAAa,CAACC,UAAU;;IAEjD;IACA;IACA,MAAM;MAAEI;IAAQ,CAAC,GAAGR,mBAAmB;IACvC,IAAKQ,OAAO,EAAG;MACd,IAAIC,QAAQ,GAAGD,OAAO,CAAED,kBAAkB,EAAEpB,KAAK,CAACW,WAAY,CAAC;MAC/D,IAAK,CAAEY,KAAK,CAACC,OAAO,CAAEF,QAAS,CAAC,EAAG;QAClCA,QAAQ,GAAG,CAAEA,QAAQ,CAAE;MACxB;MAEA,CACCF,kBAAkB,GAAGjB,gBAAgB,EACrCgB,mBAAmB,GAAGnB,KAAK,CAACW,WAAW,CACvC,GAAGW,QAAQ;IACb;IAEAtB,KAAK,GAAG;MACP,GAAGA,KAAK;MACRiB,UAAU,EAAEG,kBAAkB;MAC9BT,WAAW,EAAEQ,mBAAmB;MAChCT,OAAO,EAAE,IAAI;MACbe,gBAAgB,EAAE;IACnB,CAAC;EACF;EAEA,OAAOzB,KAAK;AACb","ignoreList":[]}