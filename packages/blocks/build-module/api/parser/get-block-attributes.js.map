{"version":3,"names":["parse","hpqParse","memoize","applyFilters","RichTextData","attr","html","text","query","node","children","prop","richText","normalizeBlockType","getDefault","toBooleanAttributeMatcher","matcher","value","undefined","isOfType","type","constructor","Object","Array","isArray","isOfTypes","types","some","getBlockAttribute","attributeKey","attributeSchema","innerDOM","commentAttributes","innerHTML","source","parseWithAttributeSchema","isValidByType","isValidByEnum","enum","enumSet","includes","matcherFromSource","sourceConfig","selector","attribute","multiline","__unstablePreserveWhiteSpace","subMatchers","fromEntries","entries","map","key","subSourceConfig","domNode","toLowerCase","console","error","parseHtml","h","getBlockAttributes","blockTypeOrName","attributes","_blockType$attributes","doc","blockType","blockAttributes","schema"],"sources":["@wordpress/blocks/src/api/parser/get-block-attributes.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport { parse as hpqParse } from 'hpq';\r\nimport memoize from 'memize';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { applyFilters } from '@wordpress/hooks';\r\nimport { RichTextData } from '@wordpress/rich-text';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport {\r\n\tattr,\r\n\thtml,\r\n\ttext,\r\n\tquery,\r\n\tnode,\r\n\tchildren,\r\n\tprop,\r\n\trichText,\r\n} from '../matchers';\r\nimport { normalizeBlockType, getDefault } from '../utils';\r\n\r\n/**\r\n * Higher-order hpq matcher which enhances an attribute matcher to return true\r\n * or false depending on whether the original matcher returns undefined. This\r\n * is useful for boolean attributes (e.g. disabled) whose attribute values may\r\n * be technically falsey (empty string), though their mere presence should be\r\n * enough to infer as true.\r\n *\r\n * @param {Function} matcher Original hpq matcher.\r\n *\r\n * @return {Function} Enhanced hpq matcher.\r\n */\r\nexport const toBooleanAttributeMatcher = ( matcher ) => ( value ) =>\r\n\tmatcher( value ) !== undefined;\r\n\r\n/**\r\n * Returns true if value is of the given JSON schema type, or false otherwise.\r\n *\r\n * @see http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.25\r\n *\r\n * @param {*}      value Value to test.\r\n * @param {string} type  Type to test.\r\n *\r\n * @return {boolean} Whether value is of type.\r\n */\r\nexport function isOfType( value, type ) {\r\n\tswitch ( type ) {\r\n\t\tcase 'rich-text':\r\n\t\t\treturn value instanceof RichTextData;\r\n\r\n\t\tcase 'string':\r\n\t\t\treturn typeof value === 'string';\r\n\r\n\t\tcase 'boolean':\r\n\t\t\treturn typeof value === 'boolean';\r\n\r\n\t\tcase 'object':\r\n\t\t\treturn !! value && value.constructor === Object;\r\n\r\n\t\tcase 'null':\r\n\t\t\treturn value === null;\r\n\r\n\t\tcase 'array':\r\n\t\t\treturn Array.isArray( value );\r\n\r\n\t\tcase 'integer':\r\n\t\tcase 'number':\r\n\t\t\treturn typeof value === 'number';\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * Returns true if value is of an array of given JSON schema types, or false\r\n * otherwise.\r\n *\r\n * @see http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.25\r\n *\r\n * @param {*}        value Value to test.\r\n * @param {string[]} types Types to test.\r\n *\r\n * @return {boolean} Whether value is of types.\r\n */\r\nexport function isOfTypes( value, types ) {\r\n\treturn types.some( ( type ) => isOfType( value, type ) );\r\n}\r\n\r\n/**\r\n * Given an attribute key, an attribute's schema, a block's raw content and the\r\n * commentAttributes returns the attribute value depending on its source\r\n * definition of the given attribute key.\r\n *\r\n * @param {string} attributeKey      Attribute key.\r\n * @param {Object} attributeSchema   Attribute's schema.\r\n * @param {Node}   innerDOM          Parsed DOM of block's inner HTML.\r\n * @param {Object} commentAttributes Block's comment attributes.\r\n * @param {string} innerHTML         Raw HTML from block node's innerHTML property.\r\n *\r\n * @return {*} Attribute value.\r\n */\r\nexport function getBlockAttribute(\r\n\tattributeKey,\r\n\tattributeSchema,\r\n\tinnerDOM,\r\n\tcommentAttributes,\r\n\tinnerHTML\r\n) {\r\n\tlet value;\r\n\r\n\tswitch ( attributeSchema.source ) {\r\n\t\t// An undefined source means that it's an attribute serialized to the\r\n\t\t// block's \"comment\".\r\n\t\tcase undefined:\r\n\t\t\tvalue = commentAttributes\r\n\t\t\t\t? commentAttributes[ attributeKey ]\r\n\t\t\t\t: undefined;\r\n\t\t\tbreak;\r\n\t\t// raw source means that it's the original raw block content.\r\n\t\tcase 'raw':\r\n\t\t\tvalue = innerHTML;\r\n\t\t\tbreak;\r\n\t\tcase 'attribute':\r\n\t\tcase 'property':\r\n\t\tcase 'html':\r\n\t\tcase 'text':\r\n\t\tcase 'rich-text':\r\n\t\tcase 'children':\r\n\t\tcase 'node':\r\n\t\tcase 'query':\r\n\t\tcase 'tag':\r\n\t\t\tvalue = parseWithAttributeSchema( innerDOM, attributeSchema );\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tif (\r\n\t\t! isValidByType( value, attributeSchema.type ) ||\r\n\t\t! isValidByEnum( value, attributeSchema.enum )\r\n\t) {\r\n\t\t// Reject the value if it is not valid. Reverting to the undefined\r\n\t\t// value ensures the default is respected, if applicable.\r\n\t\tvalue = undefined;\r\n\t}\r\n\r\n\tif ( value === undefined ) {\r\n\t\tvalue = getDefault( attributeSchema );\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Returns true if value is valid per the given block attribute schema type\r\n * definition, or false otherwise.\r\n *\r\n * @see https://json-schema.org/latest/json-schema-validation.html#rfc.section.6.1.1\r\n *\r\n * @param {*}                       value Value to test.\r\n * @param {?(Array<string>|string)} type  Block attribute schema type.\r\n *\r\n * @return {boolean} Whether value is valid.\r\n */\r\nexport function isValidByType( value, type ) {\r\n\treturn (\r\n\t\ttype === undefined ||\r\n\t\tisOfTypes( value, Array.isArray( type ) ? type : [ type ] )\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns true if value is valid per the given block attribute schema enum\r\n * definition, or false otherwise.\r\n *\r\n * @see https://json-schema.org/latest/json-schema-validation.html#rfc.section.6.1.2\r\n *\r\n * @param {*}      value   Value to test.\r\n * @param {?Array} enumSet Block attribute schema enum.\r\n *\r\n * @return {boolean} Whether value is valid.\r\n */\r\nexport function isValidByEnum( value, enumSet ) {\r\n\treturn ! Array.isArray( enumSet ) || enumSet.includes( value );\r\n}\r\n\r\n/**\r\n * Returns an hpq matcher given a source object.\r\n *\r\n * @param {Object} sourceConfig Attribute Source object.\r\n *\r\n * @return {Function} A hpq Matcher.\r\n */\r\nexport const matcherFromSource = memoize( ( sourceConfig ) => {\r\n\tswitch ( sourceConfig.source ) {\r\n\t\tcase 'attribute': {\r\n\t\t\tlet matcher = attr( sourceConfig.selector, sourceConfig.attribute );\r\n\t\t\tif ( sourceConfig.type === 'boolean' ) {\r\n\t\t\t\tmatcher = toBooleanAttributeMatcher( matcher );\r\n\t\t\t}\r\n\t\t\treturn matcher;\r\n\t\t}\r\n\t\tcase 'html':\r\n\t\t\treturn html( sourceConfig.selector, sourceConfig.multiline );\r\n\t\tcase 'text':\r\n\t\t\treturn text( sourceConfig.selector );\r\n\t\tcase 'rich-text':\r\n\t\t\treturn richText(\r\n\t\t\t\tsourceConfig.selector,\r\n\t\t\t\tsourceConfig.__unstablePreserveWhiteSpace\r\n\t\t\t);\r\n\t\tcase 'children':\r\n\t\t\treturn children( sourceConfig.selector );\r\n\t\tcase 'node':\r\n\t\t\treturn node( sourceConfig.selector );\r\n\t\tcase 'query':\r\n\t\t\tconst subMatchers = Object.fromEntries(\r\n\t\t\t\tObject.entries( sourceConfig.query ).map(\r\n\t\t\t\t\t( [ key, subSourceConfig ] ) => [\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tmatcherFromSource( subSourceConfig ),\r\n\t\t\t\t\t]\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t\treturn query( sourceConfig.selector, subMatchers );\r\n\t\tcase 'tag': {\r\n\t\t\tconst matcher = prop( sourceConfig.selector, 'nodeName' );\r\n\t\t\treturn ( domNode ) => matcher( domNode )?.toLowerCase();\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\t// eslint-disable-next-line no-console\r\n\t\t\tconsole.error( `Unknown source type \"${ sourceConfig.source }\"` );\r\n\t}\r\n} );\r\n\r\n/**\r\n * Parse a HTML string into DOM tree.\r\n *\r\n * @param {string|Node} innerHTML HTML string or already parsed DOM node.\r\n *\r\n * @return {Node} Parsed DOM node.\r\n */\r\nfunction parseHtml( innerHTML ) {\r\n\treturn hpqParse( innerHTML, ( h ) => h );\r\n}\r\n\r\n/**\r\n * Given a block's raw content and an attribute's schema returns the attribute's\r\n * value depending on its source.\r\n *\r\n * @param {string|Node} innerHTML       Block's raw content.\r\n * @param {Object}      attributeSchema Attribute's schema.\r\n *\r\n * @return {*} Attribute value.\r\n */\r\nexport function parseWithAttributeSchema( innerHTML, attributeSchema ) {\r\n\treturn matcherFromSource( attributeSchema )( parseHtml( innerHTML ) );\r\n}\r\n\r\n/**\r\n * Returns the block attributes of a registered block node given its type.\r\n *\r\n * @param {string|Object} blockTypeOrName Block type or name.\r\n * @param {string|Node}   innerHTML       Raw block content.\r\n * @param {?Object}       attributes      Known block attributes (from delimiters).\r\n *\r\n * @return {Object} All block attributes.\r\n */\r\nexport function getBlockAttributes(\r\n\tblockTypeOrName,\r\n\tinnerHTML,\r\n\tattributes = {}\r\n) {\r\n\tconst doc = parseHtml( innerHTML );\r\n\tconst blockType = normalizeBlockType( blockTypeOrName );\r\n\r\n\tconst blockAttributes = Object.fromEntries(\r\n\t\tObject.entries( blockType.attributes ?? {} ).map(\r\n\t\t\t( [ key, schema ] ) => [\r\n\t\t\t\tkey,\r\n\t\t\t\tgetBlockAttribute( key, schema, doc, attributes, innerHTML ),\r\n\t\t\t]\r\n\t\t)\r\n\t);\r\n\r\n\treturn applyFilters(\r\n\t\t'blocks.getBlockAttributes',\r\n\t\tblockAttributes,\r\n\t\tblockType,\r\n\t\tinnerHTML,\r\n\t\tattributes\r\n\t);\r\n}\r\n"],"mappings":"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","ignoreList":[]}