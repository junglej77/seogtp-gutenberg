{"version":3,"names":["parse","grammarParse","autop","getFreeformContentHandlerName","getUnregisteredTypeHandlerName","getBlockType","getSaveContent","validateBlock","createBlock","convertLegacyBlockNameAndAttributes","serializeRawBlock","getBlockAttributes","applyBlockDeprecatedVersions","applyBuiltInValidationFixes","convertLegacyBlocks","rawBlock","correctName","correctedAttributes","blockName","attrs","normalizeRawBlock","options","fallbackBlockName","rawBlockName","rawAttributes","rawInnerBlocks","innerBlocks","rawInnerHTML","innerHTML","trim","__unstableSkipAutop","createMissingBlockType","unregisteredFallbackBlock","originalUndelimitedContent","isCommentDelimited","originalContent","originalName","innerContent","applyBlockValidation","unvalidatedBlock","blockType","isValid","validationIssues","fixedBlock","isFixedValid","parseRawBlock","normalizedBlock","isFallbackBlock","parsedInnerBlocks","map","innerBlock","filter","parsedBlock","validatedBlock","updatedBlock","__unstableBlockSource","__unstableSkipMigrationLogs","console","groupCollapsed","name","info","attributes","groupEnd","forEach","log","args","content","reduce","accumulator","block","push"],"sources":["@wordpress/blocks/src/api/parser/index.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { parse as grammarParse } from '@wordpress/block-serialization-default-parser';\r\nimport { autop } from '@wordpress/autop';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport {\r\n\tgetFreeformContentHandlerName,\r\n\tgetUnregisteredTypeHandlerName,\r\n\tgetBlockType,\r\n} from '../registration';\r\nimport { getSaveContent } from '../serializer';\r\nimport { validateBlock } from '../validation';\r\nimport { createBlock } from '../factory';\r\nimport { convertLegacyBlockNameAndAttributes } from './convert-legacy-block';\r\nimport { serializeRawBlock } from './serialize-raw-block';\r\nimport { getBlockAttributes } from './get-block-attributes';\r\nimport { applyBlockDeprecatedVersions } from './apply-block-deprecated-versions';\r\nimport { applyBuiltInValidationFixes } from './apply-built-in-validation-fixes';\r\n\r\n/**\r\n * The raw structure of a block includes its attributes, inner\r\n * blocks, and inner HTML. It is important to distinguish inner blocks from\r\n * the HTML content of the block as only the latter is relevant for block\r\n * validation and edit operations.\r\n *\r\n * @typedef WPRawBlock\r\n *\r\n * @property {string=}         blockName    Block name\r\n * @property {Object=}         attrs        Block raw or comment attributes.\r\n * @property {string}          innerHTML    HTML content of the block.\r\n * @property {(string|null)[]} innerContent Content without inner blocks.\r\n * @property {WPRawBlock[]}    innerBlocks  Inner Blocks.\r\n */\r\n\r\n/**\r\n * Fully parsed block object.\r\n *\r\n * @typedef WPBlock\r\n *\r\n * @property {string}     name                    Block name\r\n * @property {Object}     attributes              Block raw or comment attributes.\r\n * @property {WPBlock[]}  innerBlocks             Inner Blocks.\r\n * @property {string}     originalContent         Original content of the block before validation fixes.\r\n * @property {boolean}    isValid                 Whether the block is valid.\r\n * @property {Object[]}   validationIssues        Validation issues.\r\n * @property {WPRawBlock} [__unstableBlockSource] Un-processed original copy of block if created through parser.\r\n */\r\n\r\n/**\r\n * @typedef  {Object}  ParseOptions\r\n * @property {boolean?} __unstableSkipMigrationLogs If a block is migrated from a deprecated version, skip logging the migration details.\r\n * @property {boolean?} __unstableSkipAutop         Whether to skip autop when processing freeform content.\r\n */\r\n\r\n/**\r\n * Convert legacy blocks to their canonical form. This function is used\r\n * both in the parser level for previous content and to convert such blocks\r\n * used in Custom Post Types templates.\r\n *\r\n * @param {WPRawBlock} rawBlock\r\n *\r\n * @return {WPRawBlock} The block's name and attributes, changed accordingly if a match was found\r\n */\r\nfunction convertLegacyBlocks( rawBlock ) {\r\n\tconst [ correctName, correctedAttributes ] =\r\n\t\tconvertLegacyBlockNameAndAttributes(\r\n\t\t\trawBlock.blockName,\r\n\t\t\trawBlock.attrs\r\n\t\t);\r\n\treturn {\r\n\t\t...rawBlock,\r\n\t\tblockName: correctName,\r\n\t\tattrs: correctedAttributes,\r\n\t};\r\n}\r\n\r\n/**\r\n * Normalize the raw block by applying the fallback block name if none given,\r\n * sanitize the parsed HTML...\r\n *\r\n * @param {WPRawBlock}    rawBlock The raw block object.\r\n * @param {ParseOptions?} options  Extra options for handling block parsing.\r\n *\r\n * @return {WPRawBlock} The normalized block object.\r\n */\r\nexport function normalizeRawBlock( rawBlock, options ) {\r\n\tconst fallbackBlockName = getFreeformContentHandlerName();\r\n\r\n\t// If the grammar parsing don't produce any block name, use the freeform block.\r\n\tconst rawBlockName = rawBlock.blockName || getFreeformContentHandlerName();\r\n\tconst rawAttributes = rawBlock.attrs || {};\r\n\tconst rawInnerBlocks = rawBlock.innerBlocks || [];\r\n\tlet rawInnerHTML = rawBlock.innerHTML.trim();\r\n\r\n\t// Fallback content may be upgraded from classic content expecting implicit\r\n\t// automatic paragraphs, so preserve them. Assumes wpautop is idempotent,\r\n\t// meaning there are no negative consequences to repeated autop calls.\r\n\tif (\r\n\t\trawBlockName === fallbackBlockName &&\r\n\t\trawBlockName === 'core/freeform' &&\r\n\t\t! options?.__unstableSkipAutop\r\n\t) {\r\n\t\trawInnerHTML = autop( rawInnerHTML ).trim();\r\n\t}\r\n\r\n\treturn {\r\n\t\t...rawBlock,\r\n\t\tblockName: rawBlockName,\r\n\t\tattrs: rawAttributes,\r\n\t\tinnerHTML: rawInnerHTML,\r\n\t\tinnerBlocks: rawInnerBlocks,\r\n\t};\r\n}\r\n\r\n/**\r\n * Uses the \"unregistered blockType\" to create a block object.\r\n *\r\n * @param {WPRawBlock} rawBlock block.\r\n *\r\n * @return {WPRawBlock} The unregistered block object.\r\n */\r\nfunction createMissingBlockType( rawBlock ) {\r\n\tconst unregisteredFallbackBlock =\r\n\t\tgetUnregisteredTypeHandlerName() || getFreeformContentHandlerName();\r\n\r\n\t// Preserve undelimited content for use by the unregistered type\r\n\t// handler. A block node's `innerHTML` isn't enough, as that field only\r\n\t// carries the block's own HTML and not its nested blocks.\r\n\tconst originalUndelimitedContent = serializeRawBlock( rawBlock, {\r\n\t\tisCommentDelimited: false,\r\n\t} );\r\n\r\n\t// Preserve full block content for use by the unregistered type\r\n\t// handler, block boundaries included.\r\n\tconst originalContent = serializeRawBlock( rawBlock, {\r\n\t\tisCommentDelimited: true,\r\n\t} );\r\n\r\n\treturn {\r\n\t\tblockName: unregisteredFallbackBlock,\r\n\t\tattrs: {\r\n\t\t\toriginalName: rawBlock.blockName,\r\n\t\t\toriginalContent,\r\n\t\t\toriginalUndelimitedContent,\r\n\t\t},\r\n\t\tinnerHTML: rawBlock.blockName ? originalContent : rawBlock.innerHTML,\r\n\t\tinnerBlocks: rawBlock.innerBlocks,\r\n\t\tinnerContent: rawBlock.innerContent,\r\n\t};\r\n}\r\n\r\n/**\r\n * Validates a block and wraps with validation meta.\r\n *\r\n * The name here is regrettable but `validateBlock` is already taken.\r\n *\r\n * @param {WPBlock}                               unvalidatedBlock\r\n * @param {import('../registration').WPBlockType} blockType\r\n * @return {WPBlock}                              validated block, with auto-fixes if initially invalid\r\n */\r\nfunction applyBlockValidation( unvalidatedBlock, blockType ) {\r\n\t// Attempt to validate the block.\r\n\tconst [ isValid ] = validateBlock( unvalidatedBlock, blockType );\r\n\r\n\tif ( isValid ) {\r\n\t\treturn { ...unvalidatedBlock, isValid, validationIssues: [] };\r\n\t}\r\n\r\n\t// If the block is invalid, attempt some built-in fixes\r\n\t// like custom classNames handling.\r\n\tconst fixedBlock = applyBuiltInValidationFixes(\r\n\t\tunvalidatedBlock,\r\n\t\tblockType\r\n\t);\r\n\t// Attempt to validate the block once again after the built-in fixes.\r\n\tconst [ isFixedValid, validationIssues ] = validateBlock(\r\n\t\tfixedBlock,\r\n\t\tblockType\r\n\t);\r\n\r\n\treturn { ...fixedBlock, isValid: isFixedValid, validationIssues };\r\n}\r\n\r\n/**\r\n * Given a raw block returned by grammar parsing, returns a fully parsed block.\r\n *\r\n * @param {WPRawBlock}   rawBlock The raw block object.\r\n * @param {ParseOptions} options  Extra options for handling block parsing.\r\n *\r\n * @return {WPBlock | undefined} Fully parsed block.\r\n */\r\nexport function parseRawBlock( rawBlock, options ) {\r\n\tlet normalizedBlock = normalizeRawBlock( rawBlock, options );\r\n\r\n\t// During the lifecycle of the project, we renamed some old blocks\r\n\t// and transformed others to new blocks. To avoid breaking existing content,\r\n\t// we added this function to properly parse the old content.\r\n\tnormalizedBlock = convertLegacyBlocks( normalizedBlock );\r\n\r\n\t// Try finding the type for known block name.\r\n\tlet blockType = getBlockType( normalizedBlock.blockName );\r\n\r\n\t// If not blockType is found for the specified name, fallback to the \"unregistedBlockType\".\r\n\tif ( ! blockType ) {\r\n\t\tnormalizedBlock = createMissingBlockType( normalizedBlock );\r\n\t\tblockType = getBlockType( normalizedBlock.blockName );\r\n\t}\r\n\r\n\t// If it's an empty freeform block or there's no blockType (no missing block handler)\r\n\t// Then, just ignore the block.\r\n\t// It might be a good idea to throw a warning here.\r\n\t// TODO: I'm unsure about the unregisteredFallbackBlock check,\r\n\t// it might ignore some dynamic unregistered third party blocks wrongly.\r\n\tconst isFallbackBlock =\r\n\t\tnormalizedBlock.blockName === getFreeformContentHandlerName() ||\r\n\t\tnormalizedBlock.blockName === getUnregisteredTypeHandlerName();\r\n\tif ( ! blockType || ( ! normalizedBlock.innerHTML && isFallbackBlock ) ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Parse inner blocks recursively.\r\n\tconst parsedInnerBlocks = normalizedBlock.innerBlocks\r\n\t\t.map( ( innerBlock ) => parseRawBlock( innerBlock, options ) )\r\n\t\t// See https://github.com/WordPress/gutenberg/pull/17164.\r\n\t\t.filter( ( innerBlock ) => !! innerBlock );\r\n\r\n\t// Get the fully parsed block.\r\n\tconst parsedBlock = createBlock(\r\n\t\tnormalizedBlock.blockName,\r\n\t\tgetBlockAttributes(\r\n\t\t\tblockType,\r\n\t\t\tnormalizedBlock.innerHTML,\r\n\t\t\tnormalizedBlock.attrs\r\n\t\t),\r\n\t\tparsedInnerBlocks\r\n\t);\r\n\tparsedBlock.originalContent = normalizedBlock.innerHTML;\r\n\r\n\tconst validatedBlock = applyBlockValidation( parsedBlock, blockType );\r\n\tconst { validationIssues } = validatedBlock;\r\n\r\n\t// Run the block deprecation and migrations.\r\n\t// This is performed on both invalid and valid blocks because\r\n\t// migration using the `migrate` functions should run even\r\n\t// if the output is deemed valid.\r\n\tconst updatedBlock = applyBlockDeprecatedVersions(\r\n\t\tvalidatedBlock,\r\n\t\tnormalizedBlock,\r\n\t\tblockType\r\n\t);\r\n\r\n\tif ( ! updatedBlock.isValid ) {\r\n\t\t// Preserve the original unprocessed version of the block\r\n\t\t// that we received (no fixes, no deprecations) so that\r\n\t\t// we can save it as close to exactly the same way as\r\n\t\t// we loaded it. This is important to avoid corruption\r\n\t\t// and data loss caused by block implementations trying\r\n\t\t// to process data that isn't fully recognized.\r\n\t\tupdatedBlock.__unstableBlockSource = rawBlock;\r\n\t}\r\n\r\n\tif (\r\n\t\t! validatedBlock.isValid &&\r\n\t\tupdatedBlock.isValid &&\r\n\t\t! options?.__unstableSkipMigrationLogs\r\n\t) {\r\n\t\t/* eslint-disable no-console */\r\n\t\tconsole.groupCollapsed( 'Updated Block: %s', blockType.name );\r\n\t\tconsole.info(\r\n\t\t\t'Block successfully updated for `%s` (%o).\\n\\nNew content generated by `save` function:\\n\\n%s\\n\\nContent retrieved from post body:\\n\\n%s',\r\n\t\t\tblockType.name,\r\n\t\t\tblockType,\r\n\t\t\tgetSaveContent( blockType, updatedBlock.attributes ),\r\n\t\t\tupdatedBlock.originalContent\r\n\t\t);\r\n\t\tconsole.groupEnd();\r\n\t\t/* eslint-enable no-console */\r\n\t} else if ( ! validatedBlock.isValid && ! updatedBlock.isValid ) {\r\n\t\tvalidationIssues.forEach( ( { log, args } ) => log( ...args ) );\r\n\t}\r\n\r\n\treturn updatedBlock;\r\n}\r\n\r\n/**\r\n * Utilizes an optimized token-driven parser based on the Gutenberg grammar spec\r\n * defined through a parsing expression grammar to take advantage of the regular\r\n * cadence provided by block delimiters -- composed syntactically through HTML\r\n * comments -- which, given a general HTML document as an input, returns a block\r\n * list array representation.\r\n *\r\n * This is a recursive-descent parser that scans linearly once through the input\r\n * document. Instead of directly recursing it utilizes a trampoline mechanism to\r\n * prevent stack overflow. This initial pass is mainly interested in separating\r\n * and isolating the blocks serialized in the document and manifestly not in the\r\n * content within the blocks.\r\n *\r\n * @see\r\n * https://developer.wordpress.org/block-editor/packages/packages-block-serialization-default-parser/\r\n *\r\n * @param {string}       content The post content.\r\n * @param {ParseOptions} options Extra options for handling block parsing.\r\n *\r\n * @return {Array} Block list.\r\n */\r\nexport default function parse( content, options ) {\r\n\treturn grammarParse( content ).reduce( ( accumulator, rawBlock ) => {\r\n\t\tconst block = parseRawBlock( rawBlock, options );\r\n\t\tif ( block ) {\r\n\t\t\taccumulator.push( block );\r\n\t\t}\r\n\t\treturn accumulator;\r\n\t}, [] );\r\n}\r\n"],"mappings":"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","ignoreList":[]}