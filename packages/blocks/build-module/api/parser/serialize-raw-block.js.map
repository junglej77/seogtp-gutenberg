{"version":3,"names":["getCommentDelimitedContent","serializeRawBlock","rawBlock","options","isCommentDelimited","blockName","attrs","innerBlocks","innerContent","childIndex","content","map","item","join","replace","trim"],"sources":["@wordpress/blocks/src/api/parser/serialize-raw-block.js"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport { getCommentDelimitedContent } from '../serializer';\r\n\r\n/**\r\n * @typedef {Object}   Options                   Serialization options.\r\n * @property {boolean} [isCommentDelimited=true] Whether to output HTML comments around blocks.\r\n */\r\n\r\n/** @typedef {import(\"./\").WPRawBlock} WPRawBlock */\r\n\r\n/**\r\n * Serializes a block node into the native HTML-comment-powered block format.\r\n * CAVEAT: This function is intended for re-serializing blocks as parsed by\r\n * valid parsers and skips any validation steps. This is NOT a generic\r\n * serialization function for in-memory blocks. For most purposes, see the\r\n * following functions available in the `@wordpress/blocks` package:\r\n *\r\n * @see serializeBlock\r\n * @see serialize\r\n *\r\n * For more on the format of block nodes as returned by valid parsers:\r\n *\r\n * @see `@wordpress/block-serialization-default-parser` package\r\n * @see `@wordpress/block-serialization-spec-parser` package\r\n *\r\n * @param {WPRawBlock} rawBlock     A block node as returned by a valid parser.\r\n * @param {Options}    [options={}] Serialization options.\r\n *\r\n * @return {string} An HTML string representing a block.\r\n */\r\nexport function serializeRawBlock( rawBlock, options = {} ) {\r\n\tconst { isCommentDelimited = true } = options;\r\n\tconst {\r\n\t\tblockName,\r\n\t\tattrs = {},\r\n\t\tinnerBlocks = [],\r\n\t\tinnerContent = [],\r\n\t} = rawBlock;\r\n\r\n\tlet childIndex = 0;\r\n\tconst content = innerContent\r\n\t\t.map( ( item ) =>\r\n\t\t\t// `null` denotes a nested block, otherwise we have an HTML fragment.\r\n\t\t\titem !== null\r\n\t\t\t\t? item\r\n\t\t\t\t: serializeRawBlock( innerBlocks[ childIndex++ ], options )\r\n\t\t)\r\n\t\t.join( '\\n' )\r\n\t\t.replace( /\\n+/g, '\\n' )\r\n\t\t.trim();\r\n\r\n\treturn isCommentDelimited\r\n\t\t? getCommentDelimitedContent( blockName, attrs, content )\r\n\t\t: content;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,0BAA0B,QAAQ,eAAe;;AAE1D;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAAEC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAG;EAC3D,MAAM;IAAEC,kBAAkB,GAAG;EAAK,CAAC,GAAGD,OAAO;EAC7C,MAAM;IACLE,SAAS;IACTC,KAAK,GAAG,CAAC,CAAC;IACVC,WAAW,GAAG,EAAE;IAChBC,YAAY,GAAG;EAChB,CAAC,GAAGN,QAAQ;EAEZ,IAAIO,UAAU,GAAG,CAAC;EAClB,MAAMC,OAAO,GAAGF,YAAY,CAC1BG,GAAG,CAAIC,IAAI;EACX;EACAA,IAAI,KAAK,IAAI,GACVA,IAAI,GACJX,iBAAiB,CAAEM,WAAW,CAAEE,UAAU,EAAE,CAAE,EAAEN,OAAQ,CAC5D,CAAC,CACAU,IAAI,CAAE,IAAK,CAAC,CACZC,OAAO,CAAE,MAAM,EAAE,IAAK,CAAC,CACvBC,IAAI,CAAC,CAAC;EAER,OAAOX,kBAAkB,GACtBJ,0BAA0B,CAAEK,SAAS,EAAEC,KAAK,EAAEI,OAAQ,CAAC,GACvDA,OAAO;AACX","ignoreList":[]}