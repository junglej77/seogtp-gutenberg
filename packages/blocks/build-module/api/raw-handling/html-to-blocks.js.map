{"version":3,"names":["Platform","createBlock","findTransform","parse","getBlockAttributes","getRawTransforms","htmlToBlocks","html","handler","doc","document","implementation","createHTMLDocument","body","innerHTML","Array","from","children","flatMap","node","rawTransform","isMatch","isNative","outerHTML","transform","blockName","block","hasAttribute","attributes","className","getAttribute"],"sources":["@wordpress/blocks/src/api/raw-handling/html-to-blocks.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { Platform } from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { createBlock, findTransform } from '../factory';\r\nimport parse from '../parser';\r\nimport { getBlockAttributes } from '../parser/get-block-attributes';\r\nimport { getRawTransforms } from './get-raw-transforms';\r\n\r\n/**\r\n * Converts HTML directly to blocks. Looks for a matching transform for each\r\n * top-level tag. The HTML should be filtered to not have any text between\r\n * top-level tags and formatted in a way that blocks can handle the HTML.\r\n *\r\n * @param {string}   html    HTML to convert.\r\n * @param {Function} handler The handler calling htmlToBlocks: either rawHandler\r\n *                           or pasteHandler.\r\n *\r\n * @return {Array} An array of blocks.\r\n */\r\nexport function htmlToBlocks( html, handler ) {\r\n\tconst doc = document.implementation.createHTMLDocument( '' );\r\n\r\n\tdoc.body.innerHTML = html;\r\n\r\n\treturn Array.from( doc.body.children ).flatMap( ( node ) => {\r\n\t\tconst rawTransform = findTransform(\r\n\t\t\tgetRawTransforms(),\r\n\t\t\t( { isMatch } ) => isMatch( node )\r\n\t\t);\r\n\r\n\t\tif ( ! rawTransform ) {\r\n\t\t\t// Until the HTML block is supported in the native version, we'll parse it\r\n\t\t\t// instead of creating the block to generate it as an unsupported block.\r\n\t\t\tif ( Platform.isNative ) {\r\n\t\t\t\treturn parse(\r\n\t\t\t\t\t`<!-- wp:html -->${ node.outerHTML }<!-- /wp:html -->`\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn createBlock(\r\n\t\t\t\t// Should not be hardcoded.\r\n\t\t\t\t'core/html',\r\n\t\t\t\tgetBlockAttributes( 'core/html', node.outerHTML )\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tconst { transform, blockName } = rawTransform;\r\n\r\n\t\tif ( transform ) {\r\n\t\t\tconst block = transform( node, handler );\r\n\t\t\tif ( node.hasAttribute( 'class' ) ) {\r\n\t\t\t\tblock.attributes.className = node.getAttribute( 'class' );\r\n\t\t\t}\r\n\t\t\treturn block;\r\n\t\t}\r\n\r\n\t\treturn createBlock(\r\n\t\t\tblockName,\r\n\t\t\tgetBlockAttributes( blockName, node.outerHTML )\r\n\t\t);\r\n\t} );\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,oBAAoB;;AAE7C;AACA;AACA;AACA,SAASC,WAAW,EAAEC,aAAa,QAAQ,YAAY;AACvD,OAAOC,KAAK,MAAM,WAAW;AAC7B,SAASC,kBAAkB,QAAQ,gCAAgC;AACnE,SAASC,gBAAgB,QAAQ,sBAAsB;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAAEC,IAAI,EAAEC,OAAO,EAAG;EAC7C,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAACC,kBAAkB,CAAE,EAAG,CAAC;EAE5DH,GAAG,CAACI,IAAI,CAACC,SAAS,GAAGP,IAAI;EAEzB,OAAOQ,KAAK,CAACC,IAAI,CAAEP,GAAG,CAACI,IAAI,CAACI,QAAS,CAAC,CAACC,OAAO,CAAIC,IAAI,IAAM;IAC3D,MAAMC,YAAY,GAAGlB,aAAa,CACjCG,gBAAgB,CAAC,CAAC,EAClB,CAAE;MAAEgB;IAAQ,CAAC,KAAMA,OAAO,CAAEF,IAAK,CAClC,CAAC;IAED,IAAK,CAAEC,YAAY,EAAG;MACrB;MACA;MACA,IAAKpB,QAAQ,CAACsB,QAAQ,EAAG;QACxB,OAAOnB,KAAK,CACV,mBAAmBgB,IAAI,CAACI,SAAW,mBACrC,CAAC;MACF;MACA,OAAOtB,WAAW;MACjB;MACA,WAAW,EACXG,kBAAkB,CAAE,WAAW,EAAEe,IAAI,CAACI,SAAU,CACjD,CAAC;IACF;IAEA,MAAM;MAAEC,SAAS;MAAEC;IAAU,CAAC,GAAGL,YAAY;IAE7C,IAAKI,SAAS,EAAG;MAChB,MAAME,KAAK,GAAGF,SAAS,CAAEL,IAAI,EAAEX,OAAQ,CAAC;MACxC,IAAKW,IAAI,CAACQ,YAAY,CAAE,OAAQ,CAAC,EAAG;QACnCD,KAAK,CAACE,UAAU,CAACC,SAAS,GAAGV,IAAI,CAACW,YAAY,CAAE,OAAQ,CAAC;MAC1D;MACA,OAAOJ,KAAK;IACb;IAEA,OAAOzB,WAAW,CACjBwB,SAAS,EACTrB,kBAAkB,CAAEqB,SAAS,EAAEN,IAAI,CAACI,SAAU,CAC/C,CAAC;EACF,CAAE,CAAC;AACJ","ignoreList":[]}