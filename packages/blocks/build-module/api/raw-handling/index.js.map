{"version":3,"names":["deprecated","getPhrasingContentSchema","htmlToBlocks","parse","normaliseBlocks","specialCommentConverter","listReducer","blockquoteNormaliser","figureContentReducer","shortcodeConverter","deepFilterHTML","getBlockContentSchema","pasteHandler","deprecatedGetPhrasingContentSchema","context","since","alternative","rawHandler","HTML","indexOf","parseResult","isSingleFreeFormBlock","length","name","pieces","blockContentSchema","map","piece","filters","raw","flat","filter","Boolean"],"sources":["@wordpress/blocks/src/api/raw-handling/index.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport deprecated from '@wordpress/deprecated';\r\nimport { getPhrasingContentSchema } from '@wordpress/dom';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { htmlToBlocks } from './html-to-blocks';\r\nimport parse from '../parser';\r\nimport normaliseBlocks from './normalise-blocks';\r\nimport specialCommentConverter from './special-comment-converter';\r\nimport listReducer from './list-reducer';\r\nimport blockquoteNormaliser from './blockquote-normaliser';\r\nimport figureContentReducer from './figure-content-reducer';\r\nimport shortcodeConverter from './shortcode-converter';\r\nimport { deepFilterHTML, getBlockContentSchema } from './utils';\r\n\r\nexport { pasteHandler } from './paste-handler';\r\n\r\nexport function deprecatedGetPhrasingContentSchema( context ) {\r\n\tdeprecated( 'wp.blocks.getPhrasingContentSchema', {\r\n\t\tsince: '5.6',\r\n\t\talternative: 'wp.dom.getPhrasingContentSchema',\r\n\t} );\r\n\treturn getPhrasingContentSchema( context );\r\n}\r\n\r\n/**\r\n * Converts an HTML string to known blocks.\r\n *\r\n * @param {Object} $1\r\n * @param {string} $1.HTML The HTML to convert.\r\n *\r\n * @return {Array} A list of blocks.\r\n */\r\nexport function rawHandler( { HTML = '' } ) {\r\n\t// If we detect block delimiters, parse entirely as blocks.\r\n\tif ( HTML.indexOf( '<!-- wp:' ) !== -1 ) {\r\n\t\tconst parseResult = parse( HTML );\r\n\t\tconst isSingleFreeFormBlock =\r\n\t\t\tparseResult.length === 1 &&\r\n\t\t\tparseResult[ 0 ].name === 'core/freeform';\r\n\t\tif ( ! isSingleFreeFormBlock ) {\r\n\t\t\treturn parseResult;\r\n\t\t}\r\n\t}\r\n\r\n\t// An array of HTML strings and block objects. The blocks replace matched\r\n\t// shortcodes.\r\n\tconst pieces = shortcodeConverter( HTML );\r\n\tconst blockContentSchema = getBlockContentSchema();\r\n\r\n\treturn pieces\r\n\t\t.map( ( piece ) => {\r\n\t\t\t// Already a block from shortcode.\r\n\t\t\tif ( typeof piece !== 'string' ) {\r\n\t\t\t\treturn piece;\r\n\t\t\t}\r\n\r\n\t\t\t// These filters are essential for some blocks to be able to transform\r\n\t\t\t// from raw HTML. These filters move around some content or add\r\n\t\t\t// additional tags, they do not remove any content.\r\n\t\t\tconst filters = [\r\n\t\t\t\t// Needed to adjust invalid lists.\r\n\t\t\t\tlistReducer,\r\n\t\t\t\t// Needed to create more and nextpage blocks.\r\n\t\t\t\tspecialCommentConverter,\r\n\t\t\t\t// Needed to create media blocks.\r\n\t\t\t\tfigureContentReducer,\r\n\t\t\t\t// Needed to create the quote block, which cannot handle text\r\n\t\t\t\t// without wrapper paragraphs.\r\n\t\t\t\tblockquoteNormaliser( { raw: true } ),\r\n\t\t\t];\r\n\r\n\t\t\tpiece = deepFilterHTML( piece, filters, blockContentSchema );\r\n\t\t\tpiece = normaliseBlocks( piece, { raw: true } );\r\n\r\n\t\t\treturn htmlToBlocks( piece, rawHandler );\r\n\t\t} )\r\n\t\t.flat()\r\n\t\t.filter( Boolean );\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,uBAAuB;AAC9C,SAASC,wBAAwB,QAAQ,gBAAgB;;AAEzD;AACA;AACA;AACA,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,OAAOC,KAAK,MAAM,WAAW;AAC7B,OAAOC,eAAe,MAAM,oBAAoB;AAChD,OAAOC,uBAAuB,MAAM,6BAA6B;AACjE,OAAOC,WAAW,MAAM,gBAAgB;AACxC,OAAOC,oBAAoB,MAAM,yBAAyB;AAC1D,OAAOC,oBAAoB,MAAM,0BAA0B;AAC3D,OAAOC,kBAAkB,MAAM,uBAAuB;AACtD,SAASC,cAAc,EAAEC,qBAAqB,QAAQ,SAAS;AAE/D,SAASC,YAAY,QAAQ,iBAAiB;AAE9C,OAAO,SAASC,kCAAkCA,CAAEC,OAAO,EAAG;EAC7Dd,UAAU,CAAE,oCAAoC,EAAE;IACjDe,KAAK,EAAE,KAAK;IACZC,WAAW,EAAE;EACd,CAAE,CAAC;EACH,OAAOf,wBAAwB,CAAEa,OAAQ,CAAC;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,UAAUA,CAAE;EAAEC,IAAI,GAAG;AAAG,CAAC,EAAG;EAC3C;EACA,IAAKA,IAAI,CAACC,OAAO,CAAE,UAAW,CAAC,KAAK,CAAC,CAAC,EAAG;IACxC,MAAMC,WAAW,GAAGjB,KAAK,CAAEe,IAAK,CAAC;IACjC,MAAMG,qBAAqB,GAC1BD,WAAW,CAACE,MAAM,KAAK,CAAC,IACxBF,WAAW,CAAE,CAAC,CAAE,CAACG,IAAI,KAAK,eAAe;IAC1C,IAAK,CAAEF,qBAAqB,EAAG;MAC9B,OAAOD,WAAW;IACnB;EACD;;EAEA;EACA;EACA,MAAMI,MAAM,GAAGf,kBAAkB,CAAES,IAAK,CAAC;EACzC,MAAMO,kBAAkB,GAAGd,qBAAqB,CAAC,CAAC;EAElD,OAAOa,MAAM,CACXE,GAAG,CAAIC,KAAK,IAAM;IAClB;IACA,IAAK,OAAOA,KAAK,KAAK,QAAQ,EAAG;MAChC,OAAOA,KAAK;IACb;;IAEA;IACA;IACA;IACA,MAAMC,OAAO,GAAG;IACf;IACAtB,WAAW;IACX;IACAD,uBAAuB;IACvB;IACAG,oBAAoB;IACpB;IACA;IACAD,oBAAoB,CAAE;MAAEsB,GAAG,EAAE;IAAK,CAAE,CAAC,CACrC;IAEDF,KAAK,GAAGjB,cAAc,CAAEiB,KAAK,EAAEC,OAAO,EAAEH,kBAAmB,CAAC;IAC5DE,KAAK,GAAGvB,eAAe,CAAEuB,KAAK,EAAE;MAAEE,GAAG,EAAE;IAAK,CAAE,CAAC;IAE/C,OAAO3B,YAAY,CAAEyB,KAAK,EAAEV,UAAW,CAAC;EACzC,CAAE,CAAC,CACFa,IAAI,CAAC,CAAC,CACNC,MAAM,CAAEC,OAAQ,CAAC;AACpB","ignoreList":[]}