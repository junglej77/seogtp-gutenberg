{"version":3,"names":["getPhrasingContentSchema","removeInvalidHTML","htmlToBlocks","hasBlockSupport","getBlockInnerHTML","parse","normaliseBlocks","specialCommentConverter","commentRemover","isInlineContent","phrasingContentReducer","headRemover","msListConverter","msListIgnore","listReducer","imageCorrector","blockquoteNormaliser","divNormaliser","figureContentReducer","shortcodeConverter","markdownConverter","iframeRemover","googleDocsUIDRemover","htmlFormattingRemover","brRemover","deepFilterHTML","isPlain","getBlockContentSchema","emptyParagraphRemover","slackParagraphCorrector","log","args","window","console","filterInlineHTML","HTML","inline","pasteHandler","plainText","mode","tagName","replace","content","indexOf","parseResult","isSingleFreeFormBlock","length","name","String","prototype","normalize","isPlainText","test","pieces","hasShortcodes","phrasingContentSchema","blockContentSchema","blocks","map","piece","filters","schema","flat","filter","Boolean","trimRegex","trimmedPlainText"],"sources":["@wordpress/blocks/src/api/raw-handling/paste-handler.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { getPhrasingContentSchema, removeInvalidHTML } from '@wordpress/dom';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { htmlToBlocks } from './html-to-blocks';\r\nimport { hasBlockSupport } from '../registration';\r\nimport { getBlockInnerHTML } from '../serializer';\r\nimport parse from '../parser';\r\nimport normaliseBlocks from './normalise-blocks';\r\nimport specialCommentConverter from './special-comment-converter';\r\nimport commentRemover from './comment-remover';\r\nimport isInlineContent from './is-inline-content';\r\nimport phrasingContentReducer from './phrasing-content-reducer';\r\nimport headRemover from './head-remover';\r\nimport msListConverter from './ms-list-converter';\r\nimport msListIgnore from './ms-list-ignore';\r\nimport listReducer from './list-reducer';\r\nimport imageCorrector from './image-corrector';\r\nimport blockquoteNormaliser from './blockquote-normaliser';\r\nimport divNormaliser from './div-normaliser';\r\nimport figureContentReducer from './figure-content-reducer';\r\nimport shortcodeConverter from './shortcode-converter';\r\nimport markdownConverter from './markdown-converter';\r\nimport iframeRemover from './iframe-remover';\r\nimport googleDocsUIDRemover from './google-docs-uid-remover';\r\nimport htmlFormattingRemover from './html-formatting-remover';\r\nimport brRemover from './br-remover';\r\nimport { deepFilterHTML, isPlain, getBlockContentSchema } from './utils';\r\nimport emptyParagraphRemover from './empty-paragraph-remover';\r\nimport slackParagraphCorrector from './slack-paragraph-corrector';\r\n\r\nconst log = ( ...args ) => window?.console?.log?.( ...args );\r\n\r\n/**\r\n * Filters HTML to only contain phrasing content.\r\n *\r\n * @param {string} HTML The HTML to filter.\r\n *\r\n * @return {string} HTML only containing phrasing content.\r\n */\r\nfunction filterInlineHTML( HTML ) {\r\n\tHTML = deepFilterHTML( HTML, [\r\n\t\theadRemover,\r\n\t\tgoogleDocsUIDRemover,\r\n\t\tmsListIgnore,\r\n\t\tphrasingContentReducer,\r\n\t\tcommentRemover,\r\n\t] );\r\n\tHTML = removeInvalidHTML( HTML, getPhrasingContentSchema( 'paste' ), {\r\n\t\tinline: true,\r\n\t} );\r\n\r\n\tHTML = deepFilterHTML( HTML, [ htmlFormattingRemover, brRemover ] );\r\n\r\n\t// Allows us to ask for this information when we get a report.\r\n\tlog( 'Processed inline HTML:\\n\\n', HTML );\r\n\r\n\treturn HTML;\r\n}\r\n\r\n/**\r\n * Converts an HTML string to known blocks. Strips everything else.\r\n *\r\n * @param {Object} options\r\n * @param {string} [options.HTML]      The HTML to convert.\r\n * @param {string} [options.plainText] Plain text version.\r\n * @param {string} [options.mode]      Handle content as blocks or inline content.\r\n *                                     * 'AUTO': Decide based on the content passed.\r\n *                                     * 'INLINE': Always handle as inline content, and return string.\r\n *                                     * 'BLOCKS': Always handle as blocks, and return array of blocks.\r\n * @param {Array}  [options.tagName]   The tag into which content will be inserted.\r\n *\r\n * @return {Array|string} A list of blocks or a string, depending on `handlerMode`.\r\n */\r\nexport function pasteHandler( {\r\n\tHTML = '',\r\n\tplainText = '',\r\n\tmode = 'AUTO',\r\n\ttagName,\r\n} ) {\r\n\t// First of all, strip any meta tags.\r\n\tHTML = HTML.replace( /<meta[^>]+>/g, '' );\r\n\t// Strip Windows markers.\r\n\tHTML = HTML.replace(\r\n\t\t/^\\s*<html[^>]*>\\s*<body[^>]*>(?:\\s*<!--\\s*StartFragment\\s*-->)?/i,\r\n\t\t''\r\n\t);\r\n\tHTML = HTML.replace(\r\n\t\t/(?:<!--\\s*EndFragment\\s*-->\\s*)?<\\/body>\\s*<\\/html>\\s*$/i,\r\n\t\t''\r\n\t);\r\n\r\n\t// If we detect block delimiters in HTML, parse entirely as blocks.\r\n\tif ( mode !== 'INLINE' ) {\r\n\t\t// Check plain text if there is no HTML.\r\n\t\tconst content = HTML ? HTML : plainText;\r\n\r\n\t\tif ( content.indexOf( '<!-- wp:' ) !== -1 ) {\r\n\t\t\tconst parseResult = parse( content );\r\n\t\t\tconst isSingleFreeFormBlock =\r\n\t\t\t\tparseResult.length === 1 &&\r\n\t\t\t\tparseResult[ 0 ].name === 'core/freeform';\r\n\t\t\tif ( ! isSingleFreeFormBlock ) {\r\n\t\t\t\treturn parseResult;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Normalize unicode to use composed characters.\r\n\t// Not normalizing the content will only affect older browsers and won't\r\n\t// entirely break the app.\r\n\t// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\r\n\t// See: https://core.trac.wordpress.org/ticket/30130\r\n\t// See: https://github.com/WordPress/gutenberg/pull/6983#pullrequestreview-125151075\r\n\tif ( String.prototype.normalize ) {\r\n\t\tHTML = HTML.normalize();\r\n\t}\r\n\r\n\t// Must be run before checking if it's inline content.\r\n\tHTML = deepFilterHTML( HTML, [ slackParagraphCorrector ] );\r\n\r\n\t// Consider plain text if:\r\n\t// * There is a plain text version.\r\n\t// * There is no HTML version, or it has no formatting.\r\n\tconst isPlainText = plainText && ( ! HTML || isPlain( HTML ) );\r\n\r\n\t// Parse Markdown (and encoded HTML) if it's considered plain text.\r\n\tif ( isPlainText ) {\r\n\t\tHTML = plainText;\r\n\r\n\t\t// The markdown converter (Showdown) trims whitespace.\r\n\t\tif ( ! /^\\s+$/.test( plainText ) ) {\r\n\t\t\tHTML = markdownConverter( HTML );\r\n\t\t}\r\n\t}\r\n\r\n\t// An array of HTML strings and block objects. The blocks replace matched\r\n\t// shortcodes.\r\n\tconst pieces = shortcodeConverter( HTML );\r\n\r\n\t// The call to shortcodeConverter will always return more than one element\r\n\t// if shortcodes are matched. The reason is when shortcodes are matched\r\n\t// empty HTML strings are included.\r\n\tconst hasShortcodes = pieces.length > 1;\r\n\r\n\tif ( isPlainText && ! hasShortcodes ) {\r\n\t\t// Switch to inline mode if:\r\n\t\t// * The current mode is AUTO.\r\n\t\t// * The original plain text had no line breaks.\r\n\t\t// * The original plain text was not an HTML paragraph.\r\n\t\t// * The converted text is just a paragraph.\r\n\t\tif (\r\n\t\t\tmode === 'AUTO' &&\r\n\t\t\tplainText.indexOf( '\\n' ) === -1 &&\r\n\t\t\tplainText.indexOf( '<p>' ) !== 0 &&\r\n\t\t\tHTML.indexOf( '<p>' ) === 0\r\n\t\t) {\r\n\t\t\tmode = 'INLINE';\r\n\t\t}\r\n\t}\r\n\r\n\tif ( mode === 'INLINE' ) {\r\n\t\treturn filterInlineHTML( HTML );\r\n\t}\r\n\r\n\tif (\r\n\t\tmode === 'AUTO' &&\r\n\t\t! hasShortcodes &&\r\n\t\tisInlineContent( HTML, tagName )\r\n\t) {\r\n\t\treturn filterInlineHTML( HTML );\r\n\t}\r\n\r\n\tconst phrasingContentSchema = getPhrasingContentSchema( 'paste' );\r\n\tconst blockContentSchema = getBlockContentSchema( 'paste' );\r\n\r\n\tconst blocks = pieces\r\n\t\t.map( ( piece ) => {\r\n\t\t\t// Already a block from shortcode.\r\n\t\t\tif ( typeof piece !== 'string' ) {\r\n\t\t\t\treturn piece;\r\n\t\t\t}\r\n\r\n\t\t\tconst filters = [\r\n\t\t\t\tgoogleDocsUIDRemover,\r\n\t\t\t\tmsListConverter,\r\n\t\t\t\theadRemover,\r\n\t\t\t\tlistReducer,\r\n\t\t\t\timageCorrector,\r\n\t\t\t\tphrasingContentReducer,\r\n\t\t\t\tspecialCommentConverter,\r\n\t\t\t\tcommentRemover,\r\n\t\t\t\tiframeRemover,\r\n\t\t\t\tfigureContentReducer,\r\n\t\t\t\tblockquoteNormaliser(),\r\n\t\t\t\tdivNormaliser,\r\n\t\t\t];\r\n\r\n\t\t\tconst schema = {\r\n\t\t\t\t...blockContentSchema,\r\n\t\t\t\t// Keep top-level phrasing content, normalised by `normaliseBlocks`.\r\n\t\t\t\t...phrasingContentSchema,\r\n\t\t\t};\r\n\r\n\t\t\tpiece = deepFilterHTML( piece, filters, blockContentSchema );\r\n\t\t\tpiece = removeInvalidHTML( piece, schema );\r\n\t\t\tpiece = normaliseBlocks( piece );\r\n\t\t\tpiece = deepFilterHTML(\r\n\t\t\t\tpiece,\r\n\t\t\t\t[ htmlFormattingRemover, brRemover, emptyParagraphRemover ],\r\n\t\t\t\tblockContentSchema\r\n\t\t\t);\r\n\r\n\t\t\t// Allows us to ask for this information when we get a report.\r\n\t\t\tlog( 'Processed HTML piece:\\n\\n', piece );\r\n\r\n\t\t\treturn htmlToBlocks( piece, pasteHandler );\r\n\t\t} )\r\n\t\t.flat()\r\n\t\t.filter( Boolean );\r\n\r\n\t// If we're allowed to return inline content, and there is only one\r\n\t// inlineable block, and the original plain text content does not have any\r\n\t// line breaks, then treat it as inline paste.\r\n\tif (\r\n\t\tmode === 'AUTO' &&\r\n\t\tblocks.length === 1 &&\r\n\t\thasBlockSupport( blocks[ 0 ].name, '__unstablePasteTextInline', false )\r\n\t) {\r\n\t\tconst trimRegex = /^[\\n]+|[\\n]+$/g;\r\n\t\t// Don't catch line breaks at the start or end.\r\n\t\tconst trimmedPlainText = plainText.replace( trimRegex, '' );\r\n\r\n\t\tif (\r\n\t\t\ttrimmedPlainText !== '' &&\r\n\t\t\ttrimmedPlainText.indexOf( '\\n' ) === -1\r\n\t\t) {\r\n\t\t\treturn removeInvalidHTML(\r\n\t\t\t\tgetBlockInnerHTML( blocks[ 0 ] ),\r\n\t\t\t\tphrasingContentSchema\r\n\t\t\t).replace( trimRegex, '' );\r\n\t\t}\r\n\t}\r\n\r\n\treturn blocks;\r\n}\r\n"],"mappings":"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","ignoreList":[]}