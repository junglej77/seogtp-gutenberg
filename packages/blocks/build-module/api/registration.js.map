{"version":3,"names":["select","dispatch","_x","warning","i18nBlockSchema","title","description","keywords","styles","label","variations","store","blocksStore","unlock","isObject","object","unstable__bootstrapServerSideBlockDefinitions","definitions","addBootstrappedBlockType","name","blockType","Object","entries","getBlockSettingsFromMetadata","textdomain","metadata","allowedFields","settings","fromEntries","filter","key","includes","keys","forEach","translateBlockSettingUsingI18nSchema","registerBlockType","blockNameOrMetadata","globalThis","SCRIPT_DEBUG","test","getBlockType","addUnprocessedBlockType","i18nSchema","settingValue","Array","isArray","length","map","value","reduce","accumulator","registerBlockCollection","namespace","icon","addBlockCollection","unregisterBlockCollection","removeBlockCollection","unregisterBlockType","oldBlock","removeBlockTypes","setFreeformContentHandlerName","blockName","setFreeformFallbackBlockName","getFreeformContentHandlerName","getFreeformFallbackBlockName","getGroupingBlockName","setUnregisteredTypeHandlerName","setUnregisteredFallbackBlockName","getUnregisteredTypeHandlerName","getUnregisteredFallbackBlockName","setDefaultBlockName","setGroupingBlockName","getDefaultBlockName","getBlockTypes","getBlockSupport","nameOrType","feature","defaultSupports","hasBlockSupport","isReusableBlock","blockOrType","isTemplatePart","getChildBlockNames","hasChildBlocks","hasChildBlocksWithInserterSupport","registerBlockStyle","blockNames","styleVariation","addBlockStyles","unregisterBlockStyle","styleVariationName","removeBlockStyles","getBlockVariations","scope","registerBlockVariation","variation","addBlockVariations","unregisterBlockVariation","variationName","removeBlockVariations","registerBlockBindingsSource","source","usesContext","getValues","setValues","canUserEditValue","getFieldsList","existingSource","getBlockBindingsSource","addBlockBindingsSource","unregisterBlockBindingsSource","oldSource","removeBlockBindingsSource","getBlockBindingsSources","getAllBlockBindingsSources"],"sources":["@wordpress/blocks/src/api/registration.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { select, dispatch } from '@wordpress/data';\r\nimport { _x } from '@wordpress/i18n';\r\nimport warning from '@wordpress/warning';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport i18nBlockSchema from './i18n-block.json';\r\nimport { store as blocksStore } from '../store';\r\nimport { unlock } from '../lock-unlock';\r\n\r\n/**\r\n * An icon type definition. One of a Dashicon slug, an element,\r\n * or a component.\r\n *\r\n * @typedef {(string|Element|Component)} WPIcon\r\n *\r\n * @see https://developer.wordpress.org/resource/dashicons/\r\n */\r\n\r\n/**\r\n * Render behavior of a block type icon; one of a Dashicon slug, an element,\r\n * or a component.\r\n *\r\n * @typedef {WPIcon} WPBlockTypeIconRender\r\n */\r\n\r\n/**\r\n * An object describing a normalized block type icon.\r\n *\r\n * @typedef {Object} WPBlockTypeIconDescriptor\r\n *\r\n * @property {WPBlockTypeIconRender} src         Render behavior of the icon,\r\n *                                               one of a Dashicon slug, an\r\n *                                               element, or a component.\r\n * @property {string}                background  Optimal background hex string\r\n *                                               color when displaying icon.\r\n * @property {string}                foreground  Optimal foreground hex string\r\n *                                               color when displaying icon.\r\n * @property {string}                shadowColor Optimal shadow hex string\r\n *                                               color when displaying icon.\r\n */\r\n\r\n/**\r\n * Value to use to render the icon for a block type in an editor interface,\r\n * either a Dashicon slug, an element, a component, or an object describing\r\n * the icon.\r\n *\r\n * @typedef {(WPBlockTypeIconDescriptor|WPBlockTypeIconRender)} WPBlockTypeIcon\r\n */\r\n\r\n/**\r\n * Named block variation scopes.\r\n *\r\n * @typedef {'block'|'inserter'|'transform'} WPBlockVariationScope\r\n */\r\n\r\n/**\r\n * An object describing a variation defined for the block type.\r\n *\r\n * @typedef {Object} WPBlockVariation\r\n *\r\n * @property {string}                  name          The unique and machine-readable name.\r\n * @property {string}                  title         A human-readable variation title.\r\n * @property {string}                  [description] A detailed variation description.\r\n * @property {string}                  [category]    Block type category classification,\r\n *                                                   used in search interfaces to arrange\r\n *                                                   block types by category.\r\n * @property {WPIcon}                  [icon]        An icon helping to visualize the variation.\r\n * @property {boolean}                 [isDefault]   Indicates whether the current variation is\r\n *                                                   the default one. Defaults to `false`.\r\n * @property {Object}                  [attributes]  Values which override block attributes.\r\n * @property {Array[]}                 [innerBlocks] Initial configuration of nested blocks.\r\n * @property {Object}                  [example]     Example provides structured data for\r\n *                                                   the block preview. You can set to\r\n *                                                   `undefined` to disable the preview shown\r\n *                                                   for the block type.\r\n * @property {WPBlockVariationScope[]} [scope]       The list of scopes where the variation\r\n *                                                   is applicable. When not provided, it\r\n *                                                   assumes all available scopes.\r\n * @property {string[]}                [keywords]    An array of terms (which can be translated)\r\n *                                                   that help users discover the variation\r\n *                                                   while searching.\r\n * @property {Function|string[]}       [isActive]    This can be a function or an array of block attributes.\r\n *                                                   Function that accepts a block's attributes and the\r\n *                                                   variation's attributes and determines if a variation is active.\r\n *                                                   This function doesn't try to find a match dynamically based\r\n *                                                   on all block's attributes, as in many cases some attributes are irrelevant.\r\n *                                                   An example would be for `embed` block where we only care\r\n *                                                   about `providerNameSlug` attribute's value.\r\n *                                                   We can also use a `string[]` to tell which attributes\r\n *                                                   should be compared as a shorthand. Each attributes will\r\n *                                                   be matched and the variation will be active if all of them are matching.\r\n */\r\n\r\n/**\r\n * Defined behavior of a block type.\r\n *\r\n * @typedef {Object} WPBlockType\r\n *\r\n * @property {string}             name          Block type's namespaced name.\r\n * @property {string}             title         Human-readable block type label.\r\n * @property {string}             [description] A detailed block type description.\r\n * @property {string}             [category]    Block type category classification,\r\n *                                              used in search interfaces to arrange\r\n *                                              block types by category.\r\n * @property {WPBlockTypeIcon}    [icon]        Block type icon.\r\n * @property {string[]}           [keywords]    Additional keywords to produce block\r\n *                                              type as result in search interfaces.\r\n * @property {Object}             [attributes]  Block type attributes.\r\n * @property {Component}          [save]        Optional component describing\r\n *                                              serialized markup structure of a\r\n *                                              block type.\r\n * @property {Component}          edit          Component rendering an element to\r\n *                                              manipulate the attributes of a block\r\n *                                              in the context of an editor.\r\n * @property {WPBlockVariation[]} [variations]  The list of block variations.\r\n * @property {Object}             [example]     Example provides structured data for\r\n *                                              the block preview. When not defined\r\n *                                              then no preview is shown.\r\n */\r\n\r\nfunction isObject( object ) {\r\n\treturn object !== null && typeof object === 'object';\r\n}\r\n\r\n/**\r\n * Sets the server side block definition of blocks.\r\n *\r\n * Ignored from documentation due to being marked as unstable.\r\n *\r\n * @ignore\r\n *\r\n * @param {Object} definitions Server-side block definitions\r\n */\r\n// eslint-disable-next-line camelcase\r\nexport function unstable__bootstrapServerSideBlockDefinitions( definitions ) {\r\n\tconst { addBootstrappedBlockType } = unlock( dispatch( blocksStore ) );\r\n\tfor ( const [ name, blockType ] of Object.entries( definitions ) ) {\r\n\t\taddBootstrappedBlockType( name, blockType );\r\n\t}\r\n}\r\n\r\n/**\r\n * Gets block settings from metadata loaded from `block.json` file\r\n *\r\n * @param {Object} metadata            Block metadata loaded from `block.json`.\r\n * @param {string} metadata.textdomain Textdomain to use with translations.\r\n *\r\n * @return {Object} Block settings.\r\n */\r\nfunction getBlockSettingsFromMetadata( { textdomain, ...metadata } ) {\r\n\tconst allowedFields = [\r\n\t\t'apiVersion',\r\n\t\t'title',\r\n\t\t'category',\r\n\t\t'parent',\r\n\t\t'ancestor',\r\n\t\t'icon',\r\n\t\t'description',\r\n\t\t'keywords',\r\n\t\t'attributes',\r\n\t\t'providesContext',\r\n\t\t'usesContext',\r\n\t\t'selectors',\r\n\t\t'supports',\r\n\t\t'styles',\r\n\t\t'example',\r\n\t\t'variations',\r\n\t\t'blockHooks',\r\n\t\t'allowedBlocks',\r\n\t];\r\n\r\n\tconst settings = Object.fromEntries(\r\n\t\tObject.entries( metadata ).filter( ( [ key ] ) =>\r\n\t\t\tallowedFields.includes( key )\r\n\t\t)\r\n\t);\r\n\r\n\tif ( textdomain ) {\r\n\t\tObject.keys( i18nBlockSchema ).forEach( ( key ) => {\r\n\t\t\tif ( ! settings[ key ] ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tsettings[ key ] = translateBlockSettingUsingI18nSchema(\r\n\t\t\t\ti18nBlockSchema[ key ],\r\n\t\t\t\tsettings[ key ],\r\n\t\t\t\ttextdomain\r\n\t\t\t);\r\n\t\t} );\r\n\t}\r\n\r\n\treturn settings;\r\n}\r\n\r\n/**\r\n * Registers a new block provided a unique name and an object defining its\r\n * behavior. Once registered, the block is made available as an option to any\r\n * editor interface where blocks are implemented.\r\n *\r\n * For more in-depth information on registering a custom block see the\r\n * [Create a block tutorial](https://developer.wordpress.org/block-editor/getting-started/create-block/).\r\n *\r\n * @param {string|Object} blockNameOrMetadata Block type name or its metadata.\r\n * @param {Object}        settings            Block settings.\r\n *\r\n * @example\r\n * ```js\r\n * import { __ } from '@wordpress/i18n';\r\n * import { registerBlockType } from '@wordpress/blocks'\r\n *\r\n * registerBlockType( 'namespace/block-name', {\r\n *     title: __( 'My First Block' ),\r\n *     edit: () => <div>{ __( 'Hello from the editor!' ) }</div>,\r\n *     save: () => <div>Hello from the saved content!</div>,\r\n * } );\r\n * ```\r\n *\r\n * @return {WPBlockType | undefined} The block, if it has been successfully registered;\r\n *                    otherwise `undefined`.\r\n */\r\nexport function registerBlockType( blockNameOrMetadata, settings ) {\r\n\tconst name = isObject( blockNameOrMetadata )\r\n\t\t? blockNameOrMetadata.name\r\n\t\t: blockNameOrMetadata;\r\n\r\n\tif ( typeof name !== 'string' ) {\r\n\t\twarning( 'Block names must be strings.' );\r\n\t\treturn;\r\n\t}\r\n\r\n\tif ( ! /^[a-z][a-z0-9-]*\\/[a-z][a-z0-9-]*$/.test( name ) ) {\r\n\t\twarning(\r\n\t\t\t'Block names must contain a namespace prefix, include only lowercase alphanumeric characters or dashes, and start with a letter. Example: my-plugin/my-custom-block'\r\n\t\t);\r\n\t\treturn;\r\n\t}\r\n\tif ( select( blocksStore ).getBlockType( name ) ) {\r\n\t\twarning( 'Block \"' + name + '\" is already registered.' );\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst { addBootstrappedBlockType, addUnprocessedBlockType } = unlock(\r\n\t\tdispatch( blocksStore )\r\n\t);\r\n\r\n\tif ( isObject( blockNameOrMetadata ) ) {\r\n\t\tconst metadata = getBlockSettingsFromMetadata( blockNameOrMetadata );\r\n\t\taddBootstrappedBlockType( name, metadata );\r\n\t}\r\n\r\n\taddUnprocessedBlockType( name, settings );\r\n\r\n\treturn select( blocksStore ).getBlockType( name );\r\n}\r\n\r\n/**\r\n * Translates block settings provided with metadata using the i18n schema.\r\n *\r\n * @param {string|string[]|Object[]} i18nSchema   I18n schema for the block setting.\r\n * @param {string|string[]|Object[]} settingValue Value for the block setting.\r\n * @param {string}                   textdomain   Textdomain to use with translations.\r\n *\r\n * @return {string|string[]|Object[]} Translated setting.\r\n */\r\nfunction translateBlockSettingUsingI18nSchema(\r\n\ti18nSchema,\r\n\tsettingValue,\r\n\ttextdomain\r\n) {\r\n\tif ( typeof i18nSchema === 'string' && typeof settingValue === 'string' ) {\r\n\t\t// eslint-disable-next-line @wordpress/i18n-no-variables, @wordpress/i18n-text-domain\r\n\t\treturn _x( settingValue, i18nSchema, textdomain );\r\n\t}\r\n\tif (\r\n\t\tArray.isArray( i18nSchema ) &&\r\n\t\ti18nSchema.length &&\r\n\t\tArray.isArray( settingValue )\r\n\t) {\r\n\t\treturn settingValue.map( ( value ) =>\r\n\t\t\ttranslateBlockSettingUsingI18nSchema(\r\n\t\t\t\ti18nSchema[ 0 ],\r\n\t\t\t\tvalue,\r\n\t\t\t\ttextdomain\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\tif (\r\n\t\tisObject( i18nSchema ) &&\r\n\t\tObject.entries( i18nSchema ).length &&\r\n\t\tisObject( settingValue )\r\n\t) {\r\n\t\treturn Object.keys( settingValue ).reduce( ( accumulator, key ) => {\r\n\t\t\tif ( ! i18nSchema[ key ] ) {\r\n\t\t\t\taccumulator[ key ] = settingValue[ key ];\r\n\t\t\t\treturn accumulator;\r\n\t\t\t}\r\n\t\t\taccumulator[ key ] = translateBlockSettingUsingI18nSchema(\r\n\t\t\t\ti18nSchema[ key ],\r\n\t\t\t\tsettingValue[ key ],\r\n\t\t\t\ttextdomain\r\n\t\t\t);\r\n\t\t\treturn accumulator;\r\n\t\t}, {} );\r\n\t}\r\n\treturn settingValue;\r\n}\r\n\r\n/**\r\n * Registers a new block collection to group blocks in the same namespace in the inserter.\r\n *\r\n * @param {string} namespace       The namespace to group blocks by in the inserter; corresponds to the block namespace.\r\n * @param {Object} settings        The block collection settings.\r\n * @param {string} settings.title  The title to display in the block inserter.\r\n * @param {Object} [settings.icon] The icon to display in the block inserter.\r\n *\r\n * @example\r\n * ```js\r\n * import { __ } from '@wordpress/i18n';\r\n * import { registerBlockCollection, registerBlockType } from '@wordpress/blocks';\r\n *\r\n * // Register the collection.\r\n * registerBlockCollection( 'my-collection', {\r\n *     title: __( 'Custom Collection' ),\r\n * } );\r\n *\r\n * // Register a block in the same namespace to add it to the collection.\r\n * registerBlockType( 'my-collection/block-name', {\r\n *     title: __( 'My First Block' ),\r\n *     edit: () => <div>{ __( 'Hello from the editor!' ) }</div>,\r\n *     save: () => <div>'Hello from the saved content!</div>,\r\n * } );\r\n * ```\r\n */\r\nexport function registerBlockCollection( namespace, { title, icon } ) {\r\n\tdispatch( blocksStore ).addBlockCollection( namespace, title, icon );\r\n}\r\n\r\n/**\r\n * Unregisters a block collection\r\n *\r\n * @param {string} namespace The namespace to group blocks by in the inserter; corresponds to the block namespace\r\n *\r\n * @example\r\n * ```js\r\n * import { unregisterBlockCollection } from '@wordpress/blocks';\r\n *\r\n * unregisterBlockCollection( 'my-collection' );\r\n * ```\r\n */\r\nexport function unregisterBlockCollection( namespace ) {\r\n\tdispatch( blocksStore ).removeBlockCollection( namespace );\r\n}\r\n\r\n/**\r\n * Unregisters a block.\r\n *\r\n * @param {string} name Block name.\r\n *\r\n * @example\r\n * ```js\r\n * import { __ } from '@wordpress/i18n';\r\n * import { unregisterBlockType } from '@wordpress/blocks';\r\n *\r\n * const ExampleComponent = () => {\r\n *     return (\r\n *         <Button\r\n *             onClick={ () =>\r\n *                 unregisterBlockType( 'my-collection/block-name' )\r\n *             }\r\n *         >\r\n *             { __( 'Unregister my custom block.' ) }\r\n *         </Button>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {WPBlockType | undefined} The previous block value, if it has been successfully\r\n *                    unregistered; otherwise `undefined`.\r\n */\r\nexport function unregisterBlockType( name ) {\r\n\tconst oldBlock = select( blocksStore ).getBlockType( name );\r\n\tif ( ! oldBlock ) {\r\n\t\twarning( 'Block \"' + name + '\" is not registered.' );\r\n\t\treturn;\r\n\t}\r\n\tdispatch( blocksStore ).removeBlockTypes( name );\r\n\treturn oldBlock;\r\n}\r\n\r\n/**\r\n * Assigns name of block for handling non-block content.\r\n *\r\n * @param {string} blockName Block name.\r\n */\r\nexport function setFreeformContentHandlerName( blockName ) {\r\n\tdispatch( blocksStore ).setFreeformFallbackBlockName( blockName );\r\n}\r\n\r\n/**\r\n * Retrieves name of block handling non-block content, or undefined if no\r\n * handler has been defined.\r\n *\r\n * @return {?string} Block name.\r\n */\r\nexport function getFreeformContentHandlerName() {\r\n\treturn select( blocksStore ).getFreeformFallbackBlockName();\r\n}\r\n\r\n/**\r\n * Retrieves name of block used for handling grouping interactions.\r\n *\r\n * @return {?string} Block name.\r\n */\r\nexport function getGroupingBlockName() {\r\n\treturn select( blocksStore ).getGroupingBlockName();\r\n}\r\n\r\n/**\r\n * Assigns name of block handling unregistered block types.\r\n *\r\n * @param {string} blockName Block name.\r\n */\r\nexport function setUnregisteredTypeHandlerName( blockName ) {\r\n\tdispatch( blocksStore ).setUnregisteredFallbackBlockName( blockName );\r\n}\r\n\r\n/**\r\n * Retrieves name of block handling unregistered block types, or undefined if no\r\n * handler has been defined.\r\n *\r\n * @return {?string} Block name.\r\n */\r\nexport function getUnregisteredTypeHandlerName() {\r\n\treturn select( blocksStore ).getUnregisteredFallbackBlockName();\r\n}\r\n\r\n/**\r\n * Assigns the default block name.\r\n *\r\n * @param {string} name Block name.\r\n *\r\n * @example\r\n * ```js\r\n * import { setDefaultBlockName } from '@wordpress/blocks';\r\n *\r\n * const ExampleComponent = () => {\r\n *\r\n *     return (\r\n *         <Button onClick={ () => setDefaultBlockName( 'core/heading' ) }>\r\n *             { __( 'Set the default block to Heading' ) }\r\n *         </Button>\r\n *     );\r\n * };\r\n * ```\r\n */\r\nexport function setDefaultBlockName( name ) {\r\n\tdispatch( blocksStore ).setDefaultBlockName( name );\r\n}\r\n\r\n/**\r\n * Assigns name of block for handling block grouping interactions.\r\n *\r\n * This function lets you select a different block to group other blocks in instead of the\r\n * default `core/group` block. This function must be used in a component or when the DOM is fully\r\n * loaded. See https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dom-ready/\r\n *\r\n * @param {string} name Block name.\r\n *\r\n * @example\r\n * ```js\r\n * import { setGroupingBlockName } from '@wordpress/blocks';\r\n *\r\n * const ExampleComponent = () => {\r\n *\r\n *     return (\r\n *         <Button onClick={ () => setGroupingBlockName( 'core/columns' ) }>\r\n *             { __( 'Wrap in columns' ) }\r\n *         </Button>\r\n *     );\r\n * };\r\n * ```\r\n */\r\nexport function setGroupingBlockName( name ) {\r\n\tdispatch( blocksStore ).setGroupingBlockName( name );\r\n}\r\n\r\n/**\r\n * Retrieves the default block name.\r\n *\r\n * @return {?string} Block name.\r\n */\r\nexport function getDefaultBlockName() {\r\n\treturn select( blocksStore ).getDefaultBlockName();\r\n}\r\n\r\n/**\r\n * Returns a registered block type.\r\n *\r\n * @param {string} name Block name.\r\n *\r\n * @return {?Object} Block type.\r\n */\r\nexport function getBlockType( name ) {\r\n\treturn select( blocksStore )?.getBlockType( name );\r\n}\r\n\r\n/**\r\n * Returns all registered blocks.\r\n *\r\n * @return {Array} Block settings.\r\n */\r\nexport function getBlockTypes() {\r\n\treturn select( blocksStore ).getBlockTypes();\r\n}\r\n\r\n/**\r\n * Returns the block support value for a feature, if defined.\r\n *\r\n * @param {(string|Object)} nameOrType      Block name or type object\r\n * @param {string}          feature         Feature to retrieve\r\n * @param {*}               defaultSupports Default value to return if not\r\n *                                          explicitly defined\r\n *\r\n * @return {?*} Block support value\r\n */\r\nexport function getBlockSupport( nameOrType, feature, defaultSupports ) {\r\n\treturn select( blocksStore ).getBlockSupport(\r\n\t\tnameOrType,\r\n\t\tfeature,\r\n\t\tdefaultSupports\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns true if the block defines support for a feature, or false otherwise.\r\n *\r\n * @param {(string|Object)} nameOrType      Block name or type object.\r\n * @param {string}          feature         Feature to test.\r\n * @param {boolean}         defaultSupports Whether feature is supported by\r\n *                                          default if not explicitly defined.\r\n *\r\n * @return {boolean} Whether block supports feature.\r\n */\r\nexport function hasBlockSupport( nameOrType, feature, defaultSupports ) {\r\n\treturn select( blocksStore ).hasBlockSupport(\r\n\t\tnameOrType,\r\n\t\tfeature,\r\n\t\tdefaultSupports\r\n\t);\r\n}\r\n\r\n/**\r\n * Determines whether or not the given block is a reusable block. This is a\r\n * special block type that is used to point to a global block stored via the\r\n * API.\r\n *\r\n * @param {Object} blockOrType Block or Block Type to test.\r\n *\r\n * @return {boolean} Whether the given block is a reusable block.\r\n */\r\nexport function isReusableBlock( blockOrType ) {\r\n\treturn blockOrType?.name === 'core/block';\r\n}\r\n\r\n/**\r\n * Determines whether or not the given block is a template part. This is a\r\n * special block type that allows composing a page template out of reusable\r\n * design elements.\r\n *\r\n * @param {Object} blockOrType Block or Block Type to test.\r\n *\r\n * @return {boolean} Whether the given block is a template part.\r\n */\r\nexport function isTemplatePart( blockOrType ) {\r\n\treturn blockOrType?.name === 'core/template-part';\r\n}\r\n\r\n/**\r\n * Returns an array with the child blocks of a given block.\r\n *\r\n * @param {string} blockName Name of block (example: “latest-posts”).\r\n *\r\n * @return {Array} Array of child block names.\r\n */\r\nexport const getChildBlockNames = ( blockName ) => {\r\n\treturn select( blocksStore ).getChildBlockNames( blockName );\r\n};\r\n\r\n/**\r\n * Returns a boolean indicating if a block has child blocks or not.\r\n *\r\n * @param {string} blockName Name of block (example: “latest-posts”).\r\n *\r\n * @return {boolean} True if a block contains child blocks and false otherwise.\r\n */\r\nexport const hasChildBlocks = ( blockName ) => {\r\n\treturn select( blocksStore ).hasChildBlocks( blockName );\r\n};\r\n\r\n/**\r\n * Returns a boolean indicating if a block has at least one child block with inserter support.\r\n *\r\n * @param {string} blockName Block type name.\r\n *\r\n * @return {boolean} True if a block contains at least one child blocks with inserter support\r\n *                   and false otherwise.\r\n */\r\nexport const hasChildBlocksWithInserterSupport = ( blockName ) => {\r\n\treturn select( blocksStore ).hasChildBlocksWithInserterSupport( blockName );\r\n};\r\n\r\n/**\r\n * Registers a new block style for the given block types.\r\n *\r\n * For more information on connecting the styles with CSS\r\n * [the official documentation](https://developer.wordpress.org/block-editor/reference-guides/block-api/block-styles/#styles).\r\n *\r\n * @param {string|Array} blockNames     Name of blocks e.g. “core/latest-posts” or `[\"core/group\", \"core/columns\"]`.\r\n * @param {Object}       styleVariation Object containing `name` which is the class name applied to the block and `label` which identifies the variation to the user.\r\n *\r\n * @example\r\n * ```js\r\n * import { __ } from '@wordpress/i18n';\r\n * import { registerBlockStyle } from '@wordpress/blocks';\r\n * import { Button } from '@wordpress/components';\r\n *\r\n *\r\n * const ExampleComponent = () => {\r\n *     return (\r\n *         <Button\r\n *             onClick={ () => {\r\n *                 registerBlockStyle( 'core/quote', {\r\n *                     name: 'fancy-quote',\r\n *                     label: __( 'Fancy Quote' ),\r\n *                 } );\r\n *             } }\r\n *         >\r\n *             { __( 'Add a new block style for core/quote' ) }\r\n *         </Button>\r\n *     );\r\n * };\r\n * ```\r\n */\r\nexport const registerBlockStyle = ( blockNames, styleVariation ) => {\r\n\tdispatch( blocksStore ).addBlockStyles( blockNames, styleVariation );\r\n};\r\n\r\n/**\r\n * Unregisters a block style for the given block.\r\n *\r\n * @param {string} blockName          Name of block (example: “core/latest-posts”).\r\n * @param {string} styleVariationName Name of class applied to the block.\r\n *\r\n * @example\r\n * ```js\r\n * import { __ } from '@wordpress/i18n';\r\n * import { unregisterBlockStyle } from '@wordpress/blocks';\r\n * import { Button } from '@wordpress/components';\r\n *\r\n * const ExampleComponent = () => {\r\n *     return (\r\n *     <Button\r\n *         onClick={ () => {\r\n *             unregisterBlockStyle( 'core/quote', 'plain' );\r\n *         } }\r\n *     >\r\n *         { __( 'Remove the \"Plain\" block style for core/quote' ) }\r\n *     </Button>\r\n *     );\r\n * };\r\n * ```\r\n */\r\nexport const unregisterBlockStyle = ( blockName, styleVariationName ) => {\r\n\tdispatch( blocksStore ).removeBlockStyles( blockName, styleVariationName );\r\n};\r\n\r\n/**\r\n * Returns an array with the variations of a given block type.\r\n * Ignored from documentation as the recommended usage is via useSelect from @wordpress/data.\r\n *\r\n * @ignore\r\n *\r\n * @param {string}                blockName Name of block (example: “core/columns”).\r\n * @param {WPBlockVariationScope} [scope]   Block variation scope name.\r\n *\r\n * @return {(WPBlockVariation[]|void)} Block variations.\r\n */\r\nexport const getBlockVariations = ( blockName, scope ) => {\r\n\treturn select( blocksStore ).getBlockVariations( blockName, scope );\r\n};\r\n\r\n/**\r\n * Registers a new block variation for the given block type.\r\n *\r\n * For more information on block variations see\r\n * [the official documentation ](https://developer.wordpress.org/block-editor/reference-guides/block-api/block-variations/).\r\n *\r\n * @param {string}           blockName Name of the block (example: “core/columns”).\r\n * @param {WPBlockVariation} variation Object describing a block variation.\r\n *\r\n * @example\r\n * ```js\r\n * import { __ } from '@wordpress/i18n';\r\n * import { registerBlockVariation } from '@wordpress/blocks';\r\n * import { Button } from '@wordpress/components';\r\n *\r\n * const ExampleComponent = () => {\r\n *     return (\r\n *         <Button\r\n *             onClick={ () => {\r\n *                 registerBlockVariation( 'core/embed', {\r\n *                     name: 'custom',\r\n *                     title: __( 'My Custom Embed' ),\r\n *                     attributes: { providerNameSlug: 'custom' },\r\n *                 } );\r\n *             } }\r\n *          >\r\n *              __( 'Add a custom variation for core/embed' ) }\r\n *         </Button>\r\n *     );\r\n * };\r\n * ```\r\n */\r\nexport const registerBlockVariation = ( blockName, variation ) => {\r\n\tif ( typeof variation.name !== 'string' ) {\r\n\t\twarning( 'Variation names must be unique strings.' );\r\n\t}\r\n\r\n\tdispatch( blocksStore ).addBlockVariations( blockName, variation );\r\n};\r\n\r\n/**\r\n * Unregisters a block variation defined for the given block type.\r\n *\r\n * @param {string} blockName     Name of the block (example: “core/columns”).\r\n * @param {string} variationName Name of the variation defined for the block.\r\n *\r\n * @example\r\n * ```js\r\n * import { __ } from '@wordpress/i18n';\r\n * import { unregisterBlockVariation } from '@wordpress/blocks';\r\n * import { Button } from '@wordpress/components';\r\n *\r\n * const ExampleComponent = () => {\r\n *     return (\r\n *         <Button\r\n *             onClick={ () => {\r\n *                 unregisterBlockVariation( 'core/embed', 'youtube' );\r\n *             } }\r\n *         >\r\n *             { __( 'Remove the YouTube variation from core/embed' ) }\r\n *         </Button>\r\n *     );\r\n * };\r\n * ```\r\n */\r\nexport const unregisterBlockVariation = ( blockName, variationName ) => {\r\n\tdispatch( blocksStore ).removeBlockVariations( blockName, variationName );\r\n};\r\n\r\n/**\r\n * Registers a new block bindings source with an object defining its\r\n * behavior. Once registered, the source is available to be connected\r\n * to the supported block attributes.\r\n *\r\n * @param {Object}   source                    Properties of the source to be registered.\r\n * @param {string}   source.name               The unique and machine-readable name.\r\n * @param {string}   [source.label]            Human-readable label.\r\n * @param {Array}    [source.usesContext]      Array of context needed by the source only in the editor.\r\n * @param {Function} [source.getValues]        Function to get the values from the source.\r\n * @param {Function} [source.setValues]        Function to update multiple values connected to the source.\r\n * @param {Function} [source.canUserEditValue] Function to determine if the user can edit the value.\r\n * @param {Function} [source.getFieldsList]    Function to get the lists of fields to expose in the connections panel.\r\n *\r\n * @example\r\n * ```js\r\n * import { _x } from '@wordpress/i18n';\r\n * import { registerBlockBindingsSource } from '@wordpress/blocks'\r\n *\r\n * registerBlockBindingsSource( {\r\n *     name: 'plugin/my-custom-source',\r\n *     label: _x( 'My Custom Source', 'block bindings source' ),\r\n *     getValues: () => getSourceValues(),\r\n *     setValues: () => updateMyCustomValuesInBatch(),\r\n *     canUserEditValue: () => true,\r\n * } );\r\n * ```\r\n */\r\nexport const registerBlockBindingsSource = ( source ) => {\r\n\tconst {\r\n\t\tname,\r\n\t\tlabel,\r\n\t\tusesContext,\r\n\t\tgetValues,\r\n\t\tsetValues,\r\n\t\tcanUserEditValue,\r\n\t\tgetFieldsList,\r\n\t} = source;\r\n\r\n\tconst existingSource = unlock(\r\n\t\tselect( blocksStore )\r\n\t).getBlockBindingsSource( name );\r\n\r\n\t/*\r\n\t * Check if the source has been already registered on the client.\r\n\t * If the `getValues` property is defined, it could be assumed the source is already registered.\r\n\t */\r\n\tif ( existingSource?.getValues ) {\r\n\t\twarning(\r\n\t\t\t'Block bindings source \"' + name + '\" is already registered.'\r\n\t\t);\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Check the `name` property is correct.\r\n\tif ( ! name ) {\r\n\t\twarning( 'Block bindings source must contain a name.' );\r\n\t\treturn;\r\n\t}\r\n\r\n\tif ( typeof name !== 'string' ) {\r\n\t\twarning( 'Block bindings source name must be a string.' );\r\n\t\treturn;\r\n\t}\r\n\r\n\tif ( /[A-Z]+/.test( name ) ) {\r\n\t\twarning(\r\n\t\t\t'Block bindings source name must not contain uppercase characters.'\r\n\t\t);\r\n\t\treturn;\r\n\t}\r\n\r\n\tif ( ! /^[a-z0-9/-]+$/.test( name ) ) {\r\n\t\twarning(\r\n\t\t\t'Block bindings source name must contain only valid characters: lowercase characters, hyphens, or digits. Example: my-plugin/my-custom-source.'\r\n\t\t);\r\n\t\treturn;\r\n\t}\r\n\r\n\tif ( ! /^[a-z0-9-]+\\/[a-z0-9-]+$/.test( name ) ) {\r\n\t\twarning(\r\n\t\t\t'Block bindings source name must contain a namespace and valid characters. Example: my-plugin/my-custom-source.'\r\n\t\t);\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Check the `label` property is correct.\r\n\tif ( label && existingSource?.label ) {\r\n\t\twarning(\r\n\t\t\t'Block bindings \"' +\r\n\t\t\t\tname +\r\n\t\t\t\t'\" source label is already defined in the server.'\r\n\t\t);\r\n\t\treturn;\r\n\t}\r\n\r\n\tif ( ! label && ! existingSource?.label ) {\r\n\t\twarning( 'Block bindings source must contain a label.' );\r\n\t\treturn;\r\n\t}\r\n\r\n\tif ( label && typeof label !== 'string' ) {\r\n\t\twarning( 'Block bindings source label must be a string.' );\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Check the `usesContext` property is correct.\r\n\tif ( usesContext && ! Array.isArray( usesContext ) ) {\r\n\t\twarning( 'Block bindings source usesContext must be an array.' );\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Check the `getValues` property is correct.\r\n\tif ( getValues && typeof getValues !== 'function' ) {\r\n\t\twarning( 'Block bindings source getValues must be a function.' );\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Check the `setValues` property is correct.\r\n\tif ( setValues && typeof setValues !== 'function' ) {\r\n\t\twarning( 'Block bindings source setValues must be a function.' );\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Check the `canUserEditValue` property is correct.\r\n\tif ( canUserEditValue && typeof canUserEditValue !== 'function' ) {\r\n\t\twarning( 'Block bindings source canUserEditValue must be a function.' );\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Check the `getFieldsList` property is correct.\r\n\tif ( getFieldsList && typeof getFieldsList !== 'function' ) {\r\n\t\t// eslint-disable-next-line no-console\r\n\t\twarning( 'Block bindings source getFieldsList must be a function.' );\r\n\t\treturn;\r\n\t}\r\n\r\n\treturn unlock( dispatch( blocksStore ) ).addBlockBindingsSource( source );\r\n};\r\n\r\n/**\r\n * Unregisters a block bindings source\r\n *\r\n * @param {string} name The name of the block bindings source to unregister.\r\n *\r\n * @example\r\n * ```js\r\n * import { unregisterBlockBindingsSource } from '@wordpress/blocks';\r\n *\r\n * unregisterBlockBindingsSource( 'plugin/my-custom-source' );\r\n * ```\r\n */\r\nexport function unregisterBlockBindingsSource( name ) {\r\n\tconst oldSource = getBlockBindingsSource( name );\r\n\tif ( ! oldSource ) {\r\n\t\twarning( 'Block bindings source \"' + name + '\" is not registered.' );\r\n\t\treturn;\r\n\t}\r\n\tunlock( dispatch( blocksStore ) ).removeBlockBindingsSource( name );\r\n}\r\n\r\n/**\r\n * Returns a registered block bindings source.\r\n *\r\n * @param {string} name Block bindings source name.\r\n *\r\n * @return {?Object} Block bindings source.\r\n */\r\nexport function getBlockBindingsSource( name ) {\r\n\treturn unlock( select( blocksStore ) ).getBlockBindingsSource( name );\r\n}\r\n\r\n/**\r\n * Returns all registered block bindings sources.\r\n *\r\n * @return {Array} Block bindings sources.\r\n */\r\nexport function getBlockBindingsSources() {\r\n\treturn unlock( select( blocksStore ) ).getAllBlockBindingsSources();\r\n}\r\n"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,oBAAoB,GAAGA,CAAE5B,SAAS,EAAE6B,kBAAkB,KAAM;EACxEzF,QAAQ,CAAEW,WAAY,CAAC,CAAC+E,iBAAiB,CAAE9B,SAAS,EAAE6B,kBAAmB,CAAC;AAC3E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,kBAAkB,GAAGA,CAAE/B,SAAS,EAAEgC,KAAK,KAAM;EACzD,OAAO7F,MAAM,CAAEY,WAAY,CAAC,CAACgF,kBAAkB,CAAE/B,SAAS,EAAEgC,KAAM,CAAC;AACpE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAGA,CAAEjC,SAAS,EAAEkC,SAAS,KAAM;EACjE,IAAK,OAAOA,SAAS,CAAC5E,IAAI,KAAK,QAAQ,EAAG;IACzCkB,UAAA,CAAAC,YAAA,YAAAnC,OAAO,CAAE,yCAA0C,CAAC;EACrD;EAEAF,QAAQ,CAAEW,WAAY,CAAC,CAACoF,kBAAkB,CAAEnC,SAAS,EAAEkC,SAAU,CAAC;AACnE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,wBAAwB,GAAGA,CAAEpC,SAAS,EAAEqC,aAAa,KAAM;EACvEjG,QAAQ,CAAEW,WAAY,CAAC,CAACuF,qBAAqB,CAAEtC,SAAS,EAAEqC,aAAc,CAAC;AAC1E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]}