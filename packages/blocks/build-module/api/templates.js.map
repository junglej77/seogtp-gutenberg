{"version":3,"names":["renderToString","convertLegacyBlockNameAndAttributes","createBlock","getBlockType","doBlocksMatchTemplate","blocks","template","length","every","name","innerBlocksTemplate","index","block","innerBlocks","isHTMLAttribute","attributeDefinition","source","isQueryAttribute","normalizeAttributes","schema","values","Object","fromEntries","entries","map","key","value","normalizeAttribute","definition","Array","isArray","subValues","query","synchronizeBlocksWithTemplate","attributes","_blockType$attributes","blockType","normalizedAttributes","blockName","blockAttributes","undefined","originalName","originalContent","originalUndelimitedContent"],"sources":["@wordpress/blocks/src/api/templates.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { renderToString } from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { convertLegacyBlockNameAndAttributes } from './parser/convert-legacy-block';\r\nimport { createBlock } from './factory';\r\nimport { getBlockType } from './registration';\r\n\r\n/**\r\n * Checks whether a list of blocks matches a template by comparing the block names.\r\n *\r\n * @param {Array} blocks   Block list.\r\n * @param {Array} template Block template.\r\n *\r\n * @return {boolean} Whether the list of blocks matches a templates.\r\n */\r\nexport function doBlocksMatchTemplate( blocks = [], template = [] ) {\r\n\treturn (\r\n\t\tblocks.length === template.length &&\r\n\t\ttemplate.every( ( [ name, , innerBlocksTemplate ], index ) => {\r\n\t\t\tconst block = blocks[ index ];\r\n\t\t\treturn (\r\n\t\t\t\tname === block.name &&\r\n\t\t\t\tdoBlocksMatchTemplate( block.innerBlocks, innerBlocksTemplate )\r\n\t\t\t);\r\n\t\t} )\r\n\t);\r\n}\r\n\r\nconst isHTMLAttribute = ( attributeDefinition ) =>\r\n\tattributeDefinition?.source === 'html';\r\n\r\nconst isQueryAttribute = ( attributeDefinition ) =>\r\n\tattributeDefinition?.source === 'query';\r\n\r\nfunction normalizeAttributes( schema, values ) {\r\n\tif ( ! values ) {\r\n\t\treturn {};\r\n\t}\r\n\r\n\treturn Object.fromEntries(\r\n\t\tObject.entries( values ).map( ( [ key, value ] ) => [\r\n\t\t\tkey,\r\n\t\t\tnormalizeAttribute( schema[ key ], value ),\r\n\t\t] )\r\n\t);\r\n}\r\n\r\nfunction normalizeAttribute( definition, value ) {\r\n\tif ( isHTMLAttribute( definition ) && Array.isArray( value ) ) {\r\n\t\t// Introduce a deprecated call at this point\r\n\t\t// When we're confident that \"children\" format should be removed from the templates.\r\n\r\n\t\treturn renderToString( value );\r\n\t}\r\n\r\n\tif ( isQueryAttribute( definition ) && value ) {\r\n\t\treturn value.map( ( subValues ) => {\r\n\t\t\treturn normalizeAttributes( definition.query, subValues );\r\n\t\t} );\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Synchronize a block list with a block template.\r\n *\r\n * Synchronizing a block list with a block template means that we loop over the blocks\r\n * keep the block as is if it matches the block at the same position in the template\r\n * (If it has the same name) and if doesn't match, we create a new block based on the template.\r\n * Extra blocks not present in the template are removed.\r\n *\r\n * @param {Array} blocks   Block list.\r\n * @param {Array} template Block template.\r\n *\r\n * @return {Array} Updated Block list.\r\n */\r\nexport function synchronizeBlocksWithTemplate( blocks = [], template ) {\r\n\t// If no template is provided, return blocks unmodified.\r\n\tif ( ! template ) {\r\n\t\treturn blocks;\r\n\t}\r\n\r\n\treturn template.map(\r\n\t\t( [ name, attributes, innerBlocksTemplate ], index ) => {\r\n\t\t\tconst block = blocks[ index ];\r\n\r\n\t\t\tif ( block && block.name === name ) {\r\n\t\t\t\tconst innerBlocks = synchronizeBlocksWithTemplate(\r\n\t\t\t\t\tblock.innerBlocks,\r\n\t\t\t\t\tinnerBlocksTemplate\r\n\t\t\t\t);\r\n\t\t\t\treturn { ...block, innerBlocks };\r\n\t\t\t}\r\n\r\n\t\t\t// To support old templates that were using the \"children\" format\r\n\t\t\t// for the attributes using \"html\" strings now, we normalize the template attributes\r\n\t\t\t// before creating the blocks.\r\n\r\n\t\t\tconst blockType = getBlockType( name );\r\n\r\n\t\t\tconst normalizedAttributes = normalizeAttributes(\r\n\t\t\t\tblockType?.attributes ?? {},\r\n\t\t\t\tattributes\r\n\t\t\t);\r\n\r\n\t\t\tlet [ blockName, blockAttributes ] =\r\n\t\t\t\tconvertLegacyBlockNameAndAttributes(\r\n\t\t\t\t\tname,\r\n\t\t\t\t\tnormalizedAttributes\r\n\t\t\t\t);\r\n\r\n\t\t\t// If a Block is undefined at this point, use the core/missing block as\r\n\t\t\t// a placeholder for a better user experience.\r\n\t\t\tif ( undefined === getBlockType( blockName ) ) {\r\n\t\t\t\tblockAttributes = {\r\n\t\t\t\t\toriginalName: name,\r\n\t\t\t\t\toriginalContent: '',\r\n\t\t\t\t\toriginalUndelimitedContent: '',\r\n\t\t\t\t};\r\n\t\t\t\tblockName = 'core/missing';\r\n\t\t\t}\r\n\r\n\t\t\treturn createBlock(\r\n\t\t\t\tblockName,\r\n\t\t\t\tblockAttributes,\r\n\t\t\t\tsynchronizeBlocksWithTemplate( [], innerBlocksTemplate )\r\n\t\t\t);\r\n\t\t}\r\n\t);\r\n}\r\n"],"mappings":"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","ignoreList":[]}