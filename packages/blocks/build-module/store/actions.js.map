{"version":3,"names":["deprecated","processBlockType","addBlockTypes","blockTypes","type","Array","isArray","reapplyBlockTypeFilters","dispatch","select","processedBlockTypes","name","settings","Object","entries","getUnprocessedBlockTypes","result","push","length","__experimentalReapplyBlockFilters","since","alternative","removeBlockTypes","names","addBlockStyles","blockNames","styles","removeBlockStyles","blockName","styleNames","addBlockVariations","variations","removeBlockVariations","variationNames","setDefaultBlockName","setFreeformFallbackBlockName","setUnregisteredFallbackBlockName","setGroupingBlockName","setCategories","categories","updateCategory","slug","category","addBlockCollection","namespace","title","icon","removeBlockCollection"],"sources":["@wordpress/blocks/src/store/actions.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport deprecated from '@wordpress/deprecated';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { processBlockType } from './process-block-type';\r\n\r\n/** @typedef {import('../api/registration').WPBlockVariation} WPBlockVariation */\r\n/** @typedef {import('../api/registration').WPBlockType} WPBlockType */\r\n/** @typedef {import('./reducer').WPBlockCategory} WPBlockCategory */\r\n\r\n/**\r\n * Returns an action object used in signalling that block types have been added.\r\n * Ignored from documentation as the recommended usage for this action through registerBlockType from @wordpress/blocks.\r\n *\r\n * @ignore\r\n *\r\n * @param {WPBlockType|WPBlockType[]} blockTypes Object or array of objects representing blocks to added.\r\n *\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function addBlockTypes( blockTypes ) {\r\n\treturn {\r\n\t\ttype: 'ADD_BLOCK_TYPES',\r\n\t\tblockTypes: Array.isArray( blockTypes ) ? blockTypes : [ blockTypes ],\r\n\t};\r\n}\r\n\r\n/**\r\n * Signals that all block types should be computed again.\r\n * It uses stored unprocessed block types and all the most recent list of registered filters.\r\n *\r\n * It addresses the issue where third party block filters get registered after third party blocks. A sample sequence:\r\n *   1. Filter A.\r\n *   2. Block B.\r\n *   3. Block C.\r\n *   4. Filter D.\r\n *   5. Filter E.\r\n *   6. Block F.\r\n *   7. Filter G.\r\n * In this scenario some filters would not get applied for all blocks because they are registered too late.\r\n */\r\nexport function reapplyBlockTypeFilters() {\r\n\treturn ( { dispatch, select } ) => {\r\n\t\tconst processedBlockTypes = [];\r\n\t\tfor ( const [ name, settings ] of Object.entries(\r\n\t\t\tselect.getUnprocessedBlockTypes()\r\n\t\t) ) {\r\n\t\t\tconst result = dispatch( processBlockType( name, settings ) );\r\n\t\t\tif ( result ) {\r\n\t\t\t\tprocessedBlockTypes.push( result );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( ! processedBlockTypes.length ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdispatch.addBlockTypes( processedBlockTypes );\r\n\t};\r\n}\r\n\r\nexport function __experimentalReapplyBlockFilters() {\r\n\tdeprecated(\r\n\t\t'wp.data.dispatch( \"core/blocks\" ).__experimentalReapplyBlockFilters',\r\n\t\t{\r\n\t\t\tsince: '6.4',\r\n\t\t\talternative: 'reapplyBlockFilters',\r\n\t\t}\r\n\t);\r\n\r\n\treturn reapplyBlockTypeFilters();\r\n}\r\n\r\n/**\r\n * Returns an action object used to remove a registered block type.\r\n * Ignored from documentation as the recommended usage for this action through unregisterBlockType from @wordpress/blocks.\r\n *\r\n * @ignore\r\n *\r\n * @param {string|string[]} names Block name or array of block names to be removed.\r\n *\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function removeBlockTypes( names ) {\r\n\treturn {\r\n\t\ttype: 'REMOVE_BLOCK_TYPES',\r\n\t\tnames: Array.isArray( names ) ? names : [ names ],\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used in signalling that new block styles have been added.\r\n * Ignored from documentation as the recommended usage for this action through registerBlockStyle from @wordpress/blocks.\r\n *\r\n * @param {string|Array} blockNames Block names to register new styles for.\r\n * @param {Array|Object} styles     Block style object or array of block style objects.\r\n *\r\n * @ignore\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function addBlockStyles( blockNames, styles ) {\r\n\treturn {\r\n\t\ttype: 'ADD_BLOCK_STYLES',\r\n\t\tstyles: Array.isArray( styles ) ? styles : [ styles ],\r\n\t\tblockNames: Array.isArray( blockNames ) ? blockNames : [ blockNames ],\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used in signalling that block styles have been removed.\r\n * Ignored from documentation as the recommended usage for this action through unregisterBlockStyle from @wordpress/blocks.\r\n *\r\n * @ignore\r\n *\r\n * @param {string}       blockName  Block name.\r\n * @param {Array|string} styleNames Block style names or array of block style names.\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function removeBlockStyles( blockName, styleNames ) {\r\n\treturn {\r\n\t\ttype: 'REMOVE_BLOCK_STYLES',\r\n\t\tstyleNames: Array.isArray( styleNames ) ? styleNames : [ styleNames ],\r\n\t\tblockName,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used in signalling that new block variations have been added.\r\n * Ignored from documentation as the recommended usage for this action through registerBlockVariation from @wordpress/blocks.\r\n *\r\n * @ignore\r\n *\r\n * @param {string}                              blockName  Block name.\r\n * @param {WPBlockVariation|WPBlockVariation[]} variations Block variations.\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function addBlockVariations( blockName, variations ) {\r\n\treturn {\r\n\t\ttype: 'ADD_BLOCK_VARIATIONS',\r\n\t\tvariations: Array.isArray( variations ) ? variations : [ variations ],\r\n\t\tblockName,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used in signalling that block variations have been removed.\r\n * Ignored from documentation as the recommended usage for this action through unregisterBlockVariation from @wordpress/blocks.\r\n *\r\n * @ignore\r\n *\r\n * @param {string}          blockName      Block name.\r\n * @param {string|string[]} variationNames Block variation names.\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function removeBlockVariations( blockName, variationNames ) {\r\n\treturn {\r\n\t\ttype: 'REMOVE_BLOCK_VARIATIONS',\r\n\t\tvariationNames: Array.isArray( variationNames )\r\n\t\t\t? variationNames\r\n\t\t\t: [ variationNames ],\r\n\t\tblockName,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used to set the default block name.\r\n * Ignored from documentation as the recommended usage for this action through setDefaultBlockName from @wordpress/blocks.\r\n *\r\n * @ignore\r\n *\r\n * @param {string} name Block name.\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function setDefaultBlockName( name ) {\r\n\treturn {\r\n\t\ttype: 'SET_DEFAULT_BLOCK_NAME',\r\n\t\tname,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used to set the name of the block used as a fallback\r\n * for non-block content.\r\n * Ignored from documentation as the recommended usage for this action through setFreeformContentHandlerName from @wordpress/blocks.\r\n *\r\n * @ignore\r\n *\r\n * @param {string} name Block name.\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function setFreeformFallbackBlockName( name ) {\r\n\treturn {\r\n\t\ttype: 'SET_FREEFORM_FALLBACK_BLOCK_NAME',\r\n\t\tname,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used to set the name of the block used as a fallback\r\n * for unregistered blocks.\r\n * Ignored from documentation as the recommended usage for this action through setUnregisteredTypeHandlerName from @wordpress/blocks.\r\n *\r\n * @ignore\r\n *\r\n * @param {string} name Block name.\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function setUnregisteredFallbackBlockName( name ) {\r\n\treturn {\r\n\t\ttype: 'SET_UNREGISTERED_FALLBACK_BLOCK_NAME',\r\n\t\tname,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used to set the name of the block used\r\n * when grouping other blocks\r\n * eg: in \"Group/Ungroup\" interactions\r\n * Ignored from documentation as the recommended usage for this action through setGroupingBlockName from @wordpress/blocks.\r\n *\r\n * @ignore\r\n *\r\n * @param {string} name Block name.\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function setGroupingBlockName( name ) {\r\n\treturn {\r\n\t\ttype: 'SET_GROUPING_BLOCK_NAME',\r\n\t\tname,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used to set block categories.\r\n * Ignored from documentation as the recommended usage for this action through setCategories from @wordpress/blocks.\r\n *\r\n * @ignore\r\n *\r\n * @param {WPBlockCategory[]} categories Block categories.\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function setCategories( categories ) {\r\n\treturn {\r\n\t\ttype: 'SET_CATEGORIES',\r\n\t\tcategories,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used to update a category.\r\n * Ignored from documentation as the recommended usage for this action through updateCategory from @wordpress/blocks.\r\n *\r\n * @ignore\r\n *\r\n * @param {string} slug     Block category slug.\r\n * @param {Object} category Object containing the category properties that should be updated.\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function updateCategory( slug, category ) {\r\n\treturn {\r\n\t\ttype: 'UPDATE_CATEGORY',\r\n\t\tslug,\r\n\t\tcategory,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used to add block collections\r\n * Ignored from documentation as the recommended usage for this action through registerBlockCollection from @wordpress/blocks.\r\n *\r\n * @ignore\r\n *\r\n * @param {string} namespace The namespace of the blocks to put in the collection\r\n * @param {string} title     The title to display in the block inserter\r\n * @param {Object} icon      (optional) The icon to display in the block inserter\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function addBlockCollection( namespace, title, icon ) {\r\n\treturn {\r\n\t\ttype: 'ADD_BLOCK_COLLECTION',\r\n\t\tnamespace,\r\n\t\ttitle,\r\n\t\ticon,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used to remove block collections\r\n * Ignored from documentation as the recommended usage for this action through unregisterBlockCollection from @wordpress/blocks.\r\n *\r\n * @ignore\r\n *\r\n * @param {string} namespace The namespace of the blocks to put in the collection\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function removeBlockCollection( namespace ) {\r\n\treturn {\r\n\t\ttype: 'REMOVE_BLOCK_COLLECTION',\r\n\t\tnamespace,\r\n\t};\r\n}\r\n"],"mappings":"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,IAAI,EAAG;EAC3C,OAAO;IACNP,IAAI,EAAE,wBAAwB;IAC9BO;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASwB,4BAA4BA,CAAExB,IAAI,EAAG;EACpD,OAAO;IACNP,IAAI,EAAE,kCAAkC;IACxCO;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASyB,gCAAgCA,CAAEzB,IAAI,EAAG;EACxD,OAAO;IACNP,IAAI,EAAE,sCAAsC;IAC5CO;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS0B,oBAAoBA,CAAE1B,IAAI,EAAG;EAC5C,OAAO;IACNP,IAAI,EAAE,yBAAyB;IAC/BO;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS2B,aAAaA,CAAEC,UAAU,EAAG;EAC3C,OAAO;IACNnC,IAAI,EAAE,gBAAgB;IACtBmC;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAAEC,IAAI,EAAEC,QAAQ,EAAG;EAChD,OAAO;IACNtC,IAAI,EAAE,iBAAiB;IACvBqC,IAAI;IACJC;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAAEC,SAAS,EAAEC,KAAK,EAAEC,IAAI,EAAG;EAC5D,OAAO;IACN1C,IAAI,EAAE,sBAAsB;IAC5BwC,SAAS;IACTC,KAAK;IACLC;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAAEH,SAAS,EAAG;EAClD,OAAO;IACNxC,IAAI,EAAE,yBAAyB;IAC/BwC;EACD,CAAC;AACF","ignoreList":[]}