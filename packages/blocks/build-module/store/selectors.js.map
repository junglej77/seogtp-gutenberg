{"version":3,"names":["removeAccents","createSelector","RichTextData","getValueFromObjectPath","matchesAttributes","getNormalizedBlockType","state","nameOrType","getBlockType","getBlockTypes","Object","values","blockTypes","name","getBlockStyles","blockStyles","getBlockVariations","blockName","scope","variations","blockVariations","filter","variation","includes","getActiveBlockVariation","attributes","blockType","attributeKeys","keys","match","maxMatchedAttributes","Array","isArray","isActive","definedAttributes","attribute","topLevelAttribute","split","definedAttributesLength","length","isMatch","every","variationAttributeValue","undefined","blockAttributeValue","toHTMLString","getDefaultBlockVariation","defaultVariation","reverse","find","isDefault","getCategories","categories","getCollections","collections","getDefaultBlockName","defaultBlockName","getFreeformFallbackBlockName","freeformFallbackBlockName","getUnregisteredFallbackBlockName","unregisteredFallbackBlockName","getGroupingBlockName","groupingBlockName","getChildBlockNames","parent","map","getBlockSupport","feature","defaultSupports","supports","hasBlockSupport","getNormalizedSearchTerm","term","toLowerCase","trim","isMatchingSearchTerm","searchTerm","normalizedSearchTerm","isSearchMatch","candidate","title","keywords","some","category","description","hasChildBlocks","hasChildBlocksWithInserterSupport","childBlockName","__experimentalHasContentRoleAttribute","blockTypeName","entries","__experimentalRole"],"sources":["@wordpress/blocks/src/store/selectors.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport removeAccents from 'remove-accents';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { createSelector } from '@wordpress/data';\r\nimport { RichTextData } from '@wordpress/rich-text';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { getValueFromObjectPath, matchesAttributes } from './utils';\r\n\r\n/** @typedef {import('../api/registration').WPBlockVariation} WPBlockVariation */\r\n/** @typedef {import('../api/registration').WPBlockVariationScope} WPBlockVariationScope */\r\n/** @typedef {import('./reducer').WPBlockCategory} WPBlockCategory */\r\n\r\n/**\r\n * Given a block name or block type object, returns the corresponding\r\n * normalized block type object.\r\n *\r\n * @param {Object}          state      Blocks state.\r\n * @param {(string|Object)} nameOrType Block name or type object\r\n *\r\n * @return {Object} Block type object.\r\n */\r\nconst getNormalizedBlockType = ( state, nameOrType ) =>\r\n\t'string' === typeof nameOrType\r\n\t\t? getBlockType( state, nameOrType )\r\n\t\t: nameOrType;\r\n\r\n/**\r\n * Returns all the available block types.\r\n *\r\n * @param {Object} state Data state.\r\n *\r\n * @example\r\n * ```js\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const blockTypes = useSelect(\r\n *         ( select ) => select( blocksStore ).getBlockTypes(),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         <ul>\r\n *             { blockTypes.map( ( block ) => (\r\n *                 <li key={ block.name }>{ block.title }</li>\r\n *             ) ) }\r\n *         </ul>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {Array} Block Types.\r\n */\r\nexport const getBlockTypes = createSelector(\r\n\t( state ) => Object.values( state.blockTypes ),\r\n\t( state ) => [ state.blockTypes ]\r\n);\r\n\r\n/**\r\n * Returns a block type by name.\r\n *\r\n * @param {Object} state Data state.\r\n * @param {string} name  Block type name.\r\n *\r\n * @example\r\n * ```js\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const paragraphBlock = useSelect( ( select ) =>\r\n *         ( select ) => select( blocksStore ).getBlockType( 'core/paragraph' ),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         <ul>\r\n *             { paragraphBlock &&\r\n *                 Object.entries( paragraphBlock.supports ).map(\r\n *                     ( blockSupportsEntry ) => {\r\n *                         const [ propertyName, value ] = blockSupportsEntry;\r\n *                         return (\r\n *                             <li\r\n *                                 key={ propertyName }\r\n *                             >{ `${ propertyName } : ${ value }` }</li>\r\n *                         );\r\n *                     }\r\n *                 ) }\r\n *         </ul>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {Object?} Block Type.\r\n */\r\nexport function getBlockType( state, name ) {\r\n\treturn state.blockTypes[ name ];\r\n}\r\n\r\n/**\r\n * Returns block styles by block name.\r\n *\r\n * @param {Object} state Data state.\r\n * @param {string} name  Block type name.\r\n *\r\n * @example\r\n * ```js\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const buttonBlockStyles = useSelect( ( select ) =>\r\n *         select( blocksStore ).getBlockStyles( 'core/button' ),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         <ul>\r\n *             { buttonBlockStyles &&\r\n *                 buttonBlockStyles.map( ( style ) => (\r\n *                     <li key={ style.name }>{ style.label }</li>\r\n *                 ) ) }\r\n *         </ul>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {Array?} Block Styles.\r\n */\r\nexport function getBlockStyles( state, name ) {\r\n\treturn state.blockStyles[ name ];\r\n}\r\n\r\n/**\r\n * Returns block variations by block name.\r\n *\r\n * @param {Object}                state     Data state.\r\n * @param {string}                blockName Block type name.\r\n * @param {WPBlockVariationScope} [scope]   Block variation scope name.\r\n *\r\n * @example\r\n * ```js\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const socialLinkVariations = useSelect( ( select ) =>\r\n *         select( blocksStore ).getBlockVariations( 'core/social-link' ),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         <ul>\r\n *             { socialLinkVariations &&\r\n *                 socialLinkVariations.map( ( variation ) => (\r\n *                     <li key={ variation.name }>{ variation.title }</li>\r\n *             ) ) }\r\n *     </ul>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {(WPBlockVariation[]|void)} Block variations.\r\n */\r\nexport const getBlockVariations = createSelector(\r\n\t( state, blockName, scope ) => {\r\n\t\tconst variations = state.blockVariations[ blockName ];\r\n\t\tif ( ! variations || ! scope ) {\r\n\t\t\treturn variations;\r\n\t\t}\r\n\t\treturn variations.filter( ( variation ) => {\r\n\t\t\t// For backward compatibility reasons, variation's scope defaults to\r\n\t\t\t// `block` and `inserter` when not set.\r\n\t\t\treturn ( variation.scope || [ 'block', 'inserter' ] ).includes(\r\n\t\t\t\tscope\r\n\t\t\t);\r\n\t\t} );\r\n\t},\r\n\t( state, blockName ) => [ state.blockVariations[ blockName ] ]\r\n);\r\n\r\n/**\r\n * Returns the active block variation for a given block based on its attributes.\r\n * Variations are determined by their `isActive` property.\r\n * Which is either an array of block attribute keys or a function.\r\n *\r\n * In case of an array of block attribute keys, the `attributes` are compared\r\n * to the variation's attributes using strict equality check.\r\n *\r\n * In case of function type, the function should accept a block's attributes\r\n * and the variation's attributes and determines if a variation is active.\r\n * A function that accepts a block's attributes and the variation's attributes and determines if a variation is active.\r\n *\r\n * @param {Object}                state      Data state.\r\n * @param {string}                blockName  Name of block (example: “core/columns”).\r\n * @param {Object}                attributes Block attributes used to determine active variation.\r\n * @param {WPBlockVariationScope} [scope]    Block variation scope name.\r\n *\r\n * @example\r\n * ```js\r\n * import { __ } from '@wordpress/i18n';\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { store as blockEditorStore } from '@wordpress/block-editor';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     // This example assumes that a core/embed block is the first block in the Block Editor.\r\n *     const activeBlockVariation = useSelect( ( select ) => {\r\n *         // Retrieve the list of blocks.\r\n *         const [ firstBlock ] = select( blockEditorStore ).getBlocks()\r\n *\r\n *         // Return the active block variation for the first block.\r\n *         return select( blocksStore ).getActiveBlockVariation(\r\n *             firstBlock.name,\r\n *             firstBlock.attributes\r\n *         );\r\n *     }, [] );\r\n *\r\n *     return activeBlockVariation && activeBlockVariation.name === 'spotify' ? (\r\n *         <p>{ __( 'Spotify variation' ) }</p>\r\n *         ) : (\r\n *         <p>{ __( 'Other variation' ) }</p>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {(WPBlockVariation|undefined)} Active block variation.\r\n */\r\nexport function getActiveBlockVariation( state, blockName, attributes, scope ) {\r\n\tconst variations = getBlockVariations( state, blockName, scope );\r\n\r\n\tif ( ! variations ) {\r\n\t\treturn variations;\r\n\t}\r\n\r\n\tconst blockType = getBlockType( state, blockName );\r\n\tconst attributeKeys = Object.keys( blockType?.attributes || {} );\r\n\tlet match;\r\n\tlet maxMatchedAttributes = 0;\r\n\r\n\tfor ( const variation of variations ) {\r\n\t\tif ( Array.isArray( variation.isActive ) ) {\r\n\t\t\tconst definedAttributes = variation.isActive.filter(\r\n\t\t\t\t( attribute ) => {\r\n\t\t\t\t\t// We support nested attribute paths, e.g. `layout.type`.\r\n\t\t\t\t\t// In this case, we need to check if the part before the\r\n\t\t\t\t\t// first dot is a known attribute.\r\n\t\t\t\t\tconst topLevelAttribute = attribute.split( '.' )[ 0 ];\r\n\t\t\t\t\treturn attributeKeys.includes( topLevelAttribute );\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tconst definedAttributesLength = definedAttributes.length;\r\n\t\t\tif ( definedAttributesLength === 0 ) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tconst isMatch = definedAttributes.every( ( attribute ) => {\r\n\t\t\t\tconst variationAttributeValue = getValueFromObjectPath(\r\n\t\t\t\t\tvariation.attributes,\r\n\t\t\t\t\tattribute\r\n\t\t\t\t);\r\n\t\t\t\tif ( variationAttributeValue === undefined ) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tlet blockAttributeValue = getValueFromObjectPath(\r\n\t\t\t\t\tattributes,\r\n\t\t\t\t\tattribute\r\n\t\t\t\t);\r\n\t\t\t\tif ( blockAttributeValue instanceof RichTextData ) {\r\n\t\t\t\t\tblockAttributeValue = blockAttributeValue.toHTMLString();\r\n\t\t\t\t}\r\n\t\t\t\treturn matchesAttributes(\r\n\t\t\t\t\tblockAttributeValue,\r\n\t\t\t\t\tvariationAttributeValue\r\n\t\t\t\t);\r\n\t\t\t} );\r\n\t\t\tif ( isMatch && definedAttributesLength > maxMatchedAttributes ) {\r\n\t\t\t\tmatch = variation;\r\n\t\t\t\tmaxMatchedAttributes = definedAttributesLength;\r\n\t\t\t}\r\n\t\t} else if ( variation.isActive?.( attributes, variation.attributes ) ) {\r\n\t\t\t// If isActive is a function, we cannot know how many attributes it matches.\r\n\t\t\t// This means that we cannot compare the specificity of our matches,\r\n\t\t\t// and simply return the best match we have found.\r\n\t\t\treturn match || variation;\r\n\t\t}\r\n\t}\r\n\treturn match;\r\n}\r\n\r\n/**\r\n * Returns the default block variation for the given block type.\r\n * When there are multiple variations annotated as the default one,\r\n * the last added item is picked. This simplifies registering overrides.\r\n * When there is no default variation set, it returns the first item.\r\n *\r\n * @param {Object}                state     Data state.\r\n * @param {string}                blockName Block type name.\r\n * @param {WPBlockVariationScope} [scope]   Block variation scope name.\r\n *\r\n * @example\r\n * ```js\r\n * import { __, sprintf } from '@wordpress/i18n';\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const defaultEmbedBlockVariation = useSelect( ( select ) =>\r\n *         select( blocksStore ).getDefaultBlockVariation( 'core/embed' ),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         defaultEmbedBlockVariation && (\r\n *             <p>\r\n *                 { sprintf(\r\n *                     __( 'core/embed default variation: %s' ),\r\n *                     defaultEmbedBlockVariation.title\r\n *                 ) }\r\n *             </p>\r\n *         )\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {?WPBlockVariation} The default block variation.\r\n */\r\nexport function getDefaultBlockVariation( state, blockName, scope ) {\r\n\tconst variations = getBlockVariations( state, blockName, scope );\r\n\r\n\tconst defaultVariation = [ ...variations ]\r\n\t\t.reverse()\r\n\t\t.find( ( { isDefault } ) => !! isDefault );\r\n\r\n\treturn defaultVariation || variations[ 0 ];\r\n}\r\n\r\n/**\r\n * Returns all the available block categories.\r\n *\r\n * @param {Object} state Data state.\r\n *\r\n * @example\r\n * ```js\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect, } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const blockCategories = useSelect( ( select ) =>\r\n *         select( blocksStore ).getCategories(),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         <ul>\r\n *             { blockCategories.map( ( category ) => (\r\n *                 <li key={ category.slug }>{ category.title }</li>\r\n *             ) ) }\r\n *         </ul>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {WPBlockCategory[]} Categories list.\r\n */\r\nexport function getCategories( state ) {\r\n\treturn state.categories;\r\n}\r\n\r\n/**\r\n * Returns all the available collections.\r\n *\r\n * @param {Object} state Data state.\r\n *\r\n * @example\r\n * ```js\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const blockCollections = useSelect( ( select ) =>\r\n *         select( blocksStore ).getCollections(),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         <ul>\r\n *             { Object.values( blockCollections ).length > 0 &&\r\n *                 Object.values( blockCollections ).map( ( collection ) => (\r\n *                     <li key={ collection.title }>{ collection.title }</li>\r\n *             ) ) }\r\n *         </ul>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {Object} Collections list.\r\n */\r\nexport function getCollections( state ) {\r\n\treturn state.collections;\r\n}\r\n\r\n/**\r\n * Returns the name of the default block name.\r\n *\r\n * @param {Object} state Data state.\r\n *\r\n * @example\r\n * ```js\r\n * import { __, sprintf } from '@wordpress/i18n';\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const defaultBlockName = useSelect( ( select ) =>\r\n *         select( blocksStore ).getDefaultBlockName(),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         defaultBlockName && (\r\n *             <p>\r\n *                 { sprintf( __( 'Default block name: %s' ), defaultBlockName ) }\r\n *             </p>\r\n *         )\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {string?} Default block name.\r\n */\r\nexport function getDefaultBlockName( state ) {\r\n\treturn state.defaultBlockName;\r\n}\r\n\r\n/**\r\n * Returns the name of the block for handling non-block content.\r\n *\r\n * @param {Object} state Data state.\r\n *\r\n * @example\r\n * ```js\r\n * import { __, sprintf } from '@wordpress/i18n';\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const freeformFallbackBlockName = useSelect( ( select ) =>\r\n *         select( blocksStore ).getFreeformFallbackBlockName(),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         freeformFallbackBlockName && (\r\n *             <p>\r\n *                 { sprintf( __(\r\n *                     'Freeform fallback block name: %s' ),\r\n *                     freeformFallbackBlockName\r\n *                 ) }\r\n *             </p>\r\n *         )\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {string?} Name of the block for handling non-block content.\r\n */\r\nexport function getFreeformFallbackBlockName( state ) {\r\n\treturn state.freeformFallbackBlockName;\r\n}\r\n\r\n/**\r\n * Returns the name of the block for handling unregistered blocks.\r\n *\r\n * @param {Object} state Data state.\r\n *\r\n * @example\r\n * ```js\r\n * import { __, sprintf } from '@wordpress/i18n';\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const unregisteredFallbackBlockName = useSelect( ( select ) =>\r\n *         select( blocksStore ).getUnregisteredFallbackBlockName(),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         unregisteredFallbackBlockName && (\r\n *             <p>\r\n *                 { sprintf( __(\r\n *                     'Unregistered fallback block name: %s' ),\r\n *                     unregisteredFallbackBlockName\r\n *                 ) }\r\n *             </p>\r\n *         )\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {string?} Name of the block for handling unregistered blocks.\r\n */\r\nexport function getUnregisteredFallbackBlockName( state ) {\r\n\treturn state.unregisteredFallbackBlockName;\r\n}\r\n\r\n/**\r\n * Returns the name of the block for handling the grouping of blocks.\r\n *\r\n * @param {Object} state Data state.\r\n *\r\n * @example\r\n * ```js\r\n * import { __, sprintf } from '@wordpress/i18n';\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const groupingBlockName = useSelect( ( select ) =>\r\n *         select( blocksStore ).getGroupingBlockName(),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         groupingBlockName && (\r\n *             <p>\r\n *                 { sprintf(\r\n *                     __( 'Default grouping block name: %s' ),\r\n *                     groupingBlockName\r\n *                 ) }\r\n *             </p>\r\n *         )\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {string?} Name of the block for handling the grouping of blocks.\r\n */\r\nexport function getGroupingBlockName( state ) {\r\n\treturn state.groupingBlockName;\r\n}\r\n\r\n/**\r\n * Returns an array with the child blocks of a given block.\r\n *\r\n * @param {Object} state     Data state.\r\n * @param {string} blockName Block type name.\r\n *\r\n * @example\r\n * ```js\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const childBlockNames = useSelect( ( select ) =>\r\n *         select( blocksStore ).getChildBlockNames( 'core/navigation' ),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         <ul>\r\n *             { childBlockNames &&\r\n *                 childBlockNames.map( ( child ) => (\r\n *                     <li key={ child }>{ child }</li>\r\n *             ) ) }\r\n *         </ul>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {Array} Array of child block names.\r\n */\r\nexport const getChildBlockNames = createSelector(\r\n\t( state, blockName ) => {\r\n\t\treturn getBlockTypes( state )\r\n\t\t\t.filter( ( blockType ) => {\r\n\t\t\t\treturn blockType.parent?.includes( blockName );\r\n\t\t\t} )\r\n\t\t\t.map( ( { name } ) => name );\r\n\t},\r\n\t( state ) => [ state.blockTypes ]\r\n);\r\n\r\n/**\r\n * Returns the block support value for a feature, if defined.\r\n *\r\n * @param {Object}          state           Data state.\r\n * @param {(string|Object)} nameOrType      Block name or type object\r\n * @param {Array|string}    feature         Feature to retrieve\r\n * @param {*}               defaultSupports Default value to return if not\r\n *                                          explicitly defined\r\n *\r\n * @example\r\n * ```js\r\n * import { __, sprintf } from '@wordpress/i18n';\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const paragraphBlockSupportValue = useSelect( ( select ) =>\r\n *         select( blocksStore ).getBlockSupport( 'core/paragraph', 'anchor' ),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         <p>\r\n *             { sprintf(\r\n *                 __( 'core/paragraph supports.anchor value: %s' ),\r\n *                 paragraphBlockSupportValue\r\n *             ) }\r\n *         </p>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {?*} Block support value\r\n */\r\nexport const getBlockSupport = (\r\n\tstate,\r\n\tnameOrType,\r\n\tfeature,\r\n\tdefaultSupports\r\n) => {\r\n\tconst blockType = getNormalizedBlockType( state, nameOrType );\r\n\tif ( ! blockType?.supports ) {\r\n\t\treturn defaultSupports;\r\n\t}\r\n\r\n\treturn getValueFromObjectPath(\r\n\t\tblockType.supports,\r\n\t\tfeature,\r\n\t\tdefaultSupports\r\n\t);\r\n};\r\n\r\n/**\r\n * Returns true if the block defines support for a feature, or false otherwise.\r\n *\r\n * @param {Object}          state           Data state.\r\n * @param {(string|Object)} nameOrType      Block name or type object.\r\n * @param {string}          feature         Feature to test.\r\n * @param {boolean}         defaultSupports Whether feature is supported by\r\n *                                          default if not explicitly defined.\r\n *\r\n * @example\r\n * ```js\r\n * import { __, sprintf } from '@wordpress/i18n';\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const paragraphBlockSupportClassName = useSelect( ( select ) =>\r\n *         select( blocksStore ).hasBlockSupport( 'core/paragraph', 'className' ),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         <p>\r\n *             { sprintf(\r\n *                 __( 'core/paragraph supports custom class name?: %s' ),\r\n *                 paragraphBlockSupportClassName\r\n *             ) }\r\n *         /p>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {boolean} Whether block supports feature.\r\n */\r\nexport function hasBlockSupport( state, nameOrType, feature, defaultSupports ) {\r\n\treturn !! getBlockSupport( state, nameOrType, feature, defaultSupports );\r\n}\r\n\r\n/**\r\n * Normalizes a search term string: removes accents, converts to lowercase, removes extra whitespace.\r\n *\r\n * @param {string|null|undefined} term Search term to normalize.\r\n * @return {string} Normalized search term.\r\n */\r\nfunction getNormalizedSearchTerm( term ) {\r\n\treturn removeAccents( term ?? '' )\r\n\t\t.toLowerCase()\r\n\t\t.trim();\r\n}\r\n\r\n/**\r\n * Returns true if the block type by the given name or object value matches a\r\n * search term, or false otherwise.\r\n *\r\n * @param {Object}          state      Blocks state.\r\n * @param {(string|Object)} nameOrType Block name or type object.\r\n * @param {string}          searchTerm Search term by which to filter.\r\n *\r\n * @example\r\n * ```js\r\n * import { __, sprintf } from '@wordpress/i18n';\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const termFound = useSelect(\r\n *         ( select ) =>\r\n *             select( blocksStore ).isMatchingSearchTerm(\r\n *                 'core/navigation',\r\n *                 'theme'\r\n *             ),\r\n *             []\r\n *         );\r\n *\r\n *     return (\r\n *         <p>\r\n *             { sprintf(\r\n *                 __(\r\n *                     'Search term was found in the title, keywords, category or description in block.json: %s'\r\n *                 ),\r\n *                 termFound\r\n *             ) }\r\n *         </p>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {Object[]} Whether block type matches search term.\r\n */\r\nexport function isMatchingSearchTerm( state, nameOrType, searchTerm = '' ) {\r\n\tconst blockType = getNormalizedBlockType( state, nameOrType );\r\n\tconst normalizedSearchTerm = getNormalizedSearchTerm( searchTerm );\r\n\r\n\tconst isSearchMatch = ( candidate ) =>\r\n\t\tgetNormalizedSearchTerm( candidate ).includes( normalizedSearchTerm );\r\n\r\n\treturn (\r\n\t\tisSearchMatch( blockType.title ) ||\r\n\t\tblockType.keywords?.some( isSearchMatch ) ||\r\n\t\tisSearchMatch( blockType.category ) ||\r\n\t\t( typeof blockType.description === 'string' &&\r\n\t\t\tisSearchMatch( blockType.description ) )\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns a boolean indicating if a block has child blocks or not.\r\n *\r\n * @param {Object} state     Data state.\r\n * @param {string} blockName Block type name.\r\n *\r\n * @example\r\n * ```js\r\n * import { __, sprintf } from '@wordpress/i18n';\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const navigationBlockHasChildBlocks = useSelect( ( select ) =>\r\n *         select( blocksStore ).hasChildBlocks( 'core/navigation' ),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         <p>\r\n *             { sprintf(\r\n *                 __( 'core/navigation has child blocks: %s' ),\r\n *                 navigationBlockHasChildBlocks\r\n *             ) }\r\n *         </p>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {boolean} True if a block contains child blocks and false otherwise.\r\n */\r\nexport const hasChildBlocks = ( state, blockName ) => {\r\n\treturn getChildBlockNames( state, blockName ).length > 0;\r\n};\r\n\r\n/**\r\n * Returns a boolean indicating if a block has at least one child block with inserter support.\r\n *\r\n * @param {Object} state     Data state.\r\n * @param {string} blockName Block type name.\r\n *\r\n * @example\r\n * ```js\r\n * import { __, sprintf } from '@wordpress/i18n';\r\n * import { store as blocksStore } from '@wordpress/blocks';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const navigationBlockHasChildBlocksWithInserterSupport = useSelect( ( select ) =>\r\n *         select( blocksStore ).hasChildBlocksWithInserterSupport(\r\n *             'core/navigation'\r\n *         ),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         <p>\r\n *             { sprintf(\r\n *                 __( 'core/navigation has child blocks with inserter support: %s' ),\r\n *                 navigationBlockHasChildBlocksWithInserterSupport\r\n *             ) }\r\n *         </p>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {boolean} True if a block contains at least one child blocks with inserter support\r\n *                   and false otherwise.\r\n */\r\nexport const hasChildBlocksWithInserterSupport = ( state, blockName ) => {\r\n\treturn getChildBlockNames( state, blockName ).some( ( childBlockName ) => {\r\n\t\treturn hasBlockSupport( state, childBlockName, 'inserter', true );\r\n\t} );\r\n};\r\n\r\n/**\r\n * DO-NOT-USE in production.\r\n * This selector is created for internal/experimental only usage and may be\r\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\r\n */\r\nexport const __experimentalHasContentRoleAttribute = createSelector(\r\n\t( state, blockTypeName ) => {\r\n\t\tconst blockType = getBlockType( state, blockTypeName );\r\n\t\tif ( ! blockType ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn Object.entries( blockType.attributes ).some(\r\n\t\t\t( [ , { __experimentalRole } ] ) => __experimentalRole === 'content'\r\n\t\t);\r\n\t},\r\n\t( state, blockTypeName ) => [\r\n\t\tstate.blockTypes[ blockTypeName ]?.attributes,\r\n\t]\r\n);\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,aAAa,MAAM,gBAAgB;;AAE1C;AACA;AACA;AACA,SAASC,cAAc,QAAQ,iBAAiB;AAChD,SAASC,YAAY,QAAQ,sBAAsB;;AAEnD;AACA;AACA;AACA,SAASC,sBAAsB,EAAEC,iBAAiB,QAAQ,SAAS;;AAEnE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAGA,CAAEC,KAAK,EAAEC,UAAU,KACjD,QAAQ,KAAK,OAAOA,UAAU,GAC3BC,YAAY,CAAEF,KAAK,EAAEC,UAAW,CAAC,GACjCA,UAAU;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,aAAa,GAAGR,cAAc,CACxCK,KAAK,IAAMI,MAAM,CAACC,MAAM,CAAEL,KAAK,CAACM,UAAW,CAAC,EAC5CN,KAAK,IAAM,CAAEA,KAAK,CAACM,UAAU,CAChC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASJ,YAAYA,CAAEF,KAAK,EAAEO,IAAI,EAAG;EAC3C,OAAOP,KAAK,CAACM,UAAU,CAAEC,IAAI,CAAE;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAAER,KAAK,EAAEO,IAAI,EAAG;EAC7C,OAAOP,KAAK,CAACS,WAAW,CAAEF,IAAI,CAAE;AACjC;;AAEA;AACA;AACA;AAC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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASiB,wBAAwBA,CAAExC,KAAK,EAAEW,SAAS,EAAEC,KAAK,EAAG;EACnE,MAAMC,UAAU,GAAGH,kBAAkB,CAAEV,KAAK,EAAEW,SAAS,EAAEC,KAAM,CAAC;EAEhE,MAAM6B,gBAAgB,GAAG,CAAE,GAAG5B,UAAU,CAAE,CACxC6B,OAAO,CAAC,CAAC,CACTC,IAAI,CAAE,CAAE;IAAEC;EAAU,CAAC,KAAM,CAAC,CAAEA,SAAU,CAAC;EAE3C,OAAOH,gBAAgB,IAAI5B,UAAU,CAAE,CAAC,CAAE;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgC,aAAaA,CAAE7C,KAAK,EAAG;EACtC,OAAOA,KAAK,CAAC8C,UAAU;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAAE/C,KAAK,EAAG;EACvC,OAAOA,KAAK,CAACgD,WAAW;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAAEjD,KAAK,EAAG;EAC5C,OAAOA,KAAK,CAACkD,gBAAgB;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,4BAA4BA,CAAEnD,KAAK,EAAG;EACrD,OAAOA,KAAK,CAACoD,yBAAyB;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gCAAgCA,CAAErD,KAAK,EAAG;EACzD,OAAOA,KAAK,CAACsD,6BAA6B;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAAEvD,KAAK,EAAG;EAC7C,OAAOA,KAAK,CAACwD,iBAAiB;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAG9D,cAAc,CAC/C,CAAEK,KAAK,EAAEW,SAAS,KAAM;EACvB,OAAOR,aAAa,CAAEH,KAAM,CAAC,CAC3Be,MAAM,CAAIK,SAAS,IAAM;IACzB,OAAOA,SAAS,CAACsC,MAAM,EAAEzC,QAAQ,CAAEN,SAAU,CAAC;EAC/C,CAAE,CAAC,CACFgD,GAAG,CAAE,CAAE;IAAEpD;EAAK,CAAC,KAAMA,IAAK,CAAC;AAC9B,CAAC,EACCP,KAAK,IAAM,CAAEA,KAAK,CAACM,UAAU,CAChC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMsD,eAA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","ignoreList":[]}