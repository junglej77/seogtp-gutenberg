{"version":3,"names":["__","GRID","ALIGNMENT_LABEL","center","ALIGNMENTS","flat","normalize","value","normalized","transformed","replace","includes","undefined","getItemId","prefixId","id","getItemValue","getAlignmentIndex","alignment","index","indexOf"],"sources":["@wordpress/components/src/alignment-matrix-control/utils.tsx"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { __ } from '@wordpress/i18n';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { AlignmentMatrixControlValue } from './types';\r\n\r\nexport const GRID: AlignmentMatrixControlValue[][] = [\r\n\t[ 'top left', 'top center', 'top right' ],\r\n\t[ 'center left', 'center center', 'center right' ],\r\n\t[ 'bottom left', 'bottom center', 'bottom right' ],\r\n];\r\n\r\n// Stored as map as i18n __() only accepts strings (not variables)\r\nexport const ALIGNMENT_LABEL: Record< AlignmentMatrixControlValue, string > = {\r\n\t'top left': __( 'Top Left' ),\r\n\t'top center': __( 'Top Center' ),\r\n\t'top right': __( 'Top Right' ),\r\n\t'center left': __( 'Center Left' ),\r\n\t'center center': __( 'Center' ),\r\n\tcenter: __( 'Center' ),\r\n\t'center right': __( 'Center Right' ),\r\n\t'bottom left': __( 'Bottom Left' ),\r\n\t'bottom center': __( 'Bottom Center' ),\r\n\t'bottom right': __( 'Bottom Right' ),\r\n};\r\n\r\n// Transforms GRID into a flat Array of values.\r\nexport const ALIGNMENTS = GRID.flat();\r\n\r\n/**\r\n * Normalizes and transforms an incoming value to better match the alignment values\r\n *\r\n * @param value An alignment value to parse.\r\n *\r\n * @return The parsed value.\r\n */\r\nfunction normalize( value?: string | null ) {\r\n\tconst normalized = value === 'center' ? 'center center' : value;\r\n\r\n\t// Strictly speaking, this could be `string | null | undefined`,\r\n\t// but will be validated shortly, so we're typecasting to an\r\n\t// `AlignmentMatrixControlValue` to keep TypeScript happy.\r\n\tconst transformed = normalized?.replace(\r\n\t\t'-',\r\n\t\t' '\r\n\t) as AlignmentMatrixControlValue;\r\n\r\n\treturn ALIGNMENTS.includes( transformed ) ? transformed : undefined;\r\n}\r\n\r\n/**\r\n * Creates an item ID based on a prefix ID and an alignment value.\r\n *\r\n * @param prefixId An ID to prefix.\r\n * @param value    An alignment value.\r\n *\r\n * @return The item id.\r\n */\r\nexport function getItemId(\r\n\tprefixId: string,\r\n\tvalue?: AlignmentMatrixControlValue\r\n) {\r\n\tconst normalized = normalize( value );\r\n\tif ( ! normalized ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst id = normalized.replace( ' ', '-' );\r\n\treturn `${ prefixId }-${ id }`;\r\n}\r\n\r\n/**\r\n * Extracts an item value from its ID\r\n *\r\n * @param prefixId An ID prefix to remove\r\n * @param id       An item ID\r\n * @return         The item value\r\n */\r\nexport function getItemValue( prefixId: string, id?: string | null ) {\r\n\tconst value = id?.replace( prefixId + '-', '' );\r\n\treturn normalize( value );\r\n}\r\n\r\n/**\r\n * Retrieves the alignment index from a value.\r\n *\r\n * @param alignment Value to check.\r\n *\r\n * @return The index of a matching alignment.\r\n */\r\nexport function getAlignmentIndex(\r\n\talignment: AlignmentMatrixControlValue = 'center'\r\n) {\r\n\tconst normalized = normalize( alignment );\r\n\tif ( ! normalized ) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tconst index = ALIGNMENTS.indexOf( normalized );\r\n\treturn index > -1 ? index : undefined;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,EAAE,QAAQ,iBAAiB;;AAEpC;AACA;AACA;;AAGA,OAAO,MAAMC,IAAqC,GAAG,CACpD,CAAE,UAAU,EAAE,YAAY,EAAE,WAAW,CAAE,EACzC,CAAE,aAAa,EAAE,eAAe,EAAE,cAAc,CAAE,EAClD,CAAE,aAAa,EAAE,eAAe,EAAE,cAAc,CAAE,CAClD;;AAED;AACA,OAAO,MAAMC,eAA8D,GAAG;EAC7E,UAAU,EAAEF,EAAE,CAAE,UAAW,CAAC;EAC5B,YAAY,EAAEA,EAAE,CAAE,YAAa,CAAC;EAChC,WAAW,EAAEA,EAAE,CAAE,WAAY,CAAC;EAC9B,aAAa,EAAEA,EAAE,CAAE,aAAc,CAAC;EAClC,eAAe,EAAEA,EAAE,CAAE,QAAS,CAAC;EAC/BG,MAAM,EAAEH,EAAE,CAAE,QAAS,CAAC;EACtB,cAAc,EAAEA,EAAE,CAAE,cAAe,CAAC;EACpC,aAAa,EAAEA,EAAE,CAAE,aAAc,CAAC;EAClC,eAAe,EAAEA,EAAE,CAAE,eAAgB,CAAC;EACtC,cAAc,EAAEA,EAAE,CAAE,cAAe;AACpC,CAAC;;AAED;AACA,OAAO,MAAMI,UAAU,GAAGH,IAAI,CAACI,IAAI,CAAC,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAAEC,KAAqB,EAAG;EAC3C,MAAMC,UAAU,GAAGD,KAAK,KAAK,QAAQ,GAAG,eAAe,GAAGA,KAAK;;EAE/D;EACA;EACA;EACA,MAAME,WAAW,GAAGD,UAAU,EAAEE,OAAO,CACtC,GAAG,EACH,GACD,CAAgC;EAEhC,OAAON,UAAU,CAACO,QAAQ,CAAEF,WAAY,CAAC,GAAGA,WAAW,GAAGG,SAAS;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CACxBC,QAAgB,EAChBP,KAAmC,EAClC;EACD,MAAMC,UAAU,GAAGF,SAAS,CAAEC,KAAM,CAAC;EACrC,IAAK,CAAEC,UAAU,EAAG;IACnB;EACD;EAEA,MAAMO,EAAE,GAAGP,UAAU,CAACE,OAAO,CAAE,GAAG,EAAE,GAAI,CAAC;EACzC,OAAQ,GAAGI,QAAU,IAAIC,EAAI,EAAC;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAAEF,QAAgB,EAAEC,EAAkB,EAAG;EACpE,MAAMR,KAAK,GAAGQ,EAAE,EAAEL,OAAO,CAAEI,QAAQ,GAAG,GAAG,EAAE,EAAG,CAAC;EAC/C,OAAOR,SAAS,CAAEC,KAAM,CAAC;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,iBAAiBA,CAChCC,SAAsC,GAAG,QAAQ,EAChD;EACD,MAAMV,UAAU,GAAGF,SAAS,CAAEY,SAAU,CAAC;EACzC,IAAK,CAAEV,UAAU,EAAG;IACnB,OAAOI,SAAS;EACjB;EAEA,MAAMO,KAAK,GAAGf,UAAU,CAACgB,OAAO,CAAEZ,UAAW,CAAC;EAC9C,OAAOW,KAAK,GAAG,CAAC,CAAC,GAAGA,KAAK,GAAGP,SAAS;AACtC","ignoreList":[]}