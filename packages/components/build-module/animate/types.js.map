{"version":3,"names":[],"sources":["@wordpress/components/src/animate/types.ts"],"sourcesContent":["export type AppearOptions = {\r\n\ttype: 'appear';\r\n\torigin?:\r\n\t\t| 'top'\r\n\t\t| 'top left'\r\n\t\t| 'top right'\r\n\t\t| 'middle'\r\n\t\t| 'middle left'\r\n\t\t| 'middle right'\r\n\t\t| 'bottom'\r\n\t\t| 'bottom left'\r\n\t\t| 'bottom right';\r\n};\r\ntype SlideInOptions = { type: 'slide-in'; origin?: 'left' | 'right' };\r\ntype LoadingOptions = { type: 'loading'; origin?: never };\r\ntype NoAnimationOptions = { type?: never; origin?: never };\r\n\r\nexport type GetAnimateOptions =\r\n\t| AppearOptions\r\n\t| SlideInOptions\r\n\t| LoadingOptions\r\n\t| NoAnimationOptions;\r\n\r\n// Create a new type that and distributes the `Pick` operator separately to\r\n// every individual type of a union, thus preserving that same union.\r\ntype DistributiveTypeAndOptions< T extends { type?: any } > = T extends any\r\n\t? Pick< T, 'type' > & { options?: Omit< T, 'type' > }\r\n\t: never;\r\n\r\nexport type AnimateProps = DistributiveTypeAndOptions< GetAnimateOptions > & {\r\n\tchildren: ( props: { className?: string } ) => JSX.Element;\r\n};\r\n"],"mappings":"","ignoreList":[]}