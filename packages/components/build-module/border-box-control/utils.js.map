{"version":3,"names":["parseCSSUnitValue","sides","borderProps","isEmptyBorder","border","some","prop","undefined","isDefinedBorder","hasSplitBorders","allSidesEmpty","every","side","isCompleteBorder","Object","keys","indexOf","hasMixedBorders","borders","shorthandBorders","map","getShorthandBorderStyle","getSplitBorders","top","right","bottom","left","getBorderDiff","original","updated","diff","color","style","width","getCommonBorder","colors","styles","widths","forEach","push","allColorsMatch","value","allStylesMatch","allWidthsMatch","getMostCommonUnit","fallbackBorder","fallbackColor","fallbackStyle","fallbackWidth","hasVisibleBorder","borderStyle","filter","Boolean","join","values","units","filteredUnits","mode","length","maxCount","currentMode"],"sources":["@wordpress/components/src/border-box-control/utils.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { CSSProperties } from 'react';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { parseCSSUnitValue } from '../utils/unit-values';\r\nimport type { Border } from '../border-control/types';\r\nimport type { AnyBorder, Borders, BorderProp, BorderSide } from './types';\r\n\r\nconst sides: BorderSide[] = [ 'top', 'right', 'bottom', 'left' ];\r\nconst borderProps: BorderProp[] = [ 'color', 'style', 'width' ];\r\n\r\nexport const isEmptyBorder = ( border?: Border ) => {\r\n\tif ( ! border ) {\r\n\t\treturn true;\r\n\t}\r\n\treturn ! borderProps.some( ( prop ) => border[ prop ] !== undefined );\r\n};\r\n\r\nexport const isDefinedBorder = ( border: AnyBorder ) => {\r\n\t// No border, no worries :)\r\n\tif ( ! border ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// If we have individual borders per side within the border object we\r\n\t// need to check whether any of those side borders have been set.\r\n\tif ( hasSplitBorders( border ) ) {\r\n\t\tconst allSidesEmpty = sides.every( ( side ) =>\r\n\t\t\tisEmptyBorder( ( border as Borders )[ side ] )\r\n\t\t);\r\n\r\n\t\treturn ! allSidesEmpty;\r\n\t}\r\n\r\n\t// If we have a top-level border only, check if that is empty. e.g.\r\n\t// { color: undefined, style: undefined, width: undefined }\r\n\t// Border radius can still be set within the border object as it is\r\n\t// handled separately.\r\n\treturn ! isEmptyBorder( border as Border );\r\n};\r\n\r\nexport const isCompleteBorder = ( border?: Border ) => {\r\n\tif ( ! border ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn borderProps.every( ( prop ) => border[ prop ] !== undefined );\r\n};\r\n\r\nexport const hasSplitBorders = ( border: AnyBorder = {} ) => {\r\n\treturn Object.keys( border ).some(\r\n\t\t( side ) => sides.indexOf( side as BorderSide ) !== -1\r\n\t);\r\n};\r\n\r\nexport const hasMixedBorders = ( borders: AnyBorder ) => {\r\n\tif ( ! hasSplitBorders( borders ) ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst shorthandBorders = sides.map( ( side: BorderSide ) =>\r\n\t\tgetShorthandBorderStyle( ( borders as Borders )?.[ side ] )\r\n\t);\r\n\r\n\treturn ! shorthandBorders.every(\r\n\t\t( border ) => border === shorthandBorders[ 0 ]\r\n\t);\r\n};\r\n\r\nexport const getSplitBorders = ( border?: Border ) => {\r\n\tif ( ! border || isEmptyBorder( border ) ) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\treturn {\r\n\t\ttop: border,\r\n\t\tright: border,\r\n\t\tbottom: border,\r\n\t\tleft: border,\r\n\t};\r\n};\r\n\r\nexport const getBorderDiff = ( original: Border, updated: Border ) => {\r\n\tconst diff: Border = {};\r\n\r\n\tif ( original.color !== updated.color ) {\r\n\t\tdiff.color = updated.color;\r\n\t}\r\n\r\n\tif ( original.style !== updated.style ) {\r\n\t\tdiff.style = updated.style;\r\n\t}\r\n\r\n\tif ( original.width !== updated.width ) {\r\n\t\tdiff.width = updated.width;\r\n\t}\r\n\r\n\treturn diff;\r\n};\r\n\r\nexport const getCommonBorder = ( borders?: Borders ) => {\r\n\tif ( ! borders ) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tconst colors: ( CSSProperties[ 'borderColor' ] | undefined )[] = [];\r\n\tconst styles: ( CSSProperties[ 'borderStyle' ] | undefined )[] = [];\r\n\tconst widths: ( CSSProperties[ 'borderWidth' ] | undefined )[] = [];\r\n\r\n\tsides.forEach( ( side ) => {\r\n\t\tcolors.push( borders[ side ]?.color );\r\n\t\tstyles.push( borders[ side ]?.style );\r\n\t\twidths.push( borders[ side ]?.width );\r\n\t} );\r\n\r\n\tconst allColorsMatch = colors.every( ( value ) => value === colors[ 0 ] );\r\n\tconst allStylesMatch = styles.every( ( value ) => value === styles[ 0 ] );\r\n\tconst allWidthsMatch = widths.every( ( value ) => value === widths[ 0 ] );\r\n\r\n\treturn {\r\n\t\tcolor: allColorsMatch ? colors[ 0 ] : undefined,\r\n\t\tstyle: allStylesMatch ? styles[ 0 ] : undefined,\r\n\t\twidth: allWidthsMatch ? widths[ 0 ] : getMostCommonUnit( widths ),\r\n\t};\r\n};\r\n\r\nexport const getShorthandBorderStyle = (\r\n\tborder?: Border,\r\n\tfallbackBorder?: Border\r\n) => {\r\n\tif ( isEmptyBorder( border ) ) {\r\n\t\treturn fallbackBorder;\r\n\t}\r\n\r\n\tconst {\r\n\t\tcolor: fallbackColor,\r\n\t\tstyle: fallbackStyle,\r\n\t\twidth: fallbackWidth,\r\n\t} = fallbackBorder || {};\r\n\r\n\tconst {\r\n\t\tcolor = fallbackColor,\r\n\t\tstyle = fallbackStyle,\r\n\t\twidth = fallbackWidth,\r\n\t} = border as Border;\r\n\r\n\tconst hasVisibleBorder = ( !! width && width !== '0' ) || !! color;\r\n\tconst borderStyle = hasVisibleBorder ? style || 'solid' : style;\r\n\r\n\treturn [ width, borderStyle, color ].filter( Boolean ).join( ' ' );\r\n};\r\n\r\nexport const getMostCommonUnit = (\r\n\tvalues: Array< string | number | undefined >\r\n): string | undefined => {\r\n\t// Collect all the CSS units.\r\n\tconst units = values.map( ( value ) =>\r\n\t\tvalue === undefined ? undefined : parseCSSUnitValue( `${ value }` )[ 1 ]\r\n\t);\r\n\r\n\t// Return the most common unit out of only the defined CSS units.\r\n\tconst filteredUnits = units.filter( ( value ) => value !== undefined );\r\n\treturn mode( filteredUnits as string[] );\r\n};\r\n\r\n/**\r\n * Finds the mode value out of the array passed favouring the first value\r\n * as a tiebreaker.\r\n *\r\n * @param values Values to determine the mode from.\r\n *\r\n * @return The mode value.\r\n */\r\nfunction mode( values: Array< string > ): string | undefined {\r\n\tif ( values.length === 0 ) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tconst map: { [ index: string ]: number } = {};\r\n\tlet maxCount = 0;\r\n\tlet currentMode;\r\n\r\n\tvalues.forEach( ( value ) => {\r\n\t\tmap[ value ] = map[ value ] === undefined ? 1 : map[ value ] + 1;\r\n\r\n\t\tif ( map[ value ] > maxCount ) {\r\n\t\t\tcurrentMode = value;\r\n\t\t\tmaxCount = map[ value ];\r\n\t\t}\r\n\t} );\r\n\r\n\treturn currentMode;\r\n}\r\n"],"mappings":"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","ignoreList":[]}