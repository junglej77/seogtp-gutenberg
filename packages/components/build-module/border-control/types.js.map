{"version":3,"names":[],"sources":["@wordpress/components/src/border-control/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { CSSProperties } from 'react';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { ColorPaletteProps } from '../color-palette/types';\r\nimport type { PopoverProps } from '../popover/types';\r\nimport type { ToggleGroupControlProps } from '../toggle-group-control/types';\r\n\r\nexport type Border = {\r\n\tcolor?: CSSProperties[ 'borderColor' ];\r\n\tstyle?: CSSProperties[ 'borderStyle' ];\r\n\twidth?: CSSProperties[ 'borderWidth' ];\r\n};\r\n\r\nexport type ColorProps = Pick<\r\n\tColorPaletteProps,\r\n\t'colors' | 'enableAlpha' | '__experimentalIsRenderedInSidebar'\r\n> & {\r\n\t/**\r\n\t * This toggles the ability to choose custom colors.\r\n\t */\r\n\tdisableCustomColors?: boolean;\r\n};\r\n\r\nexport type LabelProps = {\r\n\t/**\r\n\t * Provides control over whether the label will only be visible to\r\n\t * screen readers.\r\n\t */\r\n\thideLabelFromVision?: boolean;\r\n\t/**\r\n\t * If provided, a label will be generated using this as the content.\r\n\t */\r\n\tlabel?: string;\r\n};\r\n\r\nexport type BorderControlProps = ColorProps &\r\n\tLabelProps & {\r\n\t\t/**\r\n\t\t * This controls whether unit selection should be disabled.\r\n\t\t */\r\n\t\tdisableUnits?: boolean;\r\n\t\t/**\r\n\t\t * This controls whether to support border style selection.\r\n\t\t *\r\n\t\t * @default true\r\n\t\t */\r\n\t\tenableStyle?: boolean;\r\n\t\t/**\r\n\t\t * This flags the `BorderControl` to render with a more compact\r\n\t\t * appearance. It restricts the width of the control and prevents it\r\n\t\t * from expanding to take up additional space.\r\n\t\t */\r\n\t\tisCompact?: boolean;\r\n\t\t/**\r\n\t\t * A callback function invoked when the border value is changed via an\r\n\t\t * interaction that selects or clears, border color, style, or width.\r\n\t\t */\r\n\t\tonChange: ( value?: Border ) => void;\r\n\t\t/**\r\n\t\t * Placeholder text for the number input.\r\n\t\t */\r\n\t\tplaceholder?: HTMLInputElement[ 'placeholder' ];\r\n\t\t/**\r\n\t\t * An internal prop used to control the visibility of the dropdown.\r\n\t\t */\r\n\t\t__unstablePopoverProps?: Omit< PopoverProps, 'children' >;\r\n\t\t/**\r\n\t\t * If opted into, sanitizing the border means that if no width or color\r\n\t\t * have been selected, the border style is also cleared and `undefined`\r\n\t\t * is returned as the new border value.\r\n\t\t *\r\n\t\t * @default true\r\n\t\t */\r\n\t\tshouldSanitizeBorder?: boolean;\r\n\t\t/**\r\n\t\t * Whether or not to show the header for the border color and style\r\n\t\t * picker dropdown. The header includes a label for the color picker\r\n\t\t * and a close button.\r\n\t\t */\r\n\t\tshowDropdownHeader?: boolean;\r\n\t\t/**\r\n\t\t * Size of the control.\r\n\t\t *\r\n\t\t * @default 'default'\r\n\t\t */\r\n\t\tsize?: 'default' | '__unstable-large';\r\n\t\t/**\r\n\t\t * An object representing a border or `undefined`. Used to set the\r\n\t\t * current border configuration for this component.\r\n\t\t */\r\n\t\tvalue?: Border;\r\n\t\t/**\r\n\t\t * Controls the visual width of the `BorderControl`. It has no effect if\r\n\t\t * the `isCompact` prop is set to `true`.\r\n\t\t */\r\n\t\twidth?: CSSProperties[ 'width' ];\r\n\t\t/**\r\n\t\t * Flags whether this `BorderControl` should also render a\r\n\t\t * `RangeControl` for additional control over a border's width.\r\n\t\t */\r\n\t\twithSlider?: boolean;\r\n\t\t/**\r\n\t\t * Start opting into the larger default height that will become the default size in a future version.\r\n\t\t *\r\n\t\t * @default false\r\n\t\t */\r\n\t\t__next40pxDefaultSize?: boolean;\r\n\t};\r\n\r\nexport type DropdownProps = ColorProps &\r\n\tPick< BorderControlProps, 'enableStyle' | 'size' > & {\r\n\t\t/**\r\n\t\t * An object representing a border or `undefined`. This component will\r\n\t\t * extract the border color and style selections from this object to use as\r\n\t\t * values for its popover controls.\r\n\t\t */\r\n\t\tborder?: Border;\r\n\t\t/**\r\n\t\t * Whether a border style can be set, based on the border sanitization settings.\r\n\t\t */\r\n\t\tisStyleSettable: boolean;\r\n\t\t/**\r\n\t\t * An internal prop used to control the visibility of the dropdown.\r\n\t\t */\r\n\t\t__unstablePopoverProps?: Omit< PopoverProps, 'children' >;\r\n\t\t/**\r\n\t\t * A callback invoked when the border color or style selections change.\r\n\t\t */\r\n\t\tonChange: ( newBorder?: Border ) => void;\r\n\t\t/**\r\n\t\t * Any previous style selection made by the user. This can be used to\r\n\t\t * reapply that previous selection when, for example, a zero border width is\r\n\t\t * to a non-zero value.\r\n\t\t */\r\n\t\tpreviousStyleSelection?: string;\r\n\t\t/**\r\n\t\t * Whether or not to render a header for the border color and style picker\r\n\t\t * dropdown. The header includes a label for the color picker and a\r\n\t\t * close button.\r\n\t\t */\r\n\t\tshowDropdownHeader?: boolean;\r\n\t};\r\n\r\nexport type StylePickerProps = Omit<\r\n\tToggleGroupControlProps,\r\n\t'value' | 'onChange' | 'children'\r\n> & {\r\n\t/**\r\n\t * A callback function invoked when a border style is selected or cleared.\r\n\t */\r\n\tonChange: ( style?: string ) => void;\r\n\t/**\r\n\t * The currently selected border style if there is one. Styles available via\r\n\t * this control are `solid`, `dashed` & `dotted`, however the possibility\r\n\t * to store other valid CSS values is maintained e.g. `none`, `inherit` etc.\r\n\t */\r\n\tvalue?: string;\r\n};\r\n"],"mappings":"","ignoreList":[]}