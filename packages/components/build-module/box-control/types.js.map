{"version":3,"names":[],"sources":["@wordpress/components/src/box-control/types.ts"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport type { UnitControlProps } from '../unit-control/types';\r\nimport type { LABELS } from './utils';\r\n\r\nexport type BoxControlValue = {\r\n\ttop?: string;\r\n\tright?: string;\r\n\tbottom?: string;\r\n\tleft?: string;\r\n};\r\n\r\nexport type CustomValueUnits = {\r\n\t[ key: string ]: { max: number; step: number };\r\n};\r\n\r\ntype UnitControlPassthroughProps = Omit<\r\n\tUnitControlProps,\r\n\t'label' | 'onChange' | 'onFocus' | 'onMouseOver' | 'onMouseOut' | 'units'\r\n>;\r\n\r\nexport type BoxControlProps = Pick<\r\n\tUnitControlProps,\r\n\t'onMouseOver' | 'onMouseOut' | 'units'\r\n> & {\r\n\t/**\r\n\t * If this property is true, a button to reset the box control is rendered.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tallowReset?: boolean;\r\n\t/**\r\n\t * The id to use as a base for the unique HTML id attribute of the control.\r\n\t */\r\n\tid?: string;\r\n\t/**\r\n\t * Props for the internal `UnitControl` components.\r\n\t *\r\n\t * @default `{ min: 0 }`\r\n\t */\r\n\tinputProps?: UnitControlPassthroughProps;\r\n\t/**\r\n\t * Heading label for the control.\r\n\t *\r\n\t * @default `__( 'Box Control' )`\r\n\t */\r\n\tlabel?: string;\r\n\t/**\r\n\t * A callback function when an input value changes.\r\n\t */\r\n\tonChange: ( next: BoxControlValue ) => void;\r\n\t/**\r\n\t * The `top`, `right`, `bottom`, and `left` box dimension values to use when the control is reset.\r\n\t *\r\n\t * @default `{ top: undefined, right: undefined, bottom: undefined, left: undefined }`\r\n\t */\r\n\tresetValues?: BoxControlValue;\r\n\t/**\r\n\t * Collection of sides to allow control of. If omitted or empty, all sides will be available.\r\n\t */\r\n\tsides?: readonly ( keyof BoxControlValue | 'horizontal' | 'vertical' )[];\r\n\t/**\r\n\t * If this property is true, when the box control is unlinked, vertical and horizontal controls\r\n\t * can be used instead of updating individual sides.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tsplitOnAxis?: boolean;\r\n\t/**\r\n\t * The current values of the control, expressed as an object of `top`, `right`, `bottom`, and `left` values.\r\n\t */\r\n\tvalues?: BoxControlValue;\r\n\t/**\r\n\t * Start opting into the larger default height that will become the default size in a future version.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\t__next40pxDefaultSize?: boolean;\r\n};\r\n\r\nexport type BoxControlInputControlProps = UnitControlPassthroughProps & {\r\n\tonChange?: ( nextValues: BoxControlValue ) => void;\r\n\tonFocus?: (\r\n\t\t_event: React.FocusEvent< HTMLInputElement >,\r\n\t\t{ side }: { side: keyof typeof LABELS }\r\n\t) => void;\r\n\tonHoverOff?: (\r\n\t\tsides: Partial< Record< keyof BoxControlValue, boolean > >\r\n\t) => void;\r\n\tonHoverOn?: (\r\n\t\tsides: Partial< Record< keyof BoxControlValue, boolean > >\r\n\t) => void;\r\n\tselectedUnits: BoxControlValue;\r\n\tsetSelectedUnits: React.Dispatch< React.SetStateAction< BoxControlValue > >;\r\n\tsides: BoxControlProps[ 'sides' ];\r\n\tvalues: BoxControlValue;\r\n};\r\n\r\nexport type BoxControlIconProps = {\r\n\t/**\r\n\t * @default 24\r\n\t */\r\n\tsize?: number;\r\n\t/**\r\n\t * @default 'all'\r\n\t */\r\n\tside?: keyof typeof LABELS;\r\n\tsides?: BoxControlProps[ 'sides' ];\r\n};\r\n"],"mappings":"","ignoreList":[]}