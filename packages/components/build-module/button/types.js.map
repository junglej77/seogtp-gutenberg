{"version":3,"names":[],"sources":["@wordpress/components/src/button/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { ReactNode } from 'react';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { Props as IconProps } from '../icon';\r\nimport type { PopoverProps } from '../popover/types';\r\nimport type { WordPressComponentProps } from '../context/wordpress-component';\r\n\r\nexport type ButtonProps =\r\n\t| WordPressComponentProps< ButtonAsButtonProps, 'button', false >\r\n\t| WordPressComponentProps< ButtonAsAnchorProps, 'a', false >;\r\n\r\nexport type ButtonAsButtonProps = BaseButtonProps & _ButtonProps;\r\nexport type ButtonAsAnchorProps = BaseButtonProps & AnchorProps;\r\n\r\ntype BaseButtonProps = {\r\n\t/**\r\n\t * Start opting into the larger default height that will become the\r\n\t * default size in a future version.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\t__next40pxDefaultSize?: boolean;\r\n\t/**\r\n\t * Whether to keep the button focusable when disabled.\r\n\t *\r\n\t * In most cases, it is recommended to set this to `true`. Disabling a control without maintaining focusability\r\n\t * can cause accessibility issues, by hiding their presence from screen reader users,\r\n\t * or by preventing focus from returning to a trigger element.\r\n\t *\r\n\t * Learn more about the [focusability of disabled controls](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#focusabilityofdisabledcontrols)\r\n\t * in the WAI-ARIA Authoring Practices Guide.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\taccessibleWhenDisabled?: boolean;\r\n\t/**\r\n\t * The button's children.\r\n\t */\r\n\tchildren?: ReactNode;\r\n\t/**\r\n\t * A visually hidden accessible description for the button.\r\n\t */\r\n\tdescription?: string;\r\n\t/**\r\n\t * If provided, renders an Icon component inside the button.\r\n\t */\r\n\ticon?: IconProps[ 'icon' ];\r\n\t/**\r\n\t * If provided with `icon`, sets the position of icon relative to the `text`.\r\n\t *\r\n\t * @default 'left'\r\n\t */\r\n\ticonPosition?: 'left' | 'right';\r\n\t/**\r\n\t * If provided with `icon`, sets the icon size.\r\n\t * Please refer to the Icon component for more details regarding\r\n\t * the default value of its `size` prop.\r\n\t */\r\n\ticonSize?: IconProps[ 'size' ];\r\n\t/**\r\n\t * Indicates activity while a action is being performed.\r\n\t */\r\n\tisBusy?: boolean;\r\n\t/**\r\n\t * Renders a red text-based button style to indicate destructive behavior.\r\n\t */\r\n\tisDestructive?: boolean;\r\n\t/**\r\n\t * Renders a pressed button style.\r\n\t */\r\n\tisPressed?: boolean;\r\n\t/**\r\n\t * Sets the `aria-label` of the component, if none is provided.\r\n\t * Sets the Tooltip content if `showTooltip` is provided.\r\n\t */\r\n\tlabel?: string;\r\n\t/**\r\n\t * If provided with `showTooltip`, appends the Shortcut label to the tooltip content.\r\n\t * If an object is provided, it should contain `display` and `ariaLabel` keys.\r\n\t */\r\n\tshortcut?: string | { display: string; ariaLabel: string };\r\n\t/**\r\n\t * If provided, renders a Tooltip component for the button.\r\n\t */\r\n\tshowTooltip?: boolean;\r\n\t/**\r\n\t * The size of the button.\r\n\t *\r\n\t * - `'default'`: For normal text-label buttons, unless it is a toggle button.\r\n\t * - `'compact'`: For toggle buttons, icon buttons, and buttons when used in context of either.\r\n\t * - `'small'`: For icon buttons associated with more advanced or auxiliary features.\r\n\t *\r\n\t * If the deprecated `isSmall` prop is also defined, this prop will take precedence.\r\n\t *\r\n\t * @default 'default'\r\n\t */\r\n\tsize?: 'default' | 'compact' | 'small';\r\n\t/**\r\n\t * If provided, displays the given text inside the button. If the button contains children elements, the text is displayed before them.\r\n\t */\r\n\ttext?: string;\r\n\t/**\r\n\t * If provided with `showTooltip`, sets the position of the tooltip.\r\n\t * Please refer to the Tooltip component for more details regarding the defaults.\r\n\t */\r\n\ttooltipPosition?: PopoverProps[ 'position' ];\r\n\t/**\r\n\t * Specifies the button's style.\r\n\t * The accepted values are:\r\n\t * 'primary' (the primary button styles)\r\n\t * 'secondary' (the default button styles)\r\n\t * 'tertiary' (the text-based button styles)\r\n\t * 'link' (the link button styles)\r\n\t */\r\n\tvariant?: 'primary' | 'secondary' | 'tertiary' | 'link';\r\n};\r\n\r\ntype _ButtonProps = {\r\n\t/**\r\n\t * Whether the button is disabled. If `true`, this will force a `button` element\r\n\t * to be rendered, even when an `href` is given.\r\n\t *\r\n\t * In most cases, it is recommended to also set the `accessibleWhenDisabled` prop to `true`.\r\n\t */\r\n\tdisabled?: boolean;\r\n};\r\n\r\ntype AnchorProps = {\r\n\t/**\r\n\t * Whether the button is disabled. If `true`, this will force a `button` element\r\n\t * to be rendered, even when an `href` is given.\r\n\t *\r\n\t * In most cases, it is recommended to also set the `accessibleWhenDisabled` prop to `true`.\r\n\t */\r\n\tdisabled?: false;\r\n\t/**\r\n\t * If provided, renders `a` instead of `button`.\r\n\t */\r\n\thref: string;\r\n\t/**\r\n\t * If provided with `href`, sets the `target` attribute to the `a`.\r\n\t */\r\n\ttarget?: string;\r\n};\r\n\r\nexport type DeprecatedButtonProps = {\r\n\t/**\r\n\t * Whether to keep the button focusable when disabled.\r\n\t *\r\n\t * @default false\r\n\t * @deprecated Use the `accessibleWhenDisabled` prop instead.\r\n\t * @ignore\r\n\t */\r\n\t__experimentalIsFocusable?: boolean;\r\n\t/**\r\n\t * Gives the button a default style.\r\n\t *\r\n\t * @deprecated Use the `'secondary'` value on the `variant` prop instead.\r\n\t * @ignore\r\n\t */\r\n\tisDefault?: boolean;\r\n\t/**\r\n\t * Gives the button a link style.\r\n\t *\r\n\t * @deprecated Use the `'link'` value on the `variant` prop instead.\r\n\t * @ignore\r\n\t */\r\n\tisLink?: boolean;\r\n\t/**\r\n\t * Gives the button a primary style.\r\n\t *\r\n\t * @deprecated Use the `'primary'` value on the `variant` prop instead.\r\n\t * @ignore\r\n\t */\r\n\tisPrimary?: boolean;\r\n\t/**\r\n\t * Gives the button a default style.\r\n\t *\r\n\t * @deprecated Use the `'secondary'` value on the `variant` prop instead.\r\n\t * @ignore\r\n\t */\r\n\tisSecondary?: boolean;\r\n\t/**\r\n\t * Gives the button a text-based style.\r\n\t *\r\n\t * @deprecated Use the `'tertiary'` value on the `variant` prop instead.\r\n\t * @ignore\r\n\t */\r\n\tisTertiary?: boolean;\r\n\t/**\r\n\t * Decreases the size of the button.\r\n\t *\r\n\t * @deprecated Use the `'small'` value on the `size` prop instead.\r\n\t * @ignore\r\n\t */\r\n\tisSmall?: boolean;\r\n\t/**\r\n\t * A visually hidden accessible description for the button.\r\n\t *\r\n\t * @deprecated Use the `description` prop instead.\r\n\t * @ignore\r\n\t */\r\n\tdescribedBy?: string;\r\n};\r\n\r\nexport type DeprecatedIconButtonProps = {\r\n\tlabelPosition: ButtonProps[ 'tooltipPosition' ];\r\n\tshowTooltip?: boolean;\r\n\tsize: ButtonProps[ 'iconSize' ];\r\n\tlabel: ButtonProps[ 'label' ];\r\n\ttooltip: ButtonProps[ 'label' ];\r\n};\r\n"],"mappings":"","ignoreList":[]}