{"version":3,"names":[],"sources":["@wordpress/components/src/circular-option-picker/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { ReactNode } from 'react';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport type { Icon } from '@wordpress/icons';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { ButtonAsButtonProps } from '../button/types';\r\nimport type { DropdownProps } from '../dropdown/types';\r\nimport type { WordPressComponentProps } from '../context';\r\n\r\ntype CommonCircularOptionPickerProps = {\r\n\t/**\r\n\t * An ID to apply to the component.\r\n\t */\r\n\tid?: string;\r\n\t/**\r\n\t * A CSS class to apply to the wrapper element.\r\n\t */\r\n\tclassName?: string;\r\n\t/**\r\n\t * The action(s) to be rendered after the options,\r\n\t * such as a 'clear' button as seen in `ColorPalette`.\r\n\t * Usually a `CircularOptionPicker.ButtonAction` or\r\n\t * `CircularOptionPicker.DropdownLinkAction` component.\r\n\t */\r\n\tactions?: ReactNode;\r\n\t/**\r\n\t * The options to be rendered, such as color swatches.\r\n\t * Usually a `CircularOptionPicker.Option` component.\r\n\t */\r\n\toptions: ReactNode;\r\n\t/**\r\n\t * The child elements.\r\n\t */\r\n\tchildren?: ReactNode;\r\n};\r\n\r\ntype WithBaseId = {\r\n\tbaseId: string;\r\n};\r\n\r\ntype FullListboxCircularOptionPickerProps = CommonCircularOptionPickerProps & {\r\n\t/**\r\n\t * Whether the control should present as a set of buttons,\r\n\t * each with its own tab stop.\r\n\t */\r\n\tasButtons?: false;\r\n\t/**\r\n\t * Prevents keyboard interaction from wrapping around.\r\n\t * Only used when `asButtons` is not true.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tloop?: boolean;\r\n} & (\r\n\t\t| {\r\n\t\t\t\t'aria-label': string;\r\n\t\t\t\t'aria-labelledby'?: never;\r\n\t\t  }\r\n\t\t| {\r\n\t\t\t\t'aria-label'?: never;\r\n\t\t\t\t'aria-labelledby': string;\r\n\t\t  }\r\n\t);\r\n\r\nexport type ListboxCircularOptionPickerProps = WithBaseId &\r\n\tOmit< FullListboxCircularOptionPickerProps, 'asButtons' >;\r\n\r\ntype FullButtonsCircularOptionPickerProps = CommonCircularOptionPickerProps & {\r\n\t/**\r\n\t * Whether the control should present as a set of buttons,\r\n\t * each with its own tab stop.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tasButtons: true;\r\n};\r\n\r\nexport type ButtonsCircularOptionPickerProps = WithBaseId &\r\n\tOmit< FullButtonsCircularOptionPickerProps, 'asButtons' >;\r\n\r\nexport type CircularOptionPickerProps =\r\n\t| FullListboxCircularOptionPickerProps\r\n\t| FullButtonsCircularOptionPickerProps;\r\n\r\nexport type DropdownLinkActionProps = {\r\n\tbuttonProps?: Omit<\r\n\t\tWordPressComponentProps< ButtonAsButtonProps, 'button', false >,\r\n\t\t'children'\r\n\t>;\r\n\tlinkText: string;\r\n\tdropdownProps: Omit< DropdownProps, 'className' | 'renderToggle' >;\r\n\tclassName?: string;\r\n};\r\n\r\nexport type OptionGroupProps = {\r\n\tclassName?: string;\r\n\toptions: ReactNode;\r\n};\r\n\r\nexport type OptionProps = Omit<\r\n\tWordPressComponentProps< ButtonAsButtonProps, 'button', false >,\r\n\t'isPressed' | 'className'\r\n> & {\r\n\tclassName?: string;\r\n\ttooltipText?: string;\r\n\tisSelected?: boolean;\r\n\t// `icon` is explicitly defined as 'check' by CircleOptionPicker.Option\r\n\t// and is not intended to be overridden.\r\n\t// `size` relies on the `Icon` component's default size of `24` to fit\r\n\t// `CircularOptionPicker`'s design, and should not be explicitly set.\r\n\tselectedIconProps?: Omit<\r\n\t\tReact.ComponentProps< typeof Icon >,\r\n\t\t'icon' | 'size'\r\n\t>;\r\n};\r\n\r\nexport type CircularOptionPickerContextProps = {\r\n\tbaseId?: string;\r\n\tactiveId?: string | null | undefined;\r\n\tsetActiveId?: ( newId: string | null | undefined ) => void;\r\n};\r\n"],"mappings":"","ignoreList":[]}