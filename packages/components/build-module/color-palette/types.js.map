{"version":3,"names":[],"sources":["@wordpress/components/src/color-palette/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { CSSProperties, ReactNode } from 'react';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { DropdownProps } from '../dropdown/types';\r\nimport type { HeadingSize } from '../heading/types';\r\n\r\nexport type ColorObject = {\r\n\tname: string;\r\n\tcolor: NonNullable< CSSProperties[ 'color' ] >;\r\n};\r\n\r\nexport type PaletteObject = {\r\n\tname: string;\r\n\tcolors: ColorObject[];\r\n};\r\n\r\ntype PaletteProps = {\r\n\tclassName?: string;\r\n\tclearColor: () => void;\r\n\t/**\r\n\t * Callback called when a color is selected.\r\n\t */\r\n\tonChange: ( newColor?: string, index?: number ) => void;\r\n\tvalue?: string;\r\n\tactions?: ReactNode;\r\n\theadingLevel?: HeadingSize;\r\n};\r\n\r\nexport type SinglePaletteProps = PaletteProps & {\r\n\tcolors: ColorObject[];\r\n};\r\n\r\nexport type MultiplePalettesProps = PaletteProps & {\r\n\tcolors: PaletteObject[];\r\n};\r\n\r\nexport type CustomColorPickerDropdownProps = DropdownProps & {\r\n\tisRenderedInSidebar: boolean;\r\n};\r\n\r\nexport type ColorPaletteProps = Pick< PaletteProps, 'onChange' > & {\r\n\t/**\r\n\t * Whether the palette should have a clearing button.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tclearable?: boolean;\r\n\t/**\r\n\t * Array with the colors to be shown. When displaying multiple color palettes\r\n\t * to choose from, the format of the array changes from an array of colors\r\n\t * objects, to an array of color palettes.\r\n\t *\r\n\t * @default []\r\n\t */\r\n\tcolors?: PaletteObject[] | ColorObject[];\r\n\t/**\r\n\t * Whether to allow the user to pick a custom color on top of the predefined\r\n\t * choices (defined via the `colors` prop).\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tdisableCustomColors?: boolean;\r\n\t/**\r\n\t * This controls whether the alpha channel will be offered when selecting\r\n\t * custom colors.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tenableAlpha?: boolean;\r\n\t/**\r\n\t * The heading level.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\theadingLevel?: HeadingSize;\r\n\t/**\r\n\t * Currently active value.\r\n\t */\r\n\tvalue?: string;\r\n\t/**\r\n\t * Whether the control should present as a set of buttons,\r\n\t * each with its own tab stop.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tasButtons?: boolean;\r\n\t/**\r\n\t * Prevents keyboard interaction from wrapping around.\r\n\t * Only used when `asButtons` is not true.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tloop?: boolean;\r\n\t/**\r\n\t * Whether this is rendered in the sidebar.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\t__experimentalIsRenderedInSidebar?: boolean;\r\n} & (\r\n\t\t| {\r\n\t\t\t\t/**\r\n\t\t\t\t * A label to identify the purpose of the control.\r\n\t\t\t\t *\r\n\t\t\t\t * @todo [#54055] Either this or `aria-labelledby` should be required\r\n\t\t\t\t */\r\n\t\t\t\t'aria-label'?: string;\r\n\t\t\t\t'aria-labelledby'?: never;\r\n\t\t  }\r\n\t\t| {\r\n\t\t\t\t/**\r\n\t\t\t\t * An ID of an element to provide a label for the control.\r\n\t\t\t\t *\r\n\t\t\t\t * @todo [#54055] Either this or `aria-label` should be required\r\n\t\t\t\t */\r\n\t\t\t\t'aria-labelledby'?: string;\r\n\t\t\t\t'aria-label'?: never;\r\n\t\t  }\r\n\t);\r\n"],"mappings":"","ignoreList":[]}