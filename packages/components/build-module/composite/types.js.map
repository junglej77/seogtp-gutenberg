{"version":3,"names":[],"sources":["@wordpress/components/src/composite/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type * as Ariakit from '@ariakit/react';\r\n\r\nexport type CompositeContextProps = {\r\n\t/**\r\n\t * The component store, used for advanced usage of the component.\r\n\t *\r\n\t * _Note: Using the store directly is not recommended. Instead, use the props\r\n\t * exposed by the `Composite` component._\r\n\t *\r\n\t */\r\n\tstore?: unknown;\r\n};\r\n\r\ntype CompositeStoreProps = {\r\n\t/**\r\n\t * The current active item `id`. The active item is the element within the\r\n\t * composite widget that has either DOM or virtual focus (in case\r\n\t * the `virtualFocus` prop is enabled).\r\n\t * - `null` represents the base composite element (the one with a [composite\r\n\t *   role](https://w3c.github.io/aria/#composite)). Users will be able to\r\n\t *   navigate out of it using arrow keys.\r\n\t * - If `activeId` is initially set to `null`, the base composite element\r\n\t *   itself will have focus and users will be able to navigate to it using\r\n\t *   arrow keys.\r\n\t */\r\n\tactiveId?: Ariakit.CompositeStoreProps[ 'activeId' ];\r\n\t/**\r\n\t * The composite item id that should be active by default when the composite\r\n\t * widget is rendered. If `null`, the composite element itself will have focus\r\n\t * and users will be able to navigate to it using arrow keys. If `undefined`,\r\n\t * the first enabled item will be focused.\r\n\t */\r\n\tdefaultActiveId?: Ariakit.CompositeStoreProps[ 'defaultActiveId' ];\r\n\t/**\r\n\t * A callback that gets called when the `activeId` state changes.\r\n\t */\r\n\tsetActiveId?: Ariakit.CompositeStoreProps[ 'setActiveId' ];\r\n\t/**\r\n\t * Determines how the focus behaves when the user reaches the end of the\r\n\t * composite widget.\r\n\t *\r\n\t * On one-dimensional composite widgets:\r\n\t * - `true` loops from the last item to the first item and vice-versa.\r\n\t * - `horizontal` loops only if `orientation` is `horizontal` or not set.\r\n\t * - `vertical` loops only if `orientation` is `vertical` or not set.\r\n\t * - If `activeId` is initially set to `null`, the composite element will\r\n\t *   be focused in between the last and first items.\r\n\t *\r\n\t * On two-dimensional composite widgets (ie. when using `CompositeRow`):\r\n\t * - `true` loops from the last row/column item to the first item in the same\r\n\t *   row/column and vice-versa. If it's the last item in the last row, it\r\n\t *   moves to the first item in the first row and vice-versa.\r\n\t * - `horizontal` loops only from the last row item to the first item in the\r\n\t *   same row.\r\n\t * - `vertical` loops only from the last column item to the first item in the\r\n\t *   column row.\r\n\t * - If `activeId` is initially set to `null`, vertical loop will have no\r\n\t *   effect as moving down from the last row or up from the first row will\r\n\t *   focus on the composite element.\r\n\t * - If `focusWrap` matches the value of `focusLoop`, it'll wrap between the\r\n\t *   last item in the last row or column and the first item in the first row or\r\n\t *   column and vice-versa.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tfocusLoop?: Ariakit.CompositeStoreProps[ 'focusLoop' ];\r\n\t/**\r\n\t * **Works only on two-dimensional composite widgets**.\r\n\t *\r\n\t * If enabled, moving to the next item from the last one in a row or column\r\n\t * will focus on the first item in the next row or column and vice-versa.\r\n\t * - `true` wraps between rows and columns.\r\n\t * - `horizontal` wraps only between rows.\r\n\t * - `vertical` wraps only between columns.\r\n\t * - If `focusLoop` matches the value of `focusWrap`, it'll wrap between the\r\n\t *   last item in the last row or column and the first item in the first row or\r\n\t *   column and vice-versa.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tfocusWrap?: Ariakit.CompositeStoreProps[ 'focusWrap' ];\r\n\t/**\r\n\t * **Works only on two-dimensional composite widgets**.\r\n\t *\r\n\t * If enabled, moving up or down when there's no next item or when the next\r\n\t * item is disabled will shift to the item right before it.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tfocusShift?: Ariakit.CompositeStoreProps[ 'focusShift' ];\r\n\t/**\r\n\t * If enabled, the composite element will act as an\r\n\t * [`aria-activedescendant`](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_focus_activedescendant)\r\n\t * container instead of [roving\r\n\t * tabindex](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex).\r\n\t * DOM focus will remain on the composite element while its items receive\r\n\t * virtual focus.\r\n\t *\r\n\t * In both scenarios, the item in focus will carry the `data-active-item`\r\n\t * attribute.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tvirtualFocus?: Ariakit.CompositeStoreProps[ 'virtualFocus' ];\r\n\t/**\r\n\t * Defines the orientation of the composite widget. If the composite has a\r\n\t * single row or column (one-dimensional), the `orientation` value determines\r\n\t * which arrow keys can be used to move focus:\r\n\t * - `both`: all arrow keys work.\r\n\t * - `horizontal`: only left and right arrow keys work.\r\n\t * - `vertical`: only up and down arrow keys work.\r\n\t *\r\n\t * It doesn't have any effect on two-dimensional composites.\r\n\t *\r\n\t * @default \"both\"\r\n\t */\r\n\torientation?: Ariakit.CompositeStoreProps[ 'orientation' ];\r\n\t/**\r\n\t * Controls how the previous and next items are determined.\r\n\t * If `rtl` is set to `true`, they will be inverted.\r\n\t *\r\n\t * This only affects the composite widget behavior. You still need to set\r\n\t * `dir=\"rtl\"` on HTML/CSS.\r\n\t *\r\n\t * @default `isRtl()`\r\n\t */\r\n\trtl?: Ariakit.CompositeStoreProps[ 'rtl' ];\r\n};\r\n\r\nexport type CompositeProps = CompositeStoreProps & {\r\n\t/**\r\n\t * Allows the component to be rendered as a different HTML element or React\r\n\t * component. The value can be a React element or a function that takes in the\r\n\t * original component props and gives back a React element with the props\r\n\t * merged.\r\n\t */\r\n\trender?: Ariakit.CompositeProps[ 'render' ];\r\n\t/**\r\n\t * Makes the component a focusable element. When this element gains keyboard\r\n\t * focus, it gets a `data-focus-visible` attribute and triggers the\r\n\t * `onFocusVisible` prop.\r\n\t * The component supports the `disabled` prop even for those elements not\r\n\t * supporting the native `disabled` attribute. Disabled elements may be\r\n\t * still accessible via keyboard by using the the `accessibleWhenDisabled`\r\n\t * prop.\r\n\t * Non-native focusable elements will lose their focusability entirely.\r\n\t * However, native focusable elements will retain their inherent focusability.\r\n\t */\r\n\tfocusable?: Ariakit.CompositeProps[ 'focusable' ];\r\n\t/**\r\n\t * Determines if the element is disabled. This sets the `aria-disabled`\r\n\t * attribute accordingly, enabling support for all elements, including those\r\n\t * that don't support the native `disabled` attribute.\r\n\t *\r\n\t * This feature can be combined with the `accessibleWhenDisabled` prop to\r\n\t * make disabled elements still accessible via keyboard.\r\n\t *\r\n\t * **Note**: For this prop to work, the `focusable` prop must be set to\r\n\t * `true`, if it's not set by default.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tdisabled?: Ariakit.CompositeProps[ 'disabled' ];\r\n\t/**\r\n\t * Indicates whether the element should be focusable even when it is\r\n\t * `disabled`.\r\n\t *\r\n\t * This is important when discoverability is a concern. For example:\r\n\t *\r\n\t * > A toolbar in an editor contains a set of special smart paste functions\r\n\t * that are disabled when the clipboard is empty or when the function is not\r\n\t * applicable to the current content of the clipboard. It could be helpful to\r\n\t * keep the disabled buttons focusable if the ability to discover their\r\n\t * functionality is primarily via their presence on the toolbar.\r\n\t *\r\n\t * Learn more on [Focusability of disabled\r\n\t * controls](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#focusabilityofdisabledcontrols).\r\n\t */\r\n\taccessibleWhenDisabled?: Ariakit.CompositeProps[ 'accessibleWhenDisabled' ];\r\n\t/**\r\n\t * Custom event handler invoked when the element gains focus through keyboard\r\n\t * interaction or a key press occurs while the element is in focus. This is\r\n\t * the programmatic equivalent of the `data-focus-visible` attribute.\r\n\t *\r\n\t * **Note**: For this prop to work, the `focusable` prop must be set to `true`\r\n\t * if it's not set by default.\r\n\t */\r\n\tonFocusVisible?: Ariakit.CompositeProps[ 'onFocusVisible' ];\r\n\t/**\r\n\t * The contents of the component.\r\n\t */\r\n\tchildren?: Ariakit.CompositeProps[ 'children' ];\r\n};\r\n\r\nexport type CompositeGroupProps = {\r\n\t/**\r\n\t * Allows the component to be rendered as a different HTML element or React\r\n\t * component. The value can be a React element or a function that takes in the\r\n\t * original component props and gives back a React element with the props\r\n\t * merged.\r\n\t */\r\n\trender?: Ariakit.CompositeGroupProps[ 'render' ];\r\n\t/**\r\n\t * The contents of the component.\r\n\t */\r\n\tchildren?: Ariakit.CompositeGroupProps[ 'children' ];\r\n};\r\n\r\nexport type CompositeGroupLabelProps = {\r\n\t/**\r\n\t * Allows the component to be rendered as a different HTML element or React\r\n\t * component. The value can be a React element or a function that takes in the\r\n\t * original component props and gives back a React element with the props\r\n\t * merged.\r\n\t */\r\n\trender?: Ariakit.CompositeGroupLabelProps[ 'render' ];\r\n\t/**\r\n\t * The contents of the component.\r\n\t */\r\n\tchildren?: Ariakit.CompositeGroupLabelProps[ 'children' ];\r\n};\r\n\r\nexport type CompositeItemProps = {\r\n\t/**\r\n\t * Allows the component to be rendered as a different HTML element or React\r\n\t * component. The value can be a React element or a function that takes in the\r\n\t * original component props and gives back a React element with the props\r\n\t * merged.\r\n\t */\r\n\trender?: Ariakit.CompositeItemProps[ 'render' ];\r\n\t/**\r\n\t * The contents of the component.\r\n\t */\r\n\tchildren?: Ariakit.CompositeItemProps[ 'children' ];\r\n\t/**\r\n\t * Indicates whether the element should be focusable even when it is\r\n\t * `disabled`.\r\n\t *\r\n\t * This is important when discoverability is a concern. For example:\r\n\t *\r\n\t * > A toolbar in an editor contains a set of special smart paste functions\r\n\t * that are disabled when the clipboard is empty or when the function is not\r\n\t * applicable to the current content of the clipboard. It could be helpful to\r\n\t * keep the disabled buttons focusable if the ability to discover their\r\n\t * functionality is primarily via their presence on the toolbar.\r\n\t *\r\n\t * Learn more on [Focusability of disabled\r\n\t * controls](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#focusabilityofdisabledcontrols).\r\n\t */\r\n\taccessibleWhenDisabled?: Ariakit.CompositeItemProps[ 'accessibleWhenDisabled' ];\r\n};\r\n\r\nexport type CompositeRowProps = {\r\n\t/**\r\n\t * Allows the component to be rendered as a different HTML element or React\r\n\t * component. The value can be a React element or a function that takes in the\r\n\t * original component props and gives back a React element with the props\r\n\t * merged.\r\n\t */\r\n\trender?: Ariakit.CompositeRowProps[ 'render' ];\r\n\t/**\r\n\t * The contents of the component.\r\n\t */\r\n\tchildren?: Ariakit.CompositeRowProps[ 'children' ];\r\n};\r\n\r\nexport type CompositeHoverProps = {\r\n\t/**\r\n\t * Allows the component to be rendered as a different HTML element or React\r\n\t * component. The value can be a React element or a function that takes in the\r\n\t * original component props and gives back a React element with the props\r\n\t * merged.\r\n\t */\r\n\trender?: Ariakit.CompositeHoverProps[ 'render' ];\r\n\t/**\r\n\t * The contents of the component.\r\n\t */\r\n\tchildren?: Ariakit.CompositeHoverProps[ 'children' ];\r\n};\r\n\r\nexport type CompositeTypeaheadProps = {\r\n\t/**\r\n\t * Allows the component to be rendered as a different HTML element or React\r\n\t * component. The value can be a React element or a function that takes in the\r\n\t * original component props and gives back a React element with the props\r\n\t * merged.\r\n\t */\r\n\trender?: Ariakit.CompositeTypeaheadProps[ 'render' ];\r\n\t/**\r\n\t * The contents of the component.\r\n\t */\r\n\tchildren?: Ariakit.CompositeTypeaheadProps[ 'children' ];\r\n};\r\n"],"mappings":"","ignoreList":[]}