import _styled from "@emotion/styled/base";
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
/**
 * External dependencies
 */
import * as Ariakit from '@ariakit/react';
import { css, keyframes } from '@emotion/react';
/**
 * Internal dependencies
 */
import { COLORS, CONFIG } from '../utils';
import { space } from '../utils/space';
import { chevronIconSize } from '../select-control/styles/select-control-styles';
import { fontSizeStyles } from '../input-control/styles/input-control-styles';
// TODO: extract to common utils and apply to relevant components
const ANIMATION_PARAMS = {
  SLIDE_AMOUNT: '2px',
  DURATION: '400ms',
  EASING: 'cubic-bezier( 0.16, 1, 0.3, 1 )'
};
const INLINE_PADDING = {
  compact: CONFIG.controlPaddingXSmall,
  small: CONFIG.controlPaddingXSmall,
  default: CONFIG.controlPaddingX
};
const getSelectSize = (size, heightProperty) => {
  const sizes = {
    compact: {
      [heightProperty]: 32,
      paddingInlineStart: INLINE_PADDING.compact,
      paddingInlineEnd: INLINE_PADDING.compact + chevronIconSize
    },
    default: {
      [heightProperty]: 40,
      paddingInlineStart: INLINE_PADDING.default,
      paddingInlineEnd: INLINE_PADDING.default + chevronIconSize
    },
    small: {
      [heightProperty]: 24,
      paddingInlineStart: INLINE_PADDING.small,
      paddingInlineEnd: INLINE_PADDING.small + chevronIconSize
    }
  };
  return sizes[size] || sizes.default;
};
const getSelectItemSize = size => {
  // Used to visually align the checkmark with the chevron
  const checkmarkCorrection = 6;
  const sizes = {
    compact: {
      paddingInlineStart: INLINE_PADDING.compact,
      paddingInlineEnd: INLINE_PADDING.compact - checkmarkCorrection
    },
    default: {
      paddingInlineStart: INLINE_PADDING.default,
      paddingInlineEnd: INLINE_PADDING.default - checkmarkCorrection
    },
    small: {
      paddingInlineStart: INLINE_PADDING.small,
      paddingInlineEnd: INLINE_PADDING.small - checkmarkCorrection
    }
  };
  return sizes[size] || sizes.default;
};
export const Select = /*#__PURE__*/_styled(Ariakit.Select, process.env.NODE_ENV === "production" ? {
  // Do not forward `hasCustomRenderProp` to the underlying Ariakit.Select component
  shouldForwardProp: prop => prop !== 'hasCustomRenderProp',
  target: "e1p3eej77"
} : {
  // Do not forward `hasCustomRenderProp` to the underlying Ariakit.Select component
  shouldForwardProp: prop => prop !== 'hasCustomRenderProp',
  target: "e1p3eej77",
  label: "Select"
})(({
  size,
  hasCustomRenderProp
}) => /*#__PURE__*/css("display:block;background-color:", COLORS.theme.background, ";border:none;color:", COLORS.theme.foreground, ";cursor:pointer;font-family:inherit;text-align:start;user-select:none;width:100%;&[data-focus-visible]{outline:none;}", getSelectSize(size, hasCustomRenderProp ? 'minHeight' : 'height'), " ", !hasCustomRenderProp && truncateStyles, " ", fontSizeStyles({
  inputSize: size
}), ";" + (process.env.NODE_ENV === "production" ? "" : ";label:Select;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const slideDownAndFade = keyframes({
  '0%': {
    opacity: 0,
    transform: `translateY(-${ANIMATION_PARAMS.SLIDE_AMOUNT})`
  },
  '100%': {
    opacity: 1,
    transform: 'translateY(0)'
  }
});
export const SelectPopover = /*#__PURE__*/_styled(Ariakit.SelectPopover, process.env.NODE_ENV === "production" ? {
  target: "e1p3eej76"
} : {
  target: "e1p3eej76",
  label: "SelectPopover"
})("display:flex;flex-direction:column;background-color:", COLORS.theme.background, ";border-radius:", CONFIG.radiusSmall, ";border:1px solid ", COLORS.theme.foreground, ";z-index:1000000;max-height:min( var( --popover-available-height, 400px ), 400px );overflow:auto;overscroll-behavior:contain;min-width:min-content;&[data-open]{@media not ( prefers-reduced-motion ){animation-duration:", ANIMATION_PARAMS.DURATION, ";animation-timing-function:", ANIMATION_PARAMS.EASING, ";animation-name:", slideDownAndFade, ";will-change:transform,opacity;}}&[data-focus-visible]{outline:none;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const SelectItem = /*#__PURE__*/_styled(Ariakit.SelectItem, process.env.NODE_ENV === "production" ? {
  target: "e1p3eej75"
} : {
  target: "e1p3eej75",
  label: "SelectItem"
})(({
  size
}) => /*#__PURE__*/css("cursor:default;display:flex;align-items:center;justify-content:space-between;font-size:", CONFIG.fontSize, ";line-height:28px;padding-block:", space(2), ";scroll-margin:", space(1), ";user-select:none;&[aria-disabled='true']{cursor:not-allowed;}&[data-active-item]{background-color:", COLORS.theme.gray[300], ";}", getSelectItemSize(size), ";" + (process.env.NODE_ENV === "production" ? "" : ";label:SelectItem;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const truncateStyles = process.env.NODE_ENV === "production" ? {
  name: "1h52dri",
  styles: "overflow:hidden;text-overflow:ellipsis;white-space:nowrap"
} : {
  name: "5u3cjr-truncateStyles",
  styles: "overflow:hidden;text-overflow:ellipsis;white-space:nowrap;label:truncateStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvY3VzdG9tLXNlbGVjdC1jb250cm9sLXYyL3N0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrTDBCIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvY3VzdG9tLXNlbGVjdC1jb250cm9sLXYyL3N0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcclxuICovXHJcbmltcG9ydCAqIGFzIEFyaWFraXQgZnJvbSAnQGFyaWFraXQvcmVhY3QnO1xyXG5pbXBvcnQgeyBjc3MsIGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xyXG4vKipcclxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXHJcbiAqL1xyXG5pbXBvcnQgeyBDT0xPUlMsIENPTkZJRyB9IGZyb20gJy4uL3V0aWxzJztcclxuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi91dGlscy9zcGFjZSc7XHJcbmltcG9ydCB7IGNoZXZyb25JY29uU2l6ZSB9IGZyb20gJy4uL3NlbGVjdC1jb250cm9sL3N0eWxlcy9zZWxlY3QtY29udHJvbC1zdHlsZXMnO1xyXG5pbXBvcnQgeyBmb250U2l6ZVN0eWxlcyB9IGZyb20gJy4uL2lucHV0LWNvbnRyb2wvc3R5bGVzL2lucHV0LWNvbnRyb2wtc3R5bGVzJztcclxuaW1wb3J0IHR5cGUgeyBDdXN0b21TZWxlY3RCdXR0b25TaXplIH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG4vLyBUT0RPOiBleHRyYWN0IHRvIGNvbW1vbiB1dGlscyBhbmQgYXBwbHkgdG8gcmVsZXZhbnQgY29tcG9uZW50c1xyXG5jb25zdCBBTklNQVRJT05fUEFSQU1TID0ge1xyXG5cdFNMSURFX0FNT1VOVDogJzJweCcsXHJcblx0RFVSQVRJT046ICc0MDBtcycsXHJcblx0RUFTSU5HOiAnY3ViaWMtYmV6aWVyKCAwLjE2LCAxLCAwLjMsIDEgKScsXHJcbn07XHJcblxyXG5jb25zdCBJTkxJTkVfUEFERElORyA9IHtcclxuXHRjb21wYWN0OiBDT05GSUcuY29udHJvbFBhZGRpbmdYU21hbGwsXHJcblx0c21hbGw6IENPTkZJRy5jb250cm9sUGFkZGluZ1hTbWFsbCxcclxuXHRkZWZhdWx0OiBDT05GSUcuY29udHJvbFBhZGRpbmdYLFxyXG59O1xyXG5cclxuY29uc3QgZ2V0U2VsZWN0U2l6ZSA9IChcclxuXHRzaXplOiBOb25OdWxsYWJsZTwgQ3VzdG9tU2VsZWN0QnV0dG9uU2l6ZVsgJ3NpemUnIF0gPixcclxuXHRoZWlnaHRQcm9wZXJ0eTogJ21pbkhlaWdodCcgfCAnaGVpZ2h0J1xyXG4pID0+IHtcclxuXHRjb25zdCBzaXplcyA9IHtcclxuXHRcdGNvbXBhY3Q6IHtcclxuXHRcdFx0WyBoZWlnaHRQcm9wZXJ0eSBdOiAzMixcclxuXHRcdFx0cGFkZGluZ0lubGluZVN0YXJ0OiBJTkxJTkVfUEFERElORy5jb21wYWN0LFxyXG5cdFx0XHRwYWRkaW5nSW5saW5lRW5kOiBJTkxJTkVfUEFERElORy5jb21wYWN0ICsgY2hldnJvbkljb25TaXplLFxyXG5cdFx0fSxcclxuXHRcdGRlZmF1bHQ6IHtcclxuXHRcdFx0WyBoZWlnaHRQcm9wZXJ0eSBdOiA0MCxcclxuXHRcdFx0cGFkZGluZ0lubGluZVN0YXJ0OiBJTkxJTkVfUEFERElORy5kZWZhdWx0LFxyXG5cdFx0XHRwYWRkaW5nSW5saW5lRW5kOiBJTkxJTkVfUEFERElORy5kZWZhdWx0ICsgY2hldnJvbkljb25TaXplLFxyXG5cdFx0fSxcclxuXHRcdHNtYWxsOiB7XHJcblx0XHRcdFsgaGVpZ2h0UHJvcGVydHkgXTogMjQsXHJcblx0XHRcdHBhZGRpbmdJbmxpbmVTdGFydDogSU5MSU5FX1BBRERJTkcuc21hbGwsXHJcblx0XHRcdHBhZGRpbmdJbmxpbmVFbmQ6IElOTElORV9QQURESU5HLnNtYWxsICsgY2hldnJvbkljb25TaXplLFxyXG5cdFx0fSxcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gc2l6ZXNbIHNpemUgXSB8fCBzaXplcy5kZWZhdWx0O1xyXG59O1xyXG5cclxuY29uc3QgZ2V0U2VsZWN0SXRlbVNpemUgPSAoXHJcblx0c2l6ZTogTm9uTnVsbGFibGU8IEN1c3RvbVNlbGVjdEJ1dHRvblNpemVbICdzaXplJyBdID5cclxuKSA9PiB7XHJcblx0Ly8gVXNlZCB0byB2aXN1YWxseSBhbGlnbiB0aGUgY2hlY2ttYXJrIHdpdGggdGhlIGNoZXZyb25cclxuXHRjb25zdCBjaGVja21hcmtDb3JyZWN0aW9uID0gNjtcclxuXHRjb25zdCBzaXplcyA9IHtcclxuXHRcdGNvbXBhY3Q6IHtcclxuXHRcdFx0cGFkZGluZ0lubGluZVN0YXJ0OiBJTkxJTkVfUEFERElORy5jb21wYWN0LFxyXG5cdFx0XHRwYWRkaW5nSW5saW5lRW5kOiBJTkxJTkVfUEFERElORy5jb21wYWN0IC0gY2hlY2ttYXJrQ29ycmVjdGlvbixcclxuXHRcdH0sXHJcblx0XHRkZWZhdWx0OiB7XHJcblx0XHRcdHBhZGRpbmdJbmxpbmVTdGFydDogSU5MSU5FX1BBRERJTkcuZGVmYXVsdCxcclxuXHRcdFx0cGFkZGluZ0lubGluZUVuZDogSU5MSU5FX1BBRERJTkcuZGVmYXVsdCAtIGNoZWNrbWFya0NvcnJlY3Rpb24sXHJcblx0XHR9LFxyXG5cdFx0c21hbGw6IHtcclxuXHRcdFx0cGFkZGluZ0lubGluZVN0YXJ0OiBJTkxJTkVfUEFERElORy5zbWFsbCxcclxuXHRcdFx0cGFkZGluZ0lubGluZUVuZDogSU5MSU5FX1BBRERJTkcuc21hbGwgLSBjaGVja21hcmtDb3JyZWN0aW9uLFxyXG5cdFx0fSxcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gc2l6ZXNbIHNpemUgXSB8fCBzaXplcy5kZWZhdWx0O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IFNlbGVjdCA9IHN0eWxlZCggQXJpYWtpdC5TZWxlY3QsIHtcclxuXHQvLyBEbyBub3QgZm9yd2FyZCBgaGFzQ3VzdG9tUmVuZGVyUHJvcGAgdG8gdGhlIHVuZGVybHlpbmcgQXJpYWtpdC5TZWxlY3QgY29tcG9uZW50XHJcblx0c2hvdWxkRm9yd2FyZFByb3A6ICggcHJvcCApID0+IHByb3AgIT09ICdoYXNDdXN0b21SZW5kZXJQcm9wJyxcclxufSApKFxyXG5cdCgge1xyXG5cdFx0c2l6ZSxcclxuXHRcdGhhc0N1c3RvbVJlbmRlclByb3AsXHJcblx0fToge1xyXG5cdFx0c2l6ZTogTm9uTnVsbGFibGU8IEN1c3RvbVNlbGVjdEJ1dHRvblNpemVbICdzaXplJyBdID47XHJcblx0XHRoYXNDdXN0b21SZW5kZXJQcm9wOiBib29sZWFuO1xyXG5cdH0gKSA9PiBjc3NgXHJcblx0XHRkaXNwbGF5OiBibG9jaztcclxuXHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy50aGVtZS5iYWNrZ3JvdW5kIH07XHJcblx0XHRib3JkZXI6IG5vbmU7XHJcblx0XHRjb2xvcjogJHsgQ09MT1JTLnRoZW1lLmZvcmVncm91bmQgfTtcclxuXHRcdGN1cnNvcjogcG9pbnRlcjtcclxuXHRcdGZvbnQtZmFtaWx5OiBpbmhlcml0O1xyXG5cdFx0dGV4dC1hbGlnbjogc3RhcnQ7XHJcblx0XHR1c2VyLXNlbGVjdDogbm9uZTtcclxuXHRcdHdpZHRoOiAxMDAlO1xyXG5cclxuXHRcdCZbZGF0YS1mb2N1cy12aXNpYmxlXSB7XHJcblx0XHRcdG91dGxpbmU6IG5vbmU7IC8vIGhhbmRsZWQgYnkgSW5wdXRCYXNlIGNvbXBvbmVudFxyXG5cdFx0fVxyXG5cclxuXHRcdCR7IGdldFNlbGVjdFNpemUoIHNpemUsIGhhc0N1c3RvbVJlbmRlclByb3AgPyAnbWluSGVpZ2h0JyA6ICdoZWlnaHQnICkgfVxyXG5cdFx0JHsgISBoYXNDdXN0b21SZW5kZXJQcm9wICYmIHRydW5jYXRlU3R5bGVzIH1cclxuXHRcdCR7IGZvbnRTaXplU3R5bGVzKCB7IGlucHV0U2l6ZTogc2l6ZSB9ICkgfVxyXG5cdGBcclxuKTtcclxuXHJcbmNvbnN0IHNsaWRlRG93bkFuZEZhZGUgPSBrZXlmcmFtZXMoIHtcclxuXHQnMCUnOiB7XHJcblx0XHRvcGFjaXR5OiAwLFxyXG5cdFx0dHJhbnNmb3JtOiBgdHJhbnNsYXRlWSgtJHsgQU5JTUFUSU9OX1BBUkFNUy5TTElERV9BTU9VTlQgfSlgLFxyXG5cdH0sXHJcblx0JzEwMCUnOiB7IG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMCknIH0sXHJcbn0gKTtcclxuXHJcbmV4cG9ydCBjb25zdCBTZWxlY3RQb3BvdmVyID0gc3R5bGVkKCBBcmlha2l0LlNlbGVjdFBvcG92ZXIgKWBcclxuXHRkaXNwbGF5OiBmbGV4O1xyXG5cdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcblxyXG5cdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy50aGVtZS5iYWNrZ3JvdW5kIH07XHJcblx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c1NtYWxsIH07XHJcblx0Ym9yZGVyOiAxcHggc29saWQgJHsgQ09MT1JTLnRoZW1lLmZvcmVncm91bmQgfTtcclxuXHJcblx0Lyogei1pbmRleChcIi5jb21wb25lbnRzLXBvcG92ZXJcIikgKi9cclxuXHR6LWluZGV4OiAxMDAwMDAwO1xyXG5cclxuXHRtYXgtaGVpZ2h0OiBtaW4oIHZhciggLS1wb3BvdmVyLWF2YWlsYWJsZS1oZWlnaHQsIDQwMHB4ICksIDQwMHB4ICk7XHJcblx0b3ZlcmZsb3c6IGF1dG87XHJcblx0b3ZlcnNjcm9sbC1iZWhhdmlvcjogY29udGFpbjtcclxuXHJcblx0LyogVGhlIHNtYWxsZXN0IHNpemUgd2l0aG91dCBvdmVyZmxvd2luZyB0aGUgY29udGFpbmVyLiAqL1xyXG5cdG1pbi13aWR0aDogbWluLWNvbnRlbnQ7XHJcblxyXG5cdC8qIEFuaW1hdGlvbiAqL1xyXG5cdCZbZGF0YS1vcGVuXSB7XHJcblx0XHRAbWVkaWEgbm90ICggcHJlZmVycy1yZWR1Y2VkLW1vdGlvbiApIHtcclxuXHRcdFx0YW5pbWF0aW9uLWR1cmF0aW9uOiAkeyBBTklNQVRJT05fUEFSQU1TLkRVUkFUSU9OIH07XHJcblx0XHRcdGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICR7IEFOSU1BVElPTl9QQVJBTVMuRUFTSU5HIH07XHJcblx0XHRcdGFuaW1hdGlvbi1uYW1lOiAkeyBzbGlkZURvd25BbmRGYWRlIH07XHJcblx0XHRcdHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm0sIG9wYWNpdHk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQmW2RhdGEtZm9jdXMtdmlzaWJsZV0ge1xyXG5cdFx0LyogVGhlIG91dGxpbmUgd2lsbCBiZSBvbiB0aGUgdHJpZ2dlciwgcmF0aGVyIHRoYW4gdGhlIHBvcG92ZXIuICovXHJcblx0XHRvdXRsaW5lOiBub25lO1xyXG5cdH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBTZWxlY3RJdGVtID0gc3R5bGVkKCBBcmlha2l0LlNlbGVjdEl0ZW0gKShcclxuXHQoIHtcclxuXHRcdHNpemUsXHJcblx0fToge1xyXG5cdFx0c2l6ZTogTm9uTnVsbGFibGU8IEN1c3RvbVNlbGVjdEJ1dHRvblNpemVbICdzaXplJyBdID47XHJcblx0fSApID0+IGNzc2BcclxuXHRcdGN1cnNvcjogZGVmYXVsdDtcclxuXHRcdGRpc3BsYXk6IGZsZXg7XHJcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cdFx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG5cdFx0Zm9udC1zaXplOiAkeyBDT05GSUcuZm9udFNpemUgfTtcclxuXHRcdC8vIFRPRE86IHJlYXNzZXNzIGxpbmUtaGVpZ2h0IGZvciBub24tbGVnYWN5IHYyXHJcblx0XHRsaW5lLWhlaWdodDogMjhweDtcclxuXHRcdHBhZGRpbmctYmxvY2s6ICR7IHNwYWNlKCAyICkgfTtcclxuXHRcdHNjcm9sbC1tYXJnaW46ICR7IHNwYWNlKCAxICkgfTtcclxuXHRcdHVzZXItc2VsZWN0OiBub25lO1xyXG5cclxuXHRcdCZbYXJpYS1kaXNhYmxlZD0ndHJ1ZSddIHtcclxuXHRcdFx0Y3Vyc29yOiBub3QtYWxsb3dlZDtcclxuXHRcdH1cclxuXHJcblx0XHQmW2RhdGEtYWN0aXZlLWl0ZW1dIHtcclxuXHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLnRoZW1lLmdyYXlbIDMwMCBdIH07XHJcblx0XHR9XHJcblxyXG5cdFx0JHsgZ2V0U2VsZWN0SXRlbVNpemUoIHNpemUgKSB9XHJcblx0YFxyXG4pO1xyXG5cclxuY29uc3QgdHJ1bmNhdGVTdHlsZXMgPSBjc3NgXHJcblx0b3ZlcmZsb3c6IGhpZGRlbjtcclxuXHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcclxuXHR3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNlbGVjdGVkRXhwZXJpbWVudGFsSGludFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG5cdCR7IHRydW5jYXRlU3R5bGVzIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBTZWxlY3RlZEV4cGVyaW1lbnRhbEhpbnRJdGVtID0gc3R5bGVkLnNwYW5gXHJcblx0Y29sb3I6ICR7IENPTE9SUy50aGVtZS5ncmF5WyA2MDAgXSB9O1xyXG5cdG1hcmdpbi1pbmxpbmUtc3RhcnQ6ICR7IHNwYWNlKCAyICkgfTtcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBXaXRoSGludEl0ZW1XcmFwcGVyID0gc3R5bGVkLmRpdmBcclxuXHRkaXNwbGF5OiBmbGV4O1xyXG5cdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cdGZsZXgtd3JhcDogd3JhcDtcclxuXHRmbGV4OiAxO1xyXG5cdGNvbHVtbi1nYXA6ICR7IHNwYWNlKCA0ICkgfTtcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBXaXRoSGludEl0ZW1IaW50ID0gc3R5bGVkLnNwYW5gXHJcblx0Y29sb3I6ICR7IENPTE9SUy50aGVtZS5ncmF5WyA2MDAgXSB9O1xyXG5cdHRleHQtYWxpZ246IGluaXRpYWw7XHJcblx0bGluZS1oZWlnaHQ6ICR7IENPTkZJRy5mb250TGluZUhlaWdodEJhc2UgfTtcclxuXHRwYWRkaW5nLWlubGluZS1lbmQ6ICR7IHNwYWNlKCAxICkgfTtcclxuXHRtYXJnaW4tYmxvY2s6ICR7IHNwYWNlKCAxICkgfTtcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBTZWxlY3RlZEl0ZW1DaGVjayA9IHN0eWxlZCggQXJpYWtpdC5TZWxlY3RJdGVtQ2hlY2sgKWBcclxuXHRkaXNwbGF5OiBmbGV4O1xyXG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblx0bWFyZ2luLWlubGluZS1zdGFydDogJHsgc3BhY2UoIDIgKSB9O1xyXG5cclxuXHQvLyBLZWVwIHRoZSBjaGVja21hcmsgdmVydGljYWxseSBhbGlnbmVkIGF0IHRoZSB0b3AuIFNpbmNlIHRoZSBpdGVtIHRleHQgaGFzIGFcclxuXHQvLyAyOHB4IGxpbmUgaGVpZ2h0IGFuZCB0aGUgY2hlY2ttYXJrIGlzIDI0cHggdGFsbCwgYSAoMjgtMjQpLzIgPSAycHggbWFyZ2luXHJcblx0Ly8gaXMgYXBwbGllZCB0byBrZWVwIHRoZSBjb3JyZWN0IGFsaWdubWVudCBiZXR3ZWVuIHRoZSB0ZXh0IGFuZCB0aGUgY2hlY2ttYXJrLlxyXG5cdGFsaWduLXNlbGY6IHN0YXJ0O1xyXG5cdG1hcmdpbi1ibG9jay1zdGFydDogMnB4O1xyXG5cclxuXHQvLyBTaW5jZSB0aGUgY2hlY2ttYXJrJ3MgZGltZW5zaW9ucyBhcmUgYXBwbGllZCB3aXRoICdlbScgdW5pdHMsIHNldHRpbmcgYVxyXG5cdC8vIGZvbnQgc2l6ZSBvZiAwIGFsbG93cyB0aGUgc3BhY2UgcmVzZXJ2ZWQgZm9yIHRoZSBjaGVja21hcmsgdG8gY29sbGFwc2UgZm9yXHJcblx0Ly8gaXRlbXMgdGhhdCBhcmUgbm90IHNlbGVjdGVkIG9yIHRoYXQgZG9uJ3QgaGF2ZSBhbiBhc3NvY2lhdGVkIGl0ZW0gaGludC5cclxuXHRmb250LXNpemU6IDA7XHJcblx0JHsgV2l0aEhpbnRJdGVtV3JhcHBlciB9IH4gJixcclxuXHQmOm5vdCg6ZW1wdHkpIHtcclxuXHRcdGZvbnQtc2l6ZTogMjRweDsgLy8gU2l6ZSBvZiBjaGVja21hcmsgaWNvblxyXG5cdH1cclxuYDtcclxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
export const SelectedExperimentalHintWrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1p3eej74"
} : {
  target: "e1p3eej74",
  label: "SelectedExperimentalHintWrapper"
})(truncateStyles, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const SelectedExperimentalHintItem = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1p3eej73"
} : {
  target: "e1p3eej73",
  label: "SelectedExperimentalHintItem"
})("color:", COLORS.theme.gray[600], ";margin-inline-start:", space(2), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const WithHintItemWrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1p3eej72"
} : {
  target: "e1p3eej72",
  label: "WithHintItemWrapper"
})("display:flex;justify-content:space-between;align-items:center;flex-wrap:wrap;flex:1;column-gap:", space(4), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const WithHintItemHint = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1p3eej71"
} : {
  target: "e1p3eej71",
  label: "WithHintItemHint"
})("color:", COLORS.theme.gray[600], ";text-align:initial;line-height:", CONFIG.fontLineHeightBase, ";padding-inline-end:", space(1), ";margin-block:", space(1), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const SelectedItemCheck = /*#__PURE__*/_styled(Ariakit.SelectItemCheck, process.env.NODE_ENV === "production" ? {
  target: "e1p3eej70"
} : {
  target: "e1p3eej70",
  label: "SelectedItemCheck"
})("display:flex;align-items:center;margin-inline-start:", space(2), ";align-self:start;margin-block-start:2px;font-size:0;", WithHintItemWrapper, "~&,&:not(:empty){font-size:24px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
//# sourceMappingURL=styles.js.map