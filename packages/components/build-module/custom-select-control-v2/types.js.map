{"version":3,"names":[],"sources":["@wordpress/components/src/custom-select-control-v2/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type * as Ariakit from '@ariakit/react';\r\n\r\nexport type CustomSelectStore = {\r\n\t/**\r\n\t * The store object returned by Ariakit's `useSelectStore` hook.\r\n\t */\r\n\tstore: Ariakit.SelectStore;\r\n};\r\n\r\ntype CustomSelectSize< Size = 'compact' | 'default' > = {\r\n\t/**\r\n\t * The size of the control.\r\n\t *\r\n\t * @default 'default'\r\n\t */\r\n\tsize?: Size;\r\n};\r\n\r\nexport type CustomSelectButtonSize = CustomSelectSize<\r\n\t'compact' | 'default' | 'small'\r\n>;\r\n\r\nexport type CustomSelectContext =\r\n\t| ( CustomSelectStore & CustomSelectButtonSize )\r\n\t| undefined;\r\n\r\nexport type CustomSelectButtonProps = {\r\n\t/**\r\n\t * An optional default value for the control when used in uncontrolled mode.\r\n\t * If left `undefined`, the first non-disabled item will be used.\r\n\t */\r\n\tdefaultValue?: string | string[];\r\n\t/**\r\n\t * A function that receives the new value of the input.\r\n\t */\r\n\tonChange?: ( newValue: string | string[] ) => void;\r\n\t/**\r\n\t * Can be used to render select UI with custom styled values.\r\n\t */\r\n\trenderSelectedValue?: (\r\n\t\tselectedValue: string | string[]\r\n\t) => React.ReactNode;\r\n\t/**\r\n\t * The value of the control when used in uncontrolled mode.\r\n\t */\r\n\tvalue?: string | string[];\r\n};\r\n\r\n// Props only exposed on the internal implementation\r\nexport type _CustomSelectInternalProps = {\r\n\t/**\r\n\t * True if the consumer is emulating the legacy component behavior and look\r\n\t */\r\n\tisLegacy?: boolean;\r\n};\r\n\r\n// Props that are exposed in exported components\r\nexport type _CustomSelectProps = CustomSelectButtonProps & {\r\n\t/**\r\n\t * Additional className added to the root wrapper element.\r\n\t */\r\n\tclassName?: string;\r\n\t/**\r\n\t * The child elements. This should be composed of `CustomSelectItem` components.\r\n\t */\r\n\tchildren: React.ReactNode;\r\n\t/**\r\n\t * Used to visually hide the label. It will always be visible to screen readers.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\thideLabelFromVision?: boolean;\r\n\t/**\r\n\t * Accessible label for the control.\r\n\t */\r\n\tlabel: string;\r\n};\r\n\r\nexport type CustomSelectProps = _CustomSelectProps & CustomSelectSize;\r\n\r\nexport type CustomSelectItemProps = {\r\n\t/**\r\n\t * The value of the select item. This will be used as the children if\r\n\t * children are left `undefined`.\r\n\t */\r\n\tvalue: string;\r\n\t/**\r\n\t * The children to display for each select item. The `value` will be\r\n\t * used if left `undefined`.\r\n\t */\r\n\tchildren?: React.ReactNode;\r\n\t/**\r\n\t * If true, the item will be disabled.\r\n\t *\r\n\t * You will need to add your own styles (e.g. reduced opacity) to visually show that they are disabled.\r\n\t * @default false\r\n\t */\r\n\tdisabled?: boolean;\r\n};\r\n"],"mappings":"","ignoreList":[]}