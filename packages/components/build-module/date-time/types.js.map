{"version":3,"names":[],"sources":["@wordpress/components/src/date-time/types.ts"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport type { MinutesInput } from './time/styles';\r\n\r\nexport type TimePickerProps = {\r\n\t/**\r\n\t * The initial current time the time picker should render.\r\n\t */\r\n\tcurrentTime?: Date | string | number | null;\r\n\r\n\t/**\r\n\t * Whether we use a 12-hour clock. With a 12-hour clock, an AM/PM widget is\r\n\t * displayed and the time format is assumed to be `MM-DD-YYYY` (as opposed\r\n\t * to the default format `DD-MM-YYYY`).\r\n\t */\r\n\tis12Hour?: boolean;\r\n\r\n\t/**\r\n\t * The order of day, month, and year. This prop overrides the time format\r\n\t * determined by `is12Hour` prop.\r\n\t *\r\n\t * @default 'dmy'\r\n\t */\r\n\tdateOrder?: 'dmy' | 'mdy' | 'ymd';\r\n\r\n\t/**\r\n\t * The function called when a new time has been selected. It is passed the\r\n\t * time as an argument.\r\n\t */\r\n\tonChange?: ( time: string ) => void;\r\n\r\n\t/**\r\n\t * If true, the label will only be visible to screen readers.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\thideLabelFromVision?: boolean;\r\n};\r\n\r\nexport type TimeInputValue = {\r\n\t/**\r\n\t * The hours value in 24-hour format.\r\n\t */\r\n\thours: number;\r\n\r\n\t/**\r\n\t * The minutes value.\r\n\t */\r\n\tminutes: number;\r\n};\r\n\r\nexport type TimeInputProps = {\r\n\t/**\r\n\t * Whether we use a 12-hour clock. With a 12-hour clock, an AM/PM widget is\r\n\t * displayed\r\n\t */\r\n\tis12Hour?: boolean;\r\n\r\n\t/**\r\n\t * The time input object with hours and minutes values.\r\n\t *\r\n\t * - hours: number (24-hour format)\r\n\t * - minutes: number\r\n\t */\r\n\tvalue?: TimeInputValue;\r\n\r\n\t/**\r\n\t * An optional default value for the control when used in uncontrolled mode.\r\n\t * If left `undefined`, the current time will be used.\r\n\t */\r\n\tdefaultValue?: TimeInputValue;\r\n\r\n\t/**\r\n\t * The props to pass down to the minutes input.\r\n\t */\r\n\tminutesProps?: React.ComponentProps< typeof MinutesInput >;\r\n\r\n\t/**\r\n\t * The label for the time input.\r\n\t */\r\n\tlabel?: string;\r\n\r\n\t/**\r\n\t * The function is called when a new time has been selected.\r\n\t * Passing hours and minutes as an object properties.\r\n\t */\r\n\tonChange?: ( time: TimeInputValue ) => void;\r\n};\r\n\r\nexport type DatePickerEvent = {\r\n\t/**\r\n\t * The date of the event.\r\n\t */\r\n\tdate: Date;\r\n};\r\n\r\nexport type DatePickerProps = {\r\n\t/**\r\n\t * The current date and time at initialization. Optionally pass in a `null`\r\n\t * value to specify no date is currently selected.\r\n\t */\r\n\tcurrentDate?: Date | string | number | null;\r\n\r\n\t/**\r\n\t * The function called when a new date has been selected. It is passed the\r\n\t * date as an argument.\r\n\t */\r\n\tonChange?: ( date: string ) => void;\r\n\r\n\t/**\r\n\t * A callback function which receives a Date object representing a day as an\r\n\t * argument, and should return a Boolean to signify if the day is valid or\r\n\t * not.\r\n\t */\r\n\tisInvalidDate?: ( date: Date ) => boolean;\r\n\r\n\t/**\r\n\t * A callback invoked when selecting the previous/next month in the date\r\n\t * picker. The callback receives the new month date in the ISO format as an\r\n\t * argument.\r\n\t */\r\n\tonMonthPreviewed?: ( date: string ) => void;\r\n\r\n\t/**\r\n\t * List of events to show in the date picker. Each event will appear as a\r\n\t * dot on the day of the event.\r\n\t */\r\n\tevents?: DatePickerEvent[];\r\n\r\n\t/**\r\n\t * The day that the week should start on. 0 for Sunday, 1 for Monday, etc.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tstartOfWeek?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\r\n};\r\n\r\nexport type DateTimePickerProps = Omit< DatePickerProps, 'onChange' > &\r\n\tOmit<\r\n\t\tTimePickerProps,\r\n\t\t'currentTime' | 'onChange' | 'hideLabelFromVision'\r\n\t> & {\r\n\t\t/**\r\n\t\t * The function called when a new date or time has been selected. It is\r\n\t\t * passed the date and time as an argument.\r\n\t\t */\r\n\t\tonChange?: ( date: string | null ) => void;\r\n\t};\r\n"],"mappings":"","ignoreList":[]}