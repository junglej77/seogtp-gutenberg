import _styled from "@emotion/styled/base";
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
/**
 * External dependencies
 */
import * as Ariakit from '@ariakit/react';
import { css } from '@emotion/react';
/**
 * Internal dependencies
 */
import { COLORS, font, rtl, CONFIG } from '../utils';
import { space } from '../utils/space';
import Icon from '../icon';
import { Truncate } from '../truncate';
const ANIMATION_PARAMS = {
  SCALE_AMOUNT_OUTER: 0.82,
  SCALE_AMOUNT_CONTENT: 0.9,
  DURATION: {
    IN: '400ms',
    OUT: '200ms'
  },
  EASING: 'cubic-bezier(0.33, 0, 0, 1)'
};
const CONTENT_WRAPPER_PADDING = space(1);
const ITEM_PADDING_BLOCK = space(2);
const ITEM_PADDING_INLINE = space(3);

// TODO:
// - border color and divider color are different from COLORS.theme variables
// - lighter text color is not defined in COLORS.theme, should it be?
// - lighter background color is not defined in COLORS.theme, should it be?
const DEFAULT_BORDER_COLOR = COLORS.theme.gray[300];
const DIVIDER_COLOR = COLORS.theme.gray[200];
const LIGHTER_TEXT_COLOR = COLORS.theme.gray[700];
const LIGHT_BACKGROUND_COLOR = COLORS.theme.gray[100];
const TOOLBAR_VARIANT_BORDER_COLOR = COLORS.theme.foreground;
const DEFAULT_BOX_SHADOW = `0 0 0 ${CONFIG.borderWidth} ${DEFAULT_BORDER_COLOR}, ${CONFIG.elevationXSmall}`;
const TOOLBAR_VARIANT_BOX_SHADOW = `0 0 0 ${CONFIG.borderWidth} ${TOOLBAR_VARIANT_BORDER_COLOR}`;
const GRID_TEMPLATE_COLS = 'minmax( 0, max-content ) 1fr';
export const MenuPopoverOuterWrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf14"
} : {
  target: "e1kdzosf14",
  label: "MenuPopoverOuterWrapper"
})("position:relative;background-color:", COLORS.ui.background, ";border-radius:", CONFIG.radiusMedium, ";", props => /*#__PURE__*/css("box-shadow:", props.variant === 'toolbar' ? TOOLBAR_VARIANT_BOX_SHADOW : DEFAULT_BOX_SHADOW, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:MenuPopoverOuterWrapper;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), " overflow:hidden;@media not ( prefers-reduced-motion ){transition-property:transform,opacity;transition-timing-function:", ANIMATION_PARAMS.EASING, ";transition-duration:", ANIMATION_PARAMS.DURATION.IN, ";will-change:transform,opacity;opacity:0;&:has( [data-enter] ){opacity:1;}&:has( [data-leave] ){transition-duration:", ANIMATION_PARAMS.DURATION.OUT, ";}&:has( [data-side='bottom'] ),&:has( [data-side='top'] ){transform:scaleY( ", ANIMATION_PARAMS.SCALE_AMOUNT_OUTER, " );}&:has( [data-side='bottom'] ){transform-origin:top;}&:has( [data-side='top'] ){transform-origin:bottom;}&:has( [data-enter][data-side='bottom'] ),&:has( [data-enter][data-side='top'] ),&:has( [data-leave][data-side='bottom'] ),&:has( [data-leave][data-side='top'] ){transform:scaleY( 1 );}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const MenuPopoverInnerWrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf13"
} : {
  target: "e1kdzosf13",
  label: "MenuPopoverInnerWrapper"
})("position:relative;z-index:1000000;display:grid;grid-template-columns:", GRID_TEMPLATE_COLS, ";grid-template-rows:auto;box-sizing:border-box;min-width:160px;max-width:320px;max-height:var( --popover-available-height );padding:", CONTENT_WRAPPER_PADDING, ";overscroll-behavior:contain;overflow:auto;outline:2px solid transparent!important;@media not ( prefers-reduced-motion ){transition:inherit;transform-origin:inherit;&[data-side='bottom'],&[data-side='top']{transform:scaleY(\n\t\t\t\tcalc(\n\t\t\t\t\t1 / ", ANIMATION_PARAMS.SCALE_AMOUNT_OUTER, " *\n\t\t\t\t\t\t", ANIMATION_PARAMS.SCALE_AMOUNT_CONTENT, "\n\t\t\t\t)\n\t\t\t);}&[data-enter][data-side='bottom'],&[data-enter][data-side='top'],&[data-leave][data-side='bottom'],&[data-leave][data-side='top']{transform:scaleY( 1 );}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const baseItem = /*#__PURE__*/css("all:unset;position:relative;min-height:", space(10), ";box-sizing:border-box;grid-column:1/-1;display:grid;grid-template-columns:", GRID_TEMPLATE_COLS, ";align-items:center;@supports ( grid-template-columns: subgrid ){grid-template-columns:subgrid;}font-size:", font('default.fontSize'), ";font-family:inherit;font-weight:normal;line-height:20px;color:", COLORS.theme.foreground, ";border-radius:", CONFIG.radiusSmall, ";padding-block:", ITEM_PADDING_BLOCK, ";padding-inline:", ITEM_PADDING_INLINE, ";scroll-margin:", CONTENT_WRAPPER_PADDING, ";user-select:none;outline:none;&[aria-disabled='true']{color:", COLORS.ui.textDisabled, ";cursor:not-allowed;}&[data-active-item]:not( [data-focus-visible] ):not(\n\t\t\t[aria-disabled='true']\n\t\t){background-color:", COLORS.theme.accent, ";color:", COLORS.white, ";}&[data-focus-visible]{box-shadow:0 0 0 1.5px ", COLORS.theme.accent, ";outline:2px solid transparent;}&:active,&[data-active]{}", MenuPopoverInnerWrapper, ":not(:focus) &:not(:focus)[aria-expanded=\"true\"]{background-color:", LIGHT_BACKGROUND_COLOR, ";color:", COLORS.theme.foreground, ";}svg{fill:currentColor;}" + (process.env.NODE_ENV === "production" ? "" : ";label:baseItem;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZHJvcGRvd24tbWVudS12Mi9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0pvQiIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2Ryb3Bkb3duLW1lbnUtdjIvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xyXG4gKi9cclxuaW1wb3J0ICogYXMgQXJpYWtpdCBmcm9tICdAYXJpYWtpdC9yZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xyXG5cclxuLyoqXHJcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xyXG4gKi9cclxuaW1wb3J0IHsgQ09MT1JTLCBmb250LCBydGwsIENPTkZJRyB9IGZyb20gJy4uL3V0aWxzJztcclxuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi91dGlscy9zcGFjZSc7XHJcbmltcG9ydCBJY29uIGZyb20gJy4uL2ljb24nO1xyXG5pbXBvcnQgeyBUcnVuY2F0ZSB9IGZyb20gJy4uL3RydW5jYXRlJztcclxuaW1wb3J0IHR5cGUgeyBEcm9wZG93bk1lbnVDb250ZXh0IH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5jb25zdCBBTklNQVRJT05fUEFSQU1TID0ge1xyXG5cdFNDQUxFX0FNT1VOVF9PVVRFUjogMC44MixcclxuXHRTQ0FMRV9BTU9VTlRfQ09OVEVOVDogMC45LFxyXG5cdERVUkFUSU9OOiB7XHJcblx0XHRJTjogJzQwMG1zJyxcclxuXHRcdE9VVDogJzIwMG1zJyxcclxuXHR9LFxyXG5cdEVBU0lORzogJ2N1YmljLWJlemllcigwLjMzLCAwLCAwLCAxKScsXHJcbn07XHJcblxyXG5jb25zdCBDT05URU5UX1dSQVBQRVJfUEFERElORyA9IHNwYWNlKCAxICk7XHJcbmNvbnN0IElURU1fUEFERElOR19CTE9DSyA9IHNwYWNlKCAyICk7XHJcbmNvbnN0IElURU1fUEFERElOR19JTkxJTkUgPSBzcGFjZSggMyApO1xyXG5cclxuLy8gVE9ETzpcclxuLy8gLSBib3JkZXIgY29sb3IgYW5kIGRpdmlkZXIgY29sb3IgYXJlIGRpZmZlcmVudCBmcm9tIENPTE9SUy50aGVtZSB2YXJpYWJsZXNcclxuLy8gLSBsaWdodGVyIHRleHQgY29sb3IgaXMgbm90IGRlZmluZWQgaW4gQ09MT1JTLnRoZW1lLCBzaG91bGQgaXQgYmU/XHJcbi8vIC0gbGlnaHRlciBiYWNrZ3JvdW5kIGNvbG9yIGlzIG5vdCBkZWZpbmVkIGluIENPTE9SUy50aGVtZSwgc2hvdWxkIGl0IGJlP1xyXG5jb25zdCBERUZBVUxUX0JPUkRFUl9DT0xPUiA9IENPTE9SUy50aGVtZS5ncmF5WyAzMDAgXTtcclxuY29uc3QgRElWSURFUl9DT0xPUiA9IENPTE9SUy50aGVtZS5ncmF5WyAyMDAgXTtcclxuY29uc3QgTElHSFRFUl9URVhUX0NPTE9SID0gQ09MT1JTLnRoZW1lLmdyYXlbIDcwMCBdO1xyXG5jb25zdCBMSUdIVF9CQUNLR1JPVU5EX0NPTE9SID0gQ09MT1JTLnRoZW1lLmdyYXlbIDEwMCBdO1xyXG5jb25zdCBUT09MQkFSX1ZBUklBTlRfQk9SREVSX0NPTE9SID0gQ09MT1JTLnRoZW1lLmZvcmVncm91bmQ7XHJcbmNvbnN0IERFRkFVTFRfQk9YX1NIQURPVyA9IGAwIDAgMCAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSAkeyBERUZBVUxUX0JPUkRFUl9DT0xPUiB9LCAkeyBDT05GSUcuZWxldmF0aW9uWFNtYWxsIH1gO1xyXG5jb25zdCBUT09MQkFSX1ZBUklBTlRfQk9YX1NIQURPVyA9IGAwIDAgMCAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSAkeyBUT09MQkFSX1ZBUklBTlRfQk9SREVSX0NPTE9SIH1gO1xyXG5cclxuY29uc3QgR1JJRF9URU1QTEFURV9DT0xTID0gJ21pbm1heCggMCwgbWF4LWNvbnRlbnQgKSAxZnInO1xyXG5cclxuZXhwb3J0IGNvbnN0IE1lbnVQb3BvdmVyT3V0ZXJXcmFwcGVyID0gc3R5bGVkLmRpdjxcclxuXHRQaWNrPCBEcm9wZG93bk1lbnVDb250ZXh0LCAndmFyaWFudCcgPlxyXG4+YFxyXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHJcblx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLnVpLmJhY2tncm91bmQgfTtcclxuXHRib3JkZXItcmFkaXVzOiAkeyBDT05GSUcucmFkaXVzTWVkaXVtIH07XHJcblx0JHsgKCBwcm9wcyApID0+IGNzc2BcclxuXHRcdGJveC1zaGFkb3c6ICR7IHByb3BzLnZhcmlhbnQgPT09ICd0b29sYmFyJ1xyXG5cdFx0XHQ/IFRPT0xCQVJfVkFSSUFOVF9CT1hfU0hBRE9XXHJcblx0XHRcdDogREVGQVVMVF9CT1hfU0hBRE9XIH07XHJcblx0YCB9XHJcblxyXG5cdG92ZXJmbG93OiBoaWRkZW47XHJcblxyXG5cdC8qIE9wZW4vY2xvc2UgYW5pbWF0aW9uIChvdXRlciB3cmFwcGVyKSAqL1xyXG5cdEBtZWRpYSBub3QgKCBwcmVmZXJzLXJlZHVjZWQtbW90aW9uICkge1xyXG5cdFx0dHJhbnNpdGlvbi1wcm9wZXJ0eTogdHJhbnNmb3JtLCBvcGFjaXR5O1xyXG5cdFx0dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246ICR7IEFOSU1BVElPTl9QQVJBTVMuRUFTSU5HIH07XHJcblx0XHR0cmFuc2l0aW9uLWR1cmF0aW9uOiAkeyBBTklNQVRJT05fUEFSQU1TLkRVUkFUSU9OLklOIH07XHJcblx0XHR3aWxsLWNoYW5nZTogdHJhbnNmb3JtLCBvcGFjaXR5O1xyXG5cclxuXHRcdC8qIFJlZ2FyZGxlc3Mgb2YgdGhlIHNpZGUsIGZhZGUgaW4gYW5kIG91dC4gKi9cclxuXHRcdG9wYWNpdHk6IDA7XHJcblx0XHQmOmhhcyggW2RhdGEtZW50ZXJdICkge1xyXG5cdFx0XHRvcGFjaXR5OiAxO1xyXG5cdFx0fVxyXG5cclxuXHRcdCY6aGFzKCBbZGF0YS1sZWF2ZV0gKSB7XHJcblx0XHRcdHRyYW5zaXRpb24tZHVyYXRpb246ICR7IEFOSU1BVElPTl9QQVJBTVMuRFVSQVRJT04uT1VUIH07XHJcblx0XHR9XHJcblxyXG5cdFx0LyogRm9yIG1lbnVzIG9wZW5pbmcgb24gdG9wIGFuZCBib3R0b20gc2lkZSwgYW5pbWF0ZSB0aGUgc2NhbGUgWSB0b28uICovXHJcblx0XHQmOmhhcyggW2RhdGEtc2lkZT0nYm90dG9tJ10gKSxcclxuXHRcdCY6aGFzKCBbZGF0YS1zaWRlPSd0b3AnXSApIHtcclxuXHRcdFx0dHJhbnNmb3JtOiBzY2FsZVkoICR7IEFOSU1BVElPTl9QQVJBTVMuU0NBTEVfQU1PVU5UX09VVEVSIH0gKTtcclxuXHRcdH1cclxuXHRcdCY6aGFzKCBbZGF0YS1zaWRlPSdib3R0b20nXSApIHtcclxuXHRcdFx0dHJhbnNmb3JtLW9yaWdpbjogdG9wO1xyXG5cdFx0fVxyXG5cdFx0JjpoYXMoIFtkYXRhLXNpZGU9J3RvcCddICkge1xyXG5cdFx0XHR0cmFuc2Zvcm0tb3JpZ2luOiBib3R0b207XHJcblx0XHR9XHJcblx0XHQmOmhhcyggW2RhdGEtZW50ZXJdW2RhdGEtc2lkZT0nYm90dG9tJ10gKSxcclxuXHRcdCY6aGFzKCBbZGF0YS1lbnRlcl1bZGF0YS1zaWRlPSd0b3AnXSApLFxyXG5cdFx0LyogRG8gbm90IGFuaW1hdGUgdGhlIHNjYWxlWSB3aGVuIGNsb3NpbmcgdGhlIG1lbnUgKi9cclxuXHRcdCY6aGFzKCBbZGF0YS1sZWF2ZV1bZGF0YS1zaWRlPSdib3R0b20nXSApLFxyXG5cdFx0JjpoYXMoIFtkYXRhLWxlYXZlXVtkYXRhLXNpZGU9J3RvcCddICkge1xyXG5cdFx0XHR0cmFuc2Zvcm06IHNjYWxlWSggMSApO1xyXG5cdFx0fVxyXG5cdH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBNZW51UG9wb3ZlcklubmVyV3JhcHBlciA9IHN0eWxlZC5kaXZgXHJcblx0cG9zaXRpb246IHJlbGF0aXZlO1xyXG5cdC8qIFNhbWUgYXMgcG9wb3ZlciBjb21wb25lbnQgKi9cclxuXHQvKiBUT0RPOiBpcyB0aGVyZSBhIHdheSB0byByZWFkIHRoZSBzYXNzIHZhcmlhYmxlPyAqL1xyXG5cdHotaW5kZXg6IDEwMDAwMDA7XHJcblxyXG5cdGRpc3BsYXk6IGdyaWQ7XHJcblx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAkeyBHUklEX1RFTVBMQVRFX0NPTFMgfTtcclxuXHRncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG87XHJcblxyXG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcblx0bWluLXdpZHRoOiAxNjBweDtcclxuXHRtYXgtd2lkdGg6IDMyMHB4O1xyXG5cdG1heC1oZWlnaHQ6IHZhciggLS1wb3BvdmVyLWF2YWlsYWJsZS1oZWlnaHQgKTtcclxuXHJcblx0cGFkZGluZzogJHsgQ09OVEVOVF9XUkFQUEVSX1BBRERJTkcgfTtcclxuXHJcblx0b3ZlcnNjcm9sbC1iZWhhdmlvcjogY29udGFpbjtcclxuXHRvdmVyZmxvdzogYXV0bztcclxuXHJcblx0LyogT25seSB2aXNpYmxlIGluIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlICovXHJcblx0b3V0bGluZTogMnB4IHNvbGlkIHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XHJcblxyXG5cdC8qIE9wZW4vY2xvc2UgYW5pbWF0aW9uIChpbm5lciBjb250ZW50IHdyYXBwZXIpICovXHJcblx0QG1lZGlhIG5vdCAoIHByZWZlcnMtcmVkdWNlZC1tb3Rpb24gKSB7XHJcblx0XHR0cmFuc2l0aW9uOiBpbmhlcml0O1xyXG5cdFx0dHJhbnNmb3JtLW9yaWdpbjogaW5oZXJpdDtcclxuXHJcblx0XHQvKlxyXG5cdFx0ICogRm9yIG1lbnVzIG9wZW5pbmcgb24gdG9wIGFuZCBib3R0b20gc2lkZSwgYW5pbWF0ZSB0aGUgc2NhbGUgWSB0b28uXHJcblx0XHQgKiBUaGUgY29udGVudCBzY2FsZXMgYXQgYSBkaWZmZXJlbnQgcmF0ZSB0aGFuIHRoZSBvdXRlciBjb250YWluZXI6XHJcblx0XHQgKiAtIGZpcnN0LCBjb3VudGVyIHRoZSBvdXRlciBzY2FsZSBmYWN0b3IgYnkgZG9pbmcgXCIxIC8gc2NhbGVBbW91bnRPdXRlclwiXHJcblx0XHQgKiAtIHRoZW4sIGFwcGx5IHRoZSBjb250ZW50IHNjYWxlIGZhY3Rvci5cclxuXHRcdCAqL1xyXG5cdFx0JltkYXRhLXNpZGU9J2JvdHRvbSddLFxyXG5cdFx0JltkYXRhLXNpZGU9J3RvcCddIHtcclxuXHRcdFx0dHJhbnNmb3JtOiBzY2FsZVkoXHJcblx0XHRcdFx0Y2FsYyhcclxuXHRcdFx0XHRcdDEgLyAkeyBBTklNQVRJT05fUEFSQU1TLlNDQUxFX0FNT1VOVF9PVVRFUiB9ICpcclxuXHRcdFx0XHRcdFx0JHsgQU5JTUFUSU9OX1BBUkFNUy5TQ0FMRV9BTU9VTlRfQ09OVEVOVCB9XHJcblx0XHRcdFx0KVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdFx0JltkYXRhLWVudGVyXVtkYXRhLXNpZGU9J2JvdHRvbSddLFxyXG5cdFx0JltkYXRhLWVudGVyXVtkYXRhLXNpZGU9J3RvcCddLFxyXG5cdFx0LyogRG8gbm90IGFuaW1hdGUgdGhlIHNjYWxlWSB3aGVuIGNsb3NpbmcgdGhlIG1lbnUgKi9cclxuXHRcdCZbZGF0YS1sZWF2ZV1bZGF0YS1zaWRlPSdib3R0b20nXSxcclxuXHRcdCZbZGF0YS1sZWF2ZV1bZGF0YS1zaWRlPSd0b3AnXSB7XHJcblx0XHRcdHRyYW5zZm9ybTogc2NhbGVZKCAxICk7XHJcblx0XHR9XHJcblx0fVxyXG5gO1xyXG5cclxuY29uc3QgYmFzZUl0ZW0gPSBjc3NgXHJcblx0YWxsOiB1bnNldDtcclxuXHJcblx0cG9zaXRpb246IHJlbGF0aXZlO1xyXG5cdG1pbi1oZWlnaHQ6ICR7IHNwYWNlKCAxMCApIH07XHJcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHJcblx0LyogT2NjdXB5IHRoZSB3aWR0aCBvZiBhbGwgZ3JpZCBjb2x1bW5zIChpZS4gZnVsbCB3aWR0aCkgKi9cclxuXHRncmlkLWNvbHVtbjogMSAvIC0xO1xyXG5cclxuXHRkaXNwbGF5OiBncmlkO1xyXG5cdGdyaWQtdGVtcGxhdGUtY29sdW1uczogJHsgR1JJRF9URU1QTEFURV9DT0xTIH07XHJcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHJcblx0QHN1cHBvcnRzICggZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBzdWJncmlkICkge1xyXG5cdFx0LypcclxuXHRcdCAqIERlZmluZSBhIGdyaWQgbGF5b3V0IHdoaWNoIGluaGVyaXRzIHRoZSBzYW1lIGNvbHVtbnMgY29uZmlndXJhdGlvblxyXG5cdFx0ICogZnJvbSB0aGUgcGFyZW50IGxheW91dCAoaWUuIHN1YmdyaWQpLiBUaGlzIGFsbG93cyB0aGUgbWVudVxyXG5cdFx0ICogdG8gc3luY2hyb25pemUgdGhlIGluZGVudGF0aW9uIG9mIGFsbCBpdHMgaXRlbXMuXHJcblx0XHQgKi9cclxuXHRcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogc3ViZ3JpZDtcclxuXHR9XHJcblxyXG5cdGZvbnQtc2l6ZTogJHsgZm9udCggJ2RlZmF1bHQuZm9udFNpemUnICkgfTtcclxuXHRmb250LWZhbWlseTogaW5oZXJpdDtcclxuXHRmb250LXdlaWdodDogbm9ybWFsO1xyXG5cdGxpbmUtaGVpZ2h0OiAyMHB4O1xyXG5cclxuXHRjb2xvcjogJHsgQ09MT1JTLnRoZW1lLmZvcmVncm91bmQgfTtcclxuXHRib3JkZXItcmFkaXVzOiAkeyBDT05GSUcucmFkaXVzU21hbGwgfTtcclxuXHJcblx0cGFkZGluZy1ibG9jazogJHsgSVRFTV9QQURESU5HX0JMT0NLIH07XHJcblx0cGFkZGluZy1pbmxpbmU6ICR7IElURU1fUEFERElOR19JTkxJTkUgfTtcclxuXHJcblx0LypcclxuXHQgKiBNYWtlIHN1cmUgdGhhdCwgd2hlbiBhbiBpdGVtIGlzIHNjcm9sbGVkIGludG8gdmlldyAoZWcuIHdoaWxlIHVzaW5nIHRoZVxyXG5cdCAqIGtleWJvYXJkIHRvIG1vdmUgZm9jdXMpLCB0aGUgd2hvbGUgaXRlbSBjb21lcyBpbnRvIHZpZXdcclxuXHQgKi9cclxuXHRzY3JvbGwtbWFyZ2luOiAkeyBDT05URU5UX1dSQVBQRVJfUEFERElORyB9O1xyXG5cclxuXHR1c2VyLXNlbGVjdDogbm9uZTtcclxuXHRvdXRsaW5lOiBub25lO1xyXG5cclxuXHQmW2FyaWEtZGlzYWJsZWQ9J3RydWUnXSB7XHJcblx0XHRjb2xvcjogJHsgQ09MT1JTLnVpLnRleHREaXNhYmxlZCB9O1xyXG5cdFx0Y3Vyc29yOiBub3QtYWxsb3dlZDtcclxuXHR9XHJcblxyXG5cdC8qIEFjdGl2ZSBpdGVtIChpbmNsdWRpbmcgaG92ZXIpICovXHJcblx0JltkYXRhLWFjdGl2ZS1pdGVtXTpub3QoIFtkYXRhLWZvY3VzLXZpc2libGVdICk6bm90KFxyXG5cdFx0XHRbYXJpYS1kaXNhYmxlZD0ndHJ1ZSddXHJcblx0XHQpIHtcclxuXHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy50aGVtZS5hY2NlbnQgfTtcclxuXHRcdGNvbG9yOiAkeyBDT0xPUlMud2hpdGUgfTtcclxuXHR9XHJcblxyXG5cdC8qIEtleWJvYXJkIGZvY3VzIChmb2N1cy12aXNpYmxlKSAqL1xyXG5cdCZbZGF0YS1mb2N1cy12aXNpYmxlXSB7XHJcblx0XHRib3gtc2hhZG93OiAwIDAgMCAxLjVweCAkeyBDT0xPUlMudGhlbWUuYWNjZW50IH07XHJcblxyXG5cdFx0LyogT25seSB2aXNpYmxlIGluIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlICovXHJcblx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XHJcblx0fVxyXG5cclxuXHQvKiBBY3RpdmUgKGllLiBwcmVzc2VkLCBtb3VzZSBkb3duKSAqL1xyXG5cdCY6YWN0aXZlLFxyXG5cdCZbZGF0YS1hY3RpdmVdIHtcclxuXHRcdC8qIFRPRE86IHNob3VsZCB0aGVyZSBiZSBhIHZpc3VhbCBhY3RpdmUgc3RhdGU/ICovXHJcblx0fVxyXG5cclxuXHQvKiBXaGVuIHRoZSBpdGVtIGlzIHRoZSB0cmlnZ2VyIG9mIGFuIG9wZW4gc3VibWVudSAqL1xyXG5cdCR7IE1lbnVQb3BvdmVySW5uZXJXcmFwcGVyIH06bm90KDpmb2N1cykgJjpub3QoOmZvY3VzKVthcmlhLWV4cGFuZGVkPVwidHJ1ZVwiXSB7XHJcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBMSUdIVF9CQUNLR1JPVU5EX0NPTE9SIH07XHJcblx0XHRjb2xvcjogJHsgQ09MT1JTLnRoZW1lLmZvcmVncm91bmQgfTtcclxuXHR9XHJcblxyXG5cdHN2ZyB7XHJcblx0XHRmaWxsOiBjdXJyZW50Q29sb3I7XHJcblx0fVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW0gPSBzdHlsZWQoIEFyaWFraXQuTWVudUl0ZW0gKWBcclxuXHQkeyBiYXNlSXRlbSB9O1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUNoZWNrYm94SXRlbSA9IHN0eWxlZCggQXJpYWtpdC5NZW51SXRlbUNoZWNrYm94IClgXHJcblx0JHsgYmFzZUl0ZW0gfTtcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVSYWRpb0l0ZW0gPSBzdHlsZWQoIEFyaWFraXQuTWVudUl0ZW1SYWRpbyApYFxyXG5cdCR7IGJhc2VJdGVtIH07XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgSXRlbVByZWZpeFdyYXBwZXIgPSBzdHlsZWQuc3BhbmBcclxuXHQvKiBBbHdheXMgb2NjdXB5IHRoZSBmaXJzdCBjb2x1bW4sIGV2ZW4gd2hlbiBhdXRvLWNvbGxhcHNpbmcgKi9cclxuXHRncmlkLWNvbHVtbjogMTtcclxuXHJcblx0LypcclxuXHQgKiBFdmVuIHdoZW4gdGhlIGl0ZW0gaXMgbm90IGNoZWNrZWQsIG9jY3VweSB0aGUgc2FtZSBzY3JlZW4gc3BhY2UgdG8gYXZvaWRcclxuXHQgKiB0aGUgc3BhY2UgY29sbGFwc2lkZSB3aGVuIG5vIGl0ZW1zIGFyZSBjaGVja2VkLlxyXG5cdCAqL1xyXG5cdCR7IERyb3Bkb3duTWVudUNoZWNrYm94SXRlbSB9ID4gJixcclxuXHQkeyBEcm9wZG93bk1lbnVSYWRpb0l0ZW0gfSA+ICYge1xyXG5cdFx0LyogU2FtZSB3aWR0aCBhcyB0aGUgY2hlY2sgaWNvbnMgKi9cclxuXHRcdG1pbi13aWR0aDogJHsgc3BhY2UoIDYgKSB9O1xyXG5cdH1cclxuXHJcblx0JHsgRHJvcGRvd25NZW51Q2hlY2tib3hJdGVtIH0gPiAmLFxyXG5cdCR7IERyb3Bkb3duTWVudVJhZGlvSXRlbSB9ID4gJixcclxuXHQmOm5vdCggOmVtcHR5ICkge1xyXG5cdFx0bWFyZ2luLWlubGluZS1lbmQ6ICR7IHNwYWNlKCAyICkgfTtcclxuXHR9XHJcblxyXG5cdGRpc3BsYXk6IGZsZXg7XHJcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuXHJcblx0Y29sb3I6ICR7IExJR0hURVJfVEVYVF9DT0xPUiB9O1xyXG5cclxuXHQvKlxyXG5cdCogV2hlbiB0aGUgcGFyZW50IG1lbnUgaXRlbSBpcyBhY3RpdmUsIGV4Y2VwdCB3aGVuIGl0J3MgYSBub24tZm9jdXNlZC9ob3ZlcmVkXHJcblx0KiBzdWJtZW51IHRyaWdnZXIgKGluIHRoYXQgY2FzZSwgY29sb3Igc2hvdWxkIG5vdCBiZSBpbmhlcml0ZWQpXHJcblx0Ki9cclxuXHRbZGF0YS1hY3RpdmUtaXRlbV06bm90KCBbZGF0YS1mb2N1cy12aXNpYmxlXSApID4gJixcclxuXHQvKiBXaGVuIHRoZSBwYXJlbnQgbWVudSBpdGVtIGlzIGRpc2FibGVkICovXHJcblx0W2FyaWEtZGlzYWJsZWQ9J3RydWUnXSA+ICYge1xyXG5cdFx0Y29sb3I6IGluaGVyaXQ7XHJcblx0fVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW1Db250ZW50V3JhcHBlciA9IHN0eWxlZC5kaXZgXHJcblx0LypcclxuXHQgKiBBbHdheXMgb2NjdXB5IHRoZSBzZWNvbmQgY29sdW1uLCBzaW5jZSB0aGUgZmlyc3QgY29sdW1uXHJcblx0ICogaXMgdGFrZW4gYnkgdGhlIHByZWZpeCB3cmFwcGVyICh3aGVuIGRpc3BsYXllZCkuXHJcblx0ICovXHJcblx0Z3JpZC1jb2x1bW46IDI7XHJcblxyXG5cdGRpc3BsYXk6IGZsZXg7XHJcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcblx0Z2FwOiAkeyBzcGFjZSggMyApIH07XHJcblxyXG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW1DaGlsZHJlbldyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG5cdGZsZXg6IDE7XHJcblxyXG5cdGRpc3BsYXk6IGlubGluZS1mbGV4O1xyXG5cdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcblx0Z2FwOiAkeyBzcGFjZSggMSApIH07XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgSXRlbVN1ZmZpeFdyYXBwZXIgPSBzdHlsZWQuc3BhbmBcclxuXHRmbGV4OiAwIDEgZml0LWNvbnRlbnQ7XHJcblx0bWluLXdpZHRoOiAwO1xyXG5cdHdpZHRoOiBmaXQtY29udGVudDtcclxuXHJcblx0ZGlzcGxheTogZmxleDtcclxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG5cdGdhcDogJHsgc3BhY2UoIDMgKSB9O1xyXG5cclxuXHRjb2xvcjogJHsgTElHSFRFUl9URVhUX0NPTE9SIH07XHJcblxyXG5cdC8qXHJcblx0ICogV2hlbiB0aGUgcGFyZW50IG1lbnUgaXRlbSBpcyBhY3RpdmUsIGV4Y2VwdCB3aGVuIGl0J3MgYSBub24tZm9jdXNlZC9ob3ZlcmVkXHJcblx0ICogc3VibWVudSB0cmlnZ2VyIChpbiB0aGF0IGNhc2UsIGNvbG9yIHNob3VsZCBub3QgYmUgaW5oZXJpdGVkKVxyXG5cdCAqL1xyXG5cdFtkYXRhLWFjdGl2ZS1pdGVtXTpub3QoIFtkYXRhLWZvY3VzLXZpc2libGVdICkgKjpub3QoJHsgTWVudVBvcG92ZXJJbm5lcldyYXBwZXIgfSkgJixcclxuXHQvKiBXaGVuIHRoZSBwYXJlbnQgbWVudSBpdGVtIGlzIGRpc2FibGVkICovXHJcblx0W2FyaWEtZGlzYWJsZWQ9J3RydWUnXSAqOm5vdCgkeyBNZW51UG9wb3ZlcklubmVyV3JhcHBlciB9KSAmIHtcclxuXHRcdGNvbG9yOiBpbmhlcml0O1xyXG5cdH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVHcm91cCA9IHN0eWxlZCggQXJpYWtpdC5NZW51R3JvdXAgKWBcclxuXHQvKiBJZ25vcmUgdGhpcyBlbGVtZW50IHdoZW4gY2FsY3VsYXRpbmcgdGhlIGxheW91dC4gVXNlZnVsIGZvciBzdWJncmlkICovXHJcblx0ZGlzcGxheTogY29udGVudHM7XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51R3JvdXBMYWJlbCA9IHN0eWxlZCggQXJpYWtpdC5NZW51R3JvdXBMYWJlbCApYFxyXG5cdC8qIE9jY3VweSB0aGUgd2lkdGggb2YgYWxsIGdyaWQgY29sdW1ucyAoaWUuIGZ1bGwgd2lkdGgpICovXHJcblx0Z3JpZC1jb2x1bW46IDEgLyAtMTtcclxuXHJcblx0cGFkZGluZy1ibG9jay1zdGFydDogJHsgc3BhY2UoIDMgKSB9O1xyXG5cdHBhZGRpbmctYmxvY2stZW5kOiAkeyBzcGFjZSggMiApIH07XHJcblx0cGFkZGluZy1pbmxpbmU6ICR7IElURU1fUEFERElOR19JTkxJTkUgfTtcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVTZXBhcmF0b3IgPSBzdHlsZWQoIEFyaWFraXQuTWVudVNlcGFyYXRvciApPFxyXG5cdFBpY2s8IERyb3Bkb3duTWVudUNvbnRleHQsICd2YXJpYW50JyA+XHJcbj5gXHJcblx0LyogT2NjdXB5IHRoZSB3aWR0aCBvZiBhbGwgZ3JpZCBjb2x1bW5zIChpZS4gZnVsbCB3aWR0aCkgKi9cclxuXHRncmlkLWNvbHVtbjogMSAvIC0xO1xyXG5cclxuXHRib3JkZXI6IG5vbmU7XHJcblx0aGVpZ2h0OiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfTtcclxuXHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyAoIHByb3BzICkgPT5cclxuXHRcdHByb3BzLnZhcmlhbnQgPT09ICd0b29sYmFyJ1xyXG5cdFx0XHQ/IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1JcclxuXHRcdFx0OiBESVZJREVSX0NPTE9SIH07XHJcblx0LyogQWxpZ24gd2l0aCBtZW51IGl0ZW1zJyBjb250ZW50ICovXHJcblx0bWFyZ2luLWJsb2NrOiAkeyBzcGFjZSggMiApIH07XHJcblx0bWFyZ2luLWlubGluZTogJHsgSVRFTV9QQURESU5HX0lOTElORSB9O1xyXG5cclxuXHQvKiBPbmx5IHZpc2libGUgaW4gV2luZG93cyBIaWdoIENvbnRyYXN0IG1vZGUgKi9cclxuXHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgU3VibWVudUNoZXZyb25JY29uID0gc3R5bGVkKCBJY29uIClgXHJcblx0d2lkdGg6ICR7IHNwYWNlKCAxLjUgKSB9O1xyXG5cdCR7IHJ0bChcclxuXHRcdHtcclxuXHRcdFx0dHJhbnNmb3JtOiBgc2NhbGVYKDEpYCxcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdHRyYW5zZm9ybTogYHNjYWxlWCgtMSlgLFxyXG5cdFx0fVxyXG5cdCkgfTtcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVJdGVtTGFiZWwgPSBzdHlsZWQoIFRydW5jYXRlIClgXHJcblx0Zm9udC1zaXplOiAkeyBmb250KCAnZGVmYXVsdC5mb250U2l6ZScgKSB9O1xyXG5cdGxpbmUtaGVpZ2h0OiAyMHB4O1xyXG5cdGNvbG9yOiBpbmhlcml0O1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW1IZWxwVGV4dCA9IHN0eWxlZCggVHJ1bmNhdGUgKWBcclxuXHRmb250LXNpemU6ICR7IGZvbnQoICdoZWxwVGV4dC5mb250U2l6ZScgKSB9O1xyXG5cdGxpbmUtaGVpZ2h0OiAxNnB4O1xyXG5cdGNvbG9yOiAkeyBMSUdIVEVSX1RFWFRfQ09MT1IgfTtcclxuXHR3b3JkLWJyZWFrOiBicmVhay1hbGw7XHJcblxyXG5cdFtkYXRhLWFjdGl2ZS1pdGVtXTpub3QoIFtkYXRhLWZvY3VzLXZpc2libGVdIClcclxuXHRcdCo6bm90KCAkeyBNZW51UG9wb3ZlcklubmVyV3JhcHBlciB9IClcclxuXHRcdCYsXHJcblx0W2FyaWEtZGlzYWJsZWQ9J3RydWUnXSAqOm5vdCggJHsgTWVudVBvcG92ZXJJbm5lcldyYXBwZXIgfSApICYge1xyXG5cdFx0Y29sb3I6IGluaGVyaXQ7XHJcblx0fVxyXG5gO1xyXG4iXX0= */");
export const DropdownMenuItem = /*#__PURE__*/_styled(Ariakit.MenuItem, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf12"
} : {
  target: "e1kdzosf12",
  label: "DropdownMenuItem"
})(baseItem, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const DropdownMenuCheckboxItem = /*#__PURE__*/_styled(Ariakit.MenuItemCheckbox, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf11"
} : {
  target: "e1kdzosf11",
  label: "DropdownMenuCheckboxItem"
})(baseItem, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const DropdownMenuRadioItem = /*#__PURE__*/_styled(Ariakit.MenuItemRadio, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf10"
} : {
  target: "e1kdzosf10",
  label: "DropdownMenuRadioItem"
})(baseItem, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const ItemPrefixWrapper = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf9"
} : {
  target: "e1kdzosf9",
  label: "ItemPrefixWrapper"
})("grid-column:1;", DropdownMenuCheckboxItem, ">&,", DropdownMenuRadioItem, ">&{min-width:", space(6), ";}", DropdownMenuCheckboxItem, ">&,", DropdownMenuRadioItem, ">&,&:not( :empty ){margin-inline-end:", space(2), ";}display:flex;align-items:center;justify-content:center;color:", LIGHTER_TEXT_COLOR, ";[data-active-item]:not( [data-focus-visible] )>&,[aria-disabled='true']>&{color:inherit;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const DropdownMenuItemContentWrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf8"
} : {
  target: "e1kdzosf8",
  label: "DropdownMenuItemContentWrapper"
})("grid-column:2;display:flex;align-items:center;justify-content:space-between;gap:", space(3), ";pointer-events:none;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const DropdownMenuItemChildrenWrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf7"
} : {
  target: "e1kdzosf7",
  label: "DropdownMenuItemChildrenWrapper"
})("flex:1;display:inline-flex;flex-direction:column;gap:", space(1), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const ItemSuffixWrapper = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf6"
} : {
  target: "e1kdzosf6",
  label: "ItemSuffixWrapper"
})("flex:0 1 fit-content;min-width:0;width:fit-content;display:flex;align-items:center;justify-content:center;gap:", space(3), ";color:", LIGHTER_TEXT_COLOR, ";[data-active-item]:not( [data-focus-visible] ) *:not(", MenuPopoverInnerWrapper, ") &,[aria-disabled='true'] *:not(", MenuPopoverInnerWrapper, ") &{color:inherit;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const DropdownMenuGroup = /*#__PURE__*/_styled(Ariakit.MenuGroup, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf5"
} : {
  target: "e1kdzosf5",
  label: "DropdownMenuGroup"
})(process.env.NODE_ENV === "production" ? {
  name: "49aokf",
  styles: "display:contents"
} : {
  name: "49aokf",
  styles: "display:contents",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
export const DropdownMenuGroupLabel = /*#__PURE__*/_styled(Ariakit.MenuGroupLabel, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf4"
} : {
  target: "e1kdzosf4",
  label: "DropdownMenuGroupLabel"
})("grid-column:1/-1;padding-block-start:", space(3), ";padding-block-end:", space(2), ";padding-inline:", ITEM_PADDING_INLINE, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const DropdownMenuSeparator = /*#__PURE__*/_styled(Ariakit.MenuSeparator, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf3"
} : {
  target: "e1kdzosf3",
  label: "DropdownMenuSeparator"
})("grid-column:1/-1;border:none;height:", CONFIG.borderWidth, ";background-color:", props => props.variant === 'toolbar' ? TOOLBAR_VARIANT_BORDER_COLOR : DIVIDER_COLOR, ";margin-block:", space(2), ";margin-inline:", ITEM_PADDING_INLINE, ";outline:2px solid transparent;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const SubmenuChevronIcon = /*#__PURE__*/_styled(Icon, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf2"
} : {
  target: "e1kdzosf2",
  label: "SubmenuChevronIcon"
})("width:", space(1.5), ";", rtl({
  transform: `scaleX(1)`
}, {
  transform: `scaleX(-1)`
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZHJvcGRvd24tbWVudS12Mi9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd1dnRCIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2Ryb3Bkb3duLW1lbnUtdjIvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xyXG4gKi9cclxuaW1wb3J0ICogYXMgQXJpYWtpdCBmcm9tICdAYXJpYWtpdC9yZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xyXG5cclxuLyoqXHJcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xyXG4gKi9cclxuaW1wb3J0IHsgQ09MT1JTLCBmb250LCBydGwsIENPTkZJRyB9IGZyb20gJy4uL3V0aWxzJztcclxuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi91dGlscy9zcGFjZSc7XHJcbmltcG9ydCBJY29uIGZyb20gJy4uL2ljb24nO1xyXG5pbXBvcnQgeyBUcnVuY2F0ZSB9IGZyb20gJy4uL3RydW5jYXRlJztcclxuaW1wb3J0IHR5cGUgeyBEcm9wZG93bk1lbnVDb250ZXh0IH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5jb25zdCBBTklNQVRJT05fUEFSQU1TID0ge1xyXG5cdFNDQUxFX0FNT1VOVF9PVVRFUjogMC44MixcclxuXHRTQ0FMRV9BTU9VTlRfQ09OVEVOVDogMC45LFxyXG5cdERVUkFUSU9OOiB7XHJcblx0XHRJTjogJzQwMG1zJyxcclxuXHRcdE9VVDogJzIwMG1zJyxcclxuXHR9LFxyXG5cdEVBU0lORzogJ2N1YmljLWJlemllcigwLjMzLCAwLCAwLCAxKScsXHJcbn07XHJcblxyXG5jb25zdCBDT05URU5UX1dSQVBQRVJfUEFERElORyA9IHNwYWNlKCAxICk7XHJcbmNvbnN0IElURU1fUEFERElOR19CTE9DSyA9IHNwYWNlKCAyICk7XHJcbmNvbnN0IElURU1fUEFERElOR19JTkxJTkUgPSBzcGFjZSggMyApO1xyXG5cclxuLy8gVE9ETzpcclxuLy8gLSBib3JkZXIgY29sb3IgYW5kIGRpdmlkZXIgY29sb3IgYXJlIGRpZmZlcmVudCBmcm9tIENPTE9SUy50aGVtZSB2YXJpYWJsZXNcclxuLy8gLSBsaWdodGVyIHRleHQgY29sb3IgaXMgbm90IGRlZmluZWQgaW4gQ09MT1JTLnRoZW1lLCBzaG91bGQgaXQgYmU/XHJcbi8vIC0gbGlnaHRlciBiYWNrZ3JvdW5kIGNvbG9yIGlzIG5vdCBkZWZpbmVkIGluIENPTE9SUy50aGVtZSwgc2hvdWxkIGl0IGJlP1xyXG5jb25zdCBERUZBVUxUX0JPUkRFUl9DT0xPUiA9IENPTE9SUy50aGVtZS5ncmF5WyAzMDAgXTtcclxuY29uc3QgRElWSURFUl9DT0xPUiA9IENPTE9SUy50aGVtZS5ncmF5WyAyMDAgXTtcclxuY29uc3QgTElHSFRFUl9URVhUX0NPTE9SID0gQ09MT1JTLnRoZW1lLmdyYXlbIDcwMCBdO1xyXG5jb25zdCBMSUdIVF9CQUNLR1JPVU5EX0NPTE9SID0gQ09MT1JTLnRoZW1lLmdyYXlbIDEwMCBdO1xyXG5jb25zdCBUT09MQkFSX1ZBUklBTlRfQk9SREVSX0NPTE9SID0gQ09MT1JTLnRoZW1lLmZvcmVncm91bmQ7XHJcbmNvbnN0IERFRkFVTFRfQk9YX1NIQURPVyA9IGAwIDAgMCAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSAkeyBERUZBVUxUX0JPUkRFUl9DT0xPUiB9LCAkeyBDT05GSUcuZWxldmF0aW9uWFNtYWxsIH1gO1xyXG5jb25zdCBUT09MQkFSX1ZBUklBTlRfQk9YX1NIQURPVyA9IGAwIDAgMCAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSAkeyBUT09MQkFSX1ZBUklBTlRfQk9SREVSX0NPTE9SIH1gO1xyXG5cclxuY29uc3QgR1JJRF9URU1QTEFURV9DT0xTID0gJ21pbm1heCggMCwgbWF4LWNvbnRlbnQgKSAxZnInO1xyXG5cclxuZXhwb3J0IGNvbnN0IE1lbnVQb3BvdmVyT3V0ZXJXcmFwcGVyID0gc3R5bGVkLmRpdjxcclxuXHRQaWNrPCBEcm9wZG93bk1lbnVDb250ZXh0LCAndmFyaWFudCcgPlxyXG4+YFxyXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHJcblx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLnVpLmJhY2tncm91bmQgfTtcclxuXHRib3JkZXItcmFkaXVzOiAkeyBDT05GSUcucmFkaXVzTWVkaXVtIH07XHJcblx0JHsgKCBwcm9wcyApID0+IGNzc2BcclxuXHRcdGJveC1zaGFkb3c6ICR7IHByb3BzLnZhcmlhbnQgPT09ICd0b29sYmFyJ1xyXG5cdFx0XHQ/IFRPT0xCQVJfVkFSSUFOVF9CT1hfU0hBRE9XXHJcblx0XHRcdDogREVGQVVMVF9CT1hfU0hBRE9XIH07XHJcblx0YCB9XHJcblxyXG5cdG92ZXJmbG93OiBoaWRkZW47XHJcblxyXG5cdC8qIE9wZW4vY2xvc2UgYW5pbWF0aW9uIChvdXRlciB3cmFwcGVyKSAqL1xyXG5cdEBtZWRpYSBub3QgKCBwcmVmZXJzLXJlZHVjZWQtbW90aW9uICkge1xyXG5cdFx0dHJhbnNpdGlvbi1wcm9wZXJ0eTogdHJhbnNmb3JtLCBvcGFjaXR5O1xyXG5cdFx0dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246ICR7IEFOSU1BVElPTl9QQVJBTVMuRUFTSU5HIH07XHJcblx0XHR0cmFuc2l0aW9uLWR1cmF0aW9uOiAkeyBBTklNQVRJT05fUEFSQU1TLkRVUkFUSU9OLklOIH07XHJcblx0XHR3aWxsLWNoYW5nZTogdHJhbnNmb3JtLCBvcGFjaXR5O1xyXG5cclxuXHRcdC8qIFJlZ2FyZGxlc3Mgb2YgdGhlIHNpZGUsIGZhZGUgaW4gYW5kIG91dC4gKi9cclxuXHRcdG9wYWNpdHk6IDA7XHJcblx0XHQmOmhhcyggW2RhdGEtZW50ZXJdICkge1xyXG5cdFx0XHRvcGFjaXR5OiAxO1xyXG5cdFx0fVxyXG5cclxuXHRcdCY6aGFzKCBbZGF0YS1sZWF2ZV0gKSB7XHJcblx0XHRcdHRyYW5zaXRpb24tZHVyYXRpb246ICR7IEFOSU1BVElPTl9QQVJBTVMuRFVSQVRJT04uT1VUIH07XHJcblx0XHR9XHJcblxyXG5cdFx0LyogRm9yIG1lbnVzIG9wZW5pbmcgb24gdG9wIGFuZCBib3R0b20gc2lkZSwgYW5pbWF0ZSB0aGUgc2NhbGUgWSB0b28uICovXHJcblx0XHQmOmhhcyggW2RhdGEtc2lkZT0nYm90dG9tJ10gKSxcclxuXHRcdCY6aGFzKCBbZGF0YS1zaWRlPSd0b3AnXSApIHtcclxuXHRcdFx0dHJhbnNmb3JtOiBzY2FsZVkoICR7IEFOSU1BVElPTl9QQVJBTVMuU0NBTEVfQU1PVU5UX09VVEVSIH0gKTtcclxuXHRcdH1cclxuXHRcdCY6aGFzKCBbZGF0YS1zaWRlPSdib3R0b20nXSApIHtcclxuXHRcdFx0dHJhbnNmb3JtLW9yaWdpbjogdG9wO1xyXG5cdFx0fVxyXG5cdFx0JjpoYXMoIFtkYXRhLXNpZGU9J3RvcCddICkge1xyXG5cdFx0XHR0cmFuc2Zvcm0tb3JpZ2luOiBib3R0b207XHJcblx0XHR9XHJcblx0XHQmOmhhcyggW2RhdGEtZW50ZXJdW2RhdGEtc2lkZT0nYm90dG9tJ10gKSxcclxuXHRcdCY6aGFzKCBbZGF0YS1lbnRlcl1bZGF0YS1zaWRlPSd0b3AnXSApLFxyXG5cdFx0LyogRG8gbm90IGFuaW1hdGUgdGhlIHNjYWxlWSB3aGVuIGNsb3NpbmcgdGhlIG1lbnUgKi9cclxuXHRcdCY6aGFzKCBbZGF0YS1sZWF2ZV1bZGF0YS1zaWRlPSdib3R0b20nXSApLFxyXG5cdFx0JjpoYXMoIFtkYXRhLWxlYXZlXVtkYXRhLXNpZGU9J3RvcCddICkge1xyXG5cdFx0XHR0cmFuc2Zvcm06IHNjYWxlWSggMSApO1xyXG5cdFx0fVxyXG5cdH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBNZW51UG9wb3ZlcklubmVyV3JhcHBlciA9IHN0eWxlZC5kaXZgXHJcblx0cG9zaXRpb246IHJlbGF0aXZlO1xyXG5cdC8qIFNhbWUgYXMgcG9wb3ZlciBjb21wb25lbnQgKi9cclxuXHQvKiBUT0RPOiBpcyB0aGVyZSBhIHdheSB0byByZWFkIHRoZSBzYXNzIHZhcmlhYmxlPyAqL1xyXG5cdHotaW5kZXg6IDEwMDAwMDA7XHJcblxyXG5cdGRpc3BsYXk6IGdyaWQ7XHJcblx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAkeyBHUklEX1RFTVBMQVRFX0NPTFMgfTtcclxuXHRncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG87XHJcblxyXG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcblx0bWluLXdpZHRoOiAxNjBweDtcclxuXHRtYXgtd2lkdGg6IDMyMHB4O1xyXG5cdG1heC1oZWlnaHQ6IHZhciggLS1wb3BvdmVyLWF2YWlsYWJsZS1oZWlnaHQgKTtcclxuXHJcblx0cGFkZGluZzogJHsgQ09OVEVOVF9XUkFQUEVSX1BBRERJTkcgfTtcclxuXHJcblx0b3ZlcnNjcm9sbC1iZWhhdmlvcjogY29udGFpbjtcclxuXHRvdmVyZmxvdzogYXV0bztcclxuXHJcblx0LyogT25seSB2aXNpYmxlIGluIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlICovXHJcblx0b3V0bGluZTogMnB4IHNvbGlkIHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XHJcblxyXG5cdC8qIE9wZW4vY2xvc2UgYW5pbWF0aW9uIChpbm5lciBjb250ZW50IHdyYXBwZXIpICovXHJcblx0QG1lZGlhIG5vdCAoIHByZWZlcnMtcmVkdWNlZC1tb3Rpb24gKSB7XHJcblx0XHR0cmFuc2l0aW9uOiBpbmhlcml0O1xyXG5cdFx0dHJhbnNmb3JtLW9yaWdpbjogaW5oZXJpdDtcclxuXHJcblx0XHQvKlxyXG5cdFx0ICogRm9yIG1lbnVzIG9wZW5pbmcgb24gdG9wIGFuZCBib3R0b20gc2lkZSwgYW5pbWF0ZSB0aGUgc2NhbGUgWSB0b28uXHJcblx0XHQgKiBUaGUgY29udGVudCBzY2FsZXMgYXQgYSBkaWZmZXJlbnQgcmF0ZSB0aGFuIHRoZSBvdXRlciBjb250YWluZXI6XHJcblx0XHQgKiAtIGZpcnN0LCBjb3VudGVyIHRoZSBvdXRlciBzY2FsZSBmYWN0b3IgYnkgZG9pbmcgXCIxIC8gc2NhbGVBbW91bnRPdXRlclwiXHJcblx0XHQgKiAtIHRoZW4sIGFwcGx5IHRoZSBjb250ZW50IHNjYWxlIGZhY3Rvci5cclxuXHRcdCAqL1xyXG5cdFx0JltkYXRhLXNpZGU9J2JvdHRvbSddLFxyXG5cdFx0JltkYXRhLXNpZGU9J3RvcCddIHtcclxuXHRcdFx0dHJhbnNmb3JtOiBzY2FsZVkoXHJcblx0XHRcdFx0Y2FsYyhcclxuXHRcdFx0XHRcdDEgLyAkeyBBTklNQVRJT05fUEFSQU1TLlNDQUxFX0FNT1VOVF9PVVRFUiB9ICpcclxuXHRcdFx0XHRcdFx0JHsgQU5JTUFUSU9OX1BBUkFNUy5TQ0FMRV9BTU9VTlRfQ09OVEVOVCB9XHJcblx0XHRcdFx0KVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdFx0JltkYXRhLWVudGVyXVtkYXRhLXNpZGU9J2JvdHRvbSddLFxyXG5cdFx0JltkYXRhLWVudGVyXVtkYXRhLXNpZGU9J3RvcCddLFxyXG5cdFx0LyogRG8gbm90IGFuaW1hdGUgdGhlIHNjYWxlWSB3aGVuIGNsb3NpbmcgdGhlIG1lbnUgKi9cclxuXHRcdCZbZGF0YS1sZWF2ZV1bZGF0YS1zaWRlPSdib3R0b20nXSxcclxuXHRcdCZbZGF0YS1sZWF2ZV1bZGF0YS1zaWRlPSd0b3AnXSB7XHJcblx0XHRcdHRyYW5zZm9ybTogc2NhbGVZKCAxICk7XHJcblx0XHR9XHJcblx0fVxyXG5gO1xyXG5cclxuY29uc3QgYmFzZUl0ZW0gPSBjc3NgXHJcblx0YWxsOiB1bnNldDtcclxuXHJcblx0cG9zaXRpb246IHJlbGF0aXZlO1xyXG5cdG1pbi1oZWlnaHQ6ICR7IHNwYWNlKCAxMCApIH07XHJcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHJcblx0LyogT2NjdXB5IHRoZSB3aWR0aCBvZiBhbGwgZ3JpZCBjb2x1bW5zIChpZS4gZnVsbCB3aWR0aCkgKi9cclxuXHRncmlkLWNvbHVtbjogMSAvIC0xO1xyXG5cclxuXHRkaXNwbGF5OiBncmlkO1xyXG5cdGdyaWQtdGVtcGxhdGUtY29sdW1uczogJHsgR1JJRF9URU1QTEFURV9DT0xTIH07XHJcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHJcblx0QHN1cHBvcnRzICggZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBzdWJncmlkICkge1xyXG5cdFx0LypcclxuXHRcdCAqIERlZmluZSBhIGdyaWQgbGF5b3V0IHdoaWNoIGluaGVyaXRzIHRoZSBzYW1lIGNvbHVtbnMgY29uZmlndXJhdGlvblxyXG5cdFx0ICogZnJvbSB0aGUgcGFyZW50IGxheW91dCAoaWUuIHN1YmdyaWQpLiBUaGlzIGFsbG93cyB0aGUgbWVudVxyXG5cdFx0ICogdG8gc3luY2hyb25pemUgdGhlIGluZGVudGF0aW9uIG9mIGFsbCBpdHMgaXRlbXMuXHJcblx0XHQgKi9cclxuXHRcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogc3ViZ3JpZDtcclxuXHR9XHJcblxyXG5cdGZvbnQtc2l6ZTogJHsgZm9udCggJ2RlZmF1bHQuZm9udFNpemUnICkgfTtcclxuXHRmb250LWZhbWlseTogaW5oZXJpdDtcclxuXHRmb250LXdlaWdodDogbm9ybWFsO1xyXG5cdGxpbmUtaGVpZ2h0OiAyMHB4O1xyXG5cclxuXHRjb2xvcjogJHsgQ09MT1JTLnRoZW1lLmZvcmVncm91bmQgfTtcclxuXHRib3JkZXItcmFkaXVzOiAkeyBDT05GSUcucmFkaXVzU21hbGwgfTtcclxuXHJcblx0cGFkZGluZy1ibG9jazogJHsgSVRFTV9QQURESU5HX0JMT0NLIH07XHJcblx0cGFkZGluZy1pbmxpbmU6ICR7IElURU1fUEFERElOR19JTkxJTkUgfTtcclxuXHJcblx0LypcclxuXHQgKiBNYWtlIHN1cmUgdGhhdCwgd2hlbiBhbiBpdGVtIGlzIHNjcm9sbGVkIGludG8gdmlldyAoZWcuIHdoaWxlIHVzaW5nIHRoZVxyXG5cdCAqIGtleWJvYXJkIHRvIG1vdmUgZm9jdXMpLCB0aGUgd2hvbGUgaXRlbSBjb21lcyBpbnRvIHZpZXdcclxuXHQgKi9cclxuXHRzY3JvbGwtbWFyZ2luOiAkeyBDT05URU5UX1dSQVBQRVJfUEFERElORyB9O1xyXG5cclxuXHR1c2VyLXNlbGVjdDogbm9uZTtcclxuXHRvdXRsaW5lOiBub25lO1xyXG5cclxuXHQmW2FyaWEtZGlzYWJsZWQ9J3RydWUnXSB7XHJcblx0XHRjb2xvcjogJHsgQ09MT1JTLnVpLnRleHREaXNhYmxlZCB9O1xyXG5cdFx0Y3Vyc29yOiBub3QtYWxsb3dlZDtcclxuXHR9XHJcblxyXG5cdC8qIEFjdGl2ZSBpdGVtIChpbmNsdWRpbmcgaG92ZXIpICovXHJcblx0JltkYXRhLWFjdGl2ZS1pdGVtXTpub3QoIFtkYXRhLWZvY3VzLXZpc2libGVdICk6bm90KFxyXG5cdFx0XHRbYXJpYS1kaXNhYmxlZD0ndHJ1ZSddXHJcblx0XHQpIHtcclxuXHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy50aGVtZS5hY2NlbnQgfTtcclxuXHRcdGNvbG9yOiAkeyBDT0xPUlMud2hpdGUgfTtcclxuXHR9XHJcblxyXG5cdC8qIEtleWJvYXJkIGZvY3VzIChmb2N1cy12aXNpYmxlKSAqL1xyXG5cdCZbZGF0YS1mb2N1cy12aXNpYmxlXSB7XHJcblx0XHRib3gtc2hhZG93OiAwIDAgMCAxLjVweCAkeyBDT0xPUlMudGhlbWUuYWNjZW50IH07XHJcblxyXG5cdFx0LyogT25seSB2aXNpYmxlIGluIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlICovXHJcblx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XHJcblx0fVxyXG5cclxuXHQvKiBBY3RpdmUgKGllLiBwcmVzc2VkLCBtb3VzZSBkb3duKSAqL1xyXG5cdCY6YWN0aXZlLFxyXG5cdCZbZGF0YS1hY3RpdmVdIHtcclxuXHRcdC8qIFRPRE86IHNob3VsZCB0aGVyZSBiZSBhIHZpc3VhbCBhY3RpdmUgc3RhdGU/ICovXHJcblx0fVxyXG5cclxuXHQvKiBXaGVuIHRoZSBpdGVtIGlzIHRoZSB0cmlnZ2VyIG9mIGFuIG9wZW4gc3VibWVudSAqL1xyXG5cdCR7IE1lbnVQb3BvdmVySW5uZXJXcmFwcGVyIH06bm90KDpmb2N1cykgJjpub3QoOmZvY3VzKVthcmlhLWV4cGFuZGVkPVwidHJ1ZVwiXSB7XHJcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBMSUdIVF9CQUNLR1JPVU5EX0NPTE9SIH07XHJcblx0XHRjb2xvcjogJHsgQ09MT1JTLnRoZW1lLmZvcmVncm91bmQgfTtcclxuXHR9XHJcblxyXG5cdHN2ZyB7XHJcblx0XHRmaWxsOiBjdXJyZW50Q29sb3I7XHJcblx0fVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW0gPSBzdHlsZWQoIEFyaWFraXQuTWVudUl0ZW0gKWBcclxuXHQkeyBiYXNlSXRlbSB9O1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUNoZWNrYm94SXRlbSA9IHN0eWxlZCggQXJpYWtpdC5NZW51SXRlbUNoZWNrYm94IClgXHJcblx0JHsgYmFzZUl0ZW0gfTtcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVSYWRpb0l0ZW0gPSBzdHlsZWQoIEFyaWFraXQuTWVudUl0ZW1SYWRpbyApYFxyXG5cdCR7IGJhc2VJdGVtIH07XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgSXRlbVByZWZpeFdyYXBwZXIgPSBzdHlsZWQuc3BhbmBcclxuXHQvKiBBbHdheXMgb2NjdXB5IHRoZSBmaXJzdCBjb2x1bW4sIGV2ZW4gd2hlbiBhdXRvLWNvbGxhcHNpbmcgKi9cclxuXHRncmlkLWNvbHVtbjogMTtcclxuXHJcblx0LypcclxuXHQgKiBFdmVuIHdoZW4gdGhlIGl0ZW0gaXMgbm90IGNoZWNrZWQsIG9jY3VweSB0aGUgc2FtZSBzY3JlZW4gc3BhY2UgdG8gYXZvaWRcclxuXHQgKiB0aGUgc3BhY2UgY29sbGFwc2lkZSB3aGVuIG5vIGl0ZW1zIGFyZSBjaGVja2VkLlxyXG5cdCAqL1xyXG5cdCR7IERyb3Bkb3duTWVudUNoZWNrYm94SXRlbSB9ID4gJixcclxuXHQkeyBEcm9wZG93bk1lbnVSYWRpb0l0ZW0gfSA+ICYge1xyXG5cdFx0LyogU2FtZSB3aWR0aCBhcyB0aGUgY2hlY2sgaWNvbnMgKi9cclxuXHRcdG1pbi13aWR0aDogJHsgc3BhY2UoIDYgKSB9O1xyXG5cdH1cclxuXHJcblx0JHsgRHJvcGRvd25NZW51Q2hlY2tib3hJdGVtIH0gPiAmLFxyXG5cdCR7IERyb3Bkb3duTWVudVJhZGlvSXRlbSB9ID4gJixcclxuXHQmOm5vdCggOmVtcHR5ICkge1xyXG5cdFx0bWFyZ2luLWlubGluZS1lbmQ6ICR7IHNwYWNlKCAyICkgfTtcclxuXHR9XHJcblxyXG5cdGRpc3BsYXk6IGZsZXg7XHJcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuXHJcblx0Y29sb3I6ICR7IExJR0hURVJfVEVYVF9DT0xPUiB9O1xyXG5cclxuXHQvKlxyXG5cdCogV2hlbiB0aGUgcGFyZW50IG1lbnUgaXRlbSBpcyBhY3RpdmUsIGV4Y2VwdCB3aGVuIGl0J3MgYSBub24tZm9jdXNlZC9ob3ZlcmVkXHJcblx0KiBzdWJtZW51IHRyaWdnZXIgKGluIHRoYXQgY2FzZSwgY29sb3Igc2hvdWxkIG5vdCBiZSBpbmhlcml0ZWQpXHJcblx0Ki9cclxuXHRbZGF0YS1hY3RpdmUtaXRlbV06bm90KCBbZGF0YS1mb2N1cy12aXNpYmxlXSApID4gJixcclxuXHQvKiBXaGVuIHRoZSBwYXJlbnQgbWVudSBpdGVtIGlzIGRpc2FibGVkICovXHJcblx0W2FyaWEtZGlzYWJsZWQ9J3RydWUnXSA+ICYge1xyXG5cdFx0Y29sb3I6IGluaGVyaXQ7XHJcblx0fVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW1Db250ZW50V3JhcHBlciA9IHN0eWxlZC5kaXZgXHJcblx0LypcclxuXHQgKiBBbHdheXMgb2NjdXB5IHRoZSBzZWNvbmQgY29sdW1uLCBzaW5jZSB0aGUgZmlyc3QgY29sdW1uXHJcblx0ICogaXMgdGFrZW4gYnkgdGhlIHByZWZpeCB3cmFwcGVyICh3aGVuIGRpc3BsYXllZCkuXHJcblx0ICovXHJcblx0Z3JpZC1jb2x1bW46IDI7XHJcblxyXG5cdGRpc3BsYXk6IGZsZXg7XHJcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcblx0Z2FwOiAkeyBzcGFjZSggMyApIH07XHJcblxyXG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW1DaGlsZHJlbldyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG5cdGZsZXg6IDE7XHJcblxyXG5cdGRpc3BsYXk6IGlubGluZS1mbGV4O1xyXG5cdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcblx0Z2FwOiAkeyBzcGFjZSggMSApIH07XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgSXRlbVN1ZmZpeFdyYXBwZXIgPSBzdHlsZWQuc3BhbmBcclxuXHRmbGV4OiAwIDEgZml0LWNvbnRlbnQ7XHJcblx0bWluLXdpZHRoOiAwO1xyXG5cdHdpZHRoOiBmaXQtY29udGVudDtcclxuXHJcblx0ZGlzcGxheTogZmxleDtcclxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG5cdGdhcDogJHsgc3BhY2UoIDMgKSB9O1xyXG5cclxuXHRjb2xvcjogJHsgTElHSFRFUl9URVhUX0NPTE9SIH07XHJcblxyXG5cdC8qXHJcblx0ICogV2hlbiB0aGUgcGFyZW50IG1lbnUgaXRlbSBpcyBhY3RpdmUsIGV4Y2VwdCB3aGVuIGl0J3MgYSBub24tZm9jdXNlZC9ob3ZlcmVkXHJcblx0ICogc3VibWVudSB0cmlnZ2VyIChpbiB0aGF0IGNhc2UsIGNvbG9yIHNob3VsZCBub3QgYmUgaW5oZXJpdGVkKVxyXG5cdCAqL1xyXG5cdFtkYXRhLWFjdGl2ZS1pdGVtXTpub3QoIFtkYXRhLWZvY3VzLXZpc2libGVdICkgKjpub3QoJHsgTWVudVBvcG92ZXJJbm5lcldyYXBwZXIgfSkgJixcclxuXHQvKiBXaGVuIHRoZSBwYXJlbnQgbWVudSBpdGVtIGlzIGRpc2FibGVkICovXHJcblx0W2FyaWEtZGlzYWJsZWQ9J3RydWUnXSAqOm5vdCgkeyBNZW51UG9wb3ZlcklubmVyV3JhcHBlciB9KSAmIHtcclxuXHRcdGNvbG9yOiBpbmhlcml0O1xyXG5cdH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVHcm91cCA9IHN0eWxlZCggQXJpYWtpdC5NZW51R3JvdXAgKWBcclxuXHQvKiBJZ25vcmUgdGhpcyBlbGVtZW50IHdoZW4gY2FsY3VsYXRpbmcgdGhlIGxheW91dC4gVXNlZnVsIGZvciBzdWJncmlkICovXHJcblx0ZGlzcGxheTogY29udGVudHM7XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51R3JvdXBMYWJlbCA9IHN0eWxlZCggQXJpYWtpdC5NZW51R3JvdXBMYWJlbCApYFxyXG5cdC8qIE9jY3VweSB0aGUgd2lkdGggb2YgYWxsIGdyaWQgY29sdW1ucyAoaWUuIGZ1bGwgd2lkdGgpICovXHJcblx0Z3JpZC1jb2x1bW46IDEgLyAtMTtcclxuXHJcblx0cGFkZGluZy1ibG9jay1zdGFydDogJHsgc3BhY2UoIDMgKSB9O1xyXG5cdHBhZGRpbmctYmxvY2stZW5kOiAkeyBzcGFjZSggMiApIH07XHJcblx0cGFkZGluZy1pbmxpbmU6ICR7IElURU1fUEFERElOR19JTkxJTkUgfTtcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVTZXBhcmF0b3IgPSBzdHlsZWQoIEFyaWFraXQuTWVudVNlcGFyYXRvciApPFxyXG5cdFBpY2s8IERyb3Bkb3duTWVudUNvbnRleHQsICd2YXJpYW50JyA+XHJcbj5gXHJcblx0LyogT2NjdXB5IHRoZSB3aWR0aCBvZiBhbGwgZ3JpZCBjb2x1bW5zIChpZS4gZnVsbCB3aWR0aCkgKi9cclxuXHRncmlkLWNvbHVtbjogMSAvIC0xO1xyXG5cclxuXHRib3JkZXI6IG5vbmU7XHJcblx0aGVpZ2h0OiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfTtcclxuXHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyAoIHByb3BzICkgPT5cclxuXHRcdHByb3BzLnZhcmlhbnQgPT09ICd0b29sYmFyJ1xyXG5cdFx0XHQ/IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1JcclxuXHRcdFx0OiBESVZJREVSX0NPTE9SIH07XHJcblx0LyogQWxpZ24gd2l0aCBtZW51IGl0ZW1zJyBjb250ZW50ICovXHJcblx0bWFyZ2luLWJsb2NrOiAkeyBzcGFjZSggMiApIH07XHJcblx0bWFyZ2luLWlubGluZTogJHsgSVRFTV9QQURESU5HX0lOTElORSB9O1xyXG5cclxuXHQvKiBPbmx5IHZpc2libGUgaW4gV2luZG93cyBIaWdoIENvbnRyYXN0IG1vZGUgKi9cclxuXHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgU3VibWVudUNoZXZyb25JY29uID0gc3R5bGVkKCBJY29uIClgXHJcblx0d2lkdGg6ICR7IHNwYWNlKCAxLjUgKSB9O1xyXG5cdCR7IHJ0bChcclxuXHRcdHtcclxuXHRcdFx0dHJhbnNmb3JtOiBgc2NhbGVYKDEpYCxcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdHRyYW5zZm9ybTogYHNjYWxlWCgtMSlgLFxyXG5cdFx0fVxyXG5cdCkgfTtcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVJdGVtTGFiZWwgPSBzdHlsZWQoIFRydW5jYXRlIClgXHJcblx0Zm9udC1zaXplOiAkeyBmb250KCAnZGVmYXVsdC5mb250U2l6ZScgKSB9O1xyXG5cdGxpbmUtaGVpZ2h0OiAyMHB4O1xyXG5cdGNvbG9yOiBpbmhlcml0O1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW1IZWxwVGV4dCA9IHN0eWxlZCggVHJ1bmNhdGUgKWBcclxuXHRmb250LXNpemU6ICR7IGZvbnQoICdoZWxwVGV4dC5mb250U2l6ZScgKSB9O1xyXG5cdGxpbmUtaGVpZ2h0OiAxNnB4O1xyXG5cdGNvbG9yOiAkeyBMSUdIVEVSX1RFWFRfQ09MT1IgfTtcclxuXHR3b3JkLWJyZWFrOiBicmVhay1hbGw7XHJcblxyXG5cdFtkYXRhLWFjdGl2ZS1pdGVtXTpub3QoIFtkYXRhLWZvY3VzLXZpc2libGVdIClcclxuXHRcdCo6bm90KCAkeyBNZW51UG9wb3ZlcklubmVyV3JhcHBlciB9IClcclxuXHRcdCYsXHJcblx0W2FyaWEtZGlzYWJsZWQ9J3RydWUnXSAqOm5vdCggJHsgTWVudVBvcG92ZXJJbm5lcldyYXBwZXIgfSApICYge1xyXG5cdFx0Y29sb3I6IGluaGVyaXQ7XHJcblx0fVxyXG5gO1xyXG4iXX0= */"));
export const DropdownMenuItemLabel = /*#__PURE__*/_styled(Truncate, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf1"
} : {
  target: "e1kdzosf1",
  label: "DropdownMenuItemLabel"
})("font-size:", font('default.fontSize'), ";line-height:20px;color:inherit;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const DropdownMenuItemHelpText = /*#__PURE__*/_styled(Truncate, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf0"
} : {
  target: "e1kdzosf0",
  label: "DropdownMenuItemHelpText"
})("font-size:", font('helpText.fontSize'), ";line-height:16px;color:", LIGHTER_TEXT_COLOR, ";word-break:break-all;[data-active-item]:not( [data-focus-visible] ) *:not( ", MenuPopoverInnerWrapper, " ) &,[aria-disabled='true'] *:not( ", MenuPopoverInnerWrapper, " ) &{color:inherit;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
//# sourceMappingURL=styles.js.map