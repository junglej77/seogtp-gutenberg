{"version":3,"names":[],"sources":["@wordpress/components/src/dropdown-menu-v2/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type * as Ariakit from '@ariakit/react';\r\nimport type { Placement } from '@floating-ui/react-dom';\r\n\r\nexport interface DropdownMenuContext {\r\n\t/**\r\n\t * The ariakit store shared across all DropdownMenu subcomponents.\r\n\t */\r\n\tstore: Ariakit.MenuStore;\r\n\t/**\r\n\t * The variant used by the underlying menu popover.\r\n\t */\r\n\tvariant?: 'toolbar';\r\n}\r\n\r\nexport interface DropdownMenuProps {\r\n\t/**\r\n\t * The trigger button.\r\n\t */\r\n\ttrigger: React.ReactElement;\r\n\t/**\r\n\t * The contents of the dropdown.\r\n\t */\r\n\tchildren?: React.ReactNode;\r\n\t/**\r\n\t * The open state of the dropdown menu when it is initially rendered. Use when\r\n\t * not wanting to control its open state.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tdefaultOpen?: boolean;\r\n\t/**\r\n\t * The controlled open state of the dropdown menu. Must be used in conjunction\r\n\t * with `onOpenChange`.\r\n\t */\r\n\topen?: boolean;\r\n\t/**\r\n\t * Event handler called when the open state of the dropdown menu changes.\r\n\t */\r\n\tonOpenChange?: ( open: boolean ) => void;\r\n\t/**\r\n\t * The modality of the dropdown menu. When set to true, interaction with\r\n\t * outside elements will be disabled and only menu content will be visible to\r\n\t * screen readers.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tmodal?: boolean;\r\n\t/**\r\n\t * The placement of the dropdown menu popover.\r\n\t *\r\n\t * @default 'bottom-start' for root-level menus, 'right-start' for nested menus\r\n\t */\r\n\tplacement?: Placement;\r\n\t/**\r\n\t * The distance between the popover and the anchor element.\r\n\t *\r\n\t * @default 8 for root-level menus, 16 for nested menus\r\n\t */\r\n\tgutter?: number;\r\n\t/**\r\n\t * The skidding of the popover along the anchor element. Can be set to\r\n\t * negative values to make the popover shift to the opposite side.\r\n\t *\r\n\t * @default 0 for root-level menus, -8 for nested menus\r\n\t */\r\n\tshift?: number;\r\n\t/**\r\n\t * Determines whether the menu popover will be hidden when the user presses\r\n\t * the Escape key.\r\n\t *\r\n\t * @default `( event ) => { event.preventDefault(); return true; }`\r\n\t */\r\n\thideOnEscape?:\r\n\t\t| boolean\r\n\t\t| ( (\r\n\t\t\t\tevent: KeyboardEvent | React.KeyboardEvent< Element >\r\n\t\t  ) => boolean );\r\n}\r\n\r\nexport interface DropdownMenuGroupProps {\r\n\t/**\r\n\t * The contents of the dropdown menu group.\r\n\t */\r\n\tchildren: React.ReactNode;\r\n}\r\n\r\nexport interface DropdownMenuGroupLabelProps {\r\n\t/**\r\n\t * The contents of the dropdown menu group.\r\n\t */\r\n\tchildren: React.ReactNode;\r\n}\r\n\r\nexport interface DropdownMenuItemProps {\r\n\t/**\r\n\t * The contents of the menu item.\r\n\t */\r\n\tchildren: React.ReactNode;\r\n\t/**\r\n\t * The contents of the menu item's prefix.\r\n\t */\r\n\tprefix?: React.ReactNode;\r\n\t/**\r\n\t * The contents of the menu item's suffix.\r\n\t */\r\n\tsuffix?: React.ReactNode;\r\n\t/**\r\n\t * Whether to hide the parent menu when the item is clicked.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\thideOnClick?: boolean;\r\n\t/**\r\n\t * Determines if the element is disabled.\r\n\t */\r\n\tdisabled?: boolean;\r\n}\r\n\r\nexport interface DropdownMenuCheckboxItemProps\r\n\textends Omit< DropdownMenuItemProps, 'prefix' | 'hideOnClick' > {\r\n\t/**\r\n\t * Whether to hide the dropdown menu when the item is clicked.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\thideOnClick?: boolean;\r\n\t/**\r\n\t * The checkbox menu item's name.\r\n\t */\r\n\tname: string;\r\n\t/**\r\n\t * The checkbox item's value, useful when using multiple checkbox menu items\r\n\t * associated to the same `name`.\r\n\t */\r\n\tvalue?: string;\r\n\t/**\r\n\t * The controlled checked state of the checkbox menu item.\r\n\t */\r\n\tchecked?: boolean;\r\n\t/**\r\n\t * The checked state of the checkbox menu item when it is initially rendered.\r\n\t * Use when not wanting to control its checked state.\r\n\t */\r\n\tdefaultChecked?: boolean;\r\n\t/**\r\n\t * Event handler called when the checked state of the checkbox menu item changes.\r\n\t */\r\n\tonChange?: ( event: React.ChangeEvent< HTMLInputElement > ) => void;\r\n}\r\n\r\nexport interface DropdownMenuRadioItemProps\r\n\textends Omit< DropdownMenuItemProps, 'prefix' | 'hideOnClick' > {\r\n\t/**\r\n\t * Whether to hide the dropdown menu when the item is clicked.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\thideOnClick?: boolean;\r\n\t/**\r\n\t * The radio item's name.\r\n\t */\r\n\tname: string;\r\n\t/**\r\n\t * The radio item's value.\r\n\t */\r\n\tvalue: string | number;\r\n\t/**\r\n\t * The controlled checked state of the radio menu item.\r\n\t */\r\n\tchecked?: boolean;\r\n\t/**\r\n\t * The checked state of the radio menu item when it is initially rendered.\r\n\t * Use when not wanting to control its checked state.\r\n\t */\r\n\tdefaultChecked?: boolean;\r\n\t/**\r\n\t * Event handler called when the checked radio menu item changes.\r\n\t */\r\n\tonChange?: ( event: React.ChangeEvent< HTMLInputElement > ) => void;\r\n}\r\n\r\nexport interface DropdownMenuSeparatorProps {}\r\n"],"mappings":"","ignoreList":[]}