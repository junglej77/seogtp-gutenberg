{"version":3,"names":[],"sources":["@wordpress/components/src/dropdown-menu/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { HTMLAttributes, ReactNode } from 'react';\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { ButtonAsButtonProps } from '../button/types';\r\nimport type { WordPressComponentProps } from '../context';\r\nimport type { DropdownProps } from '../dropdown/types';\r\nimport type { Props as IconProps } from '../icon';\r\nimport type { NavigableMenuProps } from '../navigable-container/types';\r\n\r\nexport type DropdownOption = {\r\n\t/**\r\n\t * The icon to be shown for the option.\r\n\t */\r\n\ticon?: IconProps[ 'icon' ];\r\n\t/**\r\n\t * A human-readable title to display for the option.\r\n\t */\r\n\ttitle: string;\r\n\t/**\r\n\t * Whether or not the option is disabled.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tisDisabled?: boolean;\r\n\t/**\r\n\t * A callback function to invoke when the option is selected.\r\n\t */\r\n\tonClick?: ( event?: React.MouseEvent ) => void;\r\n\t/**\r\n\t * Whether or not the control is currently active.\r\n\t */\r\n\tisActive?: boolean;\r\n\t/**\r\n\t * Text to use for the internal `Button` component's tooltip.\r\n\t */\r\n\tlabel?: string;\r\n\t/**\r\n\t * The role to apply to the option's HTML element\r\n\t */\r\n\trole?: HTMLAttributes< HTMLElement >[ 'role' ];\r\n};\r\n\r\ntype DropdownCallbackProps = {\r\n\tisOpen: boolean;\r\n\tonToggle: () => void;\r\n\tonClose: () => void;\r\n};\r\n\r\n// Manually including `as` prop because `WordPressComponentProps` polymorphism\r\n// creates a union that is too large for TypeScript to handle.\r\ntype ToggleProps = Partial<\r\n\tOmit<\r\n\t\tWordPressComponentProps< ButtonAsButtonProps, 'button', false >,\r\n\t\t'label' | 'text'\r\n\t>\r\n> & {\r\n\tas?: React.ElementType | keyof JSX.IntrinsicElements;\r\n\t'data-toolbar-item'?: boolean;\r\n};\r\n\r\nexport type DropdownMenuProps = {\r\n\t/**\r\n\t * The icon to be shown in the collapsed menu button.\r\n\t *\r\n\t * @default \"menu\"\r\n\t */\r\n\ticon?: IconProps[ 'icon' ] | null;\r\n\t/**\r\n\t * A human-readable label to present as accessibility text on the focused\r\n\t * collapsed menu button.\r\n\t */\r\n\tlabel: string;\r\n\t/**\r\n\t * A class name to apply to the dropdown menu's toggle element wrapper.\r\n\t */\r\n\tclassName?: string;\r\n\t/**\r\n\t * Properties of `popoverProps` object will be passed as props to the nested\r\n\t * `Popover` component.\r\n\t * Use this object to modify props available for the `Popover` component that\r\n\t * are not already exposed in the `DropdownMenu` component, e.g.: the\r\n\t * direction in which the popover should open relative to its parent node\r\n\t * set with `position` prop.\r\n\t */\r\n\tpopoverProps?: DropdownProps[ 'popoverProps' ];\r\n\t/**\r\n\t * Properties of `toggleProps` object will be passed as props to the nested\r\n\t * `Button` component in the `renderToggle` implementation of the `Dropdown`\r\n\t * component used internally.\r\n\t * Use this object to modify props available for the `Button` component that\r\n\t * are not already exposed in the `DropdownMenu` component, e.g.: the tooltip\r\n\t * text displayed on hover set with `tooltip` prop.\r\n\t */\r\n\ttoggleProps?: ToggleProps;\r\n\t/**\r\n\t * Properties of `menuProps` object will be passed as props to the nested\r\n\t * `NavigableMenu` component in the `renderContent` implementation of the\r\n\t * `Dropdown` component used internally.\r\n\t * Use this object to modify props available for the `NavigableMenu`\r\n\t * component that are not already exposed in the `DropdownMenu` component,\r\n\t * e.g.: the orientation of the menu set with `orientation` prop.\r\n\t */\r\n\tmenuProps?: Omit< Partial< NavigableMenuProps >, 'children' >;\r\n\t/**\r\n\t * In some contexts, the arrow down key used to open the dropdown menu might\r\n\t * need to be disabledâ€”for example when that key is used to perform another\r\n\t * action.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tdisableOpenOnArrowDown?: boolean;\r\n\t/**\r\n\t * Text to display on the nested `Button` component in the `renderToggle`\r\n\t * implementation of the `Dropdown` component used internally.\r\n\t */\r\n\ttext?: string;\r\n\t/**\r\n\t * Whether or not `no-icons` should be added to the menu's `className`.\r\n\t */\r\n\tnoIcons?: boolean;\r\n\t/**\r\n\t * A [function render prop](https://reactjs.org/docs/render-props.html#using-props-other-than-render)\r\n\t * which should return an element or elements valid for use in a DropdownMenu:\r\n\t * `MenuItem`, `MenuItemsChoice`, or `MenuGroup`. Its first argument is a\r\n\t * props object including the same values as given to a `Dropdown`'s\r\n\t * `renderContent` (`isOpen`, `onToggle`, `onClose`).\r\n\t *\r\n\t * A valid DropdownMenu must specify a `controls` or `children` prop, or both.\r\n\t */\r\n\tchildren?: ( callbackProps: DropdownCallbackProps ) => ReactNode;\r\n\t/**\r\n\t * An array or nested array of objects describing the options to be shown in\r\n\t * the expanded menu. Each object should include an `icon` Dashicon slug\r\n\t * string, a human-readable `title` string, `isDisabled` boolean flag, and\r\n\t * an `onClick` function callback to invoke when the option is selected.\r\n\t *\r\n\t * A valid DropdownMenu must specify a `controls` or `children` prop, or both.\r\n\t */\r\n\tcontrols?: DropdownOption[] | DropdownOption[][];\r\n\t/**\r\n\t * The controlled open state of the dropdown menu.\r\n\t * Must be used in conjunction with `onToggle`.\r\n\t */\r\n\topen?: boolean;\r\n\t/**\r\n\t * The open state of the dropdown menu when initially rendered.\r\n\t * Use when you do not need to control its open state. It will be overridden\r\n\t * by the `open` prop if it is specified on the component's first render.\r\n\t */\r\n\tdefaultOpen?: boolean;\r\n\t/**\r\n\t * A callback invoked when the state of the dropdown menu changes\r\n\t * from open to closed and vice versa.\r\n\t */\r\n\tonToggle?: ( willOpen: boolean ) => void;\r\n};\r\n\r\nexport type DropdownMenuInternalContext = {\r\n\t/**\r\n\t * This variant can be used to change the appearance of the component in\r\n\t * specific contexts, ie. when rendered inside the `Toolbar` component.\r\n\t */\r\n\tvariant?: 'toolbar';\r\n};\r\n"],"mappings":"","ignoreList":[]}