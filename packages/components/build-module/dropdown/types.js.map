{"version":3,"names":[],"sources":["@wordpress/components/src/dropdown/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { ComponentPropsWithoutRef, CSSProperties, ReactNode } from 'react';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type Popover from '../popover';\r\nimport type { PopoverProps } from '../popover/types';\r\n\r\ntype CallbackProps = {\r\n\tisOpen: boolean;\r\n\tonToggle: () => void;\r\n\tonClose: () => void;\r\n};\r\n\r\nexport type DropdownContentWrapperProps = {\r\n\t/**\r\n\t * Amount of padding to apply on the dropdown content.\r\n\t *\r\n\t * @default 'small'\r\n\t */\r\n\tpaddingSize?: 'none' | 'small' | 'medium';\r\n};\r\n\r\nexport type DropdownProps = {\r\n\t/**\r\n\t * The className of the global container.\r\n\t */\r\n\tclassName?: string;\r\n\t/**\r\n\t * If you want to target the dropdown menu for styling purposes,\r\n\t * you need to provide a contentClassName because it's not being rendered\r\n\t * as a child of the container node.\r\n\t */\r\n\tcontentClassName?: string;\r\n\t/**\r\n\t * Opt-in prop to show popovers fullscreen on mobile.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\texpandOnMobile?: boolean;\r\n\t/**\r\n\t * By default, the first tabbable element in the popover will receive focus\r\n\t * when it mounts. This is the same as setting this prop to \"firstElement\".\r\n\t * Specifying a true value will focus the container instead.\r\n\t * Specifying a false value disables the focus handling entirely\r\n\t * (this should only be done when an appropriately accessible\r\n\t * substitute behavior exists).\r\n\t *\r\n\t * @default 'firstElement'\r\n\t */\r\n\tfocusOnMount?: 'firstElement' | boolean;\r\n\t/**\r\n\t * Set this to customize the text that is shown in the dropdown's header\r\n\t * when it is fullscreen on mobile.\r\n\t */\r\n\theaderTitle?: string;\r\n\t/**\r\n\t * A callback invoked when the popover should be closed.\r\n\t */\r\n\tonClose?: () => void;\r\n\t/**\r\n\t * A callback invoked when the state of the dropdown changes\r\n\t * from open to closed and vice versa.\r\n\t */\r\n\tonToggle?: ( willOpen: boolean ) => void;\r\n\t/**\r\n\t * Properties of popoverProps object will be passed as props\r\n\t * to the Popover component.\r\n\t * Use this object to access properties/features\r\n\t * of the Popover component that are not already exposed\r\n\t * in the Dropdown component,\r\n\t * e.g.: the ability to have the popover without an arrow.\r\n\t */\r\n\tpopoverProps?: Omit<\r\n\t\tComponentPropsWithoutRef< typeof Popover >,\r\n\t\t'children'\r\n\t>;\r\n\t/**\r\n\t * A callback invoked to render the content of the dropdown menu.\r\n\t * Its first argument is the same as the renderToggle prop.\r\n\t */\r\n\trenderContent: ( props: CallbackProps ) => ReactNode;\r\n\t/**\r\n\t * A callback invoked to render the Dropdown Toggle Button.\r\n\t *\r\n\t * The first argument of the callback is an object\r\n\t * containing the following properties:\r\n\t *\r\n\t * - isOpen: whether the dropdown menu is opened or not\r\n\t * - onToggle: A function switching the dropdown menu's state\r\n\t * from open to closed and vice versa\r\n\t * - onClose: A function that closes the menu if invoked\r\n\t */\r\n\trenderToggle: ( props: CallbackProps ) => ReactNode;\r\n\t/**\r\n\t * The style of the global container.\r\n\t */\r\n\tstyle?: CSSProperties;\r\n\t/**\r\n\t * Legacy way to specify the popover's position with respect to its anchor.\r\n\t * For details about the possible values, see the `Popover` component's docs.\r\n\t * _Note: this prop is deprecated. Use the `popoverProps.placement` prop\r\n\t * instead._\r\n\t *\r\n\t * @deprecated\r\n\t */\r\n\tposition?: PopoverProps[ 'position' ];\r\n\t/**\r\n\t * The controlled open state of the dropdown.\r\n\t * Must be used in conjunction with `onToggle`.\r\n\t */\r\n\topen?: boolean;\r\n\t/**\r\n\t * The open state of the dropdown when initially rendered.\r\n\t * Use when you do not need to control its open state. It will be overridden\r\n\t * by the `open` prop if it is specified on the component's first render.\r\n\t */\r\n\tdefaultOpen?: boolean;\r\n};\r\n\r\nexport type DropdownInternalContext = {\r\n\t/**\r\n\t * This variant can be used to change the appearance of the component in\r\n\t * specific contexts, ie. when rendered inside the `Toolbar` component.\r\n\t */\r\n\tvariant?: 'toolbar';\r\n};\r\n"],"mappings":"","ignoreList":[]}