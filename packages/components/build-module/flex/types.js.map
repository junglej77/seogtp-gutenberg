{"version":3,"names":[],"sources":["@wordpress/components/src/flex/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { CSSProperties, ReactNode } from 'react';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { ResponsiveCSSValue } from '../utils/types';\r\nimport type { SpaceInput } from '../utils/space';\r\n\r\nexport type FlexDirection = ResponsiveCSSValue<\r\n\tCSSProperties[ 'flexDirection' ]\r\n>;\r\n\r\nexport type FlexProps = {\r\n\t/**\r\n\t * Aligns children using CSS Flexbox `align-items`. Vertically aligns\r\n\t * content if the `direction` is `row`, or horizontally aligns content if\r\n\t * the `direction` is `column`.\r\n\t *\r\n\t * @default 'center'\r\n\t */\r\n\talign?: CSSProperties[ 'alignItems' ];\r\n\t/**\r\n\t * The direction flow of the children content can be adjusted with\r\n\t * `direction`. `column` will align children vertically and `row` will align\r\n\t * children horizontally.\r\n\t *\r\n\t * @default 'row'\r\n\t */\r\n\tdirection?: FlexDirection;\r\n\t/**\r\n\t * Expands to the maximum available width (if horizontal) or height (if\r\n\t * vertical).\r\n\t *\r\n\t * @default true\r\n\t */\r\n\texpanded?: boolean;\r\n\t/**\r\n\t * Spacing in between each child can be adjusted by using `gap`.\r\n\t *\r\n\t * Can either be a number (which will act as a multiplier to the library's\r\n\t * grid system base of 4px), or a literal CSS value string.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tgap?: SpaceInput;\r\n\t/**\r\n\t * Horizontally aligns content if the `direction` is `row`, or vertically\r\n\t * aligns content if the `direction` is `column`.\r\n\t *\r\n\t * @default 'space-between'\r\n\t */\r\n\tjustify?: CSSProperties[ 'justifyContent' ];\r\n\t/**\r\n\t * Determines if children should wrap.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\twrap?: boolean;\r\n\t/**\r\n\t * The children elements.\r\n\t */\r\n\tchildren: ReactNode;\r\n\t/**\r\n\t * @deprecated\r\n\t */\r\n\tisReversed?: boolean;\r\n};\r\n\r\nexport type FlexItemProps = {\r\n\t/**\r\n\t * The (CSS) display of the `FlexItem`.\r\n\t */\r\n\tdisplay?: CSSProperties[ 'display' ];\r\n\t/**\r\n\t * Determines if `FlexItem` should render as an adaptive full-width block.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tisBlock?: boolean;\r\n\t/**\r\n\t * The children elements.\r\n\t */\r\n\tchildren?: ReactNode;\r\n};\r\n\r\nexport type FlexBlockProps = Omit< FlexItemProps, 'isBlock' >;\r\n"],"mappings":"","ignoreList":[]}