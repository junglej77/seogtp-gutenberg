{"version":3,"names":[],"sources":["@wordpress/components/src/focal-point-picker/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type {\r\n\tCSSProperties,\r\n\tReactEventHandler,\r\n\tRef,\r\n\tVideoHTMLAttributes,\r\n} from 'react';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { BaseControlProps } from '../base-control/types';\r\n\r\nexport type FocalPoint = Record< FocalPointAxis, number >;\r\nexport type FocalPointAxis = 'x' | 'y';\r\n\r\nexport type FocalPointPickerProps = Pick<\r\n\tBaseControlProps,\r\n\t'help' | 'hideLabelFromVision' | 'label'\r\n> & {\r\n\t/**\r\n\t * Start opting into the new margin-free styles that will become the default in a future version.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\t__nextHasNoMarginBottom?: boolean;\r\n\t/**\r\n\t * Start opting into the larger default height that will become the default size in a future version.\r\n\t *\r\n\t * @deprecated Default behavior since WP 6.7. Prop can be safely removed.\r\n\t * @ignore\r\n\t */\r\n\t__next40pxDefaultSize?: boolean;\r\n\t/**\r\n\t * Autoplays HTML5 video. This only applies to video sources (`url`).\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tautoPlay?: FocalPointPickerMediaProps[ 'autoPlay' ];\r\n\t/**\r\n\t * Callback which is called when the focal point changes.\r\n\t */\r\n\tonChange: ( value: FocalPoint ) => void;\r\n\tonDrag?: ( value: FocalPoint, event: MouseEvent ) => void;\r\n\t/**\r\n\t * Callback which is called at the end of drag operations.\r\n\t */\r\n\tonDragEnd?: () => void;\r\n\t/**\r\n\t * Callback which is called at the start of drag operations.\r\n\t */\r\n\tonDragStart?: ( value: FocalPoint, event: React.MouseEvent ) => void;\r\n\t/**\r\n\t * Function which is called before internal updates to the value state.\r\n\t * It receives the upcoming value and may return a modified one.\r\n\t */\r\n\tresolvePoint?: ( point: FocalPoint ) => FocalPoint;\r\n\t/**\r\n\t * URL of the image or video to be displayed.\r\n\t */\r\n\turl: FocalPointPickerMediaProps[ 'src' ];\r\n\t/**\r\n\t * The focal point. Should be an object containing `x` and `y` params.\r\n\t */\r\n\tvalue: FocalPoint;\r\n};\r\n\r\nexport type FocalPointPickerControlsProps = {\r\n\t__nextHasNoMarginBottom?: boolean;\r\n\t/**\r\n\t * A bit of extra bottom margin will be added if a `help` text\r\n\t * needs to be rendered under it.\r\n\t */\r\n\thasHelpText: boolean;\r\n\tonChange?: ( value: FocalPoint ) => void;\r\n\tpoint?: FocalPoint;\r\n};\r\n\r\nexport type FocalPointPickerGridProps = {\r\n\tbounds: { width: number; height: number };\r\n\tshowOverlay?: boolean;\r\n};\r\n\r\nexport type FocalPointPickerMediaProps = Pick<\r\n\tVideoHTMLAttributes< HTMLVideoElement >,\r\n\t'autoPlay' | 'muted'\r\n> & {\r\n\talt: string;\r\n\tmediaRef?: Ref< HTMLDivElement | HTMLVideoElement | HTMLImageElement >;\r\n\tonLoad?: ReactEventHandler< HTMLVideoElement | HTMLImageElement >;\r\n\tsrc: string;\r\n};\r\n\r\nexport type FocalPointProps = {\r\n\tisDragging: boolean;\r\n\tleft: CSSProperties[ 'left' ];\r\n\ttop: CSSProperties[ 'top' ];\r\n};\r\n"],"mappings":"","ignoreList":[]}