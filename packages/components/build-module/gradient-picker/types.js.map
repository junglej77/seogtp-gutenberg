{"version":3,"names":[],"sources":["@wordpress/components/src/gradient-picker/types.ts"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport type { HeadingSize } from '../heading/types';\r\n\r\nexport type GradientObject = {\r\n\tgradient: string;\r\n\tname: string;\r\n\tslug: string;\r\n};\r\nexport type OriginObject = { name: string; gradients: GradientObject[] };\r\nexport type GradientsProp = GradientObject[] | OriginObject[];\r\n\r\ntype GradientPickerBaseProps = {\r\n\t/**\r\n\t * The class name added to the wrapper.\r\n\t */\r\n\tclassName?: string;\r\n\t/**\r\n\t * The function called when a new gradient has been defined. It is passed to\r\n\t * the `currentGradient` as an argument.\r\n\t */\r\n\tonChange: ( currentGradient: string | undefined ) => void;\r\n\t/**\r\n\t * The current value of the gradient. Pass a css gradient string (See default value for example).\r\n\t * Optionally pass in a `null` value to specify no gradient is currently selected.\r\n\t *\r\n\t * @default 'linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)'\r\n\t */\r\n\tvalue?: GradientObject[ 'gradient' ] | null;\r\n\t/**\r\n\t * Whether the palette should have a clearing button or not.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tclearable?: boolean;\r\n\t/**\r\n\t * The heading level. Only applies in cases where gradients are provided\r\n\t * from multiple origins (ie. when the array passed as the `gradients` prop\r\n\t * contains two or more items).\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\theadingLevel?: HeadingSize;\r\n\t/**\r\n\t * Whether the control should present as a set of buttons,\r\n\t * each with its own tab stop.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tasButtons?: boolean;\r\n\t/**\r\n\t * Prevents keyboard interaction from wrapping around.\r\n\t * Only used when `asButtons` is not true.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tloop?: boolean;\r\n} & (\r\n\t| {\r\n\t\t\t/**\r\n\t\t\t * A label to identify the purpose of the control.\r\n\t\t\t *\r\n\t\t\t * @todo [#54055] Either this or `aria-labelledby` should be required\r\n\t\t\t */\r\n\t\t\t'aria-label'?: string;\r\n\t\t\t'aria-labelledby'?: never;\r\n\t  }\r\n\t| {\r\n\t\t\t/**\r\n\t\t\t * An ID of an element to provide a label for the control.\r\n\t\t\t *\r\n\t\t\t * @todo [#54055] Either this or `aria-label` should be required\r\n\t\t\t */\r\n\t\t\t'aria-labelledby'?: string;\r\n\t\t\t'aria-label'?: never;\r\n\t  }\r\n);\r\n\r\nexport type GradientPickerComponentProps = GradientPickerBaseProps & {\r\n\t/**\r\n\t * An array of objects as predefined gradients displayed above the gradient\r\n\t * selector. Alternatively, if there are multiple sets (or 'origins') of\r\n\t * gradients, you can pass an array of objects each with a `name` and a\r\n\t * `gradients` array which will in turn contain the predefined gradient objects.\r\n\t *\r\n\t * @default []\r\n\t */\r\n\tgradients?: GradientsProp;\r\n\t/**\r\n\t * Start opting in to the new margin-free styles that will become the default\r\n\t * in a future version, currently scheduled to be WordPress 6.4. (The prop\r\n\t * can be safely removed once this happens.)\r\n\t *\r\n\t * @default false\r\n\t * @deprecated Default behavior since WP 6.5. Prop can be safely removed.\r\n\t * @ignore\r\n\t */\r\n\t__nextHasNoMargin?: boolean;\r\n\t/**\r\n\t * If true, the gradient picker will not be displayed and only defined\r\n\t * gradients from `gradients` will be shown.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tdisableCustomGradients?: boolean;\r\n\t/**\r\n\t * Whether this is rendered in the sidebar.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\t__experimentalIsRenderedInSidebar?: boolean;\r\n};\r\n\r\nexport type PickerProps< TOriginType extends GradientObject | OriginObject > =\r\n\tGradientPickerBaseProps & {\r\n\t\tclearGradient: () => void;\r\n\t\tonChange: (\r\n\t\t\tcurrentGradient: string | undefined,\r\n\t\t\tindex: number\r\n\t\t) => void;\r\n\t\tactions?: React.ReactNode;\r\n\t\tgradients: TOriginType[];\r\n\t};\r\n"],"mappings":"","ignoreList":[]}