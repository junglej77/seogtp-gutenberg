import _styled from "@emotion/styled/base";
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
/**
 * External dependencies
 */

import { css } from '@emotion/react';
/**
 * Internal dependencies
 */

import { Flex, FlexItem } from '../../flex';
import { Text } from '../../text';
import { baseLabelTypography, COLORS, CONFIG, rtl } from '../../utils';
import { jsx as _jsx } from "react/jsx-runtime";
export const Prefix = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "em5sgkm8"
} : {
  target: "em5sgkm8",
  label: "Prefix"
})(process.env.NODE_ENV === "production" ? {
  name: "pvvbxf",
  styles: "box-sizing:border-box;display:block"
} : {
  name: "pvvbxf",
  styles: "box-sizing:border-box;display:block",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
export const Suffix = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "em5sgkm7"
} : {
  target: "em5sgkm7",
  label: "Suffix"
})(process.env.NODE_ENV === "production" ? {
  name: "jgf79h",
  styles: "align-items:center;align-self:stretch;box-sizing:border-box;display:flex"
} : {
  name: "jgf79h",
  styles: "align-items:center;align-self:stretch;box-sizing:border-box;display:flex",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const backdropBorderColor = ({
  disabled,
  isBorderless
}) => {
  if (isBorderless) {
    return 'transparent';
  }
  if (disabled) {
    return COLORS.ui.borderDisabled;
  }
  return COLORS.ui.border;
};
export const BackdropUI = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "em5sgkm6"
} : {
  target: "em5sgkm6",
  label: "BackdropUI"
})("&&&{box-sizing:border-box;border-color:", backdropBorderColor, ";border-radius:inherit;border-style:solid;border-width:1px;bottom:0;left:0;margin:0;padding:0;pointer-events:none;position:absolute;right:0;top:0;", rtl({
  paddingLeft: 2
}), ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const Root = /*#__PURE__*/_styled(Flex, process.env.NODE_ENV === "production" ? {
  target: "em5sgkm5"
} : {
  target: "em5sgkm5",
  label: "Root"
})("box-sizing:border-box;position:relative;border-radius:", CONFIG.radiusSmall, ";padding-top:0;&:focus-within:not( :has( :is( ", Prefix, ", ", Suffix, " ):focus-within ) ){", BackdropUI, "{border-color:", COLORS.ui.borderFocus, ";box-shadow:", CONFIG.controlBoxShadowFocus, ";outline:2px solid transparent;outline-offset:-2px;}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const containerDisabledStyles = ({
  disabled
}) => {
  const backgroundColor = disabled ? COLORS.ui.backgroundDisabled : COLORS.ui.background;
  return /*#__PURE__*/css({
    backgroundColor
  }, process.env.NODE_ENV === "production" ? "" : ";label:containerDisabledStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
var _ref = process.env.NODE_ENV === "production" ? {
  name: "1d3w5wq",
  styles: "width:100%"
} : {
  name: "uo2pd2-containerWidthStyles",
  styles: "width:100%;label:containerWidthStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const containerWidthStyles = ({
  __unstableInputWidth,
  labelPosition
}) => {
  if (!__unstableInputWidth) {
    return _ref;
  }
  if (labelPosition === 'side') {
    return '';
  }
  if (labelPosition === 'edge') {
    return /*#__PURE__*/css({
      flex: `0 0 ${__unstableInputWidth}`
    }, process.env.NODE_ENV === "production" ? "" : ";label:containerWidthStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  }
  return /*#__PURE__*/css({
    width: __unstableInputWidth
  }, process.env.NODE_ENV === "production" ? "" : ";label:containerWidthStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
export const Container = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "em5sgkm4"
} : {
  target: "em5sgkm4",
  label: "Container"
})("align-items:center;box-sizing:border-box;border-radius:inherit;display:flex;flex:1;position:relative;", containerDisabledStyles, " ", containerWidthStyles, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const disabledStyles = ({
  disabled
}) => {
  if (!disabled) {
    return '';
  }
  return /*#__PURE__*/css({
    color: COLORS.ui.textDisabled
  }, process.env.NODE_ENV === "production" ? "" : ";label:disabledStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNKUSIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2lucHV0LWNvbnRyb2wvc3R5bGVzL2lucHV0LWNvbnRyb2wtc3R5bGVzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcclxuICovXHJcbmltcG9ydCB0eXBlIHsgU2VyaWFsaXplZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XHJcbmltcG9ydCB0eXBlIHsgQ1NTUHJvcGVydGllcywgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xyXG5cclxuLyoqXHJcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xyXG4gKi9cclxuaW1wb3J0IHR5cGUgeyBXb3JkUHJlc3NDb21wb25lbnRQcm9wcyB9IGZyb20gJy4uLy4uL2NvbnRleHQnO1xyXG5pbXBvcnQgeyBGbGV4LCBGbGV4SXRlbSB9IGZyb20gJy4uLy4uL2ZsZXgnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vdGV4dCc7XHJcbmltcG9ydCB7IGJhc2VMYWJlbFR5cG9ncmFwaHksIENPTE9SUywgQ09ORklHLCBydGwgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcbmltcG9ydCB0eXBlIHsgTGFiZWxQb3NpdGlvbiwgU2l6ZSwgUHJlZml4U3VmZml4V3JhcHBlclByb3BzIH0gZnJvbSAnLi4vdHlwZXMnO1xyXG5cclxudHlwZSBDb250YWluZXJQcm9wcyA9IHtcclxuXHRkaXNhYmxlZD86IGJvb2xlYW47XHJcblx0aGlkZUxhYmVsPzogYm9vbGVhbjtcclxuXHRfX3Vuc3RhYmxlSW5wdXRXaWR0aD86IENTU1Byb3BlcnRpZXNbICd3aWR0aCcgXTtcclxuXHRsYWJlbFBvc2l0aW9uPzogTGFiZWxQb3NpdGlvbjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBQcmVmaXggPSBzdHlsZWQuc3BhbmBcclxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG5cdGRpc3BsYXk6IGJsb2NrO1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFN1ZmZpeCA9IHN0eWxlZC5zcGFuYFxyXG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblx0YWxpZ24tc2VsZjogc3RyZXRjaDtcclxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG5cdGRpc3BsYXk6IGZsZXg7XHJcbmA7XHJcblxyXG50eXBlIEJhY2tkcm9wUHJvcHMgPSB7XHJcblx0ZGlzYWJsZWQ/OiBib29sZWFuO1xyXG5cdGlzQm9yZGVybGVzcz86IGJvb2xlYW47XHJcbn07XHJcblxyXG5jb25zdCBiYWNrZHJvcEJvcmRlckNvbG9yID0gKCB7XHJcblx0ZGlzYWJsZWQsXHJcblx0aXNCb3JkZXJsZXNzLFxyXG59OiBCYWNrZHJvcFByb3BzICk6IENTU1Byb3BlcnRpZXNbICdib3JkZXJDb2xvcicgXSA9PiB7XHJcblx0aWYgKCBpc0JvcmRlcmxlc3MgKSB7XHJcblx0XHRyZXR1cm4gJ3RyYW5zcGFyZW50JztcclxuXHR9XHJcblxyXG5cdGlmICggZGlzYWJsZWQgKSB7XHJcblx0XHRyZXR1cm4gQ09MT1JTLnVpLmJvcmRlckRpc2FibGVkO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIENPTE9SUy51aS5ib3JkZXI7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgQmFja2Ryb3BVSSA9IHN0eWxlZC5kaXY8IEJhY2tkcm9wUHJvcHMgPmBcclxuXHQmJiYge1xyXG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHRcdGJvcmRlci1jb2xvcjogJHsgYmFja2Ryb3BCb3JkZXJDb2xvciB9O1xyXG5cdFx0Ym9yZGVyLXJhZGl1czogaW5oZXJpdDtcclxuXHRcdGJvcmRlci1zdHlsZTogc29saWQ7XHJcblx0XHRib3JkZXItd2lkdGg6IDFweDtcclxuXHRcdGJvdHRvbTogMDtcclxuXHRcdGxlZnQ6IDA7XHJcblx0XHRtYXJnaW46IDA7XHJcblx0XHRwYWRkaW5nOiAwO1xyXG5cdFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XHJcblx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XHJcblx0XHRyaWdodDogMDtcclxuXHRcdHRvcDogMDtcclxuXHJcblx0XHQkeyBydGwoIHsgcGFkZGluZ0xlZnQ6IDIgfSApIH1cclxuXHR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgUm9vdCA9IHN0eWxlZCggRmxleCApYFxyXG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcblx0cG9zaXRpb246IHJlbGF0aXZlO1xyXG5cdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNTbWFsbCB9O1xyXG5cdHBhZGRpbmctdG9wOiAwO1xyXG5cclxuXHQvLyBGb2N1cyB3aXRoaW4sIGV4Y2x1ZGluZyBjYXNlcyB3aGVyZSBhdXhpbGlhcnkgY29udHJvbHMgaW4gcHJlZml4IG9yIHN1ZmZpeCBoYXZlIGZvY3VzLlxyXG5cdCY6Zm9jdXMtd2l0aGluOm5vdCggOmhhcyggOmlzKCAkeyBQcmVmaXggfSwgJHsgU3VmZml4IH0gKTpmb2N1cy13aXRoaW4gKSApIHtcclxuXHRcdCR7IEJhY2tkcm9wVUkgfSB7XHJcblx0XHRcdGJvcmRlci1jb2xvcjogJHsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XHJcblx0XHRcdGJveC1zaGFkb3c6ICR7IENPTkZJRy5jb250cm9sQm94U2hhZG93Rm9jdXMgfTtcclxuXHRcdFx0Ly8gV2luZG93cyBIaWdoIENvbnRyYXN0IG1vZGUgd2lsbCBzaG93IHRoaXMgb3V0bGluZSwgYnV0IG5vdCB0aGUgYm94LXNoYWRvdy5cclxuXHRcdFx0b3V0bGluZTogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xyXG5cdFx0XHRvdXRsaW5lLW9mZnNldDogLTJweDtcclxuXHRcdH1cclxuXHR9XHJcbmA7XHJcblxyXG5jb25zdCBjb250YWluZXJEaXNhYmxlZFN0eWxlcyA9ICggeyBkaXNhYmxlZCB9OiBDb250YWluZXJQcm9wcyApID0+IHtcclxuXHRjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBkaXNhYmxlZFxyXG5cdFx0PyBDT0xPUlMudWkuYmFja2dyb3VuZERpc2FibGVkXHJcblx0XHQ6IENPTE9SUy51aS5iYWNrZ3JvdW5kO1xyXG5cclxuXHRyZXR1cm4gY3NzKCB7IGJhY2tncm91bmRDb2xvciB9ICk7XHJcbn07XHJcblxyXG5jb25zdCBjb250YWluZXJXaWR0aFN0eWxlcyA9ICgge1xyXG5cdF9fdW5zdGFibGVJbnB1dFdpZHRoLFxyXG5cdGxhYmVsUG9zaXRpb24sXHJcbn06IENvbnRhaW5lclByb3BzICkgPT4ge1xyXG5cdGlmICggISBfX3Vuc3RhYmxlSW5wdXRXaWR0aCApIHtcclxuXHRcdHJldHVybiBjc3MoIHsgd2lkdGg6ICcxMDAlJyB9ICk7XHJcblx0fVxyXG5cclxuXHRpZiAoIGxhYmVsUG9zaXRpb24gPT09ICdzaWRlJyApIHtcclxuXHRcdHJldHVybiAnJztcclxuXHR9XHJcblxyXG5cdGlmICggbGFiZWxQb3NpdGlvbiA9PT0gJ2VkZ2UnICkge1xyXG5cdFx0cmV0dXJuIGNzcygge1xyXG5cdFx0XHRmbGV4OiBgMCAwICR7IF9fdW5zdGFibGVJbnB1dFdpZHRoIH1gLFxyXG5cdFx0fSApO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGNzcyggeyB3aWR0aDogX191bnN0YWJsZUlucHV0V2lkdGggfSApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXY8IENvbnRhaW5lclByb3BzID5gXHJcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG5cdGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XHJcblx0ZGlzcGxheTogZmxleDtcclxuXHRmbGV4OiAxO1xyXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHJcblx0JHsgY29udGFpbmVyRGlzYWJsZWRTdHlsZXMgfVxyXG5cdCR7IGNvbnRhaW5lcldpZHRoU3R5bGVzIH1cclxuYDtcclxuXHJcbnR5cGUgSW5wdXRQcm9wcyA9IHtcclxuXHRfX25leHQ0MHB4RGVmYXVsdFNpemU/OiBib29sZWFuO1xyXG5cdGRpc2FibGVkPzogYm9vbGVhbjtcclxuXHRpbnB1dFNpemU/OiBTaXplO1xyXG5cdGlzRHJhZ2dpbmc/OiBib29sZWFuO1xyXG5cdGRyYWdDdXJzb3I/OiBDU1NQcm9wZXJ0aWVzWyAnY3Vyc29yJyBdO1xyXG5cdHBhZGRpbmdJbmxpbmVTdGFydD86IENTU1Byb3BlcnRpZXNbICdwYWRkaW5nSW5saW5lU3RhcnQnIF07XHJcblx0cGFkZGluZ0lubGluZUVuZD86IENTU1Byb3BlcnRpZXNbICdwYWRkaW5nSW5saW5lRW5kJyBdO1xyXG59O1xyXG5cclxuY29uc3QgZGlzYWJsZWRTdHlsZXMgPSAoIHsgZGlzYWJsZWQgfTogSW5wdXRQcm9wcyApID0+IHtcclxuXHRpZiAoICEgZGlzYWJsZWQgKSB7XHJcblx0XHRyZXR1cm4gJyc7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gY3NzKCB7XHJcblx0XHRjb2xvcjogQ09MT1JTLnVpLnRleHREaXNhYmxlZCxcclxuXHR9ICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZm9udFNpemVTdHlsZXMgPSAoIHsgaW5wdXRTaXplOiBzaXplIH06IElucHV0UHJvcHMgKSA9PiB7XHJcblx0Y29uc3Qgc2l6ZXMgPSB7XHJcblx0XHRkZWZhdWx0OiAnMTNweCcsXHJcblx0XHRzbWFsbDogJzExcHgnLFxyXG5cdFx0Y29tcGFjdDogJzEzcHgnLFxyXG5cdFx0J19fdW5zdGFibGUtbGFyZ2UnOiAnMTNweCcsXHJcblx0fTtcclxuXHJcblx0Y29uc3QgZm9udFNpemUgPSBzaXplc1sgc2l6ZSBhcyBTaXplIF0gfHwgc2l6ZXMuZGVmYXVsdDtcclxuXHRjb25zdCBmb250U2l6ZU1vYmlsZSA9ICcxNnB4JztcclxuXHJcblx0aWYgKCAhIGZvbnRTaXplICkge1xyXG5cdFx0cmV0dXJuICcnO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGNzc2BcclxuXHRcdGZvbnQtc2l6ZTogJHsgZm9udFNpemVNb2JpbGUgfTtcclxuXHJcblx0XHRAbWVkaWEgKCBtaW4td2lkdGg6IDYwMHB4ICkge1xyXG5cdFx0XHRmb250LXNpemU6ICR7IGZvbnRTaXplIH07XHJcblx0XHR9XHJcblx0YDtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRTaXplQ29uZmlnID0gKCB7XHJcblx0aW5wdXRTaXplOiBzaXplLFxyXG5cdF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSxcclxufTogSW5wdXRQcm9wcyApID0+IHtcclxuXHQvLyBQYWRkaW5ncyBtYXkgYmUgb3ZlcnJpZGRlbiBieSB0aGUgY3VzdG9tIHBhZGRpbmdzIHByb3BzLlxyXG5cdGNvbnN0IHNpemVzID0ge1xyXG5cdFx0ZGVmYXVsdDoge1xyXG5cdFx0XHRoZWlnaHQ6IDQwLFxyXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxyXG5cdFx0XHRtaW5IZWlnaHQ6IDQwLFxyXG5cdFx0XHRwYWRkaW5nTGVmdDogQ09ORklHLmNvbnRyb2xQYWRkaW5nWCxcclxuXHRcdFx0cGFkZGluZ1JpZ2h0OiBDT05GSUcuY29udHJvbFBhZGRpbmdYLFxyXG5cdFx0fSxcclxuXHRcdHNtYWxsOiB7XHJcblx0XHRcdGhlaWdodDogMjQsXHJcblx0XHRcdGxpbmVIZWlnaHQ6IDEsXHJcblx0XHRcdG1pbkhlaWdodDogMjQsXHJcblx0XHRcdHBhZGRpbmdMZWZ0OiBDT05GSUcuY29udHJvbFBhZGRpbmdYU21hbGwsXHJcblx0XHRcdHBhZGRpbmdSaWdodDogQ09ORklHLmNvbnRyb2xQYWRkaW5nWFNtYWxsLFxyXG5cdFx0fSxcclxuXHRcdGNvbXBhY3Q6IHtcclxuXHRcdFx0aGVpZ2h0OiAzMixcclxuXHRcdFx0bGluZUhlaWdodDogMSxcclxuXHRcdFx0bWluSGVpZ2h0OiAzMixcclxuXHRcdFx0cGFkZGluZ0xlZnQ6IENPTkZJRy5jb250cm9sUGFkZGluZ1hTbWFsbCxcclxuXHRcdFx0cGFkZGluZ1JpZ2h0OiBDT05GSUcuY29udHJvbFBhZGRpbmdYU21hbGwsXHJcblx0XHR9LFxyXG5cdFx0J19fdW5zdGFibGUtbGFyZ2UnOiB7XHJcblx0XHRcdGhlaWdodDogNDAsXHJcblx0XHRcdGxpbmVIZWlnaHQ6IDEsXHJcblx0XHRcdG1pbkhlaWdodDogNDAsXHJcblx0XHRcdHBhZGRpbmdMZWZ0OiBDT05GSUcuY29udHJvbFBhZGRpbmdYLFxyXG5cdFx0XHRwYWRkaW5nUmlnaHQ6IENPTkZJRy5jb250cm9sUGFkZGluZ1gsXHJcblx0XHR9LFxyXG5cdH07XHJcblxyXG5cdGlmICggISBfX25leHQ0MHB4RGVmYXVsdFNpemUgKSB7XHJcblx0XHRzaXplcy5kZWZhdWx0ID0gc2l6ZXMuY29tcGFjdDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBzaXplc1sgc2l6ZSBhcyBTaXplIF0gfHwgc2l6ZXMuZGVmYXVsdDtcclxufTtcclxuXHJcbmNvbnN0IHNpemVTdHlsZXMgPSAoIHByb3BzOiBJbnB1dFByb3BzICkgPT4ge1xyXG5cdHJldHVybiBjc3MoIGdldFNpemVDb25maWcoIHByb3BzICkgKTtcclxufTtcclxuXHJcbmNvbnN0IGN1c3RvbVBhZGRpbmdzID0gKCB7XHJcblx0cGFkZGluZ0lubGluZVN0YXJ0LFxyXG5cdHBhZGRpbmdJbmxpbmVFbmQsXHJcbn06IElucHV0UHJvcHMgKSA9PiB7XHJcblx0cmV0dXJuIGNzcyggeyBwYWRkaW5nSW5saW5lU3RhcnQsIHBhZGRpbmdJbmxpbmVFbmQgfSApO1xyXG59O1xyXG5cclxuY29uc3QgZHJhZ1N0eWxlcyA9ICggeyBpc0RyYWdnaW5nLCBkcmFnQ3Vyc29yIH06IElucHV0UHJvcHMgKSA9PiB7XHJcblx0bGV0IGRlZmF1bHRBcnJvd1N0eWxlczogU2VyaWFsaXplZFN0eWxlcyB8IHVuZGVmaW5lZDtcclxuXHRsZXQgYWN0aXZlRHJhZ0N1cnNvclN0eWxlczogU2VyaWFsaXplZFN0eWxlcyB8IHVuZGVmaW5lZDtcclxuXHJcblx0aWYgKCBpc0RyYWdnaW5nICkge1xyXG5cdFx0ZGVmYXVsdEFycm93U3R5bGVzID0gY3NzYFxyXG5cdFx0XHRjdXJzb3I6ICR7IGRyYWdDdXJzb3IgfTtcclxuXHRcdFx0dXNlci1zZWxlY3Q6IG5vbmU7XHJcblxyXG5cdFx0XHQmOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uLFxyXG5cdFx0XHQmOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcclxuXHRcdFx0XHQtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmUgIWltcG9ydGFudDtcclxuXHRcdFx0XHRtYXJnaW46IDAgIWltcG9ydGFudDtcclxuXHRcdFx0fVxyXG5cdFx0YDtcclxuXHR9XHJcblxyXG5cdGlmICggaXNEcmFnZ2luZyAmJiBkcmFnQ3Vyc29yICkge1xyXG5cdFx0YWN0aXZlRHJhZ0N1cnNvclN0eWxlcyA9IGNzc2BcclxuXHRcdFx0JjphY3RpdmUge1xyXG5cdFx0XHRcdGN1cnNvcjogJHsgZHJhZ0N1cnNvciB9O1xyXG5cdFx0XHR9XHJcblx0XHRgO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGNzc2BcclxuXHRcdCR7IGRlZmF1bHRBcnJvd1N0eWxlcyB9XHJcblx0XHQkeyBhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzIH1cclxuXHRgO1xyXG59O1xyXG5cclxuLy8gVE9ETzogUmVzb2x2ZSBuZWVkIHRvIHVzZSAmJiYgdG8gaW5jcmVhc2Ugc3BlY2lmaWNpdHlcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL1dvcmRQcmVzcy9ndXRlbmJlcmcvaXNzdWVzLzE4NDgzXHJcblxyXG5leHBvcnQgY29uc3QgSW5wdXQgPSBzdHlsZWQuaW5wdXQ8IElucHV0UHJvcHMgPmBcclxuXHQmJiYge1xyXG5cdFx0YmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG5cdFx0Ym9yZGVyOiBub25lO1xyXG5cdFx0Ym94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xyXG5cdFx0Y29sb3I6ICR7IENPTE9SUy50aGVtZS5mb3JlZ3JvdW5kIH07XHJcblx0XHRkaXNwbGF5OiBibG9jaztcclxuXHRcdGZvbnQtZmFtaWx5OiBpbmhlcml0O1xyXG5cdFx0bWFyZ2luOiAwO1xyXG5cdFx0b3V0bGluZTogbm9uZTtcclxuXHRcdHdpZHRoOiAxMDAlO1xyXG5cclxuXHRcdCR7IGRyYWdTdHlsZXMgfVxyXG5cdFx0JHsgZGlzYWJsZWRTdHlsZXMgfVxyXG5cdFx0JHsgZm9udFNpemVTdHlsZXMgfVxyXG5cdFx0JHsgc2l6ZVN0eWxlcyB9XHJcblx0XHQkeyBjdXN0b21QYWRkaW5ncyB9XHJcblxyXG5cdFx0Jjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XHJcblx0XHRcdGxpbmUtaGVpZ2h0OiBub3JtYWw7XHJcblx0XHR9XHJcblx0fVxyXG5gO1xyXG5cclxuY29uc3QgQmFzZUxhYmVsID0gc3R5bGVkKCBUZXh0ICk8IHsgbGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb24gfSA+YFxyXG5cdCYmJiB7XHJcblx0XHQkeyBiYXNlTGFiZWxUeXBvZ3JhcGh5IH07XHJcblxyXG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHRcdGRpc3BsYXk6IGJsb2NrO1xyXG5cdFx0cGFkZGluZy10b3A6IDA7XHJcblx0XHRwYWRkaW5nLWJvdHRvbTogMDtcclxuXHRcdG1heC13aWR0aDogMTAwJTtcclxuXHRcdHotaW5kZXg6IDE7XHJcblxyXG5cdFx0b3ZlcmZsb3c6IGhpZGRlbjtcclxuXHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xyXG5cdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuXHR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgTGFiZWwgPSAoXHJcblx0cHJvcHM6IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzPFxyXG5cdFx0eyBsYWJlbFBvc2l0aW9uPzogTGFiZWxQb3NpdGlvbjsgY2hpbGRyZW46IFJlYWN0Tm9kZSB9LFxyXG5cdFx0J2xhYmVsJyxcclxuXHRcdGZhbHNlXHJcblx0PlxyXG4pID0+IDxCYXNlTGFiZWwgeyAuLi5wcm9wcyB9IGFzPVwibGFiZWxcIiAvPjtcclxuXHJcbmV4cG9ydCBjb25zdCBMYWJlbFdyYXBwZXIgPSBzdHlsZWQoIEZsZXhJdGVtIClgXHJcblx0bWF4LXdpZHRoOiBjYWxjKCAxMDAlIC0gMTBweCApO1xyXG5gO1xyXG5cclxuY29uc3QgcHJlZml4U3VmZml4V3JhcHBlclN0eWxlcyA9ICgge1xyXG5cdHZhcmlhbnQgPSAnZGVmYXVsdCcsXHJcblx0c2l6ZSxcclxuXHRfX25leHQ0MHB4RGVmYXVsdFNpemUsXHJcblx0aXNQcmVmaXgsXHJcbn06IFByZWZpeFN1ZmZpeFdyYXBwZXJQcm9wcyAmIHsgaXNQcmVmaXg/OiBib29sZWFuIH0gKSA9PiB7XHJcblx0Y29uc3QgeyBwYWRkaW5nTGVmdDogcGFkZGluZyB9ID0gZ2V0U2l6ZUNvbmZpZygge1xyXG5cdFx0aW5wdXRTaXplOiBzaXplLFxyXG5cdFx0X19uZXh0NDBweERlZmF1bHRTaXplLFxyXG5cdH0gKTtcclxuXHJcblx0Y29uc3QgcGFkZGluZ1Byb3BlcnR5ID0gaXNQcmVmaXhcclxuXHRcdD8gJ3BhZGRpbmdJbmxpbmVTdGFydCdcclxuXHRcdDogJ3BhZGRpbmdJbmxpbmVFbmQnO1xyXG5cclxuXHRpZiAoIHZhcmlhbnQgPT09ICdkZWZhdWx0JyApIHtcclxuXHRcdHJldHVybiBjc3MoIHtcclxuXHRcdFx0WyBwYWRkaW5nUHJvcGVydHkgXTogcGFkZGluZyxcclxuXHRcdH0gKTtcclxuXHR9XHJcblxyXG5cdC8vIElmIHZhcmlhbnQgaXMgJ2ljb24nIG9yICdjb250cm9sJ1xyXG5cdHJldHVybiBjc3MoIHtcclxuXHRcdGRpc3BsYXk6ICdmbGV4JyxcclxuXHRcdFsgcGFkZGluZ1Byb3BlcnR5IF06IHBhZGRpbmcgLSA0LFxyXG5cdH0gKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBQcmVmaXhTdWZmaXhXcmFwcGVyID0gc3R5bGVkLmRpdmBcclxuXHQkeyBwcmVmaXhTdWZmaXhXcmFwcGVyU3R5bGVzIH1cclxuYDtcclxuIl19 */");
};
export const fontSizeStyles = ({
  inputSize: size
}) => {
  const sizes = {
    default: '13px',
    small: '11px',
    compact: '13px',
    '__unstable-large': '13px'
  };
  const fontSize = sizes[size] || sizes.default;
  const fontSizeMobile = '16px';
  if (!fontSize) {
    return '';
  }
  return /*#__PURE__*/css("font-size:", fontSizeMobile, ";@media ( min-width: 600px ){font-size:", fontSize, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:fontSizeStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
export const getSizeConfig = ({
  inputSize: size,
  __next40pxDefaultSize
}) => {
  // Paddings may be overridden by the custom paddings props.
  const sizes = {
    default: {
      height: 40,
      lineHeight: 1,
      minHeight: 40,
      paddingLeft: CONFIG.controlPaddingX,
      paddingRight: CONFIG.controlPaddingX
    },
    small: {
      height: 24,
      lineHeight: 1,
      minHeight: 24,
      paddingLeft: CONFIG.controlPaddingXSmall,
      paddingRight: CONFIG.controlPaddingXSmall
    },
    compact: {
      height: 32,
      lineHeight: 1,
      minHeight: 32,
      paddingLeft: CONFIG.controlPaddingXSmall,
      paddingRight: CONFIG.controlPaddingXSmall
    },
    '__unstable-large': {
      height: 40,
      lineHeight: 1,
      minHeight: 40,
      paddingLeft: CONFIG.controlPaddingX,
      paddingRight: CONFIG.controlPaddingX
    }
  };
  if (!__next40pxDefaultSize) {
    sizes.default = sizes.compact;
  }
  return sizes[size] || sizes.default;
};
const sizeStyles = props => {
  return /*#__PURE__*/css(getSizeConfig(props), process.env.NODE_ENV === "production" ? "" : ";label:sizeStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
const customPaddings = ({
  paddingInlineStart,
  paddingInlineEnd
}) => {
  return /*#__PURE__*/css({
    paddingInlineStart,
    paddingInlineEnd
  }, process.env.NODE_ENV === "production" ? "" : ";label:customPaddings;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
const dragStyles = ({
  isDragging,
  dragCursor
}) => {
  let defaultArrowStyles;
  let activeDragCursorStyles;
  if (isDragging) {
    defaultArrowStyles = /*#__PURE__*/css("cursor:", dragCursor, ";user-select:none;&::-webkit-outer-spin-button,&::-webkit-inner-spin-button{-webkit-appearance:none!important;margin:0!important;}" + (process.env.NODE_ENV === "production" ? "" : ";label:defaultArrowStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  }
  if (isDragging && dragCursor) {
    activeDragCursorStyles = /*#__PURE__*/css("&:active{cursor:", dragCursor, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:activeDragCursorStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  }
  return /*#__PURE__*/css(defaultArrowStyles, " ", activeDragCursorStyles, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:dragStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

// TODO: Resolve need to use &&& to increase specificity
// https://github.com/WordPress/gutenberg/issues/18483

export const Input = /*#__PURE__*/_styled("input", process.env.NODE_ENV === "production" ? {
  target: "em5sgkm3"
} : {
  target: "em5sgkm3",
  label: "Input"
})("&&&{background-color:transparent;box-sizing:border-box;border:none;box-shadow:none!important;color:", COLORS.theme.foreground, ";display:block;font-family:inherit;margin:0;outline:none;width:100%;", dragStyles, " ", disabledStyles, " ", fontSizeStyles, " ", sizeStyles, " ", customPaddings, " &::-webkit-input-placeholder{line-height:normal;}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJRK0MiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9pbnB1dC1jb250cm9sL3N0eWxlcy9pbnB1dC1jb250cm9sLXN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXHJcbiAqL1xyXG5pbXBvcnQgdHlwZSB7IFNlcmlhbGl6ZWRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xyXG5pbXBvcnQgdHlwZSB7IENTU1Byb3BlcnRpZXMsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcclxuXHJcbi8qKlxyXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcclxuICovXHJcbmltcG9ydCB0eXBlIHsgV29yZFByZXNzQ29tcG9uZW50UHJvcHMgfSBmcm9tICcuLi8uLi9jb250ZXh0JztcclxuaW1wb3J0IHsgRmxleCwgRmxleEl0ZW0gfSBmcm9tICcuLi8uLi9mbGV4JztcclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uL3RleHQnO1xyXG5pbXBvcnQgeyBiYXNlTGFiZWxUeXBvZ3JhcGh5LCBDT0xPUlMsIENPTkZJRywgcnRsIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQgdHlwZSB7IExhYmVsUG9zaXRpb24sIFNpemUsIFByZWZpeFN1ZmZpeFdyYXBwZXJQcm9wcyB9IGZyb20gJy4uL3R5cGVzJztcclxuXHJcbnR5cGUgQ29udGFpbmVyUHJvcHMgPSB7XHJcblx0ZGlzYWJsZWQ/OiBib29sZWFuO1xyXG5cdGhpZGVMYWJlbD86IGJvb2xlYW47XHJcblx0X191bnN0YWJsZUlucHV0V2lkdGg/OiBDU1NQcm9wZXJ0aWVzWyAnd2lkdGgnIF07XHJcblx0bGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb247XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgUHJlZml4ID0gc3R5bGVkLnNwYW5gXHJcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHRkaXNwbGF5OiBibG9jaztcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBTdWZmaXggPSBzdHlsZWQuc3BhbmBcclxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cdGFsaWduLXNlbGY6IHN0cmV0Y2g7XHJcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHRkaXNwbGF5OiBmbGV4O1xyXG5gO1xyXG5cclxudHlwZSBCYWNrZHJvcFByb3BzID0ge1xyXG5cdGRpc2FibGVkPzogYm9vbGVhbjtcclxuXHRpc0JvcmRlcmxlc3M/OiBib29sZWFuO1xyXG59O1xyXG5cclxuY29uc3QgYmFja2Ryb3BCb3JkZXJDb2xvciA9ICgge1xyXG5cdGRpc2FibGVkLFxyXG5cdGlzQm9yZGVybGVzcyxcclxufTogQmFja2Ryb3BQcm9wcyApOiBDU1NQcm9wZXJ0aWVzWyAnYm9yZGVyQ29sb3InIF0gPT4ge1xyXG5cdGlmICggaXNCb3JkZXJsZXNzICkge1xyXG5cdFx0cmV0dXJuICd0cmFuc3BhcmVudCc7XHJcblx0fVxyXG5cclxuXHRpZiAoIGRpc2FibGVkICkge1xyXG5cdFx0cmV0dXJuIENPTE9SUy51aS5ib3JkZXJEaXNhYmxlZDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBDT0xPUlMudWkuYm9yZGVyO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IEJhY2tkcm9wVUkgPSBzdHlsZWQuZGl2PCBCYWNrZHJvcFByb3BzID5gXHJcblx0JiYmIHtcclxuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcblx0XHRib3JkZXItY29sb3I6ICR7IGJhY2tkcm9wQm9yZGVyQ29sb3IgfTtcclxuXHRcdGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XHJcblx0XHRib3JkZXItc3R5bGU6IHNvbGlkO1xyXG5cdFx0Ym9yZGVyLXdpZHRoOiAxcHg7XHJcblx0XHRib3R0b206IDA7XHJcblx0XHRsZWZ0OiAwO1xyXG5cdFx0bWFyZ2luOiAwO1xyXG5cdFx0cGFkZGluZzogMDtcclxuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdFx0cmlnaHQ6IDA7XHJcblx0XHR0b3A6IDA7XHJcblxyXG5cdFx0JHsgcnRsKCB7IHBhZGRpbmdMZWZ0OiAyIH0gKSB9XHJcblx0fVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJvb3QgPSBzdHlsZWQoIEZsZXggKWBcclxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHRib3JkZXItcmFkaXVzOiAkeyBDT05GSUcucmFkaXVzU21hbGwgfTtcclxuXHRwYWRkaW5nLXRvcDogMDtcclxuXHJcblx0Ly8gRm9jdXMgd2l0aGluLCBleGNsdWRpbmcgY2FzZXMgd2hlcmUgYXV4aWxpYXJ5IGNvbnRyb2xzIGluIHByZWZpeCBvciBzdWZmaXggaGF2ZSBmb2N1cy5cclxuXHQmOmZvY3VzLXdpdGhpbjpub3QoIDpoYXMoIDppcyggJHsgUHJlZml4IH0sICR7IFN1ZmZpeCB9ICk6Zm9jdXMtd2l0aGluICkgKSB7XHJcblx0XHQkeyBCYWNrZHJvcFVJIH0ge1xyXG5cdFx0XHRib3JkZXItY29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xyXG5cdFx0XHRib3gtc2hhZG93OiAkeyBDT05GSUcuY29udHJvbEJveFNoYWRvd0ZvY3VzIH07XHJcblx0XHRcdC8vIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlIHdpbGwgc2hvdyB0aGlzIG91dGxpbmUsIGJ1dCBub3QgdGhlIGJveC1zaGFkb3cuXHJcblx0XHRcdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcclxuXHRcdFx0b3V0bGluZS1vZmZzZXQ6IC0ycHg7XHJcblx0XHR9XHJcblx0fVxyXG5gO1xyXG5cclxuY29uc3QgY29udGFpbmVyRGlzYWJsZWRTdHlsZXMgPSAoIHsgZGlzYWJsZWQgfTogQ29udGFpbmVyUHJvcHMgKSA9PiB7XHJcblx0Y29uc3QgYmFja2dyb3VuZENvbG9yID0gZGlzYWJsZWRcclxuXHRcdD8gQ09MT1JTLnVpLmJhY2tncm91bmREaXNhYmxlZFxyXG5cdFx0OiBDT0xPUlMudWkuYmFja2dyb3VuZDtcclxuXHJcblx0cmV0dXJuIGNzcyggeyBiYWNrZ3JvdW5kQ29sb3IgfSApO1xyXG59O1xyXG5cclxuY29uc3QgY29udGFpbmVyV2lkdGhTdHlsZXMgPSAoIHtcclxuXHRfX3Vuc3RhYmxlSW5wdXRXaWR0aCxcclxuXHRsYWJlbFBvc2l0aW9uLFxyXG59OiBDb250YWluZXJQcm9wcyApID0+IHtcclxuXHRpZiAoICEgX191bnN0YWJsZUlucHV0V2lkdGggKSB7XHJcblx0XHRyZXR1cm4gY3NzKCB7IHdpZHRoOiAnMTAwJScgfSApO1xyXG5cdH1cclxuXHJcblx0aWYgKCBsYWJlbFBvc2l0aW9uID09PSAnc2lkZScgKSB7XHJcblx0XHRyZXR1cm4gJyc7XHJcblx0fVxyXG5cclxuXHRpZiAoIGxhYmVsUG9zaXRpb24gPT09ICdlZGdlJyApIHtcclxuXHRcdHJldHVybiBjc3MoIHtcclxuXHRcdFx0ZmxleDogYDAgMCAkeyBfX3Vuc3RhYmxlSW5wdXRXaWR0aCB9YCxcclxuXHRcdH0gKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBjc3MoIHsgd2lkdGg6IF9fdW5zdGFibGVJbnB1dFdpZHRoIH0gKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2PCBDb250YWluZXJQcm9wcyA+YFxyXG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHRib3JkZXItcmFkaXVzOiBpbmhlcml0O1xyXG5cdGRpc3BsYXk6IGZsZXg7XHJcblx0ZmxleDogMTtcclxuXHRwb3NpdGlvbjogcmVsYXRpdmU7XHJcblxyXG5cdCR7IGNvbnRhaW5lckRpc2FibGVkU3R5bGVzIH1cclxuXHQkeyBjb250YWluZXJXaWR0aFN0eWxlcyB9XHJcbmA7XHJcblxyXG50eXBlIElucHV0UHJvcHMgPSB7XHJcblx0X19uZXh0NDBweERlZmF1bHRTaXplPzogYm9vbGVhbjtcclxuXHRkaXNhYmxlZD86IGJvb2xlYW47XHJcblx0aW5wdXRTaXplPzogU2l6ZTtcclxuXHRpc0RyYWdnaW5nPzogYm9vbGVhbjtcclxuXHRkcmFnQ3Vyc29yPzogQ1NTUHJvcGVydGllc1sgJ2N1cnNvcicgXTtcclxuXHRwYWRkaW5nSW5saW5lU3RhcnQ/OiBDU1NQcm9wZXJ0aWVzWyAncGFkZGluZ0lubGluZVN0YXJ0JyBdO1xyXG5cdHBhZGRpbmdJbmxpbmVFbmQ/OiBDU1NQcm9wZXJ0aWVzWyAncGFkZGluZ0lubGluZUVuZCcgXTtcclxufTtcclxuXHJcbmNvbnN0IGRpc2FibGVkU3R5bGVzID0gKCB7IGRpc2FibGVkIH06IElucHV0UHJvcHMgKSA9PiB7XHJcblx0aWYgKCAhIGRpc2FibGVkICkge1xyXG5cdFx0cmV0dXJuICcnO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGNzcygge1xyXG5cdFx0Y29sb3I6IENPTE9SUy51aS50ZXh0RGlzYWJsZWQsXHJcblx0fSApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGZvbnRTaXplU3R5bGVzID0gKCB7IGlucHV0U2l6ZTogc2l6ZSB9OiBJbnB1dFByb3BzICkgPT4ge1xyXG5cdGNvbnN0IHNpemVzID0ge1xyXG5cdFx0ZGVmYXVsdDogJzEzcHgnLFxyXG5cdFx0c21hbGw6ICcxMXB4JyxcclxuXHRcdGNvbXBhY3Q6ICcxM3B4JyxcclxuXHRcdCdfX3Vuc3RhYmxlLWxhcmdlJzogJzEzcHgnLFxyXG5cdH07XHJcblxyXG5cdGNvbnN0IGZvbnRTaXplID0gc2l6ZXNbIHNpemUgYXMgU2l6ZSBdIHx8IHNpemVzLmRlZmF1bHQ7XHJcblx0Y29uc3QgZm9udFNpemVNb2JpbGUgPSAnMTZweCc7XHJcblxyXG5cdGlmICggISBmb250U2l6ZSApIHtcclxuXHRcdHJldHVybiAnJztcclxuXHR9XHJcblxyXG5cdHJldHVybiBjc3NgXHJcblx0XHRmb250LXNpemU6ICR7IGZvbnRTaXplTW9iaWxlIH07XHJcblxyXG5cdFx0QG1lZGlhICggbWluLXdpZHRoOiA2MDBweCApIHtcclxuXHRcdFx0Zm9udC1zaXplOiAkeyBmb250U2l6ZSB9O1xyXG5cdFx0fVxyXG5cdGA7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0U2l6ZUNvbmZpZyA9ICgge1xyXG5cdGlucHV0U2l6ZTogc2l6ZSxcclxuXHRfX25leHQ0MHB4RGVmYXVsdFNpemUsXHJcbn06IElucHV0UHJvcHMgKSA9PiB7XHJcblx0Ly8gUGFkZGluZ3MgbWF5IGJlIG92ZXJyaWRkZW4gYnkgdGhlIGN1c3RvbSBwYWRkaW5ncyBwcm9wcy5cclxuXHRjb25zdCBzaXplcyA9IHtcclxuXHRcdGRlZmF1bHQ6IHtcclxuXHRcdFx0aGVpZ2h0OiA0MCxcclxuXHRcdFx0bGluZUhlaWdodDogMSxcclxuXHRcdFx0bWluSGVpZ2h0OiA0MCxcclxuXHRcdFx0cGFkZGluZ0xlZnQ6IENPTkZJRy5jb250cm9sUGFkZGluZ1gsXHJcblx0XHRcdHBhZGRpbmdSaWdodDogQ09ORklHLmNvbnRyb2xQYWRkaW5nWCxcclxuXHRcdH0sXHJcblx0XHRzbWFsbDoge1xyXG5cdFx0XHRoZWlnaHQ6IDI0LFxyXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxyXG5cdFx0XHRtaW5IZWlnaHQ6IDI0LFxyXG5cdFx0XHRwYWRkaW5nTGVmdDogQ09ORklHLmNvbnRyb2xQYWRkaW5nWFNtYWxsLFxyXG5cdFx0XHRwYWRkaW5nUmlnaHQ6IENPTkZJRy5jb250cm9sUGFkZGluZ1hTbWFsbCxcclxuXHRcdH0sXHJcblx0XHRjb21wYWN0OiB7XHJcblx0XHRcdGhlaWdodDogMzIsXHJcblx0XHRcdGxpbmVIZWlnaHQ6IDEsXHJcblx0XHRcdG1pbkhlaWdodDogMzIsXHJcblx0XHRcdHBhZGRpbmdMZWZ0OiBDT05GSUcuY29udHJvbFBhZGRpbmdYU21hbGwsXHJcblx0XHRcdHBhZGRpbmdSaWdodDogQ09ORklHLmNvbnRyb2xQYWRkaW5nWFNtYWxsLFxyXG5cdFx0fSxcclxuXHRcdCdfX3Vuc3RhYmxlLWxhcmdlJzoge1xyXG5cdFx0XHRoZWlnaHQ6IDQwLFxyXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxyXG5cdFx0XHRtaW5IZWlnaHQ6IDQwLFxyXG5cdFx0XHRwYWRkaW5nTGVmdDogQ09ORklHLmNvbnRyb2xQYWRkaW5nWCxcclxuXHRcdFx0cGFkZGluZ1JpZ2h0OiBDT05GSUcuY29udHJvbFBhZGRpbmdYLFxyXG5cdFx0fSxcclxuXHR9O1xyXG5cclxuXHRpZiAoICEgX19uZXh0NDBweERlZmF1bHRTaXplICkge1xyXG5cdFx0c2l6ZXMuZGVmYXVsdCA9IHNpemVzLmNvbXBhY3Q7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gc2l6ZXNbIHNpemUgYXMgU2l6ZSBdIHx8IHNpemVzLmRlZmF1bHQ7XHJcbn07XHJcblxyXG5jb25zdCBzaXplU3R5bGVzID0gKCBwcm9wczogSW5wdXRQcm9wcyApID0+IHtcclxuXHRyZXR1cm4gY3NzKCBnZXRTaXplQ29uZmlnKCBwcm9wcyApICk7XHJcbn07XHJcblxyXG5jb25zdCBjdXN0b21QYWRkaW5ncyA9ICgge1xyXG5cdHBhZGRpbmdJbmxpbmVTdGFydCxcclxuXHRwYWRkaW5nSW5saW5lRW5kLFxyXG59OiBJbnB1dFByb3BzICkgPT4ge1xyXG5cdHJldHVybiBjc3MoIHsgcGFkZGluZ0lubGluZVN0YXJ0LCBwYWRkaW5nSW5saW5lRW5kIH0gKTtcclxufTtcclxuXHJcbmNvbnN0IGRyYWdTdHlsZXMgPSAoIHsgaXNEcmFnZ2luZywgZHJhZ0N1cnNvciB9OiBJbnB1dFByb3BzICkgPT4ge1xyXG5cdGxldCBkZWZhdWx0QXJyb3dTdHlsZXM6IFNlcmlhbGl6ZWRTdHlsZXMgfCB1bmRlZmluZWQ7XHJcblx0bGV0IGFjdGl2ZURyYWdDdXJzb3JTdHlsZXM6IFNlcmlhbGl6ZWRTdHlsZXMgfCB1bmRlZmluZWQ7XHJcblxyXG5cdGlmICggaXNEcmFnZ2luZyApIHtcclxuXHRcdGRlZmF1bHRBcnJvd1N0eWxlcyA9IGNzc2BcclxuXHRcdFx0Y3Vyc29yOiAkeyBkcmFnQ3Vyc29yIH07XHJcblx0XHRcdHVzZXItc2VsZWN0OiBub25lO1xyXG5cclxuXHRcdFx0Jjo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbixcclxuXHRcdFx0Jjo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiB7XHJcblx0XHRcdFx0LXdlYmtpdC1hcHBlYXJhbmNlOiBub25lICFpbXBvcnRhbnQ7XHJcblx0XHRcdFx0bWFyZ2luOiAwICFpbXBvcnRhbnQ7XHJcblx0XHRcdH1cclxuXHRcdGA7XHJcblx0fVxyXG5cclxuXHRpZiAoIGlzRHJhZ2dpbmcgJiYgZHJhZ0N1cnNvciApIHtcclxuXHRcdGFjdGl2ZURyYWdDdXJzb3JTdHlsZXMgPSBjc3NgXHJcblx0XHRcdCY6YWN0aXZlIHtcclxuXHRcdFx0XHRjdXJzb3I6ICR7IGRyYWdDdXJzb3IgfTtcclxuXHRcdFx0fVxyXG5cdFx0YDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBjc3NgXHJcblx0XHQkeyBkZWZhdWx0QXJyb3dTdHlsZXMgfVxyXG5cdFx0JHsgYWN0aXZlRHJhZ0N1cnNvclN0eWxlcyB9XHJcblx0YDtcclxufTtcclxuXHJcbi8vIFRPRE86IFJlc29sdmUgbmVlZCB0byB1c2UgJiYmIHRvIGluY3JlYXNlIHNwZWNpZmljaXR5XHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL2lzc3Vlcy8xODQ4M1xyXG5cclxuZXhwb3J0IGNvbnN0IElucHV0ID0gc3R5bGVkLmlucHV0PCBJbnB1dFByb3BzID5gXHJcblx0JiYmIHtcclxuXHRcdGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHRcdGJvcmRlcjogbm9uZTtcclxuXHRcdGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcclxuXHRcdGNvbG9yOiAkeyBDT0xPUlMudGhlbWUuZm9yZWdyb3VuZCB9O1xyXG5cdFx0ZGlzcGxheTogYmxvY2s7XHJcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcclxuXHRcdG1hcmdpbjogMDtcclxuXHRcdG91dGxpbmU6IG5vbmU7XHJcblx0XHR3aWR0aDogMTAwJTtcclxuXHJcblx0XHQkeyBkcmFnU3R5bGVzIH1cclxuXHRcdCR7IGRpc2FibGVkU3R5bGVzIH1cclxuXHRcdCR7IGZvbnRTaXplU3R5bGVzIH1cclxuXHRcdCR7IHNpemVTdHlsZXMgfVxyXG5cdFx0JHsgY3VzdG9tUGFkZGluZ3MgfVxyXG5cclxuXHRcdCY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xyXG5cdFx0XHRsaW5lLWhlaWdodDogbm9ybWFsO1xyXG5cdFx0fVxyXG5cdH1cclxuYDtcclxuXHJcbmNvbnN0IEJhc2VMYWJlbCA9IHN0eWxlZCggVGV4dCApPCB7IGxhYmVsUG9zaXRpb24/OiBMYWJlbFBvc2l0aW9uIH0gPmBcclxuXHQmJiYge1xyXG5cdFx0JHsgYmFzZUxhYmVsVHlwb2dyYXBoeSB9O1xyXG5cclxuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcblx0XHRkaXNwbGF5OiBibG9jaztcclxuXHRcdHBhZGRpbmctdG9wOiAwO1xyXG5cdFx0cGFkZGluZy1ib3R0b206IDA7XHJcblx0XHRtYXgtd2lkdGg6IDEwMCU7XHJcblx0XHR6LWluZGV4OiAxO1xyXG5cclxuXHRcdG92ZXJmbG93OiBoaWRkZW47XHJcblx0XHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcclxuXHRcdHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcblx0fVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IExhYmVsID0gKFxyXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczxcclxuXHRcdHsgbGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb247IGNoaWxkcmVuOiBSZWFjdE5vZGUgfSxcclxuXHRcdCdsYWJlbCcsXHJcblx0XHRmYWxzZVxyXG5cdD5cclxuKSA9PiA8QmFzZUxhYmVsIHsgLi4ucHJvcHMgfSBhcz1cImxhYmVsXCIgLz47XHJcblxyXG5leHBvcnQgY29uc3QgTGFiZWxXcmFwcGVyID0gc3R5bGVkKCBGbGV4SXRlbSApYFxyXG5cdG1heC13aWR0aDogY2FsYyggMTAwJSAtIDEwcHggKTtcclxuYDtcclxuXHJcbmNvbnN0IHByZWZpeFN1ZmZpeFdyYXBwZXJTdHlsZXMgPSAoIHtcclxuXHR2YXJpYW50ID0gJ2RlZmF1bHQnLFxyXG5cdHNpemUsXHJcblx0X19uZXh0NDBweERlZmF1bHRTaXplLFxyXG5cdGlzUHJlZml4LFxyXG59OiBQcmVmaXhTdWZmaXhXcmFwcGVyUHJvcHMgJiB7IGlzUHJlZml4PzogYm9vbGVhbiB9ICkgPT4ge1xyXG5cdGNvbnN0IHsgcGFkZGluZ0xlZnQ6IHBhZGRpbmcgfSA9IGdldFNpemVDb25maWcoIHtcclxuXHRcdGlucHV0U2l6ZTogc2l6ZSxcclxuXHRcdF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSxcclxuXHR9ICk7XHJcblxyXG5cdGNvbnN0IHBhZGRpbmdQcm9wZXJ0eSA9IGlzUHJlZml4XHJcblx0XHQ/ICdwYWRkaW5nSW5saW5lU3RhcnQnXHJcblx0XHQ6ICdwYWRkaW5nSW5saW5lRW5kJztcclxuXHJcblx0aWYgKCB2YXJpYW50ID09PSAnZGVmYXVsdCcgKSB7XHJcblx0XHRyZXR1cm4gY3NzKCB7XHJcblx0XHRcdFsgcGFkZGluZ1Byb3BlcnR5IF06IHBhZGRpbmcsXHJcblx0XHR9ICk7XHJcblx0fVxyXG5cclxuXHQvLyBJZiB2YXJpYW50IGlzICdpY29uJyBvciAnY29udHJvbCdcclxuXHRyZXR1cm4gY3NzKCB7XHJcblx0XHRkaXNwbGF5OiAnZmxleCcsXHJcblx0XHRbIHBhZGRpbmdQcm9wZXJ0eSBdOiBwYWRkaW5nIC0gNCxcclxuXHR9ICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgUHJlZml4U3VmZml4V3JhcHBlciA9IHN0eWxlZC5kaXZgXHJcblx0JHsgcHJlZml4U3VmZml4V3JhcHBlclN0eWxlcyB9XHJcbmA7XHJcbiJdfQ== */"));
const BaseLabel = /*#__PURE__*/_styled(Text, process.env.NODE_ENV === "production" ? {
  target: "em5sgkm2"
} : {
  target: "em5sgkm2",
  label: "BaseLabel"
})("&&&{", baseLabelTypography, ";box-sizing:border-box;display:block;padding-top:0;padding-bottom:0;max-width:100%;z-index:1;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const Label = props => /*#__PURE__*/_jsx(BaseLabel, {
  ...props,
  as: "label"
});
export const LabelWrapper = /*#__PURE__*/_styled(FlexItem, process.env.NODE_ENV === "production" ? {
  target: "em5sgkm1"
} : {
  target: "em5sgkm1",
  label: "LabelWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "1b6uupn",
  styles: "max-width:calc( 100% - 10px )"
} : {
  name: "1b6uupn",
  styles: "max-width:calc( 100% - 10px )",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZUOEMiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9pbnB1dC1jb250cm9sL3N0eWxlcy9pbnB1dC1jb250cm9sLXN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXHJcbiAqL1xyXG5pbXBvcnQgdHlwZSB7IFNlcmlhbGl6ZWRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xyXG5pbXBvcnQgdHlwZSB7IENTU1Byb3BlcnRpZXMsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcclxuXHJcbi8qKlxyXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcclxuICovXHJcbmltcG9ydCB0eXBlIHsgV29yZFByZXNzQ29tcG9uZW50UHJvcHMgfSBmcm9tICcuLi8uLi9jb250ZXh0JztcclxuaW1wb3J0IHsgRmxleCwgRmxleEl0ZW0gfSBmcm9tICcuLi8uLi9mbGV4JztcclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uL3RleHQnO1xyXG5pbXBvcnQgeyBiYXNlTGFiZWxUeXBvZ3JhcGh5LCBDT0xPUlMsIENPTkZJRywgcnRsIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQgdHlwZSB7IExhYmVsUG9zaXRpb24sIFNpemUsIFByZWZpeFN1ZmZpeFdyYXBwZXJQcm9wcyB9IGZyb20gJy4uL3R5cGVzJztcclxuXHJcbnR5cGUgQ29udGFpbmVyUHJvcHMgPSB7XHJcblx0ZGlzYWJsZWQ/OiBib29sZWFuO1xyXG5cdGhpZGVMYWJlbD86IGJvb2xlYW47XHJcblx0X191bnN0YWJsZUlucHV0V2lkdGg/OiBDU1NQcm9wZXJ0aWVzWyAnd2lkdGgnIF07XHJcblx0bGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb247XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgUHJlZml4ID0gc3R5bGVkLnNwYW5gXHJcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHRkaXNwbGF5OiBibG9jaztcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBTdWZmaXggPSBzdHlsZWQuc3BhbmBcclxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cdGFsaWduLXNlbGY6IHN0cmV0Y2g7XHJcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHRkaXNwbGF5OiBmbGV4O1xyXG5gO1xyXG5cclxudHlwZSBCYWNrZHJvcFByb3BzID0ge1xyXG5cdGRpc2FibGVkPzogYm9vbGVhbjtcclxuXHRpc0JvcmRlcmxlc3M/OiBib29sZWFuO1xyXG59O1xyXG5cclxuY29uc3QgYmFja2Ryb3BCb3JkZXJDb2xvciA9ICgge1xyXG5cdGRpc2FibGVkLFxyXG5cdGlzQm9yZGVybGVzcyxcclxufTogQmFja2Ryb3BQcm9wcyApOiBDU1NQcm9wZXJ0aWVzWyAnYm9yZGVyQ29sb3InIF0gPT4ge1xyXG5cdGlmICggaXNCb3JkZXJsZXNzICkge1xyXG5cdFx0cmV0dXJuICd0cmFuc3BhcmVudCc7XHJcblx0fVxyXG5cclxuXHRpZiAoIGRpc2FibGVkICkge1xyXG5cdFx0cmV0dXJuIENPTE9SUy51aS5ib3JkZXJEaXNhYmxlZDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBDT0xPUlMudWkuYm9yZGVyO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IEJhY2tkcm9wVUkgPSBzdHlsZWQuZGl2PCBCYWNrZHJvcFByb3BzID5gXHJcblx0JiYmIHtcclxuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcblx0XHRib3JkZXItY29sb3I6ICR7IGJhY2tkcm9wQm9yZGVyQ29sb3IgfTtcclxuXHRcdGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XHJcblx0XHRib3JkZXItc3R5bGU6IHNvbGlkO1xyXG5cdFx0Ym9yZGVyLXdpZHRoOiAxcHg7XHJcblx0XHRib3R0b206IDA7XHJcblx0XHRsZWZ0OiAwO1xyXG5cdFx0bWFyZ2luOiAwO1xyXG5cdFx0cGFkZGluZzogMDtcclxuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdFx0cmlnaHQ6IDA7XHJcblx0XHR0b3A6IDA7XHJcblxyXG5cdFx0JHsgcnRsKCB7IHBhZGRpbmdMZWZ0OiAyIH0gKSB9XHJcblx0fVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJvb3QgPSBzdHlsZWQoIEZsZXggKWBcclxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHRib3JkZXItcmFkaXVzOiAkeyBDT05GSUcucmFkaXVzU21hbGwgfTtcclxuXHRwYWRkaW5nLXRvcDogMDtcclxuXHJcblx0Ly8gRm9jdXMgd2l0aGluLCBleGNsdWRpbmcgY2FzZXMgd2hlcmUgYXV4aWxpYXJ5IGNvbnRyb2xzIGluIHByZWZpeCBvciBzdWZmaXggaGF2ZSBmb2N1cy5cclxuXHQmOmZvY3VzLXdpdGhpbjpub3QoIDpoYXMoIDppcyggJHsgUHJlZml4IH0sICR7IFN1ZmZpeCB9ICk6Zm9jdXMtd2l0aGluICkgKSB7XHJcblx0XHQkeyBCYWNrZHJvcFVJIH0ge1xyXG5cdFx0XHRib3JkZXItY29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xyXG5cdFx0XHRib3gtc2hhZG93OiAkeyBDT05GSUcuY29udHJvbEJveFNoYWRvd0ZvY3VzIH07XHJcblx0XHRcdC8vIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlIHdpbGwgc2hvdyB0aGlzIG91dGxpbmUsIGJ1dCBub3QgdGhlIGJveC1zaGFkb3cuXHJcblx0XHRcdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcclxuXHRcdFx0b3V0bGluZS1vZmZzZXQ6IC0ycHg7XHJcblx0XHR9XHJcblx0fVxyXG5gO1xyXG5cclxuY29uc3QgY29udGFpbmVyRGlzYWJsZWRTdHlsZXMgPSAoIHsgZGlzYWJsZWQgfTogQ29udGFpbmVyUHJvcHMgKSA9PiB7XHJcblx0Y29uc3QgYmFja2dyb3VuZENvbG9yID0gZGlzYWJsZWRcclxuXHRcdD8gQ09MT1JTLnVpLmJhY2tncm91bmREaXNhYmxlZFxyXG5cdFx0OiBDT0xPUlMudWkuYmFja2dyb3VuZDtcclxuXHJcblx0cmV0dXJuIGNzcyggeyBiYWNrZ3JvdW5kQ29sb3IgfSApO1xyXG59O1xyXG5cclxuY29uc3QgY29udGFpbmVyV2lkdGhTdHlsZXMgPSAoIHtcclxuXHRfX3Vuc3RhYmxlSW5wdXRXaWR0aCxcclxuXHRsYWJlbFBvc2l0aW9uLFxyXG59OiBDb250YWluZXJQcm9wcyApID0+IHtcclxuXHRpZiAoICEgX191bnN0YWJsZUlucHV0V2lkdGggKSB7XHJcblx0XHRyZXR1cm4gY3NzKCB7IHdpZHRoOiAnMTAwJScgfSApO1xyXG5cdH1cclxuXHJcblx0aWYgKCBsYWJlbFBvc2l0aW9uID09PSAnc2lkZScgKSB7XHJcblx0XHRyZXR1cm4gJyc7XHJcblx0fVxyXG5cclxuXHRpZiAoIGxhYmVsUG9zaXRpb24gPT09ICdlZGdlJyApIHtcclxuXHRcdHJldHVybiBjc3MoIHtcclxuXHRcdFx0ZmxleDogYDAgMCAkeyBfX3Vuc3RhYmxlSW5wdXRXaWR0aCB9YCxcclxuXHRcdH0gKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBjc3MoIHsgd2lkdGg6IF9fdW5zdGFibGVJbnB1dFdpZHRoIH0gKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2PCBDb250YWluZXJQcm9wcyA+YFxyXG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHRib3JkZXItcmFkaXVzOiBpbmhlcml0O1xyXG5cdGRpc3BsYXk6IGZsZXg7XHJcblx0ZmxleDogMTtcclxuXHRwb3NpdGlvbjogcmVsYXRpdmU7XHJcblxyXG5cdCR7IGNvbnRhaW5lckRpc2FibGVkU3R5bGVzIH1cclxuXHQkeyBjb250YWluZXJXaWR0aFN0eWxlcyB9XHJcbmA7XHJcblxyXG50eXBlIElucHV0UHJvcHMgPSB7XHJcblx0X19uZXh0NDBweERlZmF1bHRTaXplPzogYm9vbGVhbjtcclxuXHRkaXNhYmxlZD86IGJvb2xlYW47XHJcblx0aW5wdXRTaXplPzogU2l6ZTtcclxuXHRpc0RyYWdnaW5nPzogYm9vbGVhbjtcclxuXHRkcmFnQ3Vyc29yPzogQ1NTUHJvcGVydGllc1sgJ2N1cnNvcicgXTtcclxuXHRwYWRkaW5nSW5saW5lU3RhcnQ/OiBDU1NQcm9wZXJ0aWVzWyAncGFkZGluZ0lubGluZVN0YXJ0JyBdO1xyXG5cdHBhZGRpbmdJbmxpbmVFbmQ/OiBDU1NQcm9wZXJ0aWVzWyAncGFkZGluZ0lubGluZUVuZCcgXTtcclxufTtcclxuXHJcbmNvbnN0IGRpc2FibGVkU3R5bGVzID0gKCB7IGRpc2FibGVkIH06IElucHV0UHJvcHMgKSA9PiB7XHJcblx0aWYgKCAhIGRpc2FibGVkICkge1xyXG5cdFx0cmV0dXJuICcnO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGNzcygge1xyXG5cdFx0Y29sb3I6IENPTE9SUy51aS50ZXh0RGlzYWJsZWQsXHJcblx0fSApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGZvbnRTaXplU3R5bGVzID0gKCB7IGlucHV0U2l6ZTogc2l6ZSB9OiBJbnB1dFByb3BzICkgPT4ge1xyXG5cdGNvbnN0IHNpemVzID0ge1xyXG5cdFx0ZGVmYXVsdDogJzEzcHgnLFxyXG5cdFx0c21hbGw6ICcxMXB4JyxcclxuXHRcdGNvbXBhY3Q6ICcxM3B4JyxcclxuXHRcdCdfX3Vuc3RhYmxlLWxhcmdlJzogJzEzcHgnLFxyXG5cdH07XHJcblxyXG5cdGNvbnN0IGZvbnRTaXplID0gc2l6ZXNbIHNpemUgYXMgU2l6ZSBdIHx8IHNpemVzLmRlZmF1bHQ7XHJcblx0Y29uc3QgZm9udFNpemVNb2JpbGUgPSAnMTZweCc7XHJcblxyXG5cdGlmICggISBmb250U2l6ZSApIHtcclxuXHRcdHJldHVybiAnJztcclxuXHR9XHJcblxyXG5cdHJldHVybiBjc3NgXHJcblx0XHRmb250LXNpemU6ICR7IGZvbnRTaXplTW9iaWxlIH07XHJcblxyXG5cdFx0QG1lZGlhICggbWluLXdpZHRoOiA2MDBweCApIHtcclxuXHRcdFx0Zm9udC1zaXplOiAkeyBmb250U2l6ZSB9O1xyXG5cdFx0fVxyXG5cdGA7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0U2l6ZUNvbmZpZyA9ICgge1xyXG5cdGlucHV0U2l6ZTogc2l6ZSxcclxuXHRfX25leHQ0MHB4RGVmYXVsdFNpemUsXHJcbn06IElucHV0UHJvcHMgKSA9PiB7XHJcblx0Ly8gUGFkZGluZ3MgbWF5IGJlIG92ZXJyaWRkZW4gYnkgdGhlIGN1c3RvbSBwYWRkaW5ncyBwcm9wcy5cclxuXHRjb25zdCBzaXplcyA9IHtcclxuXHRcdGRlZmF1bHQ6IHtcclxuXHRcdFx0aGVpZ2h0OiA0MCxcclxuXHRcdFx0bGluZUhlaWdodDogMSxcclxuXHRcdFx0bWluSGVpZ2h0OiA0MCxcclxuXHRcdFx0cGFkZGluZ0xlZnQ6IENPTkZJRy5jb250cm9sUGFkZGluZ1gsXHJcblx0XHRcdHBhZGRpbmdSaWdodDogQ09ORklHLmNvbnRyb2xQYWRkaW5nWCxcclxuXHRcdH0sXHJcblx0XHRzbWFsbDoge1xyXG5cdFx0XHRoZWlnaHQ6IDI0LFxyXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxyXG5cdFx0XHRtaW5IZWlnaHQ6IDI0LFxyXG5cdFx0XHRwYWRkaW5nTGVmdDogQ09ORklHLmNvbnRyb2xQYWRkaW5nWFNtYWxsLFxyXG5cdFx0XHRwYWRkaW5nUmlnaHQ6IENPTkZJRy5jb250cm9sUGFkZGluZ1hTbWFsbCxcclxuXHRcdH0sXHJcblx0XHRjb21wYWN0OiB7XHJcblx0XHRcdGhlaWdodDogMzIsXHJcblx0XHRcdGxpbmVIZWlnaHQ6IDEsXHJcblx0XHRcdG1pbkhlaWdodDogMzIsXHJcblx0XHRcdHBhZGRpbmdMZWZ0OiBDT05GSUcuY29udHJvbFBhZGRpbmdYU21hbGwsXHJcblx0XHRcdHBhZGRpbmdSaWdodDogQ09ORklHLmNvbnRyb2xQYWRkaW5nWFNtYWxsLFxyXG5cdFx0fSxcclxuXHRcdCdfX3Vuc3RhYmxlLWxhcmdlJzoge1xyXG5cdFx0XHRoZWlnaHQ6IDQwLFxyXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxyXG5cdFx0XHRtaW5IZWlnaHQ6IDQwLFxyXG5cdFx0XHRwYWRkaW5nTGVmdDogQ09ORklHLmNvbnRyb2xQYWRkaW5nWCxcclxuXHRcdFx0cGFkZGluZ1JpZ2h0OiBDT05GSUcuY29udHJvbFBhZGRpbmdYLFxyXG5cdFx0fSxcclxuXHR9O1xyXG5cclxuXHRpZiAoICEgX19uZXh0NDBweERlZmF1bHRTaXplICkge1xyXG5cdFx0c2l6ZXMuZGVmYXVsdCA9IHNpemVzLmNvbXBhY3Q7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gc2l6ZXNbIHNpemUgYXMgU2l6ZSBdIHx8IHNpemVzLmRlZmF1bHQ7XHJcbn07XHJcblxyXG5jb25zdCBzaXplU3R5bGVzID0gKCBwcm9wczogSW5wdXRQcm9wcyApID0+IHtcclxuXHRyZXR1cm4gY3NzKCBnZXRTaXplQ29uZmlnKCBwcm9wcyApICk7XHJcbn07XHJcblxyXG5jb25zdCBjdXN0b21QYWRkaW5ncyA9ICgge1xyXG5cdHBhZGRpbmdJbmxpbmVTdGFydCxcclxuXHRwYWRkaW5nSW5saW5lRW5kLFxyXG59OiBJbnB1dFByb3BzICkgPT4ge1xyXG5cdHJldHVybiBjc3MoIHsgcGFkZGluZ0lubGluZVN0YXJ0LCBwYWRkaW5nSW5saW5lRW5kIH0gKTtcclxufTtcclxuXHJcbmNvbnN0IGRyYWdTdHlsZXMgPSAoIHsgaXNEcmFnZ2luZywgZHJhZ0N1cnNvciB9OiBJbnB1dFByb3BzICkgPT4ge1xyXG5cdGxldCBkZWZhdWx0QXJyb3dTdHlsZXM6IFNlcmlhbGl6ZWRTdHlsZXMgfCB1bmRlZmluZWQ7XHJcblx0bGV0IGFjdGl2ZURyYWdDdXJzb3JTdHlsZXM6IFNlcmlhbGl6ZWRTdHlsZXMgfCB1bmRlZmluZWQ7XHJcblxyXG5cdGlmICggaXNEcmFnZ2luZyApIHtcclxuXHRcdGRlZmF1bHRBcnJvd1N0eWxlcyA9IGNzc2BcclxuXHRcdFx0Y3Vyc29yOiAkeyBkcmFnQ3Vyc29yIH07XHJcblx0XHRcdHVzZXItc2VsZWN0OiBub25lO1xyXG5cclxuXHRcdFx0Jjo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbixcclxuXHRcdFx0Jjo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiB7XHJcblx0XHRcdFx0LXdlYmtpdC1hcHBlYXJhbmNlOiBub25lICFpbXBvcnRhbnQ7XHJcblx0XHRcdFx0bWFyZ2luOiAwICFpbXBvcnRhbnQ7XHJcblx0XHRcdH1cclxuXHRcdGA7XHJcblx0fVxyXG5cclxuXHRpZiAoIGlzRHJhZ2dpbmcgJiYgZHJhZ0N1cnNvciApIHtcclxuXHRcdGFjdGl2ZURyYWdDdXJzb3JTdHlsZXMgPSBjc3NgXHJcblx0XHRcdCY6YWN0aXZlIHtcclxuXHRcdFx0XHRjdXJzb3I6ICR7IGRyYWdDdXJzb3IgfTtcclxuXHRcdFx0fVxyXG5cdFx0YDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBjc3NgXHJcblx0XHQkeyBkZWZhdWx0QXJyb3dTdHlsZXMgfVxyXG5cdFx0JHsgYWN0aXZlRHJhZ0N1cnNvclN0eWxlcyB9XHJcblx0YDtcclxufTtcclxuXHJcbi8vIFRPRE86IFJlc29sdmUgbmVlZCB0byB1c2UgJiYmIHRvIGluY3JlYXNlIHNwZWNpZmljaXR5XHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL2lzc3Vlcy8xODQ4M1xyXG5cclxuZXhwb3J0IGNvbnN0IElucHV0ID0gc3R5bGVkLmlucHV0PCBJbnB1dFByb3BzID5gXHJcblx0JiYmIHtcclxuXHRcdGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHRcdGJvcmRlcjogbm9uZTtcclxuXHRcdGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcclxuXHRcdGNvbG9yOiAkeyBDT0xPUlMudGhlbWUuZm9yZWdyb3VuZCB9O1xyXG5cdFx0ZGlzcGxheTogYmxvY2s7XHJcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcclxuXHRcdG1hcmdpbjogMDtcclxuXHRcdG91dGxpbmU6IG5vbmU7XHJcblx0XHR3aWR0aDogMTAwJTtcclxuXHJcblx0XHQkeyBkcmFnU3R5bGVzIH1cclxuXHRcdCR7IGRpc2FibGVkU3R5bGVzIH1cclxuXHRcdCR7IGZvbnRTaXplU3R5bGVzIH1cclxuXHRcdCR7IHNpemVTdHlsZXMgfVxyXG5cdFx0JHsgY3VzdG9tUGFkZGluZ3MgfVxyXG5cclxuXHRcdCY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xyXG5cdFx0XHRsaW5lLWhlaWdodDogbm9ybWFsO1xyXG5cdFx0fVxyXG5cdH1cclxuYDtcclxuXHJcbmNvbnN0IEJhc2VMYWJlbCA9IHN0eWxlZCggVGV4dCApPCB7IGxhYmVsUG9zaXRpb24/OiBMYWJlbFBvc2l0aW9uIH0gPmBcclxuXHQmJiYge1xyXG5cdFx0JHsgYmFzZUxhYmVsVHlwb2dyYXBoeSB9O1xyXG5cclxuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcblx0XHRkaXNwbGF5OiBibG9jaztcclxuXHRcdHBhZGRpbmctdG9wOiAwO1xyXG5cdFx0cGFkZGluZy1ib3R0b206IDA7XHJcblx0XHRtYXgtd2lkdGg6IDEwMCU7XHJcblx0XHR6LWluZGV4OiAxO1xyXG5cclxuXHRcdG92ZXJmbG93OiBoaWRkZW47XHJcblx0XHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcclxuXHRcdHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcblx0fVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IExhYmVsID0gKFxyXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczxcclxuXHRcdHsgbGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb247IGNoaWxkcmVuOiBSZWFjdE5vZGUgfSxcclxuXHRcdCdsYWJlbCcsXHJcblx0XHRmYWxzZVxyXG5cdD5cclxuKSA9PiA8QmFzZUxhYmVsIHsgLi4ucHJvcHMgfSBhcz1cImxhYmVsXCIgLz47XHJcblxyXG5leHBvcnQgY29uc3QgTGFiZWxXcmFwcGVyID0gc3R5bGVkKCBGbGV4SXRlbSApYFxyXG5cdG1heC13aWR0aDogY2FsYyggMTAwJSAtIDEwcHggKTtcclxuYDtcclxuXHJcbmNvbnN0IHByZWZpeFN1ZmZpeFdyYXBwZXJTdHlsZXMgPSAoIHtcclxuXHR2YXJpYW50ID0gJ2RlZmF1bHQnLFxyXG5cdHNpemUsXHJcblx0X19uZXh0NDBweERlZmF1bHRTaXplLFxyXG5cdGlzUHJlZml4LFxyXG59OiBQcmVmaXhTdWZmaXhXcmFwcGVyUHJvcHMgJiB7IGlzUHJlZml4PzogYm9vbGVhbiB9ICkgPT4ge1xyXG5cdGNvbnN0IHsgcGFkZGluZ0xlZnQ6IHBhZGRpbmcgfSA9IGdldFNpemVDb25maWcoIHtcclxuXHRcdGlucHV0U2l6ZTogc2l6ZSxcclxuXHRcdF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSxcclxuXHR9ICk7XHJcblxyXG5cdGNvbnN0IHBhZGRpbmdQcm9wZXJ0eSA9IGlzUHJlZml4XHJcblx0XHQ/ICdwYWRkaW5nSW5saW5lU3RhcnQnXHJcblx0XHQ6ICdwYWRkaW5nSW5saW5lRW5kJztcclxuXHJcblx0aWYgKCB2YXJpYW50ID09PSAnZGVmYXVsdCcgKSB7XHJcblx0XHRyZXR1cm4gY3NzKCB7XHJcblx0XHRcdFsgcGFkZGluZ1Byb3BlcnR5IF06IHBhZGRpbmcsXHJcblx0XHR9ICk7XHJcblx0fVxyXG5cclxuXHQvLyBJZiB2YXJpYW50IGlzICdpY29uJyBvciAnY29udHJvbCdcclxuXHRyZXR1cm4gY3NzKCB7XHJcblx0XHRkaXNwbGF5OiAnZmxleCcsXHJcblx0XHRbIHBhZGRpbmdQcm9wZXJ0eSBdOiBwYWRkaW5nIC0gNCxcclxuXHR9ICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgUHJlZml4U3VmZml4V3JhcHBlciA9IHN0eWxlZC5kaXZgXHJcblx0JHsgcHJlZml4U3VmZml4V3JhcHBlclN0eWxlcyB9XHJcbmA7XHJcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const prefixSuffixWrapperStyles = ({
  variant = 'default',
  size,
  __next40pxDefaultSize,
  isPrefix
}) => {
  const {
    paddingLeft: padding
  } = getSizeConfig({
    inputSize: size,
    __next40pxDefaultSize
  });
  const paddingProperty = isPrefix ? 'paddingInlineStart' : 'paddingInlineEnd';
  if (variant === 'default') {
    return /*#__PURE__*/css({
      [paddingProperty]: padding
    }, process.env.NODE_ENV === "production" ? "" : ";label:prefixSuffixWrapperStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  }

  // If variant is 'icon' or 'control'
  return /*#__PURE__*/css({
    display: 'flex',
    [paddingProperty]: padding - 4
  }, process.env.NODE_ENV === "production" ? "" : ";label:prefixSuffixWrapperStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
export const PrefixSuffixWrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "em5sgkm0"
} : {
  target: "em5sgkm0",
  label: "PrefixSuffixWrapper"
})(prefixSuffixWrapperStyles, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
//# sourceMappingURL=input-control-styles.js.map