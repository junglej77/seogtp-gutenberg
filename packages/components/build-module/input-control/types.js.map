{"version":3,"names":[],"sources":["@wordpress/components/src/input-control/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type {\r\n\tCSSProperties,\r\n\tReactNode,\r\n\tSyntheticEvent,\r\n\tHTMLInputTypeAttribute,\r\n} from 'react';\r\nimport type { useDrag } from '@use-gesture/react';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { StateReducer } from './reducer/state';\r\nimport type { WordPressComponentProps } from '../context';\r\nimport type { FlexProps } from '../flex/types';\r\nimport type { BaseControlProps } from '../base-control/types';\r\n\r\nexport type LabelPosition = 'top' | 'bottom' | 'side' | 'edge';\r\n\r\nexport type DragDirection = 'n' | 's' | 'e' | 'w';\r\n\r\nexport type DragProps = Parameters< Parameters< typeof useDrag >[ 0 ] >[ 0 ];\r\n\r\nexport type Size = 'default' | 'small' | 'compact' | '__unstable-large';\r\n\r\ninterface BaseProps {\r\n\t/**\r\n\t * Deprecated. Use `__next40pxDefaultSize` instead.\r\n\t *\r\n\t * @default false\r\n\t * @deprecated\r\n\t * @ignore\r\n\t */\r\n\t__next36pxDefaultSize?: boolean;\r\n\t/**\r\n\t * Start opting into the larger default height that will become the default size in a future version.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\t__next40pxDefaultSize?: boolean;\r\n\t__unstableInputWidth?: CSSProperties[ 'width' ];\r\n\t/**\r\n\t * If true, the label will only be visible to screen readers.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\thideLabelFromVision?: boolean;\r\n\t/**\r\n\t * The position of the label.\r\n\t *\r\n\t * @default 'top'\r\n\t */\r\n\tlabelPosition?: LabelPosition;\r\n\t/**\r\n\t * Adjusts the size of the input.\r\n\t *\r\n\t * @default 'default'\r\n\t */\r\n\tsize?: Size;\r\n}\r\n\r\nexport type InputChangeCallback< P = {} > = (\r\n\tnextValue: string | undefined,\r\n\textra: { event: SyntheticEvent } & P\r\n) => void;\r\n\r\nexport interface InputFieldProps\r\n\textends Omit< BaseProps, '__next36pxDefaultSize' > {\r\n\t/**\r\n\t * Determines the drag axis.\r\n\t *\r\n\t * @default 'n'\r\n\t */\r\n\tdragDirection?: DragDirection;\r\n\t/**\r\n\t * If `isDragEnabled` is true, this controls the amount of `px` to have been dragged before\r\n\t * the drag gesture is actually triggered.\r\n\t *\r\n\t * @default 10\r\n\t */\r\n\tdragThreshold?: number;\r\n\t/**\r\n\t * If true, enables mouse drag gestures.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tisDragEnabled?: boolean;\r\n\t/**\r\n\t * If true, the `ENTER` key press is required in order to trigger an `onChange`.\r\n\t * If enabled, a change is also triggered when tabbing away (`onBlur`).\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tisPressEnterToChange?: boolean;\r\n\t/**\r\n\t * A function that receives the value of the input.\r\n\t */\r\n\tonChange?: InputChangeCallback;\r\n\tonValidate?: (\r\n\t\tnextValue: string,\r\n\t\tevent?: SyntheticEvent< HTMLInputElement >\r\n\t) => void;\r\n\tpaddingInlineStart?: CSSProperties[ 'paddingInlineStart' ];\r\n\tpaddingInlineEnd?: CSSProperties[ 'paddingInlineEnd' ];\r\n\tstateReducer?: StateReducer;\r\n\t/**\r\n\t * The current value of the input.\r\n\t */\r\n\tvalue?: string;\r\n\tonDragEnd?: ( dragProps: DragProps ) => void;\r\n\tonDragStart?: ( dragProps: DragProps ) => void;\r\n\tonDrag?: ( dragProps: DragProps ) => void;\r\n\t/**\r\n\t * Type of the input element to render.\r\n\t *\r\n\t * @default 'text'\r\n\t */\r\n\ttype?: HTMLInputTypeAttribute;\r\n}\r\n\r\nexport interface InputBaseProps extends BaseProps, FlexProps {\r\n\tchildren: ReactNode;\r\n\t/**\r\n\t * Renders an element on the left side of the input.\r\n\t *\r\n\t * By default, the prefix is aligned with the edge of the input border, with no padding.\r\n\t * If you want to apply standard padding in accordance with the size variant, wrap the element in\r\n\t * the provided `<InputControlPrefixWrapper>` component.\r\n\t *\r\n\t * @example\r\n\t * import {\r\n\t *   __experimentalInputControl as InputControl,\r\n\t *   __experimentalInputControlPrefixWrapper as InputControlPrefixWrapper,\r\n\t * } from '@wordpress/components';\r\n\t *\r\n\t * <InputControl\r\n\t *   prefix={<InputControlPrefixWrapper>@</InputControlPrefixWrapper>}\r\n\t * />\r\n\t */\r\n\tprefix?: ReactNode;\r\n\t/**\r\n\t * Renders an element on the right side of the input.\r\n\t *\r\n\t * By default, the suffix is aligned with the edge of the input border, with no padding.\r\n\t * If you want to apply standard padding in accordance with the size variant, wrap the element in\r\n\t * the provided `<InputControlSuffixWrapper>` component.\r\n\t *\r\n\t * @example\r\n\t * import {\r\n\t *   __experimentalInputControl as InputControl,\r\n\t *   __experimentalInputControlSuffixWrapper as InputControlSuffixWrapper,\r\n\t * } from '@wordpress/components';\r\n\t *\r\n\t * <InputControl\r\n\t *   suffix={<InputControlSuffixWrapper>%</InputControlSuffixWrapper>}\r\n\t * />\r\n\t */\r\n\tsuffix?: ReactNode;\r\n\t/**\r\n\t * If true, the `input` will be disabled.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tdisabled?: boolean;\r\n\t/**\r\n\t * If this property is added, a label will be generated using label property as the content.\r\n\t */\r\n\tlabel?: ReactNode;\r\n\t/**\r\n\t * Whether to hide the border when not focused.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tisBorderless?: boolean;\r\n}\r\n\r\nexport interface InputControlProps\r\n\textends Omit<\r\n\t\t\tInputBaseProps,\r\n\t\t\t'children' | 'isBorderless' | keyof FlexProps\r\n\t\t>,\r\n\t\tPick< BaseControlProps, 'help' >,\r\n\t\t/**\r\n\t\t * The `prefix` prop in `WordPressComponentProps< InputFieldProps, 'input', false >` comes from the\r\n\t\t * `HTMLInputAttributes` and clashes with the one from `InputBaseProps`. So we have to omit it from\r\n\t\t * `WordPressComponentProps< InputFieldProps, 'input', false >` in order that `InputBaseProps[ 'prefix' ]`\r\n\t\t * be the only prefix prop. Otherwise it tries to do a union of the two prefix properties and you end up\r\n\t\t * with an unresolvable type.\r\n\t\t *\r\n\t\t * `paddingInlineStart`, and `paddingInlineEnd` are managed internally by\r\n\t\t * the InputControl, but the rest of the props for InputField are passed through.\r\n\t\t */\r\n\t\tOmit<\r\n\t\t\tWordPressComponentProps< InputFieldProps, 'input', false >,\r\n\t\t\t| 'stateReducer'\r\n\t\t\t| 'prefix'\r\n\t\t\t| 'paddingInlineStart'\r\n\t\t\t| 'paddingInlineEnd'\r\n\t\t> {\r\n\t__unstableStateReducer?: InputFieldProps[ 'stateReducer' ];\r\n}\r\n\r\nexport interface InputControlLabelProps {\r\n\tchildren: ReactNode;\r\n\thideLabelFromVision?: BaseProps[ 'hideLabelFromVision' ];\r\n\tlabelPosition?: BaseProps[ 'labelPosition' ];\r\n\tsize?: BaseProps[ 'size' ];\r\n}\r\n\r\nexport type PrefixSuffixWrapperProps = {\r\n\t/**\r\n\t * The content to be inserted.\r\n\t */\r\n\tchildren: ReactNode;\r\n\t/**\r\n\t * Internal prop used to control the padding size of the wrapper.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tsize?: BaseProps[ 'size' ];\r\n\t/**\r\n\t * Internal prop used to control the padding size of the wrapper.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\t__next40pxDefaultSize?: BaseProps[ '__next40pxDefaultSize' ];\r\n\t/**\r\n\t * Adjust the wrapper based on the prefix or suffix content.\r\n\t *\r\n\t * - `'default'`: Standard padding for text content.\r\n\t * - `'icon'`: For icons.\r\n\t * - `'control'`: For controls, like buttons or selects.\r\n\t *\r\n\t * @default 'default'\r\n\t */\r\n\tvariant?: 'default' | 'icon' | 'control';\r\n};\r\n"],"mappings":"","ignoreList":[]}