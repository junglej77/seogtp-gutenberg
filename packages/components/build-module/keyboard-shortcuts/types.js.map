{"version":3,"names":[],"sources":["@wordpress/components/src/keyboard-shortcuts/types.ts"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport type { useKeyboardShortcut } from '@wordpress/compose';\r\n\r\n// TODO: We wouldn't have to do this if this type was exported from `@wordpress/compose`.\r\ntype WPKeyboardShortcutConfig = NonNullable<\r\n\tParameters< typeof useKeyboardShortcut >[ 2 ]\r\n>;\r\n\r\nexport type KeyboardShortcutProps = {\r\n\tshortcut: string | string[];\r\n\t/**\r\n\t * @see {@link https://craig.is/killing/mice Mousetrap documentation}\r\n\t */\r\n\tcallback: ( event: Mousetrap.ExtendedKeyboardEvent, combo: string ) => void;\r\n} & Pick< WPKeyboardShortcutConfig, 'bindGlobal' | 'eventName' | 'target' >;\r\n\r\nexport type KeyboardShortcutsProps = {\r\n\t/**\r\n\t * Elements to render, upon whom key events are to be monitored.\r\n\t */\r\n\tchildren?: React.ReactNode;\r\n\t/**\r\n\t * An object of shortcut bindings, where each key is a keyboard combination,\r\n\t * the value of which is the callback to be invoked when the key combination is pressed.\r\n\t *\r\n\t * The value of each shortcut should be a consistent function reference, not an anonymous function.\r\n\t * Otherwise, the callback will not be correctly unbound when the component unmounts.\r\n\t *\r\n\t * The `KeyboardShortcuts` component will not update to reflect a changed `shortcuts` prop.\r\n\t * If you need to change shortcuts, mount a separate `KeyboardShortcuts` element,\r\n\t * which can be achieved by assigning a unique `key` prop.\r\n\t *\r\n\t * @see {@link https://craig.is/killing/mice Mousetrap documentation}\r\n\t */\r\n\tshortcuts: Record< string, KeyboardShortcutProps[ 'callback' ] >;\r\n\t/**\r\n\t * By default, a callback will not be invoked if the key combination occurs in an editable field.\r\n\t * Pass `bindGlobal` as `true` if the key events should be observed globally, including within editable fields.\r\n\t *\r\n\t * Tip: If you need some but not all keyboard events to be observed globally,\r\n\t * simply render two distinct `KeyboardShortcuts` elements, one with and one without the `bindGlobal` prop.\r\n\t */\r\n\tbindGlobal?: KeyboardShortcutProps[ 'bindGlobal' ];\r\n\t/**\r\n\t * By default, a callback is invoked in response to the `keydown` event.\r\n\t * To override this, pass `eventName` with the name of a specific keyboard event.\r\n\t */\r\n\teventName?: KeyboardShortcutProps[ 'eventName' ];\r\n};\r\n"],"mappings":"","ignoreList":[]}