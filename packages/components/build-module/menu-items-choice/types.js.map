{"version":3,"names":[],"sources":["@wordpress/components/src/menu-items-choice/types.ts"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport type { ShortcutProps } from '../shortcut/types';\r\nimport type { ButtonAsButtonProps } from '../button/types';\r\n\r\nexport type MenuItemsChoiceProps = {\r\n\t/**\r\n\t * Array of choices.\r\n\t *\r\n\t * @default []\r\n\t */\r\n\tchoices: readonly MenuItemChoice[];\r\n\t/**\r\n\t * Value of currently selected choice (should match a `value` property\r\n\t * from a choice in `choices`).\r\n\t */\r\n\tvalue: string;\r\n\t/**\r\n\t * Callback function to be called with the selected choice when user\r\n\t * selects a new choice.\r\n\t */\r\n\tonSelect: ( value: string ) => void;\r\n\r\n\t/**\r\n\t * Callback function to be called with a choice when user\r\n\t * hovers over a new choice (will be empty on mouse leave).\r\n\t *\r\n\t * @default noop\r\n\t */\r\n\tonHover: ( value: string | null ) => void;\r\n};\r\n\r\nexport type MenuItemChoice = {\r\n\t/**\r\n\t * Human-readable label for choice.\r\n\t */\r\n\tlabel: string;\r\n\t/**\r\n\t * Unique value for choice.\r\n\t */\r\n\tvalue: string;\r\n\t/**\r\n\t * Whether the menu item is disabled.\r\n\t */\r\n\tdisabled?: ButtonAsButtonProps[ 'disabled' ];\r\n\t/**\r\n\t * Additional information which will be rendered below the given label.\r\n\t */\r\n\tinfo?: string;\r\n\t/**\r\n\t * Optional keyboard sequence to trigger choice with keyboard shortcut\r\n\t * (e.g. `ctrl+s`).\r\n\t */\r\n\tshortcut?: ShortcutProps[ 'shortcut' ];\r\n\t/**\r\n\t * Aria compliant label.\r\n\t */\r\n\t[ 'aria-label' ]?: string;\r\n};\r\n"],"mappings":"","ignoreList":[]}