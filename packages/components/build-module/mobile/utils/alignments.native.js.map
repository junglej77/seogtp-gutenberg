{"version":3,"names":["getBlockType","WIDE_ALIGNMENTS","alignments","wide","full","excludeBlocks","notInnerContainers","ALIGNMENT_BREAKPOINTS","large","medium","small","mobile","isFullWidth","align","isWideWidth","isWider","width","breakpoint","isContainerRelated","blockName","includes","hasFullWidthSupport","hasParentFullWidthSupport","blockType","blockAlign","supports","Array","isArray","parent","some","alignmentHelpers"],"sources":["@wordpress/components/src/mobile/utils/alignments.native.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { getBlockType } from '@wordpress/blocks';\r\n\r\nexport const WIDE_ALIGNMENTS = {\r\n\talignments: {\r\n\t\twide: 'wide',\r\n\t\tfull: 'full',\r\n\t},\r\n\texcludeBlocks: [ 'core/heading' ],\r\n\tnotInnerContainers: [\r\n\t\t'core/image',\r\n\t\t'core/separator',\r\n\t\t'core/media-text',\r\n\t\t'core/quote',\r\n\t\t'core/pullquote',\r\n\t],\r\n};\r\n\r\nexport const ALIGNMENT_BREAKPOINTS = {\r\n\twide: 1024,\r\n\tlarge: 820,\r\n\tmedium: 768,\r\n\tsmall: 680,\r\n\tmobile: 480,\r\n};\r\n\r\nconst isFullWidth = ( align ) => align === WIDE_ALIGNMENTS.alignments.full;\r\n\r\nconst isWideWidth = ( align ) => align === WIDE_ALIGNMENTS.alignments.wide;\r\n\r\nconst isWider = ( width, breakpoint ) =>\r\n\twidth > ALIGNMENT_BREAKPOINTS[ breakpoint ];\r\n\r\nconst isContainerRelated = ( blockName ) => {\r\n\tif ( WIDE_ALIGNMENTS.notInnerContainers.includes( blockName ) ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif ( hasFullWidthSupport( blockName ) ) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\treturn hasParentFullWidthSupport( blockName );\r\n};\r\n\r\n/**\r\n * Whether the block has support for full width alignment.\r\n *\r\n * @param {string} blockName\r\n * @return {boolean} Return whether the block supports full width alignment.\r\n */\r\nfunction hasFullWidthSupport( blockName ) {\r\n\tconst blockType = getBlockType( blockName );\r\n\tconst blockAlign = blockType?.supports?.align;\r\n\treturn (\r\n\t\t!! Array.isArray( blockAlign ) &&\r\n\t\tblockAlign.includes( WIDE_ALIGNMENTS.alignments.full )\r\n\t);\r\n}\r\n/**\r\n * Whether the block's parent has support for full width alignment.\r\n *\r\n * @param {string} blockName\r\n * @return {boolean} Return whether the block's parent supports full width alignment.\r\n */\r\nfunction hasParentFullWidthSupport( blockName ) {\r\n\tconst blockType = getBlockType( blockName );\r\n\treturn !! blockType?.parent?.some( hasFullWidthSupport );\r\n}\r\n\r\nexport const alignmentHelpers = {\r\n\tisFullWidth,\r\n\tisWideWidth,\r\n\tisWider,\r\n\tisContainerRelated,\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,mBAAmB;AAEhD,OAAO,MAAMC,eAAe,GAAG;EAC9BC,UAAU,EAAE;IACXC,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE;EACP,CAAC;EACDC,aAAa,EAAE,CAAE,cAAc,CAAE;EACjCC,kBAAkB,EAAE,CACnB,YAAY,EACZ,gBAAgB,EAChB,iBAAiB,EACjB,YAAY,EACZ,gBAAgB;AAElB,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAG;EACpCJ,IAAI,EAAE,IAAI;EACVK,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE,GAAG;EACXC,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE;AACT,CAAC;AAED,MAAMC,WAAW,GAAKC,KAAK,IAAMA,KAAK,KAAKZ,eAAe,CAACC,UAAU,CAACE,IAAI;AAE1E,MAAMU,WAAW,GAAKD,KAAK,IAAMA,KAAK,KAAKZ,eAAe,CAACC,UAAU,CAACC,IAAI;AAE1E,MAAMY,OAAO,GAAGA,CAAEC,KAAK,EAAEC,UAAU,KAClCD,KAAK,GAAGT,qBAAqB,CAAEU,UAAU,CAAE;AAE5C,MAAMC,kBAAkB,GAAKC,SAAS,IAAM;EAC3C,IAAKlB,eAAe,CAACK,kBAAkB,CAACc,QAAQ,CAAED,SAAU,CAAC,EAAG;IAC/D,OAAO,KAAK;EACb;EAEA,IAAKE,mBAAmB,CAAEF,SAAU,CAAC,EAAG;IACvC,OAAO,IAAI;EACZ;EAEA,OAAOG,yBAAyB,CAAEH,SAAU,CAAC;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,mBAAmBA,CAAEF,SAAS,EAAG;EACzC,MAAMI,SAAS,GAAGvB,YAAY,CAAEmB,SAAU,CAAC;EAC3C,MAAMK,UAAU,GAAGD,SAAS,EAAEE,QAAQ,EAAEZ,KAAK;EAC7C,OACC,CAAC,CAAEa,KAAK,CAACC,OAAO,CAAEH,UAAW,CAAC,IAC9BA,UAAU,CAACJ,QAAQ,CAAEnB,eAAe,CAACC,UAAU,CAACE,IAAK,CAAC;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkB,yBAAyBA,CAAEH,SAAS,EAAG;EAC/C,MAAMI,SAAS,GAAGvB,YAAY,CAAEmB,SAAU,CAAC;EAC3C,OAAO,CAAC,CAAEI,SAAS,EAAEK,MAAM,EAAEC,IAAI,CAAER,mBAAoB,CAAC;AACzD;AAEA,OAAO,MAAMS,gBAAgB,GAAG;EAC/BlB,WAAW;EACXE,WAAW;EACXC,OAAO;EACPG;AACD,CAAC","ignoreList":[]}