{"version":3,"names":["parseUnit","cssUnit","match","trim","isNaN","parseFloat","value","unit","undefined","calculate","expression","Function","err","getFunctionUnitValue","functionUnitValue","options","functionUnit","split","filter","Boolean","units","slice","map","getPxFromCssUnit","Math","min","max","length","parseUnitFunction","currentCssUnit","regExp","matches","exec","replace","isMathExpression","i","includes","evalMathExpression","errorFound","cssUnitsBits","parsedUnit","expressionsMatches","values","currentValue","rawCurrentValue","calculatedExpression","calculatedValue","toFixed","parsedValue","calculatedResult","convertParsedUnitToPx","PIXELS_PER_INCH","ONE_PERCENT","defaultProperties","fontSize","lineHeight","width","height","type","setOptions","Object","assign","relativeUnits","em","rem","vh","vw","vmin","vmax","ch","ex","lh","svw","lvw","dvw","svh","lvh","dvh","vi","svi","lvi","dvi","vb","svb","lvb","dvb","svmin","lvmin","dvmin","svmax","lvmax","dvmax","absoluteUnits","in","cm","mm","pt","pc","px","Q","Number","isFinite","cache","memoizedGetPxFromCssUnit","hash","hashOptions","hasOwnProperty"],"sources":["@wordpress/components/src/mobile/utils/get-px-from-css-unit.native.js"],"sourcesContent":["/**\r\n * Converts string to object { value, unit }.\r\n *\r\n * @param {string} cssUnit\r\n * @return {Object} parsedUnit\r\n */\r\nfunction parseUnit( cssUnit ) {\r\n\tconst match = cssUnit\r\n\t\t?.trim()\r\n\t\t.match(\r\n\t\t\t/^(0?[-.]?\\d*\\.?\\d+)(r?e[m|x]|v[h|w|min|max]+|p[x|t|c]|[c|m]m|%|in|ch|Q|lh)$/\r\n\t\t);\r\n\tif ( ! isNaN( cssUnit ) && ! isNaN( parseFloat( cssUnit ) ) ) {\r\n\t\treturn { value: parseFloat( cssUnit ), unit: 'px' };\r\n\t}\r\n\treturn match\r\n\t\t? { value: parseFloat( match[ 1 ] ) || match[ 1 ], unit: match[ 2 ] }\r\n\t\t: { value: cssUnit, unit: undefined };\r\n}\r\n/**\r\n * Evaluate a math expression.\r\n *\r\n * @param {string} expression\r\n * @return {number} evaluated expression.\r\n */\r\nfunction calculate( expression ) {\r\n\ttry {\r\n\t\treturn Function( `'use strict'; return (${ expression })` )();\r\n\t} catch ( err ) {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Calculates the css function value for the supported css functions such as max, min, clamp and calc.\r\n *\r\n * @param {string} functionUnitValue string should be in a particular format (for example min(12px,12px) ) no nested loops.\r\n * @param {Object} options\r\n * @return {string} unit containing the unit in PX.\r\n */\r\nfunction getFunctionUnitValue( functionUnitValue, options ) {\r\n\tconst functionUnit = functionUnitValue.split( /[(),]/g ).filter( Boolean );\r\n\r\n\tconst units = functionUnit\r\n\t\t.slice( 1 )\r\n\t\t.map( ( unit ) => parseUnit( getPxFromCssUnit( unit, options ) ).value )\r\n\t\t.filter( Boolean );\r\n\r\n\tswitch ( functionUnit[ 0 ] ) {\r\n\t\tcase 'min':\r\n\t\t\treturn Math.min( ...units ) + 'px';\r\n\t\tcase 'max':\r\n\t\t\treturn Math.max( ...units ) + 'px';\r\n\t\tcase 'clamp':\r\n\t\t\tif ( units.length !== 3 ) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif ( units[ 1 ] < units[ 0 ] ) {\r\n\t\t\t\treturn units[ 0 ] + 'px';\r\n\t\t\t}\r\n\t\t\tif ( units[ 1 ] > units[ 2 ] ) {\r\n\t\t\t\treturn units[ 2 ] + 'px';\r\n\t\t\t}\r\n\t\t\treturn units[ 1 ] + 'px';\r\n\t\tcase 'calc':\r\n\t\t\treturn units[ 0 ] + 'px';\r\n\t}\r\n}\r\n\r\n/**\r\n * Take a css function such as min, max, calc, clamp and returns parsedUnit\r\n *\r\n * How this works for the nested function is that it first replaces the inner function call.\r\n * Then it tackles the outer onces.\r\n * So for example: min( max(25px, 35px), 40px )\r\n * in the first pass we would replace max(25px, 35px) with 35px.\r\n * then we would try to evaluate min( 35px, 40px )\r\n * and then finally return 35px.\r\n *\r\n * @param {string} cssUnit\r\n * @return {Object} parsedUnit object.\r\n */\r\nfunction parseUnitFunction( cssUnit ) {\r\n\twhile ( true ) {\r\n\t\tconst currentCssUnit = cssUnit;\r\n\t\tconst regExp = /(max|min|calc|clamp)\\(([^()]*)\\)/g;\r\n\t\tconst matches = regExp.exec( cssUnit ) || [];\r\n\t\tif ( matches[ 0 ] ) {\r\n\t\t\tconst functionUnitValue = getFunctionUnitValue( matches[ 0 ] );\r\n\t\t\tcssUnit = cssUnit.replace( matches[ 0 ], functionUnitValue );\r\n\t\t}\r\n\r\n\t\t// If the unit hasn't been modified or we have a single value break free.\r\n\t\tif ( cssUnit === currentCssUnit || parseFloat( cssUnit ) ) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\treturn parseUnit( cssUnit );\r\n}\r\n/**\r\n * Return true if we think this is a math expression.\r\n *\r\n * @param {string} cssUnit the cssUnit value being evaluted.\r\n * @return {boolean} Whether the cssUnit is a math expression.\r\n */\r\nfunction isMathExpression( cssUnit ) {\r\n\tfor ( let i = 0; i < cssUnit.length; i++ ) {\r\n\t\tif ( [ '+', '-', '/', '*' ].includes( cssUnit[ i ] ) ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n/**\r\n * Evaluates the math expression and return a px value.\r\n *\r\n * @param {string} cssUnit the cssUnit value being evaluted.\r\n * @return {string} return a converfted value to px.\r\n */\r\nfunction evalMathExpression( cssUnit ) {\r\n\tlet errorFound = false;\r\n\t// Convert every part of the expression to px values.\r\n\t// The following regex matches numbers that have a following unit\r\n\t// E.g. 5.25rem, 1vw\r\n\tconst cssUnitsBits = cssUnit.match( /\\d+\\.?\\d*[a-zA-Z]+|\\.\\d+[a-zA-Z]+/g );\r\n\tif ( cssUnitsBits ) {\r\n\t\tfor ( const unit of cssUnitsBits ) {\r\n\t\t\t// Standardize the unit to px and extract the value.\r\n\t\t\tconst parsedUnit = parseUnit( getPxFromCssUnit( unit ) );\r\n\t\t\tif ( ! parseFloat( parsedUnit.value ) ) {\r\n\t\t\t\terrorFound = true;\r\n\t\t\t\t// End early since we are dealing with a null value.\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcssUnit = cssUnit.replace( unit, parsedUnit.value );\r\n\t\t}\r\n\t} else {\r\n\t\terrorFound = true;\r\n\t}\r\n\r\n\t// For mixed math expressions wrapped within CSS expressions\r\n\tconst expressionsMatches = cssUnit.match( /(max|min|clamp)/g );\r\n\tif ( ! errorFound && expressionsMatches ) {\r\n\t\tconst values = cssUnit.split( ',' );\r\n\t\tfor ( const currentValue of values ) {\r\n\t\t\t// Check for nested calc() and remove them to calculate the value.\r\n\t\t\tconst rawCurrentValue = currentValue.replace( /\\s|calc/g, '' );\r\n\r\n\t\t\tif ( isMathExpression( rawCurrentValue ) ) {\r\n\t\t\t\tconst calculatedExpression = calculate( rawCurrentValue );\r\n\r\n\t\t\t\tif ( calculatedExpression ) {\r\n\t\t\t\t\tconst calculatedValue =\r\n\t\t\t\t\t\tcalculatedExpression.toFixed( 0 ) + 'px';\r\n\t\t\t\t\tcssUnit = cssUnit.replace( currentValue, calculatedValue );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst parsedValue = parseUnitFunction( cssUnit );\r\n\t\treturn ! parsedValue ? null : parsedValue.value + parsedValue.unit;\r\n\t}\r\n\r\n\tif ( errorFound ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst calculatedResult = calculate( cssUnit );\r\n\treturn calculatedResult ? calculatedResult.toFixed( 0 ) + 'px' : null;\r\n}\r\n\r\n/**\r\n * Convert a parsedUnit object to px value.\r\n *\r\n * @param {Object} parsedUnit\r\n * @param {Object} options\r\n * @return {string} or {null} returns the converted with in a px value format.\r\n */\r\nfunction convertParsedUnitToPx( parsedUnit, options ) {\r\n\tconst PIXELS_PER_INCH = 96;\r\n\tconst ONE_PERCENT = 0.01;\r\n\r\n\tconst defaultProperties = {\r\n\t\tfontSize: 16,\r\n\t\tlineHeight: 16,\r\n\t\twidth: 375,\r\n\t\theight: 812,\r\n\t\ttype: 'font',\r\n\t};\r\n\r\n\tconst setOptions = Object.assign( {}, defaultProperties, options );\r\n\r\n\tconst relativeUnits = {\r\n\t\tem: setOptions.fontSize,\r\n\t\trem: setOptions.fontSize,\r\n\t\tvh: setOptions.height * ONE_PERCENT,\r\n\t\tvw: setOptions.width * ONE_PERCENT,\r\n\t\tvmin:\r\n\t\t\t( setOptions.width < setOptions.height\r\n\t\t\t\t? setOptions.width\r\n\t\t\t\t: setOptions.height ) * ONE_PERCENT,\r\n\t\tvmax:\r\n\t\t\t( setOptions.width > setOptions.height\r\n\t\t\t\t? setOptions.width\r\n\t\t\t\t: setOptions.height ) * ONE_PERCENT,\r\n\t\t'%':\r\n\t\t\t( setOptions.type === 'font'\r\n\t\t\t\t? setOptions.fontSize\r\n\t\t\t\t: setOptions.width ) * ONE_PERCENT,\r\n\t\tch: 8, // The advance measure (width) of the glyph \"0\" of the element's font. Approximate\r\n\t\tex: 7.15625, // X-height of the element's font. Approximate.\r\n\t\tlh: setOptions.lineHeight,\r\n\t};\r\n\trelativeUnits.svw = relativeUnits.vmin;\r\n\trelativeUnits.lvw = relativeUnits.vmax;\r\n\trelativeUnits.dvw = relativeUnits.vw;\r\n\trelativeUnits.svh = relativeUnits.vmin;\r\n\trelativeUnits.lvh = relativeUnits.vmax;\r\n\trelativeUnits.dvh = relativeUnits.vh;\r\n\trelativeUnits.vi = relativeUnits.vh;\r\n\trelativeUnits.svi = relativeUnits.vmin;\r\n\trelativeUnits.lvi = relativeUnits.vmax;\r\n\trelativeUnits.dvi = relativeUnits.vw;\r\n\trelativeUnits.vb = relativeUnits.vh;\r\n\trelativeUnits.svb = relativeUnits.vmin;\r\n\trelativeUnits.lvb = relativeUnits.vmax;\r\n\trelativeUnits.dvb = relativeUnits.vh;\r\n\trelativeUnits.svmin = relativeUnits.vmin;\r\n\trelativeUnits.lvmin = relativeUnits.vmin;\r\n\trelativeUnits.dvmin = relativeUnits.vmin;\r\n\trelativeUnits.svmax = relativeUnits.vmax;\r\n\trelativeUnits.lvmax = relativeUnits.vmax;\r\n\trelativeUnits.dvmax = relativeUnits.vmax;\r\n\r\n\tconst absoluteUnits = {\r\n\t\tin: PIXELS_PER_INCH,\r\n\t\tcm: PIXELS_PER_INCH / 2.54,\r\n\t\tmm: PIXELS_PER_INCH / 25.4,\r\n\t\tpt: PIXELS_PER_INCH / 72,\r\n\t\tpc: PIXELS_PER_INCH / 6,\r\n\t\tpx: 1,\r\n\t\tQ: PIXELS_PER_INCH / 2.54 / 40,\r\n\t};\r\n\r\n\tif ( relativeUnits[ parsedUnit.unit ] ) {\r\n\t\treturn (\r\n\t\t\t( relativeUnits[ parsedUnit.unit ] * parsedUnit.value ).toFixed(\r\n\t\t\t\t0\r\n\t\t\t) + 'px'\r\n\t\t);\r\n\t}\r\n\r\n\tif ( absoluteUnits[ parsedUnit.unit ] ) {\r\n\t\treturn (\r\n\t\t\t( absoluteUnits[ parsedUnit.unit ] * parsedUnit.value ).toFixed(\r\n\t\t\t\t0\r\n\t\t\t) + 'px'\r\n\t\t);\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n\r\n/**\r\n * Returns the px value of a cssUnit.\r\n *\r\n * @param {string} cssUnit\r\n * @param {Object} options\r\n * @return {string} returns the cssUnit value in a simple px format.\r\n */\r\nexport function getPxFromCssUnit( cssUnit, options = {} ) {\r\n\tif ( Number.isFinite( cssUnit ) ) {\r\n\t\treturn cssUnit.toFixed( 0 ) + 'px';\r\n\t}\r\n\tif ( cssUnit === undefined ) {\r\n\t\treturn null;\r\n\t}\r\n\tlet parsedUnit = parseUnit( cssUnit );\r\n\r\n\tif ( ! parsedUnit.unit ) {\r\n\t\tparsedUnit = parseUnitFunction( cssUnit );\r\n\t}\r\n\r\n\tif ( isMathExpression( cssUnit ) && ! parsedUnit.unit ) {\r\n\t\treturn evalMathExpression( cssUnit );\r\n\t}\r\n\r\n\treturn convertParsedUnitToPx( parsedUnit, options );\r\n}\r\n\r\n// Use simple cache.\r\nconst cache = {};\r\n/**\r\n * Returns the px value of a cssUnit. The memoized version of getPxFromCssUnit;\r\n *\r\n * @param {string} cssUnit\r\n * @param {Object} options\r\n * @return {string} returns the cssUnit value in a simple px format.\r\n */\r\nfunction memoizedGetPxFromCssUnit( cssUnit, options = {} ) {\r\n\tconst hash = cssUnit + hashOptions( options );\r\n\r\n\tif ( ! cache[ hash ] ) {\r\n\t\tcache[ hash ] = getPxFromCssUnit( cssUnit, options );\r\n\t}\r\n\treturn cache[ hash ];\r\n}\r\n\r\nfunction hashOptions( options ) {\r\n\tlet hash = '';\r\n\tif ( options.hasOwnProperty( 'fontSize' ) ) {\r\n\t\thash = ':' + options.width;\r\n\t}\r\n\tif ( options.hasOwnProperty( 'lineHeight' ) ) {\r\n\t\thash = ':' + options.lineHeight;\r\n\t}\r\n\tif ( options.hasOwnProperty( 'width' ) ) {\r\n\t\thash = ':' + options.width;\r\n\t}\r\n\tif ( options.hasOwnProperty( 'height' ) ) {\r\n\t\thash = ':' + options.height;\r\n\t}\r\n\tif ( options.hasOwnProperty( 'type' ) ) {\r\n\t\thash = ':' + options.type;\r\n\t}\r\n\treturn hash;\r\n}\r\n\r\nexport default memoizedGetPxFromCssUnit;\r\n"],"mappings":"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","ignoreList":[]}