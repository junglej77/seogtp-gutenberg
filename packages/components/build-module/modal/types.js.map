{"version":3,"names":[],"sources":["@wordpress/components/src/modal/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type {\r\n\tAriaRole,\r\n\tCSSProperties,\r\n\tReactNode,\r\n\tKeyboardEventHandler,\r\n\tKeyboardEvent,\r\n\tSyntheticEvent,\r\n} from 'react';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport type { useFocusOnMount } from '@wordpress/compose';\r\n\r\nexport type ModalProps = {\r\n\taria?: {\r\n\t\t/**\r\n\t\t * If this property is added, it will be added to the modal content\r\n\t\t * `div` as `aria-describedby`.\r\n\t\t */\r\n\t\tdescribedby?: string;\r\n\t\t/**\r\n\t\t * If this property is added, it will be added to the modal content\r\n\t\t * `div` as `aria-labelledby`. Use this when you are rendering the title\r\n\t\t * yourself within the modal's content area instead of using the `title`\r\n\t\t * prop. This ensures the title is usable by assistive technology.\r\n\t\t *\r\n\t\t * Titles are required for accessibility reasons, see `contentLabel` and\r\n\t\t * `title` for other ways to provide a title.\r\n\t\t */\r\n\t\tlabelledby?: string;\r\n\t};\r\n\t/**\r\n\t * Class name added to the body element when the modal is open.\r\n\t *\r\n\t * @default 'modal-open'\r\n\t */\r\n\tbodyOpenClassName?: string;\r\n\t/**\r\n\t * The children elements.\r\n\t */\r\n\tchildren: ReactNode;\r\n\t/**\r\n\t * If this property is added, it will an additional class name to the modal\r\n\t * content `div`.\r\n\t */\r\n\tclassName?: string;\r\n\t/**\r\n\t * Label on the close button.\r\n\t *\r\n\t * @default `__( 'Close' )`\r\n\t */\r\n\tcloseButtonLabel?: string;\r\n\t/**\r\n\t * If this property is added, it will be added to the modal content `div` as\r\n\t * `aria-label`.\r\n\t *\r\n\t * Titles are required for accessibility reasons, see `aria.labelledby` and\r\n\t * `title` for other ways to provide a title.\r\n\t */\r\n\tcontentLabel?: string;\r\n\t/**\r\n\t * If this property is true, it will focus the first tabbable element\r\n\t * rendered in the modal.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tfocusOnMount?:\r\n\t\t| Parameters< typeof useFocusOnMount >[ 0 ]\r\n\t\t| 'firstContentElement';\r\n\t/**\r\n\t * Elements that are injected into the modal header to the left of the close button (if rendered).\r\n\t * Hidden if `__experimentalHideHeader` is `true`.\r\n\t *\r\n\t * @default null\r\n\t */\r\n\theaderActions?: ReactNode;\r\n\r\n\t/**\r\n\t * If this property is added, an icon will be added before the title.\r\n\t */\r\n\ticon?: JSX.Element;\r\n\t/**\r\n\t * If this property is set to false, the modal will not display a close icon\r\n\t * and cannot be dismissed.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tisDismissible?: boolean;\r\n\t/**\r\n\t * This property when set to `true` will render a full screen modal.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tisFullScreen?: boolean;\r\n\t/**\r\n\t * If this property is added it will cause the modal to render at a preset\r\n\t * width, or expand to fill the screen. This prop will be ignored if\r\n\t * `isFullScreen` is set to `true`.\r\n\t *\r\n\t * Note: `Modal`'s width can also be controlled by adjusting the width of the\r\n\t * modal's contents, or via CSS using the `style` prop.\r\n\t */\r\n\tsize?: 'small' | 'medium' | 'large' | 'fill';\r\n\t/**\r\n\t *  Handle the key down on the modal frame `div`.\r\n\t */\r\n\tonKeyDown?: KeyboardEventHandler< HTMLDivElement >;\r\n\t/**\r\n\t * This function is called to indicate that the modal should be closed.\r\n\t */\r\n\tonRequestClose: (\r\n\t\tevent?: KeyboardEvent< HTMLDivElement > | SyntheticEvent\r\n\t) => void;\r\n\t/**\r\n\t * If this property is added, it will an additional class name to the modal\r\n\t * overlay `div`.\r\n\t */\r\n\toverlayClassName?: string;\r\n\t/**\r\n\t * If this property is added, it will override the default role of the\r\n\t * modal.\r\n\t *\r\n\t * @default 'dialog'\r\n\t */\r\n\trole?: AriaRole;\r\n\t/**\r\n\t * If this property is added, it will determine whether the modal requests\r\n\t * to close when a mouse click occurs outside of the modal content.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tshouldCloseOnClickOutside?: boolean;\r\n\t/**\r\n\t * If this property is added, it will determine whether the modal requests\r\n\t * to close when the escape key is pressed.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tshouldCloseOnEsc?: boolean;\r\n\t/**\r\n\t * If this property is added, it will be added to the modal frame `div`.\r\n\t */\r\n\tstyle?: CSSProperties;\r\n\t/**\r\n\t * This property is used as the modal header's title.\r\n\t *\r\n\t * Titles are required for accessibility reasons, see `aria.labelledby` and\r\n\t * `contentLabel` for other ways to provide a title.\r\n\t */\r\n\ttitle?: string;\r\n\t/**\r\n\t * When set to `true`, the Modal's header (including the icon, title and\r\n\t * close button) will not be rendered.\r\n\t *\r\n\t * _Warning_: This property is still experimental. “Experimental” means this\r\n\t * is an early implementation subject to drastic and breaking changes.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\t__experimentalHideHeader?: boolean;\r\n};\r\n"],"mappings":"","ignoreList":[]}