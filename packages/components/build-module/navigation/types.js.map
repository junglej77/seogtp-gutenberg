{"version":3,"names":[],"sources":["@wordpress/components/src/navigation/types.ts"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport type { ButtonProps } from '../button/types';\r\n\r\ntype IfDiscriminantDefinedBothRequired< TDiscriminant, TOther > =\r\n\t// When props in TDiscriminant are specified,\r\n\t// then props from TOther are required too\r\n\t| {\r\n\t\t\t[ K in keyof ( TDiscriminant & TOther ) ]: NonNullable<\r\n\t\t\t\t( TDiscriminant & TOther )[ K ]\r\n\t\t\t>;\r\n\t  }\r\n\t// When props in TDiscriminant are not specified,\r\n\t// then props from TOther are optional\r\n\t| ( {\r\n\t\t\t[ K in keyof TDiscriminant ]?: never;\r\n\t  } & {\r\n\t\t\t[ K in keyof TOther ]?: TOther[ K ];\r\n\t  } );\r\n\r\n// React Components\r\n\r\nexport type NavigationProps = {\r\n\t/**\r\n\t * The active item slug.\r\n\t */\r\n\tactiveItem?: string;\r\n\t/**\r\n\t * The active menu slug.\r\n\t *\r\n\t * @default 'root'\r\n\t */\r\n\tactiveMenu?: string;\r\n\t/**\r\n\t * The children components.\r\n\t */\r\n\tchildren?: React.ReactNode;\r\n\t/**\r\n\t * Optional classname for the component.\r\n\t */\r\n\tclassName?: string;\r\n\t/**\r\n\t * Callback used to sync the active menu between the external state\r\n\t * and the Navigation's internal state.\r\n\t */\r\n\tonActivateMenu?: ( activeMenuSlug: string ) => void;\r\n};\r\n\r\n// When `onSearch` is specified, `search` should be specified too\r\ntype _NavigationMenuSearchProps = IfDiscriminantDefinedBothRequired<\r\n\t{\r\n\t\t/**\r\n\t\t * When the `hasSearch` prop is `true`, this callback handles the search\r\n\t\t * input's `onChange` event, making it controlled from the outside.\r\n\t\t * When using this prop, the `search` prop should be also set.\r\n\t\t */\r\n\t\tonSearch: ( searchString: string ) => void;\r\n\t},\r\n\t{\r\n\t\t/**\r\n\t\t * When the `hasSearch` is `true` and the `onSearch` prop is provided, this\r\n\t\t * prop controls the value of the search input.\r\n\t\t * Required when the `onSearch` prop is provided.\r\n\t\t */\r\n\t\tsearch: string;\r\n\t}\r\n>;\r\n\r\nexport type NavigationMenuProps = _NavigationMenuSearchProps & {\r\n\t/**\r\n\t * The back button label used in nested menus.\r\n\t * If not provided, the label will be inferred from the parent menu's title.\r\n\t * If the parent menu's title is not available then it will default to \"Back\".\r\n\t *\r\n\t * @default parentMenuTitle ?? 'Back'\r\n\t */\r\n\tbackButtonLabel?: string;\r\n\t/**\r\n\t * A callback to handle clicking on the back button.\r\n\t * If this prop is provided then the back button will be shown.\r\n\t */\r\n\tonBackButtonClick?: React.MouseEventHandler< HTMLElement >;\r\n\t/**\r\n\t * The children components.\r\n\t */\r\n\tchildren?: React.ReactNode;\r\n\t/**\r\n\t * Optional classname for the component.\r\n\t */\r\n\tclassName?: string;\r\n\t/**\r\n\t * When `true`, enables the search feature on the menu title.\r\n\t */\r\n\thasSearch?: boolean;\r\n\t/**\r\n\t * Indicates whether the menu is empty or not. Used together with the\r\n\t * `hideIfTargetMenuEmpty` prop of `NavigationItem`.\r\n\t */\r\n\tisEmpty?: boolean;\r\n\t/**\r\n\t * Indicates whether the search is debouncing or not. In case of `true`, the\r\n\t * \"No results found.\" text is omitted. Used to prevent showing the\r\n\t * \"No results found.\" text between debounced searches.\r\n\t */\r\n\tisSearchDebouncing?: boolean;\r\n\t/**\r\n\t * The unique identifier of the menu.\r\n\t * The root menu can omit this prop, and it will default to \"root\".\r\n\t * All other menus need to specify it.\r\n\t *\r\n\t * @default 'root'\r\n\t */\r\n\tmenu?: string;\r\n\t/**\r\n\t * The parent menu slug; used by nested menus to indicate their parent menu.\r\n\t */\r\n\tparentMenu?: string;\r\n\t/**\r\n\t * The menu title. It's also the field used by the menu search function.\r\n\t */\r\n\ttitle?: string;\r\n\t/**\r\n\t * Use this prop to render additional actions in the menu title.\r\n\t */\r\n\ttitleAction?: React.ReactNode;\r\n};\r\n\r\nexport type NavigationGroupProps = {\r\n\t/**\r\n\t * Optional classname for the component.\r\n\t */\r\n\tclassName?: string;\r\n\t/**\r\n\t * The group title.\r\n\t */\r\n\ttitle?: string;\r\n\t/**\r\n\t * The children components.\r\n\t */\r\n\tchildren: React.ReactNode;\r\n};\r\n\r\ntype _NavigationItemButtonProps =\r\n\t| ( ButtonProps & {\r\n\t\t\t/**\r\n\t\t\t * If set to `true` the menu item will only act as a text-only item,\r\n\t\t\t * rather than a `<button />` or `<a />` element.\r\n\t\t\t */\r\n\t\t\tisText?: false;\r\n\t  } )\r\n\t| {\r\n\t\t\t/**\r\n\t\t\t * If set to `true` the menu item will only act as a text-only item,\r\n\t\t\t * rather than a `<button />` or `<a />` element.\r\n\t\t\t */\r\n\t\t\tisText: true;\r\n\t  };\r\n\r\nexport type NavigationItemBaseProps = {\r\n\t/**\r\n\t * The item badge content.\r\n\t */\r\n\tbadge?: string | number;\r\n\t/**\r\n\t * The children components. When not specified, the item will render the\r\n\t * default item UI.\r\n\t */\r\n\tchildren?: React.ReactNode;\r\n\t/**\r\n\t * Optional classname for the component.\r\n\t */\r\n\tclassName?: string;\r\n\t/**\r\n\t * If provided, causes the component to render an `<a />` element\r\n\t * instead of a `<button />` element.\r\n\t */\r\n\thref?: string;\r\n\t/**\r\n\t * If no `children` are passed, this prop allows to specify a custom icon for\r\n\t * the menu item.\r\n\t */\r\n\ticon?: JSX.Element;\r\n\t/**\r\n\t * The unique identifier of the item.\r\n\t */\r\n\titem?: string;\r\n\t/**\r\n\t * The child menu slug. If provided, clicking on the item will navigate\r\n\t * to the target menu.\r\n\t */\r\n\tnavigateToMenu?: string;\r\n\t/**\r\n\t * Indicates whether this item should be hidden if the menu specified in\r\n\t * `navigateToMenu` is marked as empty in the `isEmpty` prop.\r\n\t * Used together with the `isEmpty` prop of `NavigationMenu`.\r\n\t */\r\n\thideIfTargetMenuEmpty?: boolean;\r\n\t/**\r\n\t * A callback to handle clicking on a menu item.\r\n\t *\r\n\t * @default noop\r\n\t */\r\n\tonClick?: React.MouseEventHandler;\r\n\t/**\r\n\t * The item title.\r\n\t */\r\n\ttitle?: string;\r\n};\r\n\r\nexport type NavigationItemProps = _NavigationItemButtonProps &\r\n\tNavigationItemBaseProps;\r\n\r\nexport type NavigationItemBaseContentProps = Pick<\r\n\tNavigationItemProps,\r\n\t'badge' | 'title'\r\n>;\r\n\r\nexport type NavigationBackButtonProps = {\r\n\t/**\r\n\t * The text displayed for the button\r\n\t */\r\n\tbackButtonLabel?: string;\r\n\t/**\r\n\t * Optional classname for the component.\r\n\t */\r\n\tclassName?: string;\r\n\t/**\r\n\t * If provided, causes the component to render an `<a />` element\r\n\t * instead of a `<button />` element.\r\n\t */\r\n\thref?: string;\r\n\t/**\r\n\t * Callback function called when the button is clicked.\r\n\t */\r\n\tonClick?: React.MouseEventHandler;\r\n\t/**\r\n\t * Id of the parent menu\r\n\t */\r\n\tparentMenu?: string;\r\n};\r\n\r\nexport type NavigationMenuTitleSearchProps = Pick<\r\n\tNavigationMenuProps,\r\n\t'onSearch' | 'search' | 'title'\r\n> & {\r\n\t// @see `speak` function from `@wordpress/a11y`\r\n\tdebouncedSpeak: (\r\n\t\tmessage: string,\r\n\t\tariaLive?: 'off' | 'polite' | 'assertive'\r\n\t) => void;\r\n\tonCloseSearch: () => void;\r\n};\r\n\r\nexport type NavigationMenuTitleProps = Pick<\r\n\tNavigationMenuProps,\r\n\t'hasSearch' | 'onSearch' | 'search' | 'title' | 'titleAction'\r\n>;\r\n\r\nexport type NavigationSearchNoResultsFoundProps = Pick<\r\n\tNavigationMenuProps,\r\n\t'search'\r\n>;\r\n\r\n// Data objects & context\r\n\r\nexport type Item = Omit< NavigationItemBaseProps, 'children' > & {\r\n\t/**\r\n\t * The group id\r\n\t */\r\n\tgroup?: string;\r\n\t/**\r\n\t * The menu id\r\n\t */\r\n\tmenu?: string;\r\n\t/**\r\n\t * True is the item is currently visible (ie. the item is part\r\n\t * of the active menu, and — if there is a search query — its title\r\n\t * matches the search query).\r\n\t */\r\n\t_isVisible: boolean;\r\n};\r\n\r\nexport type Menu = Omit< NavigationMenuProps, 'children' > & {\r\n\tmenu: string;\r\n};\r\n\r\nexport type NavigationGroupContext = {\r\n\t/**\r\n\t * The unique id of the group\r\n\t */\r\n\tgroup?: string;\r\n};\r\n\r\nexport type NavigationMenuContext = {\r\n\tmenu?: string;\r\n\tsearch?: string;\r\n};\r\n\r\nexport type NavigationContext = {\r\n\tactiveItem?: string;\r\n\tactiveMenu: string;\r\n\tsetActiveMenu: (\r\n\t\tparentMenu: string,\r\n\t\tanimationDirection?: 'left' | 'right'\r\n\t) => void;\r\n\r\n\tnavigationTree: {\r\n\t\titems: Record< string, Item >;\r\n\t\tgetItem: ( itemId: string ) => Item | undefined;\r\n\t\taddItem: ( itemId: string, itemProps: Item ) => void;\r\n\t\tremoveItem: ( itemId: string ) => void;\r\n\r\n\t\tmenus: Record< string, Menu >;\r\n\t\tgetMenu: ( menuId: string ) => Menu | undefined;\r\n\t\taddMenu: ( menuId: string, menuProps: Menu ) => void;\r\n\t\tremoveMenu: ( menuId: string ) => void;\r\n\t\tchildMenu: Record< string, string[] >;\r\n\t\ttraverseMenu: (\r\n\t\t\tstartMenu: string,\r\n\t\t\tcallback: ( menuObject: Menu ) => boolean | undefined\r\n\t\t) => void;\r\n\t\tisMenuEmpty: ( menuId: string ) => boolean;\r\n\t};\r\n};\r\n"],"mappings":"","ignoreList":[]}