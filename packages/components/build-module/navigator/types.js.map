{"version":3,"names":[],"sources":["@wordpress/components/src/navigator/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { ReactNode } from 'react';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { ButtonAsButtonProps } from '../button/types';\r\n\r\nexport type MatchParams = Record< string, string | string[] >;\r\n\r\nexport type NavigateOptions = {\r\n\t/**\r\n\t * Specify the CSS selector used to restore focus on an given element when\r\n\t * navigating back. When not provided, the component will attempt to restore\r\n\t * focus on the element that originated the forward navigation.\r\n\t */\r\n\tfocusTargetSelector?: string;\r\n\t/**\r\n\t * Whether the navigation is a backwards navigation. This enables focus\r\n\t * restoration (when possible), and causes the animation to be backwards.\r\n\t */\r\n\tisBack?: boolean;\r\n\t/**\r\n\t * Opt out of focus management. Useful when the consumer of the component\r\n\t * wants to manage focus themselves.\r\n\t */\r\n\tskipFocus?: boolean;\r\n\t/**\r\n\t * Note: this option is deprecated and currently doesn't have any effect.\r\n\t * @deprecated\r\n\t * @ignore\r\n\t */\r\n\treplace?: boolean;\r\n};\r\n\r\nexport type NavigateToParentOptions = Omit< NavigateOptions, 'isBack' >;\r\n\r\nexport type NavigatorLocation = NavigateOptions & {\r\n\t/**\r\n\t * Whether the current location is the initial one (ie. first in the stack).\r\n\t */\r\n\tisInitial?: boolean;\r\n\t/**\r\n\t * The path associated to the location.\r\n\t */\r\n\tpath?: string;\r\n\t/**\r\n\t * Whether focus was already restored for this location (in case of\r\n\t * backwards navigation).\r\n\t */\r\n\thasRestoredFocus?: boolean;\r\n};\r\n\r\n// Returned by the `useNavigator` hook.\r\nexport type Navigator = {\r\n\t/**\r\n\t * The current location.\r\n\t */\r\n\tlocation: NavigatorLocation;\r\n\t/**\r\n\t * Params associated with the current location\r\n\t */\r\n\tparams: MatchParams;\r\n\t/**\r\n\t * Navigate to a new location.\r\n\t */\r\n\tgoTo: ( path: string, options?: NavigateOptions ) => void;\r\n\t/**\r\n\t * Go back to the parent location (ie. \"/some/path\" will navigate back\r\n\t * to \"/some\")\r\n\t */\r\n\tgoBack: ( options?: NavigateToParentOptions ) => void;\r\n\t/**\r\n\t * _Note: This function is deprecated. Please use `goBack` instead._\r\n\t * @deprecated\r\n\t * @ignore\r\n\t */\r\n\tgoToParent: ( options?: NavigateToParentOptions ) => void;\r\n};\r\n\r\nexport type NavigatorContext = Navigator & {\r\n\taddScreen: ( screen: Screen ) => void;\r\n\tremoveScreen: ( screen: Screen ) => void;\r\n\tmatch?: string;\r\n};\r\n\r\nexport type NavigatorProviderProps = {\r\n\t/**\r\n\t * The initial active path.\r\n\t */\r\n\tinitialPath: string;\r\n\t/**\r\n\t * The children elements.\r\n\t */\r\n\tchildren: ReactNode;\r\n};\r\n\r\nexport type NavigatorScreenProps = {\r\n\t/**\r\n\t * The screen's path, matched against the current path stored in the navigator.\r\n\t */\r\n\tpath: string;\r\n\t/**\r\n\t * The children elements.\r\n\t */\r\n\tchildren: ReactNode;\r\n};\r\n\r\nexport type NavigatorBackButtonProps = ButtonAsButtonProps;\r\n\r\nexport type NavigatorToParentButtonProps = NavigatorBackButtonProps;\r\n\r\nexport type NavigatorButtonProps = NavigatorBackButtonProps & {\r\n\t/**\r\n\t * The path of the screen to navigate to. The value of this prop needs to be\r\n\t * a valid value for an HTML attribute.\r\n\t */\r\n\tpath: string;\r\n\t/**\r\n\t * The HTML attribute used to identify the `NavigatorButton`, which is used\r\n\t * by `Navigator` to restore focus.\r\n\t *\r\n\t * @default 'id'\r\n\t */\r\n\tattributeName?: string;\r\n};\r\n\r\nexport type Screen = {\r\n\tid: string;\r\n\tpath: string;\r\n};\r\n"],"mappings":"","ignoreList":[]}