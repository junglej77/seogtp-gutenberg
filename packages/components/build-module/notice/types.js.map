{"version":3,"names":[],"sources":["@wordpress/components/src/notice/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { MouseEventHandler, ReactNode } from 'react';\r\n\r\ntype CommonNoticeActionProps = {\r\n\tlabel: string;\r\n\tclassName?: string;\r\n\tnoDefaultClasses?: boolean;\r\n\tvariant?: 'primary' | 'secondary' | 'link';\r\n};\r\n// `url` and `onClick` can both be provided, but `url` takes precedence. If\r\n// `url` is provided, the action's button will be rendered as an anchor and\r\n// `onClick` will be ignored.\r\ntype NoticeActionWithURL = CommonNoticeActionProps & {\r\n\turl: string;\r\n\tonClick?: never;\r\n};\r\ntype NoticeActionWithOnClick = CommonNoticeActionProps & {\r\n\turl?: never;\r\n\tonClick: MouseEventHandler< HTMLButtonElement >;\r\n};\r\n\r\nexport type NoticeAction = NoticeActionWithURL | NoticeActionWithOnClick;\r\n\r\nexport type NoticeChildren = string | JSX.Element;\r\n\r\nexport type NoticeProps = {\r\n\t/**\r\n\t * A CSS `class` to give to the wrapper element.\r\n\t */\r\n\tclassName?: string;\r\n\t/**\r\n\t * The displayed message of a notice. Also used as the spoken message for\r\n\t * assistive technology, unless `spokenMessage` is provided as an alternative message.\r\n\t */\r\n\tchildren: ReactNode;\r\n\t/**\r\n\t * Used to provide a custom spoken message in place of the `children` default.\r\n\t *\r\n\t * @default `children`\r\n\t */\r\n\tspokenMessage?: ReactNode;\r\n\t/**\r\n\t * Determines the color of the notice: `warning` (yellow),\r\n\t * `success` (green), `error` (red), or `'info'`.\r\n\t * By default `'info'` will be blue, but if there is a parent Theme component\r\n\t * with an accent color prop, the notice will take on that color instead.\r\n\t *\r\n\t * @default 'info'\r\n\t */\r\n\tstatus?: 'warning' | 'success' | 'error' | 'info';\r\n\t/**\r\n\t * Function called when dismissing the notice\r\n\t *\r\n\t * @default noop\r\n\t */\r\n\tonRemove?: () => void;\r\n\t/**\r\n\t * A politeness level for the notice's spoken message. Should be provided as\r\n\t * one of the valid options for an `aria-live` attribute value.\r\n\t *\r\n\t * A value of `'assertive'` is to be used for important, and usually\r\n\t * time-sensitive, information. It will interrupt anything else the screen\r\n\t * reader is announcing in that moment.\r\n\t * A value of `'polite'` is to be used for advisory information. It should\r\n\t * not interrupt what the screen reader is announcing in that moment\r\n\t * (the \"speech queue\") or interrupt the current task.\r\n\t *\r\n\t * Note that this value should be considered a suggestion; assistive\r\n\t * technologies may override it based on internal heuristics.\r\n\t *\r\n\t * @see https://www.w3.org/TR/wai-aria-1.1/#aria-live\r\n\t *\r\n\t * @default 'assertive' for 'error' status, 'polite' for all other statuses\r\n\t */\r\n\tpoliteness?: 'polite' | 'assertive';\r\n\t/**\r\n\t * Whether the notice should be dismissible or not\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tisDismissible?: boolean;\r\n\t/**\r\n\t * A deprecated alternative to `onRemove`. This prop is kept for\r\n\t * compatibilty reasons but should be avoided.\r\n\t *\r\n\t * @default noop\r\n\t */\r\n\tonDismiss?: () => void;\r\n\t/**\r\n\t * An array of action objects. Each member object should contain:\r\n\t *\r\n\t * - `label`: `string` containing the text of the button/link\r\n\t * - `url`: `string` OR `onClick`: `( event: SyntheticEvent ) => void` to specify\r\n\t *    what the action does.\r\n\t * - `className`: `string` (optional) to add custom classes to the button styles.\r\n\t * - `noDefaultClasses`: `boolean` (optional) A value of `true` will remove all\r\n\t *    default styling.\r\n\t * - `variant`: `'primary' | 'secondary' | 'link'` (optional) You can denote a\r\n\t *    primary button action for a notice by passing a value of `primary`.\r\n\t *\r\n\t * The default appearance of an action button is inferred based on whether\r\n\t * `url` or `onClick` are provided, rendering the button as a link if\r\n\t * appropriate. If both props are provided, `url` takes precedence, and the\r\n\t * action button will render as an anchor tag.\r\n\t *\r\n\t * @default []\r\n\t */\r\n\tactions?: Array< NoticeAction >;\r\n\t/**\r\n\t * Determines whether or not the message should be parsed as custom HTML\r\n\t * instead of a string.\r\n\t */\r\n\t__unstableHTML?: boolean;\r\n};\r\n\r\nexport type NoticeListProps = {\r\n\t/**\r\n\t * Array of notices to render.\r\n\t */\r\n\tnotices: Array<\r\n\t\tOmit< NoticeProps, 'children' > & {\r\n\t\t\tid: string;\r\n\t\t\tcontent: string;\r\n\t\t}\r\n\t>;\r\n\t/**\r\n\t * Function called when a notice should be removed / dismissed.\r\n\t */\r\n\tonRemove?: ( id: string ) => void;\r\n\t/**\r\n\t * Children to be rendered inside the notice list.\r\n\t */\r\n\tchildren?: ReactNode;\r\n};\r\n"],"mappings":"","ignoreList":[]}