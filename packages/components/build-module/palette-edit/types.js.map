{"version":3,"names":[],"sources":["@wordpress/components/src/palette-edit/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { Key, MouseEventHandler } from 'react';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type Popover from '../popover';\r\nimport type { HeadingSize } from '../heading/types';\r\n\r\nexport type Color = {\r\n\tcolor: string;\r\n\tname: string;\r\n\tslug: string;\r\n\tgradient?: never;\r\n};\r\n\r\nexport type Gradient = {\r\n\tgradient: string;\r\n\tname: string;\r\n\tslug: string;\r\n\tcolor?: never;\r\n};\r\n\r\nexport type PaletteElement = Color | Gradient;\r\n\r\nexport type BasePaletteEdit = {\r\n\t/**\r\n\t * Whether the user can only change the color or gradient values.\r\n\t * If true, they cannot change names or delete values.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tcanOnlyChangeValues?: boolean;\r\n\t/**\r\n\t * Whether the user can reset the editor.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tcanReset?: boolean;\r\n\t/**\r\n\t * A message to show if there's nothing to edit.\r\n\t */\r\n\temptyMessage?: string;\r\n\t/**\r\n\t * A heading label for the palette.\r\n\t */\r\n\tpaletteLabel: string;\r\n\t/**\r\n\t * The label's heading level.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tpaletteLabelHeadingLevel?: HeadingSize;\r\n\t/**\r\n\t * The prefix for the element slug.\r\n\t *\r\n\t * @default ''\r\n\t */\r\n\tslugPrefix?: string;\r\n\t/**\r\n\t * Props to pass through to the underlying Popover component.\r\n\t */\r\n\tpopoverProps?: Omit<\r\n\t\tReact.ComponentPropsWithoutRef< typeof Popover >,\r\n\t\t'children'\r\n\t>;\r\n};\r\n\r\ntype PaletteEditColors = {\r\n\t/**\r\n\t * The colors in the palette.\r\n\t */\r\n\tcolors?: Color[];\r\n\t/**\r\n\t * Runs on changing the value.\r\n\t */\r\n\tonChange: ( values?: Color[] ) => void;\r\n\tgradients?: never;\r\n};\r\n\r\ntype PaletteEditGradients = {\r\n\t/**\r\n\t * The gradients in the palette.\r\n\t */\r\n\tgradients: Gradient[];\r\n\t/**\r\n\t * Runs on changing the value.\r\n\t */\r\n\tonChange: ( values?: Gradient[] ) => void;\r\n\tcolors?: never;\r\n};\r\n\r\nexport type PaletteEditProps = BasePaletteEdit &\r\n\t( PaletteEditColors | PaletteEditGradients );\r\n\r\ntype EditingElement = number | null;\r\n\r\nexport type ColorPickerPopoverProps< T extends Color | Gradient > = {\r\n\telement: T;\r\n\tonChange: ( newElement: T ) => void;\r\n\tisGradient?: T extends Gradient ? true : false;\r\n\tonClose?: () => void;\r\n\tpopoverProps?: PaletteEditProps[ 'popoverProps' ];\r\n};\r\n\r\nexport type NameInputProps = {\r\n\tlabel: string;\r\n\tonChange: ( nextName?: PaletteElement[ 'name' ] ) => void;\r\n\tvalue: PaletteElement[ 'name' ];\r\n};\r\n\r\nexport type OptionProps< T extends Color | Gradient > = {\r\n\telements: T[];\r\n\telement: T;\r\n\tonChange: ( newElement: T ) => void;\r\n\tisGradient: T extends Gradient ? true : false;\r\n\tcanOnlyChangeValues: PaletteEditProps[ 'canOnlyChangeValues' ];\r\n\tkey: Key;\r\n\tonRemove: MouseEventHandler< HTMLButtonElement >;\r\n\tpopoverProps?: PaletteEditProps[ 'popoverProps' ];\r\n\tslugPrefix: string;\r\n};\r\n\r\nexport type PaletteEditListViewProps< T extends Color | Gradient > = {\r\n\telements: T[];\r\n\tonChange: ( newElements?: T[] ) => void;\r\n\tisGradient: T extends Gradient ? true : false;\r\n\tcanOnlyChangeValues: PaletteEditProps[ 'canOnlyChangeValues' ];\r\n\taddColorRef: React.RefObject< HTMLButtonElement >;\r\n\teditingElement?: EditingElement;\r\n\tpopoverProps?: PaletteEditProps[ 'popoverProps' ];\r\n\tsetEditingElement: ( newEditingElement?: EditingElement ) => void;\r\n\tslugPrefix: string;\r\n};\r\n"],"mappings":"","ignoreList":[]}