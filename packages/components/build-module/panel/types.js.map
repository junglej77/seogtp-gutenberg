{"version":3,"names":[],"sources":["@wordpress/components/src/panel/types.ts"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport type { ButtonAsButtonProps } from '../button/types';\r\nimport type { WordPressComponentProps } from '../context';\r\n\r\nexport type PanelProps = {\r\n\t/**\r\n\t * The text that will be rendered as the title of the panel.\r\n\t * Text will be rendered inside an `<h2>` tag.\r\n\t */\r\n\theader?: PanelHeaderProps[ 'label' ];\r\n\t/**\r\n\t * The CSS class to apply to the wrapper element.\r\n\t */\r\n\tclassName?: string;\r\n\t/**\r\n\t * The content to display within the panel.\r\n\t */\r\n\tchildren: React.ReactNode;\r\n};\r\n\r\nexport type PanelHeaderProps = {\r\n\t/**\r\n\t * The text that will be rendered as the title of the panel.\r\n\t * Will be rendered in an `<h2>` tag.\r\n\t */\r\n\tlabel?: string;\r\n\t/**\r\n\t * The content to display within the panel header.\r\n\t */\r\n\tchildren?: React.ReactNode;\r\n};\r\n\r\nexport type PanelRowProps = {\r\n\t/**\r\n\t * The CSS class to apply to the wrapper element.\r\n\t */\r\n\tclassName?: string;\r\n\t/**\r\n\t * The content to display within the panel row.\r\n\t */\r\n\tchildren: React.ReactNode;\r\n};\r\n\r\nexport type PanelBodyProps = {\r\n\t/**\r\n\t * Props that are passed to the `Button` component in title within the\r\n\t * `PanelBody`.\r\n\t *\r\n\t * @default {}\r\n\t */\r\n\tbuttonProps?: WordPressComponentProps<\r\n\t\tOmit< ButtonAsButtonProps, 'icon' >,\r\n\t\t'button',\r\n\t\tfalse\r\n\t>;\r\n\t/**\r\n\t * The content to display in the `PanelBody`.If a function is provided for\r\n\t * this prop, it will receive an object with the `opened` prop as an argument.\r\n\t */\r\n\tchildren?:\r\n\t\t| React.ReactNode\r\n\t\t| ( ( props: { opened: boolean } ) => React.ReactNode );\r\n\r\n\t/**\r\n\t * The CSS class to apply to the wrapper element.\r\n\t */\r\n\tclassName?: string;\r\n\t/**\r\n\t * An icon to be shown next to the title.\r\n\t */\r\n\ticon?: JSX.Element;\r\n\t/**\r\n\t * Whether or not the panel will start open.\r\n\t */\r\n\tinitialOpen?: boolean;\r\n\t/**\r\n\t * A function that is called any time the component is toggled from its closed\r\n\t * state to its opened state, or vice versa.\r\n\t *\r\n\t * @default noop\r\n\t */\r\n\tonToggle?: ( next: boolean ) => void;\r\n\t/**\r\n\t * When set to `true`, the component will remain open regardless of the\r\n\t * `initialOpen` prop and the panel will be prevented from being closed.\r\n\t */\r\n\topened?: boolean;\r\n\t/**\r\n\t * Title text. It shows even when it is closed.\r\n\t */\r\n\ttitle?: string;\r\n\t/**\r\n\t * Scrolls the content into view when visible. This improves the UX when\r\n\t * multiple `PanelBody` components are stacked in a scrollable container.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tscrollAfterOpen?: boolean;\r\n};\r\n\r\nexport type PanelBodyTitleProps = Omit< ButtonAsButtonProps, 'icon' > & {\r\n\t/**\r\n\t * An icon to be shown next to the title.\r\n\t */\r\n\ticon?: JSX.Element;\r\n\t/**\r\n\t * Whether or not the `PanelBody` is currently opened or not.\r\n\t */\r\n\tisOpened?: boolean;\r\n\t/**\r\n\t * The title text.\r\n\t */\r\n\ttitle?: string;\r\n};\r\n"],"mappings":"","ignoreList":[]}