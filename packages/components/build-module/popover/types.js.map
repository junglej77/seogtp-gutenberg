{"version":3,"names":[],"sources":["@wordpress/components/src/popover/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { ReactNode, MutableRefObject, SyntheticEvent } from 'react';\r\nimport type { Placement } from '@floating-ui/react-dom';\r\n\r\ntype PositionYAxis = 'top' | 'middle' | 'bottom';\r\ntype PositionXAxis = 'left' | 'center' | 'right';\r\ntype PositionCorner = 'top' | 'right' | 'bottom' | 'left';\r\n\r\ntype DomRectWithOwnerDocument = DOMRect & {\r\n\townerDocument?: Document;\r\n};\r\n\r\ntype PopoverPlacement = Placement | 'overlay';\r\n\r\nexport type PopoverAnchorRefReference = MutableRefObject<\r\n\tElement | null | undefined\r\n>;\r\nexport type PopoverAnchorRefTopBottom = { top: Element; bottom: Element };\r\n\r\nexport type VirtualElement = Pick< Element, 'getBoundingClientRect' > & {\r\n\townerDocument?: Document;\r\n};\r\n\r\nexport type PopoverProps = {\r\n\t/**\r\n\t * The name of the Slot in which the popover should be rendered. It should\r\n\t * be also passed to the corresponding `PopoverSlot` component.\r\n\t *\r\n\t * @default 'Popover'\r\n\t */\r\n\t__unstableSlotName?: string;\r\n\t/**\r\n\t * The element that should be used by the popover as its anchor. It can either\r\n\t * be an `Element` or, alternatively, a `VirtualElement` â€” ie. an object with\r\n\t * the `getBoundingClientRect()` and the `ownerDocument` properties defined.\r\n\t *\r\n\t * **The anchor element should be stored in local state** rather than a\r\n\t * plain React ref to ensure reactive updating when it changes.\r\n\t */\r\n\tanchor?: Element | VirtualElement | null;\r\n\t/**\r\n\t * Whether the popover should animate when opening.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tanimate?: boolean;\r\n\t/**\r\n\t * The `children` elements rendered as the popover's content.\r\n\t */\r\n\tchildren: ReactNode;\r\n\t/**\r\n\t * Show the popover fullscreen on mobile viewports.\r\n\t */\r\n\texpandOnMobile?: boolean;\r\n\t/**\r\n\t * Specifies whether the popover should flip across its axis if there isn't\r\n\t * space for it in the normal placement.\r\n\t * When the using a 'top' placement, the popover will switch to a 'bottom'\r\n\t * placement. When using a 'left' placement, the popover will switch to a\r\n\t * `right' placement.\r\n\t * The popover will retain its alignment of 'start' or 'end' when flipping.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tflip?: boolean;\r\n\t/**\r\n\t * Determines whether tabbing is constrained to within the popover,\r\n\t * preventing keyboard focus from leaving the popover content without\r\n\t * explicit focus elswhere, or whether the popover remains part of the wider\r\n\t * tab order. If no value is passed, it will be derived from `focusOnMount`.\r\n\t *\r\n\t * @default `focusOnMount` !== false\r\n\t */\r\n\tconstrainTabbing?: boolean;\r\n\t/**\r\n\t * By default, the _first tabbable element_ in the popover will receive focus\r\n\t * when it mounts. This is the same as setting this prop to `\"firstElement\"`.\r\n\t * Specifying a `false` value disables the focus handling entirely (this\r\n\t * should only be done when an appropriately accessible substitute behavior\r\n\t * exists).\r\n\t *\r\n\t * @default 'firstElement'\r\n\t */\r\n\tfocusOnMount?: 'firstElement' | boolean;\r\n\t/**\r\n\t * A callback invoked when the focus leaves the opened popover. This should\r\n\t * only be provided in advanced use-cases when a popover should close under\r\n\t * specific circumstances (for example, if the new `document.activeElement`\r\n\t * is content of or otherwise controlling popover visibility).\r\n\t *\r\n\t * When not provided, the `onClose` callback will be called instead.\r\n\t */\r\n\tonFocusOutside?: ( event: SyntheticEvent ) => void;\r\n\t/**\r\n\t * Used to customize the header text shown when the popover is toggled to\r\n\t * fullscreen on mobile viewports (see the `expandOnMobile` prop).\r\n\t */\r\n\theaderTitle?: string;\r\n\t/**\r\n\t * Used to show/hide the arrow that points at the popover's anchor.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tnoArrow?: boolean;\r\n\t/**\r\n\t * The distance (in px) between the anchor and the popover.\r\n\t */\r\n\toffset?: number;\r\n\t/**\r\n\t * A callback invoked when the popover should be closed.\r\n\t */\r\n\tonClose?: () => void;\r\n\t/**\r\n\t * Used to specify the popover's position with respect to its anchor.\r\n\t *\r\n\t * @default 'bottom-start'\r\n\t */\r\n\tplacement?: PopoverPlacement;\r\n\t/**\r\n\t * Legacy way to specify the popover's position with respect to its anchor.\r\n\t * _Note: this prop is deprecated. Use the `placement` prop instead._\r\n\t */\r\n\tposition?:\r\n\t\t| `${ PositionYAxis }`\r\n\t\t| `${ PositionYAxis } ${ PositionXAxis }`\r\n\t\t| `${ PositionYAxis } ${ PositionXAxis } ${ PositionCorner }`;\r\n\t/**\r\n\t * Adjusts the size of the popover to prevent its contents from going out of\r\n\t * view when meeting the viewport edges.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tresize?: boolean;\r\n\t/**\r\n\t * Enables the `Popover` to shift in order to stay in view when meeting the\r\n\t * viewport edges.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tshift?: boolean;\r\n\t/**\r\n\t * Specifies the popover's style.\r\n\t *\r\n\t * Leave undefined for the default style. Other values are:\r\n\t * - 'unstyled':  The popover is essentially without any visible style, it\r\n\t *                has no background, border, outline or drop shadow, but\r\n\t *                the popover contents are still displayed.\r\n\t * - 'toolbar':   A style that has no elevation, but a high contrast with\r\n\t *                other elements. This is matches the style of the\r\n\t *                `Toolbar` component.\r\n\t *\r\n\t * @default undefined\r\n\t */\r\n\tvariant?: 'unstyled' | 'toolbar';\r\n\t/**\r\n\t * Whether to render the popover inline or within the slot.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tinline?: boolean;\r\n\t// Deprecated props\r\n\t/**\r\n\t * Prevent the popover from flipping and resizing when meeting the viewport\r\n\t * edges. _Note: this prop is deprecated. Instead, provide use the individual\r\n\t * `flip` and `resize` props._\r\n\t *\r\n\t * @deprecated\r\n\t */\r\n\t__unstableForcePosition?: boolean;\r\n\t/**\r\n\t * An object extending a `DOMRect` with an additional optional `ownerDocument`\r\n\t * property, used to specify a fixed popover position.\r\n\t *\r\n\t * @deprecated\r\n\t */\r\n\tanchorRect?: DomRectWithOwnerDocument;\r\n\t/**\r\n\t * Used to specify a fixed popover position. It can be an `Element`, a React\r\n\t * reference to an `element`, an object with a `top` and a `bottom` properties\r\n\t * (both pointing to elements), or a `range`.\r\n\t *\r\n\t * @deprecated\r\n\t */\r\n\tanchorRef?:\r\n\t\t| Element\r\n\t\t| PopoverAnchorRefReference\r\n\t\t| PopoverAnchorRefTopBottom\r\n\t\t| Range;\r\n\t/**\r\n\t * A function returning the same value as the one expected by the `anchorRect`\r\n\t * prop, used to specify a dynamic popover position.\r\n\t *\r\n\t * @deprecated\r\n\t */\r\n\tgetAnchorRect?: (\r\n\t\tfallbackReferenceElement: Element | null\r\n\t) => DomRectWithOwnerDocument;\r\n\t/**\r\n\t * Used to enable a different visual style for the popover.\r\n\t * _Note: this prop is deprecated. Use the `variant` prop with the\r\n\t * 'toolbar' value instead._\r\n\t *\r\n\t * @deprecated\r\n\t */\r\n\tisAlternate?: boolean;\r\n};\r\n"],"mappings":"","ignoreList":[]}