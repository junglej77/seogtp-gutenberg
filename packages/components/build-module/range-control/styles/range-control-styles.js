import _styled from "@emotion/styled/base";
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
/**
 * External dependencies
 */
import { css } from '@emotion/react';
/**
 * Internal dependencies
 */
import NumberControl from '../../number-control';
import { COLORS, rtl, CONFIG } from '../../utils';
import { space } from '../../utils/space';
const rangeHeightValue = 30;
const railHeight = 4;
const rangeHeight = () => /*#__PURE__*/css({
  height: rangeHeightValue,
  minHeight: rangeHeightValue
}, process.env.NODE_ENV === "production" ? "" : ";label:rangeHeight;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const thumbSize = 12;
const deprecatedHeight = ({
  __next40pxDefaultSize
}) => !__next40pxDefaultSize && /*#__PURE__*/css({
  minHeight: rangeHeightValue
}, process.env.NODE_ENV === "production" ? "" : ";label:deprecatedHeight;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvcmFuZ2UtY29udHJvbC9zdHlsZXMvcmFuZ2UtY29udHJvbC1zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0M0QiIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3JhbmdlLWNvbnRyb2wvc3R5bGVzL3JhbmdlLWNvbnRyb2wtc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xyXG4gKi9cclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XHJcblxyXG4vKipcclxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXHJcbiAqL1xyXG5pbXBvcnQgTnVtYmVyQ29udHJvbCBmcm9tICcuLi8uLi9udW1iZXItY29udHJvbCc7XHJcbmltcG9ydCB7IENPTE9SUywgcnRsLCBDT05GSUcgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3BhY2UnO1xyXG5cclxuaW1wb3J0IHR5cGUge1xyXG5cdFJhbmdlTWFya1Byb3BzLFxyXG5cdFJhaWxQcm9wcyxcclxuXHRUaHVtYlByb3BzLFxyXG5cdFRvb2x0aXBQcm9wcyxcclxuXHRUcmFja1Byb3BzLFxyXG5cdFdyYXBwZXJQcm9wcyxcclxuXHRSYW5nZUNvbnRyb2xQcm9wcyxcclxufSBmcm9tICcuLi90eXBlcyc7XHJcblxyXG5jb25zdCByYW5nZUhlaWdodFZhbHVlID0gMzA7XHJcbmNvbnN0IHJhaWxIZWlnaHQgPSA0O1xyXG5jb25zdCByYW5nZUhlaWdodCA9ICgpID0+XHJcblx0Y3NzKCB7IGhlaWdodDogcmFuZ2VIZWlnaHRWYWx1ZSwgbWluSGVpZ2h0OiByYW5nZUhlaWdodFZhbHVlIH0gKTtcclxuY29uc3QgdGh1bWJTaXplID0gMTI7XHJcblxyXG5jb25zdCBkZXByZWNhdGVkSGVpZ2h0ID0gKCB7XHJcblx0X19uZXh0NDBweERlZmF1bHRTaXplLFxyXG59OiBQaWNrPCBSYW5nZUNvbnRyb2xQcm9wcywgJ19fbmV4dDQwcHhEZWZhdWx0U2l6ZScgPiApID0+XHJcblx0ISBfX25leHQ0MHB4RGVmYXVsdFNpemUgJiYgY3NzKCB7IG1pbkhlaWdodDogcmFuZ2VIZWlnaHRWYWx1ZSB9ICk7XHJcblxyXG50eXBlIFJvb3RQcm9wcyA9IFBpY2s8IFJhbmdlQ29udHJvbFByb3BzLCAnX19uZXh0NDBweERlZmF1bHRTaXplJyA+O1xyXG5leHBvcnQgY29uc3QgUm9vdCA9IHN0eWxlZC5kaXY8IFJvb3RQcm9wcyA+YFxyXG5cdC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHRkaXNwbGF5OiBmbGV4O1xyXG5cdGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcclxuXHRwYWRkaW5nOiAwO1xyXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHR0b3VjaC1hY3Rpb246IG5vbmU7XHJcblx0d2lkdGg6IDEwMCU7XHJcblx0bWluLWhlaWdodDogNDBweDtcclxuXHQvKiBUT0RPOiByZW1vdmUgYWZ0ZXIgcmVtb3ZpbmcgdGhlIF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSBwcm9wICovXHJcblx0JHsgZGVwcmVjYXRlZEhlaWdodCB9O1xyXG5gO1xyXG5cclxuY29uc3Qgd3JhcHBlckNvbG9yID0gKCB7IGNvbG9yID0gQ09MT1JTLnVpLmJvcmRlckZvY3VzIH06IFdyYXBwZXJQcm9wcyApID0+XHJcblx0Y3NzKCB7IGNvbG9yIH0gKTtcclxuXHJcbmNvbnN0IHdyYXBwZXJNYXJnaW4gPSAoIHsgbWFya3MsIF9fbmV4dEhhc05vTWFyZ2luQm90dG9tIH06IFdyYXBwZXJQcm9wcyApID0+IHtcclxuXHRpZiAoICEgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gKSB7XHJcblx0XHRyZXR1cm4gY3NzKCB7IG1hcmdpbkJvdHRvbTogbWFya3MgPyAxNiA6IHVuZGVmaW5lZCB9ICk7XHJcblx0fVxyXG5cdHJldHVybiAnJztcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdjwgV3JhcHBlclByb3BzID5gXHJcblx0ZGlzcGxheTogYmxvY2s7XHJcblx0ZmxleDogMTtcclxuXHRwb3NpdGlvbjogcmVsYXRpdmU7XHJcblx0d2lkdGg6IDEwMCU7XHJcblxyXG5cdCR7IHdyYXBwZXJDb2xvciB9O1xyXG5cdCR7IHJhbmdlSGVpZ2h0IH07XHJcblx0JHsgd3JhcHBlck1hcmdpbiB9O1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEJlZm9yZUljb25XcmFwcGVyID0gc3R5bGVkLnNwYW5gXHJcblx0ZGlzcGxheTogZmxleDsgLy8gZW5zdXJlcyB0aGUgaGVpZ2h0IGlzbid0IGFmZmVjdGVkIGJ5IGxpbmUtaGVpZ2h0XHJcblx0bWFyZ2luLXRvcDogJHsgcmFpbEhlaWdodCB9cHg7XHJcblxyXG5cdCR7IHJ0bCggeyBtYXJnaW5SaWdodDogNiB9ICkgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFmdGVySWNvbldyYXBwZXIgPSBzdHlsZWQuc3BhbmBcclxuXHRkaXNwbGF5OiBmbGV4OyAvLyBlbnN1cmVzIHRoZSBoZWlnaHQgaXNuJ3QgYWZmZWN0ZWQgYnkgbGluZS1oZWlnaHRcclxuXHRtYXJnaW4tdG9wOiAkeyByYWlsSGVpZ2h0IH1weDtcclxuXHJcblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IDYgfSApIH1cclxuYDtcclxuXHJcbmNvbnN0IHJhaWxCYWNrZ3JvdW5kQ29sb3IgPSAoIHsgZGlzYWJsZWQsIHJhaWxDb2xvciB9OiBSYWlsUHJvcHMgKSA9PiB7XHJcblx0bGV0IGJhY2tncm91bmQgPSByYWlsQ29sb3IgfHwgJyc7XHJcblxyXG5cdGlmICggZGlzYWJsZWQgKSB7XHJcblx0XHRiYWNrZ3JvdW5kID0gQ09MT1JTLnVpLmJhY2tncm91bmREaXNhYmxlZDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBjc3MoIHsgYmFja2dyb3VuZCB9ICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgUmFpbCA9IHN0eWxlZC5zcGFuYFxyXG5cdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy5ncmF5WyAzMDAgXSB9O1xyXG5cdGxlZnQ6IDA7XHJcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XHJcblx0cmlnaHQ6IDA7XHJcblx0ZGlzcGxheTogYmxvY2s7XHJcblx0aGVpZ2h0OiAkeyByYWlsSGVpZ2h0IH1weDtcclxuXHRwb3NpdGlvbjogYWJzb2x1dGU7XHJcblx0bWFyZ2luLXRvcDogJHsgKCByYW5nZUhlaWdodFZhbHVlIC0gcmFpbEhlaWdodCApIC8gMiB9cHg7XHJcblx0dG9wOiAwO1xyXG5cdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNGdWxsIH07XHJcblxyXG5cdCR7IHJhaWxCYWNrZ3JvdW5kQ29sb3IgfTtcclxuYDtcclxuXHJcbmNvbnN0IHRyYWNrQmFja2dyb3VuZENvbG9yID0gKCB7IGRpc2FibGVkLCB0cmFja0NvbG9yIH06IFRyYWNrUHJvcHMgKSA9PiB7XHJcblx0bGV0IGJhY2tncm91bmQgPSB0cmFja0NvbG9yIHx8ICdjdXJyZW50Q29sb3InO1xyXG5cclxuXHRpZiAoIGRpc2FibGVkICkge1xyXG5cdFx0YmFja2dyb3VuZCA9IENPTE9SUy5ncmF5WyA0MDAgXTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBjc3MoIHsgYmFja2dyb3VuZCB9ICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgVHJhY2sgPSBzdHlsZWQuc3BhbmBcclxuXHRiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XHJcblx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c0Z1bGwgfTtcclxuXHRoZWlnaHQ6ICR7IHJhaWxIZWlnaHQgfXB4O1xyXG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG5cdGRpc3BsYXk6IGJsb2NrO1xyXG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuXHRtYXJnaW4tdG9wOiAkeyAoIHJhbmdlSGVpZ2h0VmFsdWUgLSByYWlsSGVpZ2h0ICkgLyAyIH1weDtcclxuXHR0b3A6IDA7XHJcblxyXG5cdCR7IHRyYWNrQmFja2dyb3VuZENvbG9yIH07XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgTWFya3NXcmFwcGVyID0gc3R5bGVkLnNwYW5gXHJcblx0ZGlzcGxheTogYmxvY2s7XHJcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XHJcblx0cG9zaXRpb246IHJlbGF0aXZlO1xyXG5cdHdpZHRoOiAxMDAlO1xyXG5cdHVzZXItc2VsZWN0OiBub25lO1xyXG5gO1xyXG5cclxuY29uc3QgbWFya0ZpbGwgPSAoIHsgZGlzYWJsZWQsIGlzRmlsbGVkIH06IFJhbmdlTWFya1Byb3BzICkgPT4ge1xyXG5cdGxldCBiYWNrZ3JvdW5kQ29sb3IgPSBpc0ZpbGxlZCA/ICdjdXJyZW50Q29sb3InIDogQ09MT1JTLmdyYXlbIDMwMCBdO1xyXG5cclxuXHRpZiAoIGRpc2FibGVkICkge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yID0gQ09MT1JTLmdyYXlbIDQwMCBdO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGNzcygge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yLFxyXG5cdH0gKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBNYXJrID0gc3R5bGVkLnNwYW5gXHJcblx0aGVpZ2h0OiAkeyB0aHVtYlNpemUgfXB4O1xyXG5cdGxlZnQ6IDA7XHJcblx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdHRvcDogOXB4O1xyXG5cdHdpZHRoOiAxcHg7XHJcblxyXG5cdCR7IG1hcmtGaWxsIH07XHJcbmA7XHJcblxyXG5jb25zdCBtYXJrTGFiZWxGaWxsID0gKCB7IGlzRmlsbGVkIH06IFJhbmdlTWFya1Byb3BzICkgPT4ge1xyXG5cdHJldHVybiBjc3MoIHtcclxuXHRcdGNvbG9yOiBpc0ZpbGxlZCA/IENPTE9SUy5ncmF5WyA3MDAgXSA6IENPTE9SUy5ncmF5WyAzMDAgXSxcclxuXHR9ICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgTWFya0xhYmVsID0gc3R5bGVkLnNwYW5gXHJcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyAzMDAgXSB9O1xyXG5cdGZvbnQtc2l6ZTogMTFweDtcclxuXHRwb3NpdGlvbjogYWJzb2x1dGU7XHJcblx0dG9wOiAyMnB4O1xyXG5cdHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcblxyXG5cdCR7IHJ0bCggeyBsZWZ0OiAwIH0gKSB9O1xyXG5cdCR7IHJ0bChcclxuXHRcdHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCggLTUwJSApJyB9LFxyXG5cdFx0eyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKCA1MCUgKScgfVxyXG5cdCkgfTtcclxuXHJcblx0JHsgbWFya0xhYmVsRmlsbCB9O1xyXG5gO1xyXG5cclxuY29uc3QgdGh1bWJDb2xvciA9ICggeyBkaXNhYmxlZCB9OiBUaHVtYlByb3BzICkgPT5cclxuXHRkaXNhYmxlZFxyXG5cdFx0PyBjc3NgXHJcblx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLmdyYXlbIDQwMCBdIH07XHJcblx0XHQgIGBcclxuXHRcdDogY3NzYFxyXG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy50aGVtZS5hY2NlbnQgfTtcclxuXHRcdCAgYDtcclxuXHJcbmV4cG9ydCBjb25zdCBUaHVtYldyYXBwZXIgPSBzdHlsZWQuc3BhbmBcclxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cdGRpc3BsYXk6IGZsZXg7XHJcblx0aGVpZ2h0OiAkeyB0aHVtYlNpemUgfXB4O1xyXG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG5cdG1hcmdpbi10b3A6ICR7ICggcmFuZ2VIZWlnaHRWYWx1ZSAtIHRodW1iU2l6ZSApIC8gMiB9cHg7XHJcblx0b3V0bGluZTogMDtcclxuXHRwb2ludGVyLWV2ZW50czogbm9uZTtcclxuXHRwb3NpdGlvbjogYWJzb2x1dGU7XHJcblx0dG9wOiAwO1xyXG5cdHVzZXItc2VsZWN0OiBub25lO1xyXG5cdHdpZHRoOiAkeyB0aHVtYlNpemUgfXB4O1xyXG5cdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNSb3VuZCB9O1xyXG5cclxuXHQkeyB0aHVtYkNvbG9yIH07XHJcblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IC0xMCB9ICkgfTtcclxuXHQkeyBydGwoXHJcblx0XHR7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoIDQuNXB4ICknIH0sXHJcblx0XHR7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoIC00LjVweCApJyB9XHJcblx0KSB9O1xyXG5gO1xyXG5cclxuY29uc3QgdGh1bWJGb2N1cyA9ICggeyBpc0ZvY3VzZWQgfTogVGh1bWJQcm9wcyApID0+IHtcclxuXHRyZXR1cm4gaXNGb2N1c2VkXHJcblx0XHQ/IGNzc2BcclxuXHRcdFx0XHQmOjpiZWZvcmUge1xyXG5cdFx0XHRcdFx0Y29udGVudDogJyAnO1xyXG5cdFx0XHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdFx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLnRoZW1lLmFjY2VudCB9O1xyXG5cdFx0XHRcdFx0b3BhY2l0eTogMC40O1xyXG5cdFx0XHRcdFx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c1JvdW5kIH07XHJcblx0XHRcdFx0XHRoZWlnaHQ6ICR7IHRodW1iU2l6ZSArIDggfXB4O1xyXG5cdFx0XHRcdFx0d2lkdGg6ICR7IHRodW1iU2l6ZSArIDggfXB4O1xyXG5cdFx0XHRcdFx0dG9wOiAtNHB4O1xyXG5cdFx0XHRcdFx0bGVmdDogLTRweDtcclxuXHRcdFx0XHR9XHJcblx0XHQgIGBcclxuXHRcdDogJyc7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgVGh1bWIgPSBzdHlsZWQuc3BhbjwgVGh1bWJQcm9wcyA+YFxyXG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c1JvdW5kIH07XHJcblx0aGVpZ2h0OiAxMDAlO1xyXG5cdG91dGxpbmU6IDA7XHJcblx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdHVzZXItc2VsZWN0OiBub25lO1xyXG5cdHdpZHRoOiAxMDAlO1xyXG5cclxuXHQkeyB0aHVtYkNvbG9yIH07XHJcblx0JHsgdGh1bWJGb2N1cyB9O1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IElucHV0UmFuZ2UgPSBzdHlsZWQuaW5wdXRgXHJcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHRjdXJzb3I6IHBvaW50ZXI7XHJcblx0ZGlzcGxheTogYmxvY2s7XHJcblx0aGVpZ2h0OiAxMDAlO1xyXG5cdGxlZnQ6IDA7XHJcblx0bWFyZ2luOiAwIC0keyB0aHVtYlNpemUgLyAyIH1weDtcclxuXHRvcGFjaXR5OiAwO1xyXG5cdG91dGxpbmU6IG5vbmU7XHJcblx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdHJpZ2h0OiAwO1xyXG5cdHRvcDogMDtcclxuXHR3aWR0aDogY2FsYyggMTAwJSArICR7IHRodW1iU2l6ZSB9cHggKTtcclxuYDtcclxuXHJcbmNvbnN0IHRvb2x0aXBTaG93ID0gKCB7IHNob3cgfTogVG9vbHRpcFByb3BzICkgPT4ge1xyXG5cdHJldHVybiBjc3MoIHtcclxuXHRcdG9wYWNpdHk6IHNob3cgPyAxIDogMCxcclxuXHR9ICk7XHJcbn07XHJcblxyXG5jb25zdCB0b29sdGlwUG9zaXRpb24gPSAoIHsgcG9zaXRpb24gfTogVG9vbHRpcFByb3BzICkgPT4ge1xyXG5cdGNvbnN0IGlzQm90dG9tID0gcG9zaXRpb24gPT09ICdib3R0b20nO1xyXG5cclxuXHRpZiAoIGlzQm90dG9tICkge1xyXG5cdFx0cmV0dXJuIGNzc2BcclxuXHRcdFx0Ym90dG9tOiAtODAlO1xyXG5cdFx0YDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBjc3NgXHJcblx0XHR0b3A6IC04MCU7XHJcblx0YDtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBUb29sdGlwID0gc3R5bGVkLnNwYW48IFRvb2x0aXBQcm9wcyA+YFxyXG5cdGJhY2tncm91bmQ6IHJnYmEoIDAsIDAsIDAsIDAuOCApO1xyXG5cdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNTbWFsbCB9O1xyXG5cdGNvbG9yOiB3aGl0ZTtcclxuXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcblx0Zm9udC1zaXplOiAxMnB4O1xyXG5cdG1pbi13aWR0aDogMzJweDtcclxuXHRvcGFjaXR5OiAwO1xyXG5cdHBhZGRpbmc6IDRweCA4cHg7XHJcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XHJcblx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdHRleHQtYWxpZ246IGNlbnRlcjtcclxuXHR1c2VyLXNlbGVjdDogbm9uZTtcclxuXHRsaW5lLWhlaWdodDogMS40O1xyXG5cclxuXHRAbWVkaWEgbm90ICggcHJlZmVycy1yZWR1Y2VkLW1vdGlvbiApIHtcclxuXHRcdHRyYW5zaXRpb246IG9wYWNpdHkgMTIwbXMgZWFzZTtcclxuXHR9XHJcblxyXG5cdCR7IHRvb2x0aXBTaG93IH07XHJcblx0JHsgdG9vbHRpcFBvc2l0aW9uIH07XHJcblx0JHsgcnRsKFxyXG5cdFx0eyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC01MCUpJyB9LFxyXG5cdFx0eyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDUwJSknIH1cclxuXHQpIH1cclxuYDtcclxuXHJcbi8vIEB0b2RvIFJlZmFjdG9yIFJhbmdlQ29udHJvbCB3aXRoIGxhdGVzdCBIU3RhY2sgY29uZmlndXJhdGlvblxyXG4vLyBAc2VlOiBwYWNrYWdlcy9jb21wb25lbnRzL3NyYy9oLXN0YWNrXHJcbmV4cG9ydCBjb25zdCBJbnB1dE51bWJlciA9IHN0eWxlZCggTnVtYmVyQ29udHJvbCApYFxyXG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuXHRmb250LXNpemU6IDEzcHg7XHJcblx0bWFyZ2luLXRvcDogMDtcclxuXHJcblx0aW5wdXRbdHlwZT0nbnVtYmVyJ10mIHtcclxuXHRcdCR7IHJhbmdlSGVpZ2h0IH07XHJcblx0fVxyXG5cclxuXHQkeyBydGwoIHsgbWFyZ2luTGVmdDogYCR7IHNwYWNlKCA0ICkgfSAhaW1wb3J0YW50YCB9ICkgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFjdGlvblJpZ2h0V3JhcHBlciA9IHN0eWxlZC5zcGFuYFxyXG5cdGRpc3BsYXk6IGJsb2NrO1xyXG5cdG1hcmdpbi10b3A6IDA7XHJcblxyXG5cdGJ1dHRvbixcclxuXHRidXR0b24uaXMtc21hbGwge1xyXG5cdFx0bWFyZ2luLWxlZnQ6IDA7XHJcblx0XHQkeyByYW5nZUhlaWdodCB9O1xyXG5cdH1cclxuXHJcblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IDggfSApIH1cclxuYDtcclxuIl19 */");
export const Root = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk14"
} : {
  target: "e1epgpqk14",
  label: "Root"
})("-webkit-tap-highlight-color:transparent;align-items:center;display:flex;justify-content:flex-start;padding:0;position:relative;touch-action:none;width:100%;min-height:40px;", deprecatedHeight, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const wrapperColor = ({
  color = COLORS.ui.borderFocus
}) => /*#__PURE__*/css({
  color
}, process.env.NODE_ENV === "production" ? "" : ";label:wrapperColor;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const wrapperMargin = ({
  marks,
  __nextHasNoMarginBottom
}) => {
  if (!__nextHasNoMarginBottom) {
    return /*#__PURE__*/css({
      marginBottom: marks ? 16 : undefined
    }, process.env.NODE_ENV === "production" ? "" : ";label:wrapperMargin;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  }
  return '';
};
export const Wrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk13"
} : {
  target: "e1epgpqk13",
  label: "Wrapper"
})("display:block;flex:1;position:relative;width:100%;", wrapperColor, ";", rangeHeight, ";", wrapperMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const BeforeIconWrapper = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk12"
} : {
  target: "e1epgpqk12",
  label: "BeforeIconWrapper"
})("display:flex;margin-top:", railHeight, "px;", rtl({
  marginRight: 6
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvcmFuZ2UtY29udHJvbC9zdHlsZXMvcmFuZ2UtY29udHJvbC1zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0U0QyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3JhbmdlLWNvbnRyb2wvc3R5bGVzL3JhbmdlLWNvbnRyb2wtc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xyXG4gKi9cclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XHJcblxyXG4vKipcclxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXHJcbiAqL1xyXG5pbXBvcnQgTnVtYmVyQ29udHJvbCBmcm9tICcuLi8uLi9udW1iZXItY29udHJvbCc7XHJcbmltcG9ydCB7IENPTE9SUywgcnRsLCBDT05GSUcgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3BhY2UnO1xyXG5cclxuaW1wb3J0IHR5cGUge1xyXG5cdFJhbmdlTWFya1Byb3BzLFxyXG5cdFJhaWxQcm9wcyxcclxuXHRUaHVtYlByb3BzLFxyXG5cdFRvb2x0aXBQcm9wcyxcclxuXHRUcmFja1Byb3BzLFxyXG5cdFdyYXBwZXJQcm9wcyxcclxuXHRSYW5nZUNvbnRyb2xQcm9wcyxcclxufSBmcm9tICcuLi90eXBlcyc7XHJcblxyXG5jb25zdCByYW5nZUhlaWdodFZhbHVlID0gMzA7XHJcbmNvbnN0IHJhaWxIZWlnaHQgPSA0O1xyXG5jb25zdCByYW5nZUhlaWdodCA9ICgpID0+XHJcblx0Y3NzKCB7IGhlaWdodDogcmFuZ2VIZWlnaHRWYWx1ZSwgbWluSGVpZ2h0OiByYW5nZUhlaWdodFZhbHVlIH0gKTtcclxuY29uc3QgdGh1bWJTaXplID0gMTI7XHJcblxyXG5jb25zdCBkZXByZWNhdGVkSGVpZ2h0ID0gKCB7XHJcblx0X19uZXh0NDBweERlZmF1bHRTaXplLFxyXG59OiBQaWNrPCBSYW5nZUNvbnRyb2xQcm9wcywgJ19fbmV4dDQwcHhEZWZhdWx0U2l6ZScgPiApID0+XHJcblx0ISBfX25leHQ0MHB4RGVmYXVsdFNpemUgJiYgY3NzKCB7IG1pbkhlaWdodDogcmFuZ2VIZWlnaHRWYWx1ZSB9ICk7XHJcblxyXG50eXBlIFJvb3RQcm9wcyA9IFBpY2s8IFJhbmdlQ29udHJvbFByb3BzLCAnX19uZXh0NDBweERlZmF1bHRTaXplJyA+O1xyXG5leHBvcnQgY29uc3QgUm9vdCA9IHN0eWxlZC5kaXY8IFJvb3RQcm9wcyA+YFxyXG5cdC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHRkaXNwbGF5OiBmbGV4O1xyXG5cdGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcclxuXHRwYWRkaW5nOiAwO1xyXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHR0b3VjaC1hY3Rpb246IG5vbmU7XHJcblx0d2lkdGg6IDEwMCU7XHJcblx0bWluLWhlaWdodDogNDBweDtcclxuXHQvKiBUT0RPOiByZW1vdmUgYWZ0ZXIgcmVtb3ZpbmcgdGhlIF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSBwcm9wICovXHJcblx0JHsgZGVwcmVjYXRlZEhlaWdodCB9O1xyXG5gO1xyXG5cclxuY29uc3Qgd3JhcHBlckNvbG9yID0gKCB7IGNvbG9yID0gQ09MT1JTLnVpLmJvcmRlckZvY3VzIH06IFdyYXBwZXJQcm9wcyApID0+XHJcblx0Y3NzKCB7IGNvbG9yIH0gKTtcclxuXHJcbmNvbnN0IHdyYXBwZXJNYXJnaW4gPSAoIHsgbWFya3MsIF9fbmV4dEhhc05vTWFyZ2luQm90dG9tIH06IFdyYXBwZXJQcm9wcyApID0+IHtcclxuXHRpZiAoICEgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gKSB7XHJcblx0XHRyZXR1cm4gY3NzKCB7IG1hcmdpbkJvdHRvbTogbWFya3MgPyAxNiA6IHVuZGVmaW5lZCB9ICk7XHJcblx0fVxyXG5cdHJldHVybiAnJztcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdjwgV3JhcHBlclByb3BzID5gXHJcblx0ZGlzcGxheTogYmxvY2s7XHJcblx0ZmxleDogMTtcclxuXHRwb3NpdGlvbjogcmVsYXRpdmU7XHJcblx0d2lkdGg6IDEwMCU7XHJcblxyXG5cdCR7IHdyYXBwZXJDb2xvciB9O1xyXG5cdCR7IHJhbmdlSGVpZ2h0IH07XHJcblx0JHsgd3JhcHBlck1hcmdpbiB9O1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEJlZm9yZUljb25XcmFwcGVyID0gc3R5bGVkLnNwYW5gXHJcblx0ZGlzcGxheTogZmxleDsgLy8gZW5zdXJlcyB0aGUgaGVpZ2h0IGlzbid0IGFmZmVjdGVkIGJ5IGxpbmUtaGVpZ2h0XHJcblx0bWFyZ2luLXRvcDogJHsgcmFpbEhlaWdodCB9cHg7XHJcblxyXG5cdCR7IHJ0bCggeyBtYXJnaW5SaWdodDogNiB9ICkgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFmdGVySWNvbldyYXBwZXIgPSBzdHlsZWQuc3BhbmBcclxuXHRkaXNwbGF5OiBmbGV4OyAvLyBlbnN1cmVzIHRoZSBoZWlnaHQgaXNuJ3QgYWZmZWN0ZWQgYnkgbGluZS1oZWlnaHRcclxuXHRtYXJnaW4tdG9wOiAkeyByYWlsSGVpZ2h0IH1weDtcclxuXHJcblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IDYgfSApIH1cclxuYDtcclxuXHJcbmNvbnN0IHJhaWxCYWNrZ3JvdW5kQ29sb3IgPSAoIHsgZGlzYWJsZWQsIHJhaWxDb2xvciB9OiBSYWlsUHJvcHMgKSA9PiB7XHJcblx0bGV0IGJhY2tncm91bmQgPSByYWlsQ29sb3IgfHwgJyc7XHJcblxyXG5cdGlmICggZGlzYWJsZWQgKSB7XHJcblx0XHRiYWNrZ3JvdW5kID0gQ09MT1JTLnVpLmJhY2tncm91bmREaXNhYmxlZDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBjc3MoIHsgYmFja2dyb3VuZCB9ICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgUmFpbCA9IHN0eWxlZC5zcGFuYFxyXG5cdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy5ncmF5WyAzMDAgXSB9O1xyXG5cdGxlZnQ6IDA7XHJcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XHJcblx0cmlnaHQ6IDA7XHJcblx0ZGlzcGxheTogYmxvY2s7XHJcblx0aGVpZ2h0OiAkeyByYWlsSGVpZ2h0IH1weDtcclxuXHRwb3NpdGlvbjogYWJzb2x1dGU7XHJcblx0bWFyZ2luLXRvcDogJHsgKCByYW5nZUhlaWdodFZhbHVlIC0gcmFpbEhlaWdodCApIC8gMiB9cHg7XHJcblx0dG9wOiAwO1xyXG5cdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNGdWxsIH07XHJcblxyXG5cdCR7IHJhaWxCYWNrZ3JvdW5kQ29sb3IgfTtcclxuYDtcclxuXHJcbmNvbnN0IHRyYWNrQmFja2dyb3VuZENvbG9yID0gKCB7IGRpc2FibGVkLCB0cmFja0NvbG9yIH06IFRyYWNrUHJvcHMgKSA9PiB7XHJcblx0bGV0IGJhY2tncm91bmQgPSB0cmFja0NvbG9yIHx8ICdjdXJyZW50Q29sb3InO1xyXG5cclxuXHRpZiAoIGRpc2FibGVkICkge1xyXG5cdFx0YmFja2dyb3VuZCA9IENPTE9SUy5ncmF5WyA0MDAgXTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBjc3MoIHsgYmFja2dyb3VuZCB9ICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgVHJhY2sgPSBzdHlsZWQuc3BhbmBcclxuXHRiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XHJcblx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c0Z1bGwgfTtcclxuXHRoZWlnaHQ6ICR7IHJhaWxIZWlnaHQgfXB4O1xyXG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG5cdGRpc3BsYXk6IGJsb2NrO1xyXG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuXHRtYXJnaW4tdG9wOiAkeyAoIHJhbmdlSGVpZ2h0VmFsdWUgLSByYWlsSGVpZ2h0ICkgLyAyIH1weDtcclxuXHR0b3A6IDA7XHJcblxyXG5cdCR7IHRyYWNrQmFja2dyb3VuZENvbG9yIH07XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgTWFya3NXcmFwcGVyID0gc3R5bGVkLnNwYW5gXHJcblx0ZGlzcGxheTogYmxvY2s7XHJcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XHJcblx0cG9zaXRpb246IHJlbGF0aXZlO1xyXG5cdHdpZHRoOiAxMDAlO1xyXG5cdHVzZXItc2VsZWN0OiBub25lO1xyXG5gO1xyXG5cclxuY29uc3QgbWFya0ZpbGwgPSAoIHsgZGlzYWJsZWQsIGlzRmlsbGVkIH06IFJhbmdlTWFya1Byb3BzICkgPT4ge1xyXG5cdGxldCBiYWNrZ3JvdW5kQ29sb3IgPSBpc0ZpbGxlZCA/ICdjdXJyZW50Q29sb3InIDogQ09MT1JTLmdyYXlbIDMwMCBdO1xyXG5cclxuXHRpZiAoIGRpc2FibGVkICkge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yID0gQ09MT1JTLmdyYXlbIDQwMCBdO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGNzcygge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yLFxyXG5cdH0gKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBNYXJrID0gc3R5bGVkLnNwYW5gXHJcblx0aGVpZ2h0OiAkeyB0aHVtYlNpemUgfXB4O1xyXG5cdGxlZnQ6IDA7XHJcblx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdHRvcDogOXB4O1xyXG5cdHdpZHRoOiAxcHg7XHJcblxyXG5cdCR7IG1hcmtGaWxsIH07XHJcbmA7XHJcblxyXG5jb25zdCBtYXJrTGFiZWxGaWxsID0gKCB7IGlzRmlsbGVkIH06IFJhbmdlTWFya1Byb3BzICkgPT4ge1xyXG5cdHJldHVybiBjc3MoIHtcclxuXHRcdGNvbG9yOiBpc0ZpbGxlZCA/IENPTE9SUy5ncmF5WyA3MDAgXSA6IENPTE9SUy5ncmF5WyAzMDAgXSxcclxuXHR9ICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgTWFya0xhYmVsID0gc3R5bGVkLnNwYW5gXHJcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyAzMDAgXSB9O1xyXG5cdGZvbnQtc2l6ZTogMTFweDtcclxuXHRwb3NpdGlvbjogYWJzb2x1dGU7XHJcblx0dG9wOiAyMnB4O1xyXG5cdHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcblxyXG5cdCR7IHJ0bCggeyBsZWZ0OiAwIH0gKSB9O1xyXG5cdCR7IHJ0bChcclxuXHRcdHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCggLTUwJSApJyB9LFxyXG5cdFx0eyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKCA1MCUgKScgfVxyXG5cdCkgfTtcclxuXHJcblx0JHsgbWFya0xhYmVsRmlsbCB9O1xyXG5gO1xyXG5cclxuY29uc3QgdGh1bWJDb2xvciA9ICggeyBkaXNhYmxlZCB9OiBUaHVtYlByb3BzICkgPT5cclxuXHRkaXNhYmxlZFxyXG5cdFx0PyBjc3NgXHJcblx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLmdyYXlbIDQwMCBdIH07XHJcblx0XHQgIGBcclxuXHRcdDogY3NzYFxyXG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy50aGVtZS5hY2NlbnQgfTtcclxuXHRcdCAgYDtcclxuXHJcbmV4cG9ydCBjb25zdCBUaHVtYldyYXBwZXIgPSBzdHlsZWQuc3BhbmBcclxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cdGRpc3BsYXk6IGZsZXg7XHJcblx0aGVpZ2h0OiAkeyB0aHVtYlNpemUgfXB4O1xyXG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG5cdG1hcmdpbi10b3A6ICR7ICggcmFuZ2VIZWlnaHRWYWx1ZSAtIHRodW1iU2l6ZSApIC8gMiB9cHg7XHJcblx0b3V0bGluZTogMDtcclxuXHRwb2ludGVyLWV2ZW50czogbm9uZTtcclxuXHRwb3NpdGlvbjogYWJzb2x1dGU7XHJcblx0dG9wOiAwO1xyXG5cdHVzZXItc2VsZWN0OiBub25lO1xyXG5cdHdpZHRoOiAkeyB0aHVtYlNpemUgfXB4O1xyXG5cdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNSb3VuZCB9O1xyXG5cclxuXHQkeyB0aHVtYkNvbG9yIH07XHJcblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IC0xMCB9ICkgfTtcclxuXHQkeyBydGwoXHJcblx0XHR7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoIDQuNXB4ICknIH0sXHJcblx0XHR7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoIC00LjVweCApJyB9XHJcblx0KSB9O1xyXG5gO1xyXG5cclxuY29uc3QgdGh1bWJGb2N1cyA9ICggeyBpc0ZvY3VzZWQgfTogVGh1bWJQcm9wcyApID0+IHtcclxuXHRyZXR1cm4gaXNGb2N1c2VkXHJcblx0XHQ/IGNzc2BcclxuXHRcdFx0XHQmOjpiZWZvcmUge1xyXG5cdFx0XHRcdFx0Y29udGVudDogJyAnO1xyXG5cdFx0XHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdFx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLnRoZW1lLmFjY2VudCB9O1xyXG5cdFx0XHRcdFx0b3BhY2l0eTogMC40O1xyXG5cdFx0XHRcdFx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c1JvdW5kIH07XHJcblx0XHRcdFx0XHRoZWlnaHQ6ICR7IHRodW1iU2l6ZSArIDggfXB4O1xyXG5cdFx0XHRcdFx0d2lkdGg6ICR7IHRodW1iU2l6ZSArIDggfXB4O1xyXG5cdFx0XHRcdFx0dG9wOiAtNHB4O1xyXG5cdFx0XHRcdFx0bGVmdDogLTRweDtcclxuXHRcdFx0XHR9XHJcblx0XHQgIGBcclxuXHRcdDogJyc7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgVGh1bWIgPSBzdHlsZWQuc3BhbjwgVGh1bWJQcm9wcyA+YFxyXG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c1JvdW5kIH07XHJcblx0aGVpZ2h0OiAxMDAlO1xyXG5cdG91dGxpbmU6IDA7XHJcblx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdHVzZXItc2VsZWN0OiBub25lO1xyXG5cdHdpZHRoOiAxMDAlO1xyXG5cclxuXHQkeyB0aHVtYkNvbG9yIH07XHJcblx0JHsgdGh1bWJGb2N1cyB9O1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IElucHV0UmFuZ2UgPSBzdHlsZWQuaW5wdXRgXHJcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHRjdXJzb3I6IHBvaW50ZXI7XHJcblx0ZGlzcGxheTogYmxvY2s7XHJcblx0aGVpZ2h0OiAxMDAlO1xyXG5cdGxlZnQ6IDA7XHJcblx0bWFyZ2luOiAwIC0keyB0aHVtYlNpemUgLyAyIH1weDtcclxuXHRvcGFjaXR5OiAwO1xyXG5cdG91dGxpbmU6IG5vbmU7XHJcblx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdHJpZ2h0OiAwO1xyXG5cdHRvcDogMDtcclxuXHR3aWR0aDogY2FsYyggMTAwJSArICR7IHRodW1iU2l6ZSB9cHggKTtcclxuYDtcclxuXHJcbmNvbnN0IHRvb2x0aXBTaG93ID0gKCB7IHNob3cgfTogVG9vbHRpcFByb3BzICkgPT4ge1xyXG5cdHJldHVybiBjc3MoIHtcclxuXHRcdG9wYWNpdHk6IHNob3cgPyAxIDogMCxcclxuXHR9ICk7XHJcbn07XHJcblxyXG5jb25zdCB0b29sdGlwUG9zaXRpb24gPSAoIHsgcG9zaXRpb24gfTogVG9vbHRpcFByb3BzICkgPT4ge1xyXG5cdGNvbnN0IGlzQm90dG9tID0gcG9zaXRpb24gPT09ICdib3R0b20nO1xyXG5cclxuXHRpZiAoIGlzQm90dG9tICkge1xyXG5cdFx0cmV0dXJuIGNzc2BcclxuXHRcdFx0Ym90dG9tOiAtODAlO1xyXG5cdFx0YDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBjc3NgXHJcblx0XHR0b3A6IC04MCU7XHJcblx0YDtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBUb29sdGlwID0gc3R5bGVkLnNwYW48IFRvb2x0aXBQcm9wcyA+YFxyXG5cdGJhY2tncm91bmQ6IHJnYmEoIDAsIDAsIDAsIDAuOCApO1xyXG5cdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNTbWFsbCB9O1xyXG5cdGNvbG9yOiB3aGl0ZTtcclxuXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcblx0Zm9udC1zaXplOiAxMnB4O1xyXG5cdG1pbi13aWR0aDogMzJweDtcclxuXHRvcGFjaXR5OiAwO1xyXG5cdHBhZGRpbmc6IDRweCA4cHg7XHJcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XHJcblx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdHRleHQtYWxpZ246IGNlbnRlcjtcclxuXHR1c2VyLXNlbGVjdDogbm9uZTtcclxuXHRsaW5lLWhlaWdodDogMS40O1xyXG5cclxuXHRAbWVkaWEgbm90ICggcHJlZmVycy1yZWR1Y2VkLW1vdGlvbiApIHtcclxuXHRcdHRyYW5zaXRpb246IG9wYWNpdHkgMTIwbXMgZWFzZTtcclxuXHR9XHJcblxyXG5cdCR7IHRvb2x0aXBTaG93IH07XHJcblx0JHsgdG9vbHRpcFBvc2l0aW9uIH07XHJcblx0JHsgcnRsKFxyXG5cdFx0eyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC01MCUpJyB9LFxyXG5cdFx0eyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDUwJSknIH1cclxuXHQpIH1cclxuYDtcclxuXHJcbi8vIEB0b2RvIFJlZmFjdG9yIFJhbmdlQ29udHJvbCB3aXRoIGxhdGVzdCBIU3RhY2sgY29uZmlndXJhdGlvblxyXG4vLyBAc2VlOiBwYWNrYWdlcy9jb21wb25lbnRzL3NyYy9oLXN0YWNrXHJcbmV4cG9ydCBjb25zdCBJbnB1dE51bWJlciA9IHN0eWxlZCggTnVtYmVyQ29udHJvbCApYFxyXG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuXHRmb250LXNpemU6IDEzcHg7XHJcblx0bWFyZ2luLXRvcDogMDtcclxuXHJcblx0aW5wdXRbdHlwZT0nbnVtYmVyJ10mIHtcclxuXHRcdCR7IHJhbmdlSGVpZ2h0IH07XHJcblx0fVxyXG5cclxuXHQkeyBydGwoIHsgbWFyZ2luTGVmdDogYCR7IHNwYWNlKCA0ICkgfSAhaW1wb3J0YW50YCB9ICkgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFjdGlvblJpZ2h0V3JhcHBlciA9IHN0eWxlZC5zcGFuYFxyXG5cdGRpc3BsYXk6IGJsb2NrO1xyXG5cdG1hcmdpbi10b3A6IDA7XHJcblxyXG5cdGJ1dHRvbixcclxuXHRidXR0b24uaXMtc21hbGwge1xyXG5cdFx0bWFyZ2luLWxlZnQ6IDA7XHJcblx0XHQkeyByYW5nZUhlaWdodCB9O1xyXG5cdH1cclxuXHJcblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IDggfSApIH1cclxuYDtcclxuIl19 */"));
export const AfterIconWrapper = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk11"
} : {
  target: "e1epgpqk11",
  label: "AfterIconWrapper"
})("display:flex;margin-top:", railHeight, "px;", rtl({
  marginLeft: 6
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const railBackgroundColor = ({
  disabled,
  railColor
}) => {
  let background = railColor || '';
  if (disabled) {
    background = COLORS.ui.backgroundDisabled;
  }
  return /*#__PURE__*/css({
    background
  }, process.env.NODE_ENV === "production" ? "" : ";label:railBackgroundColor;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
export const Rail = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk10"
} : {
  target: "e1epgpqk10",
  label: "Rail"
})("background-color:", COLORS.gray[300], ";left:0;pointer-events:none;right:0;display:block;height:", railHeight, "px;position:absolute;margin-top:", (rangeHeightValue - railHeight) / 2, "px;top:0;border-radius:", CONFIG.radiusFull, ";", railBackgroundColor, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const trackBackgroundColor = ({
  disabled,
  trackColor
}) => {
  let background = trackColor || 'currentColor';
  if (disabled) {
    background = COLORS.gray[400];
  }
  return /*#__PURE__*/css({
    background
  }, process.env.NODE_ENV === "production" ? "" : ";label:trackBackgroundColor;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
export const Track = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk9"
} : {
  target: "e1epgpqk9",
  label: "Track"
})("background-color:currentColor;border-radius:", CONFIG.radiusFull, ";height:", railHeight, "px;pointer-events:none;display:block;position:absolute;margin-top:", (rangeHeightValue - railHeight) / 2, "px;top:0;", trackBackgroundColor, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const MarksWrapper = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk8"
} : {
  target: "e1epgpqk8",
  label: "MarksWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "l7tjj5",
  styles: "display:block;pointer-events:none;position:relative;width:100%;user-select:none"
} : {
  name: "l7tjj5",
  styles: "display:block;pointer-events:none;position:relative;width:100%;user-select:none",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const markFill = ({
  disabled,
  isFilled
}) => {
  let backgroundColor = isFilled ? 'currentColor' : COLORS.gray[300];
  if (disabled) {
    backgroundColor = COLORS.gray[400];
  }
  return /*#__PURE__*/css({
    backgroundColor
  }, process.env.NODE_ENV === "production" ? "" : ";label:markFill;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
export const Mark = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk7"
} : {
  target: "e1epgpqk7",
  label: "Mark"
})("height:", thumbSize, "px;left:0;position:absolute;top:9px;width:1px;", markFill, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const markLabelFill = ({
  isFilled
}) => {
  return /*#__PURE__*/css({
    color: isFilled ? COLORS.gray[700] : COLORS.gray[300]
  }, process.env.NODE_ENV === "production" ? "" : ";label:markLabelFill;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
export const MarkLabel = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk6"
} : {
  target: "e1epgpqk6",
  label: "MarkLabel"
})("color:", COLORS.gray[300], ";font-size:11px;position:absolute;top:22px;white-space:nowrap;", rtl({
  left: 0
}), ";", rtl({
  transform: 'translateX( -50% )'
}, {
  transform: 'translateX( 50% )'
}), ";", markLabelFill, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const thumbColor = ({
  disabled
}) => disabled ? /*#__PURE__*/css("background-color:", COLORS.gray[400], ";" + (process.env.NODE_ENV === "production" ? "" : ";label:thumbColor;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */") : /*#__PURE__*/css("background-color:", COLORS.theme.accent, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:thumbColor;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const ThumbWrapper = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk5"
} : {
  target: "e1epgpqk5",
  label: "ThumbWrapper"
})("align-items:center;display:flex;height:", thumbSize, "px;justify-content:center;margin-top:", (rangeHeightValue - thumbSize) / 2, "px;outline:0;pointer-events:none;position:absolute;top:0;user-select:none;width:", thumbSize, "px;border-radius:", CONFIG.radiusRound, ";", thumbColor, ";", rtl({
  marginLeft: -10
}), ";", rtl({
  transform: 'translateX( 4.5px )'
}, {
  transform: 'translateX( -4.5px )'
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const thumbFocus = ({
  isFocused
}) => {
  return isFocused ? /*#__PURE__*/css("&::before{content:' ';position:absolute;background-color:", COLORS.theme.accent, ";opacity:0.4;border-radius:", CONFIG.radiusRound, ";height:", thumbSize + 8, "px;width:", thumbSize + 8, "px;top:-4px;left:-4px;}" + (process.env.NODE_ENV === "production" ? "" : ";label:thumbFocus;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */") : '';
};
export const Thumb = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk4"
} : {
  target: "e1epgpqk4",
  label: "Thumb"
})("align-items:center;border-radius:", CONFIG.radiusRound, ";height:100%;outline:0;position:absolute;user-select:none;width:100%;", thumbColor, ";", thumbFocus, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const InputRange = /*#__PURE__*/_styled("input", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk3"
} : {
  target: "e1epgpqk3",
  label: "InputRange"
})("box-sizing:border-box;cursor:pointer;display:block;height:100%;left:0;margin:0 -", thumbSize / 2, "px;opacity:0;outline:none;position:absolute;right:0;top:0;width:calc( 100% + ", thumbSize, "px );" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const tooltipShow = ({
  show
}) => {
  return /*#__PURE__*/css({
    opacity: show ? 1 : 0
  }, process.env.NODE_ENV === "production" ? "" : ";label:tooltipShow;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
var _ref = process.env.NODE_ENV === "production" ? {
  name: "1cypxip",
  styles: "top:-80%"
} : {
  name: "e8g0c9-tooltipPosition",
  styles: "top:-80%;label:tooltipPosition;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "1lr98c4",
  styles: "bottom:-80%"
} : {
  name: "848kg9-tooltipPosition",
  styles: "bottom:-80%;label:tooltipPosition;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const tooltipPosition = ({
  position
}) => {
  const isBottom = position === 'bottom';
  if (isBottom) {
    return _ref2;
  }
  return _ref;
};
export const Tooltip = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk2"
} : {
  target: "e1epgpqk2",
  label: "Tooltip"
})("background:rgba( 0, 0, 0, 0.8 );border-radius:", CONFIG.radiusSmall, ";color:white;display:inline-block;font-size:12px;min-width:32px;opacity:0;padding:4px 8px;pointer-events:none;position:absolute;text-align:center;user-select:none;line-height:1.4;@media not ( prefers-reduced-motion ){transition:opacity 120ms ease;}", tooltipShow, ";", tooltipPosition, ";", rtl({
  transform: 'translateX(-50%)'
}, {
  transform: 'translateX(50%)'
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

// @todo Refactor RangeControl with latest HStack configuration
// @see: packages/components/src/h-stack
export const InputNumber = /*#__PURE__*/_styled(NumberControl, process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk1"
} : {
  target: "e1epgpqk1",
  label: "InputNumber"
})("display:inline-block;font-size:13px;margin-top:0;input[type='number']&{", rangeHeight, ";}", rtl({
  marginLeft: `${space(4)} !important`
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvcmFuZ2UtY29udHJvbC9zdHlsZXMvcmFuZ2UtY29udHJvbC1zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc1RrRCIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3JhbmdlLWNvbnRyb2wvc3R5bGVzL3JhbmdlLWNvbnRyb2wtc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xyXG4gKi9cclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XHJcblxyXG4vKipcclxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXHJcbiAqL1xyXG5pbXBvcnQgTnVtYmVyQ29udHJvbCBmcm9tICcuLi8uLi9udW1iZXItY29udHJvbCc7XHJcbmltcG9ydCB7IENPTE9SUywgcnRsLCBDT05GSUcgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3BhY2UnO1xyXG5cclxuaW1wb3J0IHR5cGUge1xyXG5cdFJhbmdlTWFya1Byb3BzLFxyXG5cdFJhaWxQcm9wcyxcclxuXHRUaHVtYlByb3BzLFxyXG5cdFRvb2x0aXBQcm9wcyxcclxuXHRUcmFja1Byb3BzLFxyXG5cdFdyYXBwZXJQcm9wcyxcclxuXHRSYW5nZUNvbnRyb2xQcm9wcyxcclxufSBmcm9tICcuLi90eXBlcyc7XHJcblxyXG5jb25zdCByYW5nZUhlaWdodFZhbHVlID0gMzA7XHJcbmNvbnN0IHJhaWxIZWlnaHQgPSA0O1xyXG5jb25zdCByYW5nZUhlaWdodCA9ICgpID0+XHJcblx0Y3NzKCB7IGhlaWdodDogcmFuZ2VIZWlnaHRWYWx1ZSwgbWluSGVpZ2h0OiByYW5nZUhlaWdodFZhbHVlIH0gKTtcclxuY29uc3QgdGh1bWJTaXplID0gMTI7XHJcblxyXG5jb25zdCBkZXByZWNhdGVkSGVpZ2h0ID0gKCB7XHJcblx0X19uZXh0NDBweERlZmF1bHRTaXplLFxyXG59OiBQaWNrPCBSYW5nZUNvbnRyb2xQcm9wcywgJ19fbmV4dDQwcHhEZWZhdWx0U2l6ZScgPiApID0+XHJcblx0ISBfX25leHQ0MHB4RGVmYXVsdFNpemUgJiYgY3NzKCB7IG1pbkhlaWdodDogcmFuZ2VIZWlnaHRWYWx1ZSB9ICk7XHJcblxyXG50eXBlIFJvb3RQcm9wcyA9IFBpY2s8IFJhbmdlQ29udHJvbFByb3BzLCAnX19uZXh0NDBweERlZmF1bHRTaXplJyA+O1xyXG5leHBvcnQgY29uc3QgUm9vdCA9IHN0eWxlZC5kaXY8IFJvb3RQcm9wcyA+YFxyXG5cdC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHRkaXNwbGF5OiBmbGV4O1xyXG5cdGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcclxuXHRwYWRkaW5nOiAwO1xyXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHR0b3VjaC1hY3Rpb246IG5vbmU7XHJcblx0d2lkdGg6IDEwMCU7XHJcblx0bWluLWhlaWdodDogNDBweDtcclxuXHQvKiBUT0RPOiByZW1vdmUgYWZ0ZXIgcmVtb3ZpbmcgdGhlIF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSBwcm9wICovXHJcblx0JHsgZGVwcmVjYXRlZEhlaWdodCB9O1xyXG5gO1xyXG5cclxuY29uc3Qgd3JhcHBlckNvbG9yID0gKCB7IGNvbG9yID0gQ09MT1JTLnVpLmJvcmRlckZvY3VzIH06IFdyYXBwZXJQcm9wcyApID0+XHJcblx0Y3NzKCB7IGNvbG9yIH0gKTtcclxuXHJcbmNvbnN0IHdyYXBwZXJNYXJnaW4gPSAoIHsgbWFya3MsIF9fbmV4dEhhc05vTWFyZ2luQm90dG9tIH06IFdyYXBwZXJQcm9wcyApID0+IHtcclxuXHRpZiAoICEgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gKSB7XHJcblx0XHRyZXR1cm4gY3NzKCB7IG1hcmdpbkJvdHRvbTogbWFya3MgPyAxNiA6IHVuZGVmaW5lZCB9ICk7XHJcblx0fVxyXG5cdHJldHVybiAnJztcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdjwgV3JhcHBlclByb3BzID5gXHJcblx0ZGlzcGxheTogYmxvY2s7XHJcblx0ZmxleDogMTtcclxuXHRwb3NpdGlvbjogcmVsYXRpdmU7XHJcblx0d2lkdGg6IDEwMCU7XHJcblxyXG5cdCR7IHdyYXBwZXJDb2xvciB9O1xyXG5cdCR7IHJhbmdlSGVpZ2h0IH07XHJcblx0JHsgd3JhcHBlck1hcmdpbiB9O1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEJlZm9yZUljb25XcmFwcGVyID0gc3R5bGVkLnNwYW5gXHJcblx0ZGlzcGxheTogZmxleDsgLy8gZW5zdXJlcyB0aGUgaGVpZ2h0IGlzbid0IGFmZmVjdGVkIGJ5IGxpbmUtaGVpZ2h0XHJcblx0bWFyZ2luLXRvcDogJHsgcmFpbEhlaWdodCB9cHg7XHJcblxyXG5cdCR7IHJ0bCggeyBtYXJnaW5SaWdodDogNiB9ICkgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFmdGVySWNvbldyYXBwZXIgPSBzdHlsZWQuc3BhbmBcclxuXHRkaXNwbGF5OiBmbGV4OyAvLyBlbnN1cmVzIHRoZSBoZWlnaHQgaXNuJ3QgYWZmZWN0ZWQgYnkgbGluZS1oZWlnaHRcclxuXHRtYXJnaW4tdG9wOiAkeyByYWlsSGVpZ2h0IH1weDtcclxuXHJcblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IDYgfSApIH1cclxuYDtcclxuXHJcbmNvbnN0IHJhaWxCYWNrZ3JvdW5kQ29sb3IgPSAoIHsgZGlzYWJsZWQsIHJhaWxDb2xvciB9OiBSYWlsUHJvcHMgKSA9PiB7XHJcblx0bGV0IGJhY2tncm91bmQgPSByYWlsQ29sb3IgfHwgJyc7XHJcblxyXG5cdGlmICggZGlzYWJsZWQgKSB7XHJcblx0XHRiYWNrZ3JvdW5kID0gQ09MT1JTLnVpLmJhY2tncm91bmREaXNhYmxlZDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBjc3MoIHsgYmFja2dyb3VuZCB9ICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgUmFpbCA9IHN0eWxlZC5zcGFuYFxyXG5cdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy5ncmF5WyAzMDAgXSB9O1xyXG5cdGxlZnQ6IDA7XHJcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XHJcblx0cmlnaHQ6IDA7XHJcblx0ZGlzcGxheTogYmxvY2s7XHJcblx0aGVpZ2h0OiAkeyByYWlsSGVpZ2h0IH1weDtcclxuXHRwb3NpdGlvbjogYWJzb2x1dGU7XHJcblx0bWFyZ2luLXRvcDogJHsgKCByYW5nZUhlaWdodFZhbHVlIC0gcmFpbEhlaWdodCApIC8gMiB9cHg7XHJcblx0dG9wOiAwO1xyXG5cdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNGdWxsIH07XHJcblxyXG5cdCR7IHJhaWxCYWNrZ3JvdW5kQ29sb3IgfTtcclxuYDtcclxuXHJcbmNvbnN0IHRyYWNrQmFja2dyb3VuZENvbG9yID0gKCB7IGRpc2FibGVkLCB0cmFja0NvbG9yIH06IFRyYWNrUHJvcHMgKSA9PiB7XHJcblx0bGV0IGJhY2tncm91bmQgPSB0cmFja0NvbG9yIHx8ICdjdXJyZW50Q29sb3InO1xyXG5cclxuXHRpZiAoIGRpc2FibGVkICkge1xyXG5cdFx0YmFja2dyb3VuZCA9IENPTE9SUy5ncmF5WyA0MDAgXTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBjc3MoIHsgYmFja2dyb3VuZCB9ICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgVHJhY2sgPSBzdHlsZWQuc3BhbmBcclxuXHRiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XHJcblx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c0Z1bGwgfTtcclxuXHRoZWlnaHQ6ICR7IHJhaWxIZWlnaHQgfXB4O1xyXG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG5cdGRpc3BsYXk6IGJsb2NrO1xyXG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuXHRtYXJnaW4tdG9wOiAkeyAoIHJhbmdlSGVpZ2h0VmFsdWUgLSByYWlsSGVpZ2h0ICkgLyAyIH1weDtcclxuXHR0b3A6IDA7XHJcblxyXG5cdCR7IHRyYWNrQmFja2dyb3VuZENvbG9yIH07XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgTWFya3NXcmFwcGVyID0gc3R5bGVkLnNwYW5gXHJcblx0ZGlzcGxheTogYmxvY2s7XHJcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XHJcblx0cG9zaXRpb246IHJlbGF0aXZlO1xyXG5cdHdpZHRoOiAxMDAlO1xyXG5cdHVzZXItc2VsZWN0OiBub25lO1xyXG5gO1xyXG5cclxuY29uc3QgbWFya0ZpbGwgPSAoIHsgZGlzYWJsZWQsIGlzRmlsbGVkIH06IFJhbmdlTWFya1Byb3BzICkgPT4ge1xyXG5cdGxldCBiYWNrZ3JvdW5kQ29sb3IgPSBpc0ZpbGxlZCA/ICdjdXJyZW50Q29sb3InIDogQ09MT1JTLmdyYXlbIDMwMCBdO1xyXG5cclxuXHRpZiAoIGRpc2FibGVkICkge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yID0gQ09MT1JTLmdyYXlbIDQwMCBdO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGNzcygge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yLFxyXG5cdH0gKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBNYXJrID0gc3R5bGVkLnNwYW5gXHJcblx0aGVpZ2h0OiAkeyB0aHVtYlNpemUgfXB4O1xyXG5cdGxlZnQ6IDA7XHJcblx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdHRvcDogOXB4O1xyXG5cdHdpZHRoOiAxcHg7XHJcblxyXG5cdCR7IG1hcmtGaWxsIH07XHJcbmA7XHJcblxyXG5jb25zdCBtYXJrTGFiZWxGaWxsID0gKCB7IGlzRmlsbGVkIH06IFJhbmdlTWFya1Byb3BzICkgPT4ge1xyXG5cdHJldHVybiBjc3MoIHtcclxuXHRcdGNvbG9yOiBpc0ZpbGxlZCA/IENPTE9SUy5ncmF5WyA3MDAgXSA6IENPTE9SUy5ncmF5WyAzMDAgXSxcclxuXHR9ICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgTWFya0xhYmVsID0gc3R5bGVkLnNwYW5gXHJcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyAzMDAgXSB9O1xyXG5cdGZvbnQtc2l6ZTogMTFweDtcclxuXHRwb3NpdGlvbjogYWJzb2x1dGU7XHJcblx0dG9wOiAyMnB4O1xyXG5cdHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcblxyXG5cdCR7IHJ0bCggeyBsZWZ0OiAwIH0gKSB9O1xyXG5cdCR7IHJ0bChcclxuXHRcdHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCggLTUwJSApJyB9LFxyXG5cdFx0eyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKCA1MCUgKScgfVxyXG5cdCkgfTtcclxuXHJcblx0JHsgbWFya0xhYmVsRmlsbCB9O1xyXG5gO1xyXG5cclxuY29uc3QgdGh1bWJDb2xvciA9ICggeyBkaXNhYmxlZCB9OiBUaHVtYlByb3BzICkgPT5cclxuXHRkaXNhYmxlZFxyXG5cdFx0PyBjc3NgXHJcblx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLmdyYXlbIDQwMCBdIH07XHJcblx0XHQgIGBcclxuXHRcdDogY3NzYFxyXG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy50aGVtZS5hY2NlbnQgfTtcclxuXHRcdCAgYDtcclxuXHJcbmV4cG9ydCBjb25zdCBUaHVtYldyYXBwZXIgPSBzdHlsZWQuc3BhbmBcclxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cdGRpc3BsYXk6IGZsZXg7XHJcblx0aGVpZ2h0OiAkeyB0aHVtYlNpemUgfXB4O1xyXG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG5cdG1hcmdpbi10b3A6ICR7ICggcmFuZ2VIZWlnaHRWYWx1ZSAtIHRodW1iU2l6ZSApIC8gMiB9cHg7XHJcblx0b3V0bGluZTogMDtcclxuXHRwb2ludGVyLWV2ZW50czogbm9uZTtcclxuXHRwb3NpdGlvbjogYWJzb2x1dGU7XHJcblx0dG9wOiAwO1xyXG5cdHVzZXItc2VsZWN0OiBub25lO1xyXG5cdHdpZHRoOiAkeyB0aHVtYlNpemUgfXB4O1xyXG5cdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNSb3VuZCB9O1xyXG5cclxuXHQkeyB0aHVtYkNvbG9yIH07XHJcblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IC0xMCB9ICkgfTtcclxuXHQkeyBydGwoXHJcblx0XHR7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoIDQuNXB4ICknIH0sXHJcblx0XHR7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoIC00LjVweCApJyB9XHJcblx0KSB9O1xyXG5gO1xyXG5cclxuY29uc3QgdGh1bWJGb2N1cyA9ICggeyBpc0ZvY3VzZWQgfTogVGh1bWJQcm9wcyApID0+IHtcclxuXHRyZXR1cm4gaXNGb2N1c2VkXHJcblx0XHQ/IGNzc2BcclxuXHRcdFx0XHQmOjpiZWZvcmUge1xyXG5cdFx0XHRcdFx0Y29udGVudDogJyAnO1xyXG5cdFx0XHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdFx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLnRoZW1lLmFjY2VudCB9O1xyXG5cdFx0XHRcdFx0b3BhY2l0eTogMC40O1xyXG5cdFx0XHRcdFx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c1JvdW5kIH07XHJcblx0XHRcdFx0XHRoZWlnaHQ6ICR7IHRodW1iU2l6ZSArIDggfXB4O1xyXG5cdFx0XHRcdFx0d2lkdGg6ICR7IHRodW1iU2l6ZSArIDggfXB4O1xyXG5cdFx0XHRcdFx0dG9wOiAtNHB4O1xyXG5cdFx0XHRcdFx0bGVmdDogLTRweDtcclxuXHRcdFx0XHR9XHJcblx0XHQgIGBcclxuXHRcdDogJyc7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgVGh1bWIgPSBzdHlsZWQuc3BhbjwgVGh1bWJQcm9wcyA+YFxyXG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c1JvdW5kIH07XHJcblx0aGVpZ2h0OiAxMDAlO1xyXG5cdG91dGxpbmU6IDA7XHJcblx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdHVzZXItc2VsZWN0OiBub25lO1xyXG5cdHdpZHRoOiAxMDAlO1xyXG5cclxuXHQkeyB0aHVtYkNvbG9yIH07XHJcblx0JHsgdGh1bWJGb2N1cyB9O1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IElucHV0UmFuZ2UgPSBzdHlsZWQuaW5wdXRgXHJcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHRjdXJzb3I6IHBvaW50ZXI7XHJcblx0ZGlzcGxheTogYmxvY2s7XHJcblx0aGVpZ2h0OiAxMDAlO1xyXG5cdGxlZnQ6IDA7XHJcblx0bWFyZ2luOiAwIC0keyB0aHVtYlNpemUgLyAyIH1weDtcclxuXHRvcGFjaXR5OiAwO1xyXG5cdG91dGxpbmU6IG5vbmU7XHJcblx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdHJpZ2h0OiAwO1xyXG5cdHRvcDogMDtcclxuXHR3aWR0aDogY2FsYyggMTAwJSArICR7IHRodW1iU2l6ZSB9cHggKTtcclxuYDtcclxuXHJcbmNvbnN0IHRvb2x0aXBTaG93ID0gKCB7IHNob3cgfTogVG9vbHRpcFByb3BzICkgPT4ge1xyXG5cdHJldHVybiBjc3MoIHtcclxuXHRcdG9wYWNpdHk6IHNob3cgPyAxIDogMCxcclxuXHR9ICk7XHJcbn07XHJcblxyXG5jb25zdCB0b29sdGlwUG9zaXRpb24gPSAoIHsgcG9zaXRpb24gfTogVG9vbHRpcFByb3BzICkgPT4ge1xyXG5cdGNvbnN0IGlzQm90dG9tID0gcG9zaXRpb24gPT09ICdib3R0b20nO1xyXG5cclxuXHRpZiAoIGlzQm90dG9tICkge1xyXG5cdFx0cmV0dXJuIGNzc2BcclxuXHRcdFx0Ym90dG9tOiAtODAlO1xyXG5cdFx0YDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBjc3NgXHJcblx0XHR0b3A6IC04MCU7XHJcblx0YDtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBUb29sdGlwID0gc3R5bGVkLnNwYW48IFRvb2x0aXBQcm9wcyA+YFxyXG5cdGJhY2tncm91bmQ6IHJnYmEoIDAsIDAsIDAsIDAuOCApO1xyXG5cdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNTbWFsbCB9O1xyXG5cdGNvbG9yOiB3aGl0ZTtcclxuXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcblx0Zm9udC1zaXplOiAxMnB4O1xyXG5cdG1pbi13aWR0aDogMzJweDtcclxuXHRvcGFjaXR5OiAwO1xyXG5cdHBhZGRpbmc6IDRweCA4cHg7XHJcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XHJcblx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdHRleHQtYWxpZ246IGNlbnRlcjtcclxuXHR1c2VyLXNlbGVjdDogbm9uZTtcclxuXHRsaW5lLWhlaWdodDogMS40O1xyXG5cclxuXHRAbWVkaWEgbm90ICggcHJlZmVycy1yZWR1Y2VkLW1vdGlvbiApIHtcclxuXHRcdHRyYW5zaXRpb246IG9wYWNpdHkgMTIwbXMgZWFzZTtcclxuXHR9XHJcblxyXG5cdCR7IHRvb2x0aXBTaG93IH07XHJcblx0JHsgdG9vbHRpcFBvc2l0aW9uIH07XHJcblx0JHsgcnRsKFxyXG5cdFx0eyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC01MCUpJyB9LFxyXG5cdFx0eyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDUwJSknIH1cclxuXHQpIH1cclxuYDtcclxuXHJcbi8vIEB0b2RvIFJlZmFjdG9yIFJhbmdlQ29udHJvbCB3aXRoIGxhdGVzdCBIU3RhY2sgY29uZmlndXJhdGlvblxyXG4vLyBAc2VlOiBwYWNrYWdlcy9jb21wb25lbnRzL3NyYy9oLXN0YWNrXHJcbmV4cG9ydCBjb25zdCBJbnB1dE51bWJlciA9IHN0eWxlZCggTnVtYmVyQ29udHJvbCApYFxyXG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuXHRmb250LXNpemU6IDEzcHg7XHJcblx0bWFyZ2luLXRvcDogMDtcclxuXHJcblx0aW5wdXRbdHlwZT0nbnVtYmVyJ10mIHtcclxuXHRcdCR7IHJhbmdlSGVpZ2h0IH07XHJcblx0fVxyXG5cclxuXHQkeyBydGwoIHsgbWFyZ2luTGVmdDogYCR7IHNwYWNlKCA0ICkgfSAhaW1wb3J0YW50YCB9ICkgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFjdGlvblJpZ2h0V3JhcHBlciA9IHN0eWxlZC5zcGFuYFxyXG5cdGRpc3BsYXk6IGJsb2NrO1xyXG5cdG1hcmdpbi10b3A6IDA7XHJcblxyXG5cdGJ1dHRvbixcclxuXHRidXR0b24uaXMtc21hbGwge1xyXG5cdFx0bWFyZ2luLWxlZnQ6IDA7XHJcblx0XHQkeyByYW5nZUhlaWdodCB9O1xyXG5cdH1cclxuXHJcblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IDggfSApIH1cclxuYDtcclxuIl19 */"));
export const ActionRightWrapper = /*#__PURE__*/_styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk0"
} : {
  target: "e1epgpqk0",
  label: "ActionRightWrapper"
})("display:block;margin-top:0;button,button.is-small{margin-left:0;", rangeHeight, ";}", rtl({
  marginLeft: 8
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
//# sourceMappingURL=range-control-styles.js.map