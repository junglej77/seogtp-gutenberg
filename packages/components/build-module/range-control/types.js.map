{"version":3,"names":[],"sources":["@wordpress/components/src/range-control/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type {\r\n\tCSSProperties,\r\n\tFocusEventHandler,\r\n\tMouseEventHandler,\r\n\tMutableRefObject,\r\n} from 'react';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { BaseControlProps } from '../base-control/types';\r\nimport type { IconType } from '../icon';\r\n\r\nexport type NumericProps = {\r\n\t/**\r\n\t * The minimum `value` allowed.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tmin?: number;\r\n\t/**\r\n\t * The maximum `value` allowed.\r\n\t *\r\n\t * @default 100\r\n\t */\r\n\tmax?: number;\r\n\t/**\r\n\t * The current value of the range slider.\r\n\t */\r\n\tvalue?: number;\r\n};\r\n\r\nexport type RangeMark = { value: number; label?: string };\r\n// An expanded definition of this type is used in MarkProps to improve Storybook\r\n// generated docs.\r\nexport type RangeMarks = boolean | RangeMark[];\r\n\r\nexport type MarksProps = NumericProps & {\r\n\t/**\r\n\t * Disables the `input`, preventing new values from being applied.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tdisabled?: boolean;\r\n\t/**\r\n\t * Renders a visual representation of `step` ticks. Custom mark indicators\r\n\t * can be provided by an `Array`.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tmarks?: boolean | { value: number; label?: string }[];\r\n\t/**\r\n\t * The minimum amount by which `value` changes. It is also a factor in\r\n\t * validation as `value` must be a multiple of `step` (offset by `min`) to\r\n\t * be valid. Accepts the special string value `any` that voids the\r\n\t * validation constraint and overrides both `withInputField` and\r\n\t * `showTooltip` props to `false`.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tstep?: number | 'any';\r\n};\r\n\r\nexport type RangeMarkProps = {\r\n\tisFilled?: boolean;\r\n\tlabel?: string;\r\n\tdisabled?: boolean;\r\n\tkey?: string;\r\n\tstyle?: CSSProperties;\r\n};\r\n\r\nexport type ControlledRangeValue = number | '' | null;\r\n\r\nexport type RangeControlProps = Pick<\r\n\tBaseControlProps,\r\n\t'hideLabelFromVision' | 'help' | '__nextHasNoMarginBottom'\r\n> &\r\n\tMarksProps & {\r\n\t\t/**\r\n\t\t * If this property is added, an Icon component will be rendered\r\n\t\t * after the slider with the icon equal to afterIcon.\r\n\t\t *\r\n\t\t * For more information on `IconType` see the Icon component:\r\n\t\t * /packages/components/src/icon/index.tsx\r\n\t\t */\r\n\t\tafterIcon?: IconType;\r\n\t\t/**\r\n\t\t * If this property is true, a button to reset the slider is\r\n\t\t * rendered.\r\n\t\t *\r\n\t\t * @default false\r\n\t\t */\r\n\t\tallowReset?: boolean;\r\n\t\t/**\r\n\t\t * If this property is added, an Icon component will be rendered\r\n\t\t * before the slider with the icon equal to beforeIcon.\r\n\t\t *\r\n\t\t * For more information on `IconType` see the Icon component:\r\n\t\t * /packages/components/src/icon/index.tsx\r\n\t\t */\r\n\t\tbeforeIcon?: IconType;\r\n\t\t/**\r\n\t\t * CSS color string for the `RangeControl` wrapper.\r\n\t\t *\r\n\t\t * @default COLORS.theme.accent\r\n\t\t * @see /packages/components/src/utils/colors-values.js\r\n\t\t */\r\n\t\tcolor?: CSSProperties[ 'color' ];\r\n\t\t/**\r\n\t\t * The current input to use as a fallback if `value` is currently\r\n\t\t * `undefined`.\r\n\t\t */\r\n\t\tcurrentInput?: number;\r\n\t\t/**\r\n\t\t * An icon to be shown above the slider next to its container title.\r\n\t\t */\r\n\t\ticon?: string;\r\n\t\t/**\r\n\t\t * The slider starting position, used when no `value` is passed.\r\n\t\t * The `initialPosition` will be clamped between the provided `min`\r\n\t\t * and `max` prop values.\r\n\t\t */\r\n\t\tinitialPosition?: number;\r\n\t\t/**\r\n\t\t * Passed as a prop to the `NumberControl` component and is only\r\n\t\t * applicable if `withInputField` is true. If true, while the number\r\n\t\t * input has focus, pressing `UP` or `DOWN` along with the `SHIFT` key\r\n\t\t * will change the value by the `shiftStep` value.\r\n\t\t *\r\n\t\t * @default true\r\n\t\t */\r\n\t\tisShiftStepEnabled?: boolean;\r\n\t\t/**\r\n\t\t * If this property is added, a label will be generated using label\r\n\t\t * property as the content.\r\n\t\t */\r\n\t\tlabel?: string;\r\n\t\t/**\r\n\t\t * Callback for when `RangeControl` input loses focus.\r\n\t\t *\r\n\t\t * @default () => void\r\n\t\t */\r\n\t\tonBlur?: FocusEventHandler< HTMLInputElement >;\r\n\t\t/**\r\n\t\t * A function that receives the new value. The value will be less than\r\n\t\t * `max` and more than `min` unless a reset (enabled by `allowReset`)\r\n\t\t * has occurred. In which case the value will be either that of\r\n\t\t * `resetFallbackValue` if it has been specified or otherwise\r\n\t\t * `undefined`.\r\n\t\t *\r\n\t\t * @default () => void\r\n\t\t */\r\n\t\tonChange?: ( value?: number ) => void;\r\n\t\t/**\r\n\t\t * Callback for when `RangeControl` input gains focus.\r\n\t\t *\r\n\t\t * @default () => void\r\n\t\t */\r\n\t\tonFocus?: FocusEventHandler< HTMLInputElement >;\r\n\t\t/**\r\n\t\t * Callback for when mouse exits the `RangeControl`.\r\n\t\t *\r\n\t\t * @default () => void\r\n\t\t */\r\n\t\tonMouseLeave?: MouseEventHandler< HTMLInputElement >;\r\n\t\t/**\r\n\t\t * Callback for when mouse moves within the `RangeControl`.\r\n\t\t *\r\n\t\t * @default () => void\r\n\t\t */\r\n\t\tonMouseMove?: MouseEventHandler< HTMLInputElement >;\r\n\t\t/**\r\n\t\t * CSS color string to customize the rail element's background.\r\n\t\t */\r\n\t\trailColor?: CSSProperties[ 'color' ];\r\n\t\t/**\r\n\t\t * A way to customize the rendered UI of the value.\r\n\t\t *\r\n\t\t * @default ( value ) => value\r\n\t\t */\r\n\t\trenderTooltipContent?: (\r\n\t\t\tvalue?: ControlledRangeValue\r\n\t\t) => string | number | null | undefined;\r\n\t\t/**\r\n\t\t * The value to revert to if the Reset button is clicked (enabled by\r\n\t\t * `allowReset`)\r\n\t\t */\r\n\t\tresetFallbackValue?: number;\r\n\t\t/**\r\n\t\t * Define if separator line under/above control row should be disabled\r\n\t\t * or full width. By default it is placed below excluding underline the\r\n\t\t * control icon.\r\n\t\t */\r\n\t\tseparatorType?: 'none' | 'fullWidth' | 'topFullWidth';\r\n\t\t/**\r\n\t\t * Passed as a prop to the `NumberControl` component and is only\r\n\t\t * applicable if `withInputField` and `isShiftStepEnabled` are both true\r\n\t\t * and while the number input has focus. Acts as a multiplier of `step`.\r\n\t\t *\r\n\t\t * @default 10\r\n\t\t */\r\n\t\tshiftStep?: number;\r\n\t\t/**\r\n\t\t * Start opting into the larger default height that will become the default size in a future version.\r\n\t\t *\r\n\t\t * @default false\r\n\t\t */\r\n\t\t__next40pxDefaultSize?: boolean;\r\n\t\t/**\r\n\t\t * Forcing the Tooltip UI to show or hide. This is overridden to `false`\r\n\t\t * when `step` is set to the special string value `any`.\r\n\t\t */\r\n\t\tshowTooltip?: boolean;\r\n\t\t/**\r\n\t\t * CSS color string to customize the track element's background.\r\n\t\t */\r\n\t\ttrackColor?: CSSProperties[ 'color' ];\r\n\t\t/**\r\n\t\t * Define if the value selection should present a stepper control or a\r\n\t\t * slider control in the bottom sheet on mobile. To use the stepper set\r\n\t\t * the type value as `stepper`. Defaults to slider if no option is\r\n\t\t * provided.\r\n\t\t */\r\n\t\ttype?: 'stepper';\r\n\t\t/**\r\n\t\t * Determines if the `input` number field will render next to the\r\n\t\t * RangeControl. This is overridden to `false` when `step` is set to the\r\n\t\t * special string value `any`.\r\n\t\t *\r\n\t\t * @default true\r\n\t\t */\r\n\t\twithInputField?: boolean;\r\n\t};\r\n\r\nexport type RailProps = MarksProps & {\r\n\trailColor?: CSSProperties[ 'color' ];\r\n};\r\n\r\nexport type InputRangeProps = {\r\n\tdescribedBy?: string;\r\n\tlabel?: string;\r\n\tonMouseLeave?: MouseEventHandler< HTMLInputElement >;\r\n\tonMouseMove?: MouseEventHandler< HTMLInputElement >;\r\n\tvalue?: number | '';\r\n};\r\n\r\nexport type WrapperProps = Pick<\r\n\tBaseControlProps,\r\n\t'__nextHasNoMarginBottom'\r\n> & {\r\n\tcolor?: CSSProperties[ 'color' ];\r\n\tmarks?: RangeMarks;\r\n};\r\n\r\nexport type ThumbProps = {\r\n\tisFocused?: boolean;\r\n\tdisabled?: boolean;\r\n};\r\n\r\nexport type TooltipProps = {\r\n\tshow?: boolean;\r\n\tposition?: string;\r\n\tinputRef?: MutableRefObject< HTMLElement | undefined >;\r\n\ttooltipPosition?: string;\r\n\tvalue?: ControlledRangeValue;\r\n\trenderTooltipContent?: (\r\n\t\tvalue?: ControlledRangeValue\r\n\t) => string | number | null | undefined;\r\n\tzIndex?: number;\r\n};\r\n\r\nexport type TrackProps = {\r\n\tdisabled: boolean;\r\n\ttrackColor: CSSProperties[ 'color' ];\r\n};\r\n\r\nexport type UseControlledRangeValueArgs = {\r\n\t/**\r\n\t * The initial value.\r\n\t */\r\n\tinitial?: number;\r\n\t/**\r\n\t * The maximum value.\r\n\t */\r\n\tmax: number;\r\n\t/**\r\n\t * The minimum value.\r\n\t */\r\n\tmin: number;\r\n\t/**\r\n\t * The current value.\r\n\t */\r\n\tvalue: number | null;\r\n};\r\n\r\nexport type UseMarksArgs = NumericProps & {\r\n\tmarks: RangeMarks;\r\n\tstep: number;\r\n};\r\n"],"mappings":"","ignoreList":[]}