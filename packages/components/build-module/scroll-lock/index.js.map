{"version":3,"names":["useEffect","previousScrollTop","setLocked","locked","scrollingElement","document","body","scrollTop","methodName","classList","documentElement","lockCounter","ScrollLock"],"sources":["@wordpress/components/src/scroll-lock/index.tsx"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useEffect } from '@wordpress/element';\r\n\r\n/*\r\n * Setting `overflow: hidden` on html and body elements resets body scroll in iOS.\r\n * Save scroll top so we can restore it after locking scroll.\r\n *\r\n * NOTE: It would be cleaner and possibly safer to find a localized solution such\r\n * as preventing default on certain touchmove events.\r\n */\r\nlet previousScrollTop = 0;\r\n\r\nfunction setLocked( locked: boolean ) {\r\n\tconst scrollingElement = document.scrollingElement || document.body;\r\n\r\n\tif ( locked ) {\r\n\t\tpreviousScrollTop = scrollingElement.scrollTop;\r\n\t}\r\n\r\n\tconst methodName = locked ? 'add' : 'remove';\r\n\tscrollingElement.classList[ methodName ]( 'lockscroll' );\r\n\r\n\t// Adding the class to the document element seems to be necessary in iOS.\r\n\tdocument.documentElement.classList[ methodName ]( 'lockscroll' );\r\n\r\n\tif ( ! locked ) {\r\n\t\tscrollingElement.scrollTop = previousScrollTop;\r\n\t}\r\n}\r\n\r\nlet lockCounter = 0;\r\n\r\n/**\r\n * ScrollLock is a content-free React component for declaratively preventing\r\n * scroll bleed from modal UI to the page body. This component applies a\r\n * `lockscroll` class to the `document.documentElement` and\r\n * `document.scrollingElement` elements to stop the body from scrolling. When it\r\n * is present, the lock is applied.\r\n *\r\n * ```jsx\r\n * import { ScrollLock, Button } from '@wordpress/components';\r\n * import { useState } from '@wordpress/element';\r\n *\r\n * const MyScrollLock = () => {\r\n *   const [ isScrollLocked, setIsScrollLocked ] = useState( false );\r\n *\r\n *   const toggleLock = () => {\r\n *     setIsScrollLocked( ( locked ) => ! locked ) );\r\n *   };\r\n *\r\n *   return (\r\n *     <div>\r\n *       <Button variant=\"secondary\" onClick={ toggleLock }>\r\n *         Toggle scroll lock\r\n *       </Button>\r\n *       { isScrollLocked && <ScrollLock /> }\r\n *       <p>\r\n *         Scroll locked:\r\n *         <strong>{ isScrollLocked ? 'Yes' : 'No' }</strong>\r\n *       </p>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\r\nexport function ScrollLock(): null {\r\n\tuseEffect( () => {\r\n\t\tif ( lockCounter === 0 ) {\r\n\t\t\tsetLocked( true );\r\n\t\t}\r\n\r\n\t\t++lockCounter;\r\n\r\n\t\treturn () => {\r\n\t\t\tif ( lockCounter === 1 ) {\r\n\t\t\t\tsetLocked( false );\r\n\t\t\t}\r\n\r\n\t\t\t--lockCounter;\r\n\t\t};\r\n\t}, [] );\r\n\r\n\treturn null;\r\n}\r\n\r\nexport default ScrollLock;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,oBAAoB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,iBAAiB,GAAG,CAAC;AAEzB,SAASC,SAASA,CAAEC,MAAe,EAAG;EACrC,MAAMC,gBAAgB,GAAGC,QAAQ,CAACD,gBAAgB,IAAIC,QAAQ,CAACC,IAAI;EAEnE,IAAKH,MAAM,EAAG;IACbF,iBAAiB,GAAGG,gBAAgB,CAACG,SAAS;EAC/C;EAEA,MAAMC,UAAU,GAAGL,MAAM,GAAG,KAAK,GAAG,QAAQ;EAC5CC,gBAAgB,CAACK,SAAS,CAAED,UAAU,CAAE,CAAE,YAAa,CAAC;;EAExD;EACAH,QAAQ,CAACK,eAAe,CAACD,SAAS,CAAED,UAAU,CAAE,CAAE,YAAa,CAAC;EAEhE,IAAK,CAAEL,MAAM,EAAG;IACfC,gBAAgB,CAACG,SAAS,GAAGN,iBAAiB;EAC/C;AACD;AAEA,IAAIU,WAAW,GAAG,CAAC;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAAA,EAAS;EAClCZ,SAAS,CAAE,MAAM;IAChB,IAAKW,WAAW,KAAK,CAAC,EAAG;MACxBT,SAAS,CAAE,IAAK,CAAC;IAClB;IAEA,EAAES,WAAW;IAEb,OAAO,MAAM;MACZ,IAAKA,WAAW,KAAK,CAAC,EAAG;QACxBT,SAAS,CAAE,KAAM,CAAC;MACnB;MAEA,EAAES,WAAW;IACd,CAAC;EACF,CAAC,EAAE,EAAG,CAAC;EAEP,OAAO,IAAI;AACZ;AAEA,eAAeC,UAAU","ignoreList":[]}