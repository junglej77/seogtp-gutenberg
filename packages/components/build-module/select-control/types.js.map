{"version":3,"names":[],"sources":["@wordpress/components/src/select-control/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { ChangeEvent, ReactNode } from 'react';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { InputBaseProps } from '../input-control/types';\r\nimport type { BaseControlProps } from '../base-control/types';\r\n\r\ntype SelectControlBaseProps< V extends string > = Pick<\r\n\tInputBaseProps,\r\n\t| '__next36pxDefaultSize'\r\n\t| '__next40pxDefaultSize'\r\n\t| 'disabled'\r\n\t| 'hideLabelFromVision'\r\n\t| 'label'\r\n\t| 'labelPosition'\r\n\t| 'prefix'\r\n\t| 'size'\r\n\t| 'suffix'\r\n> &\r\n\tPick< BaseControlProps, 'help' | '__nextHasNoMarginBottom' > & {\r\n\t\t/**\r\n\t\t * An array of option property objects to be rendered,\r\n\t\t * each with a `label` and `value` property, as well as any other\r\n\t\t * `<option>` attributes.\r\n\t\t */\r\n\t\toptions?: readonly ( {\r\n\t\t\t/**\r\n\t\t\t * The label to be shown to the user.\r\n\t\t\t */\r\n\t\t\tlabel: string;\r\n\t\t\t/**\r\n\t\t\t * The internal value used to choose the selected value.\r\n\t\t\t * This is also the value passed to `onChange` when the option is selected.\r\n\t\t\t */\r\n\t\t\tvalue: V;\r\n\t\t} & Omit<\r\n\t\t\tReact.OptionHTMLAttributes< HTMLOptionElement >,\r\n\t\t\t'label' | 'value'\r\n\t\t> )[];\r\n\t\t/**\r\n\t\t * As an alternative to the `options` prop, `optgroup`s and `options` can be\r\n\t\t * passed in as `children` for more customizability.\r\n\t\t */\r\n\t\tchildren?: ReactNode;\r\n\t\t/**\r\n\t\t * The style variant of the control.\r\n\t\t *\r\n\t\t * @default 'default'\r\n\t\t */\r\n\t\tvariant?: 'default' | 'minimal';\r\n\t};\r\n\r\nexport type SelectControlSingleSelectionProps< V extends string = string > =\r\n\tSelectControlBaseProps< V > & {\r\n\t\t/**\r\n\t\t * If this property is added, multiple values can be selected. The `value` passed should be an array.\r\n\t\t *\r\n\t\t * In most cases, it is preferable to use the `FormTokenField` or `CheckboxControl` components instead.\r\n\t\t *\r\n\t\t * @default false\r\n\t\t */\r\n\t\tmultiple?: false;\r\n\t\t/**\r\n\t\t * The value of the selected option.\r\n\t\t *\r\n\t\t * If `multiple` is true, the `value` should be an array with the values of the selected options.\r\n\t\t */\r\n\t\tvalue?: NoInfer< V >;\r\n\t\t/**\r\n\t\t * A function that receives the value of the new option that is being selected as input.\r\n\t\t *\r\n\t\t * If `multiple` is `true`, the value received is an array of the selected value.\r\n\t\t * Otherwise, the value received is a single value with the new selected value.\r\n\t\t */\r\n\t\tonChange?: (\r\n\t\t\tvalue: NoInfer< V >,\r\n\t\t\textra?: { event?: ChangeEvent< HTMLSelectElement > }\r\n\t\t) => void;\r\n\t};\r\n\r\nexport type SelectControlMultipleSelectionProps< V extends string > =\r\n\tSelectControlBaseProps< V > & {\r\n\t\t/**\r\n\t\t * If this property is added, multiple values can be selected. The `value` passed should be an array.\r\n\t\t *\r\n\t\t * In most cases, it is preferable to use the `FormTokenField` or `CheckboxControl` components instead.\r\n\t\t *\r\n\t\t * @default false\r\n\t\t */\r\n\t\tmultiple: true;\r\n\t\t/**\r\n\t\t * The value of the selected option.\r\n\t\t *\r\n\t\t * If `multiple` is true, the `value` should be an array with the values of the selected options.\r\n\t\t */\r\n\t\tvalue?: NoInfer< V >[];\r\n\t\t/**\r\n\t\t * A function that receives the value of the new option that is being selected as input.\r\n\t\t *\r\n\t\t * If `multiple` is `true`, the value received is an array of the selected value.\r\n\t\t * Otherwise, the value received is a single value with the new selected value.\r\n\t\t */\r\n\t\tonChange?: (\r\n\t\t\tvalue: NoInfer< V >[],\r\n\t\t\textra?: { event?: ChangeEvent< HTMLSelectElement > }\r\n\t\t) => void;\r\n\t};\r\n\r\nexport type SelectControlProps< V extends string = string > =\r\n\t| SelectControlSingleSelectionProps< V >\r\n\t| SelectControlMultipleSelectionProps< V >;\r\n"],"mappings":"","ignoreList":[]}