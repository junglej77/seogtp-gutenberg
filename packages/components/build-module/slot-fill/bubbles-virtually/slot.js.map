{"version":3,"names":["useRef","useLayoutEffect","useContext","forwardRef","useMergeRefs","View","SlotFillContext","jsx","_jsx","Slot","props","forwardedRef","name","fillProps","as","children","restProps","registerSlot","unregisterSlot","registry","ref","updateSlot"],"sources":["@wordpress/components/src/slot-fill/bubbles-virtually/slot.tsx"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { ForwardedRef } from 'react';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport {\r\n\tuseRef,\r\n\tuseLayoutEffect,\r\n\tuseContext,\r\n\tforwardRef,\r\n} from '@wordpress/element';\r\nimport { useMergeRefs } from '@wordpress/compose';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { View } from '../../view';\r\nimport SlotFillContext from './slot-fill-context';\r\nimport type { WordPressComponentProps } from '../../context';\r\nimport type { SlotComponentProps } from '../types';\r\n\r\nfunction Slot(\r\n\tprops: WordPressComponentProps<\r\n\t\tOmit< SlotComponentProps, 'bubblesVirtually' >,\r\n\t\t'div'\r\n\t>,\r\n\tforwardedRef: ForwardedRef< any >\r\n) {\r\n\tconst {\r\n\t\tname,\r\n\t\tfillProps = {},\r\n\t\tas,\r\n\t\t// `children` is not allowed. However, if it is passed,\r\n\t\t// it will be displayed as is, so remove `children`.\r\n\t\t// @ts-ignore\r\n\t\tchildren,\r\n\t\t...restProps\r\n\t} = props;\r\n\r\n\tconst { registerSlot, unregisterSlot, ...registry } =\r\n\t\tuseContext( SlotFillContext );\r\n\tconst ref = useRef< HTMLElement >( null );\r\n\r\n\tuseLayoutEffect( () => {\r\n\t\tregisterSlot( name, ref, fillProps );\r\n\t\treturn () => {\r\n\t\t\tunregisterSlot( name, ref );\r\n\t\t};\r\n\t\t// Ignore reason: We don't want to unregister and register the slot whenever\r\n\t\t// `fillProps` change, which would cause the fill to be re-mounted. Instead,\r\n\t\t// we can just update the slot (see hook below).\r\n\t\t// For more context, see https://github.com/WordPress/gutenberg/pull/44403#discussion_r994415973\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, [ registerSlot, unregisterSlot, name ] );\r\n\t// fillProps may be an update that interacts with the layout, so we\r\n\t// useLayoutEffect.\r\n\tuseLayoutEffect( () => {\r\n\t\tregistry.updateSlot( name, fillProps );\r\n\t} );\r\n\r\n\treturn (\r\n\t\t<View\r\n\t\t\tas={ as }\r\n\t\t\tref={ useMergeRefs( [ forwardedRef, ref ] ) }\r\n\t\t\t{ ...restProps }\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nexport default forwardRef( Slot );\r\n"],"mappings":"AAAA;AACA;AACA;;AAGA;AACA;AACA;AACA,SACCA,MAAM,EACNC,eAAe,EACfC,UAAU,EACVC,UAAU,QACJ,oBAAoB;AAC3B,SAASC,YAAY,QAAQ,oBAAoB;;AAEjD;AACA;AACA;AACA,SAASC,IAAI,QAAQ,YAAY;AACjC,OAAOC,eAAe,MAAM,qBAAqB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAIlD,SAASC,IAAIA,CACZC,KAGC,EACDC,YAAiC,EAChC;EACD,MAAM;IACLC,IAAI;IACJC,SAAS,GAAG,CAAC,CAAC;IACdC,EAAE;IACF;IACA;IACA;IACAC,QAAQ;IACR,GAAGC;EACJ,CAAC,GAAGN,KAAK;EAET,MAAM;IAAEO,YAAY;IAAEC,cAAc;IAAE,GAAGC;EAAS,CAAC,GAClDjB,UAAU,CAAEI,eAAgB,CAAC;EAC9B,MAAMc,GAAG,GAAGpB,MAAM,CAAiB,IAAK,CAAC;EAEzCC,eAAe,CAAE,MAAM;IACtBgB,YAAY,CAAEL,IAAI,EAAEQ,GAAG,EAAEP,SAAU,CAAC;IACpC,OAAO,MAAM;MACZK,cAAc,CAAEN,IAAI,EAAEQ,GAAI,CAAC;IAC5B,CAAC;IACD;IACA;IACA;IACA;IACA;EACD,CAAC,EAAE,CAAEH,YAAY,EAAEC,cAAc,EAAEN,IAAI,CAAG,CAAC;EAC3C;EACA;EACAX,eAAe,CAAE,MAAM;IACtBkB,QAAQ,CAACE,UAAU,CAAET,IAAI,EAAEC,SAAU,CAAC;EACvC,CAAE,CAAC;EAEH,oBACCL,IAAA,CAACH,IAAI;IACJS,EAAE,EAAGA,EAAI;IACTM,GAAG,EAAGhB,YAAY,CAAE,CAAEO,YAAY,EAAES,GAAG,CAAG,CAAG;IAAA,GACxCJ;EAAS,CACd,CAAC;AAEJ;AAEA,eAAeb,UAAU,CAAEM,IAAK,CAAC","ignoreList":[]}