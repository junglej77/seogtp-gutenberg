{"version":3,"names":["useState","SlotFillContext","jsx","_jsx","createSlotRegistry","slots","fills","listeners","registerSlot","name","slot","previousSlot","triggerListeners","forceUpdateSlot","forceUpdate","registerFill","instance","unregisterSlot","unregisterFill","_fills$name$filter","filter","fill","getSlot","getFills","slotInstance","forEach","listener","subscribe","push","l","SlotFillProvider","children","contextValue","Provider","value"],"sources":["@wordpress/components/src/slot-fill/provider.tsx"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport type { Component } from '@wordpress/element';\r\nimport { useState } from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport SlotFillContext from './context';\r\nimport type {\r\n\tFillComponentProps,\r\n\tBaseSlotFillContext,\r\n\tBaseSlotComponentProps,\r\n\tSlotFillProviderProps,\r\n\tSlotKey,\r\n} from './types';\r\n\r\nfunction createSlotRegistry(): BaseSlotFillContext {\r\n\tconst slots: Record< SlotKey, Component< BaseSlotComponentProps > > = {};\r\n\tconst fills: Record< SlotKey, FillComponentProps[] > = {};\r\n\tlet listeners: Array< () => void > = [];\r\n\r\n\tfunction registerSlot(\r\n\t\tname: SlotKey,\r\n\t\tslot: Component< BaseSlotComponentProps >\r\n\t) {\r\n\t\tconst previousSlot = slots[ name ];\r\n\t\tslots[ name ] = slot;\r\n\t\ttriggerListeners();\r\n\r\n\t\t// Sometimes the fills are registered after the initial render of slot\r\n\t\t// But before the registerSlot call, we need to rerender the slot.\r\n\t\tforceUpdateSlot( name );\r\n\r\n\t\t// If a new instance of a slot is being mounted while another with the\r\n\t\t// same name exists, force its update _after_ the new slot has been\r\n\t\t// assigned into the instance, such that its own rendering of children\r\n\t\t// will be empty (the new Slot will subsume all fills for this name).\r\n\t\tif ( previousSlot ) {\r\n\t\t\tpreviousSlot.forceUpdate();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction registerFill( name: SlotKey, instance: FillComponentProps ) {\r\n\t\tfills[ name ] = [ ...( fills[ name ] || [] ), instance ];\r\n\t\tforceUpdateSlot( name );\r\n\t}\r\n\r\n\tfunction unregisterSlot(\r\n\t\tname: SlotKey,\r\n\t\tinstance: Component< BaseSlotComponentProps >\r\n\t) {\r\n\t\t// If a previous instance of a Slot by this name unmounts, do nothing,\r\n\t\t// as the slot and its fills should only be removed for the current\r\n\t\t// known instance.\r\n\t\tif ( slots[ name ] !== instance ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdelete slots[ name ];\r\n\t\ttriggerListeners();\r\n\t}\r\n\r\n\tfunction unregisterFill( name: SlotKey, instance: FillComponentProps ) {\r\n\t\tfills[ name ] =\r\n\t\t\tfills[ name ]?.filter( ( fill ) => fill !== instance ) ?? [];\r\n\t\tforceUpdateSlot( name );\r\n\t}\r\n\r\n\tfunction getSlot(\r\n\t\tname: SlotKey\r\n\t): Component< BaseSlotComponentProps > | undefined {\r\n\t\treturn slots[ name ];\r\n\t}\r\n\r\n\tfunction getFills(\r\n\t\tname: SlotKey,\r\n\t\tslotInstance: Component< BaseSlotComponentProps >\r\n\t): FillComponentProps[] {\r\n\t\t// Fills should only be returned for the current instance of the slot\r\n\t\t// in which they occupy.\r\n\t\tif ( slots[ name ] !== slotInstance ) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\treturn fills[ name ];\r\n\t}\r\n\r\n\tfunction forceUpdateSlot( name: SlotKey ) {\r\n\t\tconst slot = getSlot( name );\r\n\r\n\t\tif ( slot ) {\r\n\t\t\tslot.forceUpdate();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction triggerListeners() {\r\n\t\tlisteners.forEach( ( listener ) => listener() );\r\n\t}\r\n\r\n\tfunction subscribe( listener: () => void ) {\r\n\t\tlisteners.push( listener );\r\n\r\n\t\treturn () => {\r\n\t\t\tlisteners = listeners.filter( ( l ) => l !== listener );\r\n\t\t};\r\n\t}\r\n\r\n\treturn {\r\n\t\tregisterSlot,\r\n\t\tunregisterSlot,\r\n\t\tregisterFill,\r\n\t\tunregisterFill,\r\n\t\tgetSlot,\r\n\t\tgetFills,\r\n\t\tsubscribe,\r\n\t};\r\n}\r\n\r\nexport function SlotFillProvider( { children }: SlotFillProviderProps ) {\r\n\tconst [ contextValue ] = useState( createSlotRegistry );\r\n\treturn (\r\n\t\t<SlotFillContext.Provider value={ contextValue }>\r\n\t\t\t{ children }\r\n\t\t</SlotFillContext.Provider>\r\n\t);\r\n}\r\n\r\nexport default SlotFillProvider;\r\n"],"mappings":"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","ignoreList":[]}