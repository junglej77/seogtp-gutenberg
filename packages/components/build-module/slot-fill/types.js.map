{"version":3,"names":[],"sources":["@wordpress/components/src/slot-fill/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { Component, MutableRefObject, ReactNode, RefObject } from 'react';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport type { ObservableMap } from '@wordpress/compose';\r\n\r\nexport type DistributiveOmit< T, K extends keyof any > = T extends any\r\n\t? Omit< T, K >\r\n\t: never;\r\n\r\nexport type SlotKey = string | symbol;\r\n\r\nexport type FillProps = Record< string, any >;\r\n\r\ntype SlotPropBase = {\r\n\t/**\r\n\t * Slot name.\r\n\t */\r\n\tname: SlotKey;\r\n\r\n\t/**\r\n\t * props to pass from `Slot` to `Fill`.\r\n\t *\r\n\t * @default {}\r\n\t */\r\n\tfillProps?: FillProps;\r\n};\r\n\r\nexport type SlotComponentProps =\r\n\t| ( SlotPropBase & {\r\n\t\t\t/**\r\n\t\t\t * By default, events will bubble to their parents on the DOM hierarchy (native event bubbling).\r\n\t\t\t * If set to true, events will bubble to their virtual parent in the React elements hierarchy instead,\r\n\t\t\t * also accept an optional `className`, `id`, etc.  to add to the slot container.\r\n\t\t\t */\r\n\t\t\tbubblesVirtually: true;\r\n\r\n\t\t\t/**\r\n\t\t\t * A function that returns nodes to be rendered.\r\n\t\t\t * Supported only when `bubblesVirtually` is `false`.\r\n\t\t\t */\r\n\t\t\tchildren?: never;\r\n\r\n\t\t\t/**\r\n\t\t\t * Additional className for the `Slot` component.\r\n\t\t\t * Supported only when `bubblesVirtually` is `true`.\r\n\t\t\t */\r\n\t\t\tclassName?: string;\r\n\r\n\t\t\t/**\r\n\t\t\t * Additional styles for the `Slot` component.\r\n\t\t\t * Supported only when `bubblesVirtually` is `true`.\r\n\t\t\t */\r\n\t\t\tstyle?: React.CSSProperties;\r\n\t  } )\r\n\t| ( SlotPropBase & {\r\n\t\t\t/**\r\n\t\t\t * By default, events will bubble to their parents on the DOM hierarchy (native event bubbling).\r\n\t\t\t * If set to true, events will bubble to their virtual parent in the React elements hierarchy instead,\r\n\t\t\t * also accept an optional `className`, `id`, etc.  to add to the slot container.\r\n\t\t\t */\r\n\t\t\tbubblesVirtually?: false;\r\n\r\n\t\t\t/**\r\n\t\t\t * A function that returns nodes to be rendered.\r\n\t\t\t * Supported only when `bubblesVirtually` is `false`.\r\n\t\t\t */\r\n\t\t\tchildren?: ( fills: ReactNode ) => ReactNode;\r\n\r\n\t\t\t/**\r\n\t\t\t * Additional className for the `Slot` component.\r\n\t\t\t * Supported only when `bubblesVirtually` is `true`.\r\n\t\t\t */\r\n\t\t\tclassName?: never;\r\n\r\n\t\t\t/**\r\n\t\t\t * Additional styles for the `Slot` component.\r\n\t\t\t * Supported only when `bubblesVirtually` is `true`.\r\n\t\t\t */\r\n\t\t\tstyle?: never;\r\n\t  } );\r\n\r\nexport type FillComponentProps = {\r\n\t/**\r\n\t * The name of the slot to fill into.\r\n\t */\r\n\tname: SlotKey;\r\n\r\n\t/**\r\n\t * Children elements or render function.\r\n\t */\r\n\tchildren?: ReactNode | ( ( fillProps: FillProps ) => ReactNode );\r\n};\r\n\r\nexport type SlotFillProviderProps = {\r\n\t/**\r\n\t * The children elements.\r\n\t */\r\n\tchildren: ReactNode;\r\n\r\n\t/**\r\n\t * Whether to pass slots to the parent provider if existent.\r\n\t */\r\n\tpassthrough?: boolean;\r\n};\r\n\r\nexport type SlotFillBubblesVirtuallySlotRef = RefObject< HTMLElement >;\r\nexport type SlotFillBubblesVirtuallyFillRef = MutableRefObject< {\r\n\trerender: () => void;\r\n} >;\r\n\r\nexport type SlotFillBubblesVirtuallyContext = {\r\n\tslots: ObservableMap<\r\n\t\tSlotKey,\r\n\t\t{\r\n\t\t\tref: SlotFillBubblesVirtuallySlotRef;\r\n\t\t\tfillProps: FillProps;\r\n\t\t}\r\n\t>;\r\n\tfills: ObservableMap< SlotKey, SlotFillBubblesVirtuallyFillRef[] >;\r\n\tregisterSlot: (\r\n\t\tname: SlotKey,\r\n\t\tref: SlotFillBubblesVirtuallySlotRef,\r\n\t\tfillProps: FillProps\r\n\t) => void;\r\n\tunregisterSlot: (\r\n\t\tname: SlotKey,\r\n\t\tref: SlotFillBubblesVirtuallySlotRef\r\n\t) => void;\r\n\tupdateSlot: ( name: SlotKey, fillProps: FillProps ) => void;\r\n\tregisterFill: (\r\n\t\tname: SlotKey,\r\n\t\tref: SlotFillBubblesVirtuallyFillRef\r\n\t) => void;\r\n\tunregisterFill: (\r\n\t\tname: SlotKey,\r\n\t\tref: SlotFillBubblesVirtuallyFillRef\r\n\t) => void;\r\n\r\n\t/**\r\n\t * This helps the provider know if it's using the default context value or not.\r\n\t */\r\n\tisDefault?: boolean;\r\n};\r\n\r\nexport type BaseSlotFillContext = {\r\n\tregisterSlot: (\r\n\t\tname: SlotKey,\r\n\t\tslot: Component< BaseSlotComponentProps >\r\n\t) => void;\r\n\tunregisterSlot: (\r\n\t\tname: SlotKey,\r\n\t\tslot: Component< BaseSlotComponentProps >\r\n\t) => void;\r\n\tregisterFill: ( name: SlotKey, instance: FillComponentProps ) => void;\r\n\tunregisterFill: ( name: SlotKey, instance: FillComponentProps ) => void;\r\n\tgetSlot: (\r\n\t\tname: SlotKey\r\n\t) => Component< BaseSlotComponentProps > | undefined;\r\n\tgetFills: (\r\n\t\tname: SlotKey,\r\n\t\tslotInstance: Component< BaseSlotComponentProps >\r\n\t) => FillComponentProps[];\r\n\tsubscribe: ( listener: () => void ) => () => void;\r\n};\r\n\r\nexport type BaseSlotComponentProps = Pick<\r\n\tBaseSlotFillContext,\r\n\t'registerSlot' | 'unregisterSlot' | 'getFills'\r\n> &\r\n\tOmit< SlotComponentProps, 'bubblesVirtually' > & {\r\n\t\tchildren?: ( fills: ReactNode ) => ReactNode;\r\n\t};\r\n"],"mappings":"","ignoreList":[]}