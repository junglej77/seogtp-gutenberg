{"version":3,"names":[],"sources":["@wordpress/components/src/tabs/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type * as Ariakit from '@ariakit/react';\r\n\r\nexport type TabsContextProps =\r\n\t| {\r\n\t\t\t/**\r\n\t\t\t * The tabStore object returned by Ariakit's `useTabStore` hook.\r\n\t\t\t */\r\n\t\t\tstore: Ariakit.TabStore;\r\n\t\t\t/**\r\n\t\t\t * The unique id string for this instance of the Tabs component.\r\n\t\t\t */\r\n\t\t\tinstanceId: string;\r\n\t  }\r\n\t| undefined;\r\n\r\nexport type TabsProps = {\r\n\t/**\r\n\t * The children elements, which should be at least a\r\n\t * `Tabs.Tablist` component and a series of `Tabs.TabPanel`\r\n\t * components.\r\n\t */\r\n\tchildren: React.ReactNode;\r\n\t/**\r\n\t * When `true`, the tab will be selected when receiving focus (automatic tab\r\n\t * activation). When `false`, the tab will be selected only when clicked\r\n\t * (manual tab activation). See the official W3C docs for more info.\r\n\t *\r\n\t * @default true\r\n\t *\r\n\t * @see https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/\r\n\t */\r\n\tselectOnMove?: boolean;\r\n\t/**\r\n\t * The id of the tab to be selected upon mounting of component.\r\n\t * If this prop is not set, the first tab will be selected by default.\r\n\t * The id provided will be internally prefixed with the\r\n\t * `TabsContextProps.instanceId`.\r\n\t *\r\n\t * Note: this prop will be overridden by the `selectedTabId` prop if it is\r\n\t * provided. (Controlled Mode)\r\n\t */\r\n\tdefaultTabId?: string;\r\n\t/**\r\n\t * The function called when a tab has been selected.\r\n\t * It is passed the id of the newly selected tab as an argument.\r\n\t */\r\n\tonSelect?: ( selectedId: string | null | undefined ) => void;\r\n\r\n\t/**\r\n\t * The orientation of the tablist.\r\n\t *\r\n\t * @default `horizontal`\r\n\t */\r\n\torientation?: 'horizontal' | 'vertical';\r\n\t/**\r\n\t * The Id of the tab to display. This id is prepended with the `Tabs`\r\n\t * instanceId internally.\r\n\t *\r\n\t * If left `undefined`, the component assumes it is being used in\r\n\t * uncontrolled mode. Consequently, any value different than `undefined`\r\n\t * will set the component in `controlled` mode.\r\n\t * When in controlled mode, the `null` value will result in no tab being selected.\r\n\t */\r\n\tselectedTabId?: string | null;\r\n};\r\n\r\nexport type TabListProps = {\r\n\t/**\r\n\t * The children elements, which should be a series of `Tabs.TabPanel` components.\r\n\t */\r\n\tchildren?: React.ReactNode;\r\n};\r\n\r\nexport type TabProps = {\r\n\t/**\r\n\t * The id of the tab, which is prepended with the `Tabs` instanceId.\r\n\t * The value of this prop should match with the value of the `tabId` prop on\r\n\t * the corresponding `Tabs.TabPanel` component.\r\n\t */\r\n\ttabId: string;\r\n\t/**\r\n\t * The children elements, generally the text to display on the tab.\r\n\t */\r\n\tchildren?: React.ReactNode;\r\n\t/**\r\n\t * Determines if the tab button should be disabled.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tdisabled?: boolean;\r\n\t/**\r\n\t * The type of component to render the tab button as. If this prop is not\r\n\t * provided, the tab button will be rendered as a `button` element.\r\n\t */\r\n\trender?: React.ReactElement;\r\n};\r\n\r\nexport type TabPanelProps = {\r\n\t/**\r\n\t * The children elements, generally the content to display on the tabpanel.\r\n\t */\r\n\tchildren?: React.ReactNode;\r\n\t/**\r\n\t * A unique identifier for the tabpanel, which is used to generate an\r\n\t * instanced id for the underlying element.\r\n\t * The value of this prop should match with the value of the `tabId` prop on\r\n\t * the corresponding `Tabs.Tab` component.\r\n\t */\r\n\ttabId: string;\r\n\t/**\r\n\t * Determines whether or not the tabpanel element should be focusable.\r\n\t * If `false`, pressing the tab key will skip over the tabpanel, and instead\r\n\t * focus on the first focusable element in the panel (if there is one).\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tfocusable?: boolean;\r\n};\r\n"],"mappings":"","ignoreList":[]}