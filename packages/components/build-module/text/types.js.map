{"version":3,"names":[],"sources":["@wordpress/components/src/text/types.ts"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport type { TruncateProps } from '../truncate/types';\r\n\r\n/**\r\n * External dependencies\r\n */\r\nimport type { CSSProperties } from 'react';\r\nimport type { FindAllArgs } from 'highlight-words-core';\r\n\r\nexport type TextSize =\r\n\t| 'body'\r\n\t| 'caption'\r\n\t| 'footnote'\r\n\t| 'largeTitle'\r\n\t| 'subheadline'\r\n\t| 'title';\r\n\r\ntype TextVariant = 'muted';\r\n\r\ntype TextWeight = 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;\r\n\r\nexport interface Props extends TruncateProps {\r\n\t/**\r\n\t * Adjusts the text alignment.\r\n\t */\r\n\talign?: CSSProperties[ 'textAlign' ];\r\n\t/**\r\n\t * Automatically calculate the appropriate line-height value for contents that render text and Control elements (e.g. `TextInput`).\r\n\t */\r\n\tadjustLineHeightForInnerControls?: 'large' | 'medium' | 'small' | 'xSmall';\r\n\t/**\r\n\t * Adjusts the text color.\r\n\t */\r\n\tcolor?: CSSProperties[ 'color' ];\r\n\t/**\r\n\t * Adjusts the CSS display.\r\n\t */\r\n\tdisplay?: CSSProperties[ 'display' ];\r\n\t/**\r\n\t * Renders a destructive color.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tisDestructive?: boolean;\r\n\t/**\r\n\t * Escape characters in `highlightWords` which are meaningful in regular expressions.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\thighlightEscape?: boolean;\r\n\t/**\r\n\t * Determines if `highlightWords` should be case sensitive.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\thighlightCaseSensitive?: boolean;\r\n\t/**\r\n\t * Array of search words. String search terms are automatically cast to RegExps unless `highlightEscape` is true.\r\n\t */\r\n\thighlightSanitize?: FindAllArgs[ 'sanitize' ];\r\n\t/**\r\n\t * Sets `Text` to have `display: block`. Note: text truncation only works\r\n\t * when `isBlock` is `false`.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tisBlock?: boolean;\r\n\t/**\r\n\t * Adjusts all text line-height based on the typography system.\r\n\t */\r\n\tlineHeight?: CSSProperties[ 'lineHeight' ];\r\n\t/**\r\n\t * The `Text` color can be adapted to a background color for optimal readability. `optimizeReadabilityFor` can accept CSS variables, in addition to standard CSS color values (e.g. Hex, RGB, HSL, etc...).\r\n\t */\r\n\toptimizeReadabilityFor?: CSSProperties[ 'color' ];\r\n\t/**\r\n\t * Adjusts text size based on the typography system. `Text` can render a wide range of font sizes, which are automatically calculated and adapted to the typography system. The `size` value can be a system preset, a `number`, or a custom unit value (`string`) such as `30em`.\r\n\t */\r\n\tsize?: CSSProperties[ 'fontSize' ] | TextSize;\r\n\t/**\r\n\t * Enables text truncation. When `truncate` is set, we are able to truncate the long text in a variety of ways. Note: text truncation won't work if the `isBlock` property is set to `true`\r\n\t *\r\n\t * @default false\r\n\t */\r\n\ttruncate?: boolean;\r\n\t/**\r\n\t * Uppercases the text content.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tupperCase?: boolean;\r\n\t/**\r\n\t * Adjusts style variation of the text.\r\n\t */\r\n\tvariant?: TextVariant;\r\n\t/**\r\n\t * Adjusts font-weight of the text.\r\n\t *\r\n\t * @default 'normal'\r\n\t */\r\n\tweight?: CSSProperties[ 'fontWeight' ] | TextWeight;\r\n\t/**\r\n\t * Adjusts letter-spacing of the text.\r\n\t */\r\n\tletterSpacing?: CSSProperties[ 'letterSpacing' ];\r\n\t/**\r\n\t * Letters or words within `Text` can be highlighted using `highlightWords`.\r\n\t */\r\n\thighlightWords?: string[];\r\n}\r\n"],"mappings":"","ignoreList":[]}