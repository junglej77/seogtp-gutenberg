{"version":3,"names":["usePrevious","useEffect","useRef","useComputeControlledOrUncontrolledValue","valueProp","isInitialRenderRef","prevValueProp","prevIsControlledRef","current","isControlled","value","defaultValue","undefined"],"sources":["@wordpress/components/src/toggle-group-control/toggle-group-control/utils.ts"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { usePrevious } from '@wordpress/compose';\r\nimport { useEffect, useRef } from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { ToggleGroupControlProps } from '../types';\r\n\r\ntype ValueProp = ToggleGroupControlProps[ 'value' ];\r\n\r\n/**\r\n * Used to determine, via an internal heuristics, whether an `undefined` value\r\n * received for the `value` prop should be interpreted as the component being\r\n * used in uncontrolled mode, or as an \"empty\" value for controlled mode.\r\n *\r\n * @param valueProp The received `value`\r\n */\r\nexport function useComputeControlledOrUncontrolledValue(\r\n\tvalueProp: ValueProp\r\n): { value: ValueProp; defaultValue: ValueProp } {\r\n\tconst isInitialRenderRef = useRef( true );\r\n\tconst prevValueProp = usePrevious( valueProp );\r\n\tconst prevIsControlledRef = useRef( false );\r\n\r\n\tuseEffect( () => {\r\n\t\tif ( isInitialRenderRef.current ) {\r\n\t\t\tisInitialRenderRef.current = false;\r\n\t\t}\r\n\t}, [] );\r\n\r\n\t// Assume the component is being used in controlled mode on the first re-render\r\n\t// that has a different `valueProp` from the previous render.\r\n\tconst isControlled =\r\n\t\tprevIsControlledRef.current ||\r\n\t\t( ! isInitialRenderRef.current && prevValueProp !== valueProp );\r\n\tuseEffect( () => {\r\n\t\tprevIsControlledRef.current = isControlled;\r\n\t}, [ isControlled ] );\r\n\r\n\tif ( isControlled ) {\r\n\t\t// When in controlled mode, use `''` instead of `undefined`\r\n\t\treturn { value: valueProp ?? '', defaultValue: undefined };\r\n\t}\r\n\r\n\t// When in uncontrolled mode, the `value` should be intended as the initial value\r\n\treturn { value: undefined, defaultValue: valueProp };\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,oBAAoB;AAChD,SAASC,SAAS,EAAEC,MAAM,QAAQ,oBAAoB;;AAEtD;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,uCAAuCA,CACtDC,SAAoB,EAC4B;EAChD,MAAMC,kBAAkB,GAAGH,MAAM,CAAE,IAAK,CAAC;EACzC,MAAMI,aAAa,GAAGN,WAAW,CAAEI,SAAU,CAAC;EAC9C,MAAMG,mBAAmB,GAAGL,MAAM,CAAE,KAAM,CAAC;EAE3CD,SAAS,CAAE,MAAM;IAChB,IAAKI,kBAAkB,CAACG,OAAO,EAAG;MACjCH,kBAAkB,CAACG,OAAO,GAAG,KAAK;IACnC;EACD,CAAC,EAAE,EAAG,CAAC;;EAEP;EACA;EACA,MAAMC,YAAY,GACjBF,mBAAmB,CAACC,OAAO,IACzB,CAAEH,kBAAkB,CAACG,OAAO,IAAIF,aAAa,KAAKF,SAAW;EAChEH,SAAS,CAAE,MAAM;IAChBM,mBAAmB,CAACC,OAAO,GAAGC,YAAY;EAC3C,CAAC,EAAE,CAAEA,YAAY,CAAG,CAAC;EAErB,IAAKA,YAAY,EAAG;IACnB;IACA,OAAO;MAAEC,KAAK,EAAEN,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,EAAE;MAAEO,YAAY,EAAEC;IAAU,CAAC;EAC3D;;EAEA;EACA,OAAO;IAAEF,KAAK,EAAEE,SAAS;IAAED,YAAY,EAAEP;EAAU,CAAC;AACrD","ignoreList":[]}