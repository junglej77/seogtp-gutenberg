{"version":3,"names":[],"sources":["@wordpress/components/src/toggle-group-control/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { ReactNode } from 'react';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { BaseControlProps } from '../base-control/types';\r\nimport type { TooltipProps } from '../tooltip/types';\r\n\r\nexport type ToggleGroupControlOptionBaseProps = {\r\n\tchildren: ReactNode;\r\n\t/**\r\n\t * Style the option as an icon option.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tisIcon?: boolean;\r\n\tvalue: string | number;\r\n\t/**\r\n\t * Whether to display a Tooltip for the control option. If set to `true`, the tooltip will\r\n\t * show the aria-label or the label prop text.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tshowTooltip?: boolean;\r\n};\r\n\r\nexport type ToggleGroupControlOptionIconProps = Pick<\r\n\tToggleGroupControlOptionBaseProps,\r\n\t'value'\r\n> & {\r\n\t/**\r\n\t * Icon displayed as the content of the option. Usually one of the icons from\r\n\t * the `@wordpress/icons` package, or a custom React `<svg>` icon.\r\n\t */\r\n\ticon: JSX.Element;\r\n\t/**\r\n\t * The text to accessibly label the icon option. Will also be shown in a tooltip.\r\n\t */\r\n\tlabel: string;\r\n};\r\n\r\nexport type ToggleGroupControlOptionProps = Pick<\r\n\tToggleGroupControlOptionBaseProps,\r\n\t'value' | 'showTooltip'\r\n> & {\r\n\t/**\r\n\t * Label for the option. If needed, the `aria-label` prop can be used in addition\r\n\t * to specify a different label for assistive technologies.\r\n\t */\r\n\tlabel: string;\r\n};\r\n\r\nexport type WithToolTipProps = {\r\n\t/**\r\n\t * React children\r\n\t */\r\n\tchildren: TooltipProps[ 'children' ];\r\n\t/**\r\n\t * Label for the Tooltip component.\r\n\t */\r\n\ttext?: string;\r\n\t/**\r\n\t * Whether to wrap the control option in a Tooltip component.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tshowTooltip?: boolean;\r\n};\r\n\r\nexport type ToggleGroupControlProps = Pick<\r\n\tBaseControlProps,\r\n\t'help' | '__nextHasNoMarginBottom'\r\n> & {\r\n\t/**\r\n\t * Label for the control.\r\n\t */\r\n\tlabel: string;\r\n\t/**\r\n\t * If true, the label will only be visible to screen readers.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\thideLabelFromVision?: boolean;\r\n\t/**\r\n\t * Determines if segments should be rendered with equal widths.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tisAdaptiveWidth?: boolean;\r\n\t/**\r\n\t * Renders `ToggleGroupControl` as a (CSS) block element, spanning the entire width of\r\n\t * the available space. This is the recommended style when the options are text-based and not icons.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tisBlock?: boolean;\r\n\t/**\r\n\t * Whether an option can be deselected by clicking it again.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tisDeselectable?: boolean;\r\n\t/**\r\n\t * Callback when a segment is selected.\r\n\t */\r\n\tonChange?: ( value: string | number | undefined ) => void;\r\n\t/**\r\n\t * The selected value.\r\n\t */\r\n\tvalue?: string | number;\r\n\t/**\r\n\t * The options to render in the `ToggleGroupControl`, using either the `ToggleGroupControlOption` or\r\n\t * `ToggleGroupControlOptionIcon` components.\r\n\t */\r\n\tchildren: ReactNode;\r\n\t/**\r\n\t * The size variant of the control.\r\n\t *\r\n\t * @default 'default'\r\n\t */\r\n\tsize?: 'default' | '__unstable-large';\r\n\t/**\r\n\t * Start opting into the larger default height that will become the default size in a future version.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\t__next40pxDefaultSize?: boolean;\r\n};\r\n\r\nexport type ToggleGroupControlContextProps = {\r\n\tisDeselectable?: boolean;\r\n\tbaseId: string;\r\n\tisBlock: ToggleGroupControlProps[ 'isBlock' ];\r\n\tsize: ToggleGroupControlProps[ 'size' ];\r\n\tvalue: ToggleGroupControlProps[ 'value' ];\r\n\tsetValue: ( newValue: string | number | undefined ) => void;\r\n};\r\n\r\nexport type ToggleGroupControlMainControlProps = Pick<\r\n\tToggleGroupControlProps,\r\n\t'children' | 'isAdaptiveWidth' | 'label' | 'size' | 'onChange' | 'value'\r\n>;\r\n"],"mappings":"","ignoreList":[]}