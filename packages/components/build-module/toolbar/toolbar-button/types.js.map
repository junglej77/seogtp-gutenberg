{"version":3,"names":[],"sources":["@wordpress/components/src/toolbar/toolbar-button/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { ReactNode } from 'react';\r\n\r\nexport type ToolbarButtonProps = {\r\n\t/**\r\n\t * Children to be rendered inside the button.\r\n\t */\r\n\tchildren?: ReactNode;\r\n\t/**\r\n\t * An optional class name for the button container.\r\n\t */\r\n\tcontainerClassName?: string;\r\n\t/**\r\n\t * Additional props to be passed alongside props.\r\n\t */\r\n\textraProps?: any;\r\n\t/**\r\n\t * Indicates if the button is active.\r\n\t */\r\n\tisActive?: boolean;\r\n\t/**\r\n\t * Indicates if the button is disabled.\r\n\t *\r\n\t * @deprecated Use `disabled` instead.\r\n\t * @ignore\r\n\t */\r\n\tisDisabled?: boolean;\r\n\t/**\r\n\t * An optional subscript for the button.\r\n\t */\r\n\tsubscript?: string;\r\n\t/**\r\n\t * An optional title/label for the button.\r\n\t */\r\n\ttitle?: string;\r\n};\r\n\r\nexport type ToolbarButtonOverriddenProps = {\r\n\t/**\r\n\t * Whether to keep the button focusable when disabled.\r\n\t *\r\n\t * In most cases, it is recommended to set this to `true`. Disabling a control without maintaining focusability\r\n\t * can cause accessibility issues, by hiding their presence from screen reader users,\r\n\t * or by preventing focus from returning to a trigger element.\r\n\t *\r\n\t * Learn more about the [focusability of disabled controls](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#focusabilityofdisabledcontrols)\r\n\t * in the WAI-ARIA Authoring Practices Guide.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\taccessibleWhenDisabled?: boolean;\r\n};\r\n\r\nexport type ToolbarButtonContainerProps = {\r\n\t/**\r\n\t * Children to be rendered inside the button container.\r\n\t */\r\n\tchildren?: ReactNode;\r\n\t/**\r\n\t * An optional class name for the button container.\r\n\t */\r\n\tclassName?: string;\r\n};\r\n"],"mappings":"","ignoreList":[]}