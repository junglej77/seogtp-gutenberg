{"version":3,"names":["clsx","useContext","ToolbarButton","ToolbarGroupContainer","ToolbarGroupCollapsed","ToolbarContext","jsx","_jsx","jsxs","_jsxs","isNestedArray","arr","Array","isArray","ToolbarGroup","controls","children","className","isCollapsed","title","props","accessibleToolbarState","length","finalClassName","controlSets","label","flatMap","controlSet","indexOfSet","map","control","indexOfControl","containerClassName","undefined","join"],"sources":["@wordpress/components/src/toolbar/toolbar-group/index.tsx"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport clsx from 'clsx';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { useContext } from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport ToolbarButton from '../toolbar-button';\r\nimport ToolbarGroupContainer from './toolbar-group-container';\r\nimport ToolbarGroupCollapsed from './toolbar-group-collapsed';\r\nimport ToolbarContext from '../toolbar-context';\r\nimport type { ToolbarGroupProps, ToolbarGroupControls } from './types';\r\n\r\nfunction isNestedArray< T = any >( arr: T[] | T[][] ): arr is T[][] {\r\n\treturn Array.isArray( arr ) && Array.isArray( arr[ 0 ] );\r\n}\r\n\r\n/**\r\n * Renders a collapsible group of controls\r\n *\r\n * The `controls` prop accepts an array of sets. A set is an array of controls.\r\n * Controls have the following shape:\r\n *\r\n * ```\r\n * {\r\n *   icon: string,\r\n *   title: string,\r\n *   subscript: string,\r\n *   onClick: Function,\r\n *   isActive: boolean,\r\n *   isDisabled: boolean\r\n * }\r\n * ```\r\n *\r\n * For convenience it is also possible to pass only an array of controls. It is\r\n * then assumed this is the only set.\r\n *\r\n * Either `controls` or `children` is required, otherwise this components\r\n * renders nothing.\r\n *\r\n * @param props               Component props.\r\n * @param [props.controls]    The controls to render in this toolbar.\r\n * @param [props.children]    Any other things to render inside the toolbar besides the controls.\r\n * @param [props.className]   Class to set on the container div.\r\n * @param [props.isCollapsed] Turns ToolbarGroup into a dropdown menu.\r\n * @param [props.title]       ARIA label for dropdown menu if is collapsed.\r\n */\r\nfunction ToolbarGroup( {\r\n\tcontrols = [],\r\n\tchildren,\r\n\tclassName,\r\n\tisCollapsed,\r\n\ttitle,\r\n\t...props\r\n}: ToolbarGroupProps ) {\r\n\t// It'll contain state if `ToolbarGroup` is being used within\r\n\t// `<Toolbar label=\"label\" />`\r\n\tconst accessibleToolbarState = useContext( ToolbarContext );\r\n\r\n\tif ( ( ! controls || ! controls.length ) && ! children ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst finalClassName = clsx(\r\n\t\t// Unfortunately, there's legacy code referencing to `.components-toolbar`\r\n\t\t// So we can't get rid of it\r\n\t\taccessibleToolbarState\r\n\t\t\t? 'components-toolbar-group'\r\n\t\t\t: 'components-toolbar',\r\n\t\tclassName\r\n\t);\r\n\r\n\t// Normalize controls to nested array of objects (sets of controls)\r\n\tlet controlSets: ToolbarGroupControls[][];\r\n\tif ( isNestedArray( controls ) ) {\r\n\t\tcontrolSets = controls;\r\n\t} else {\r\n\t\tcontrolSets = [ controls ];\r\n\t}\r\n\r\n\tif ( isCollapsed ) {\r\n\t\treturn (\r\n\t\t\t<ToolbarGroupCollapsed\r\n\t\t\t\tlabel={ title }\r\n\t\t\t\tcontrols={ controlSets }\r\n\t\t\t\tclassName={ finalClassName }\r\n\t\t\t\tchildren={ children }\r\n\t\t\t\t{ ...props }\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<ToolbarGroupContainer className={ finalClassName } { ...props }>\r\n\t\t\t{ controlSets?.flatMap( ( controlSet, indexOfSet ) =>\r\n\t\t\t\tcontrolSet.map( ( control, indexOfControl: number ) => (\r\n\t\t\t\t\t<ToolbarButton\r\n\t\t\t\t\t\tkey={ [ indexOfSet, indexOfControl ].join() }\r\n\t\t\t\t\t\tcontainerClassName={\r\n\t\t\t\t\t\t\tindexOfSet > 0 && indexOfControl === 0\r\n\t\t\t\t\t\t\t\t? 'has-left-divider'\r\n\t\t\t\t\t\t\t\t: undefined\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{ ...control }\r\n\t\t\t\t\t/>\r\n\t\t\t\t) )\r\n\t\t\t) }\r\n\t\t\t{ children }\r\n\t\t</ToolbarGroupContainer>\r\n\t);\r\n}\r\n\r\nexport default ToolbarGroup;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,IAAI,MAAM,MAAM;;AAEvB;AACA;AACA;AACA,SAASC,UAAU,QAAQ,oBAAoB;;AAE/C;AACA;AACA;AACA,OAAOC,aAAa,MAAM,mBAAmB;AAC7C,OAAOC,qBAAqB,MAAM,2BAA2B;AAC7D,OAAOC,qBAAqB,MAAM,2BAA2B;AAC7D,OAAOC,cAAc,MAAM,oBAAoB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGhD,SAASC,aAAaA,CAAaC,GAAgB,EAAiB;EACnE,OAAOC,KAAK,CAACC,OAAO,CAAEF,GAAI,CAAC,IAAIC,KAAK,CAACC,OAAO,CAAEF,GAAG,CAAE,CAAC,CAAG,CAAC;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,YAAYA,CAAE;EACtBC,QAAQ,GAAG,EAAE;EACbC,QAAQ;EACRC,SAAS;EACTC,WAAW;EACXC,KAAK;EACL,GAAGC;AACe,CAAC,EAAG;EACtB;EACA;EACA,MAAMC,sBAAsB,GAAGpB,UAAU,CAAEI,cAAe,CAAC;EAE3D,IAAK,CAAE,CAAEU,QAAQ,IAAI,CAAEA,QAAQ,CAACO,MAAM,KAAM,CAAEN,QAAQ,EAAG;IACxD,OAAO,IAAI;EACZ;EAEA,MAAMO,cAAc,GAAGvB,IAAI;EAC1B;EACA;EACAqB,sBAAsB,GACnB,0BAA0B,GAC1B,oBAAoB,EACvBJ,SACD,CAAC;;EAED;EACA,IAAIO,WAAqC;EACzC,IAAKd,aAAa,CAAEK,QAAS,CAAC,EAAG;IAChCS,WAAW,GAAGT,QAAQ;EACvB,CAAC,MAAM;IACNS,WAAW,GAAG,CAAET,QAAQ,CAAE;EAC3B;EAEA,IAAKG,WAAW,EAAG;IAClB,oBACCX,IAAA,CAACH,qBAAqB;MACrBqB,KAAK,EAAGN,KAAO;MACfJ,QAAQ,EAAGS,WAAa;MACxBP,SAAS,EAAGM,cAAgB;MAC5BP,QAAQ,EAAGA,QAAU;MAAA,GAChBI;IAAK,CACV,CAAC;EAEJ;EAEA,oBACCX,KAAA,CAACN,qBAAqB;IAACc,SAAS,EAAGM,cAAgB;IAAA,GAAMH,KAAK;IAAAJ,QAAA,GAC3DQ,WAAW,EAAEE,OAAO,CAAE,CAAEC,UAAU,EAAEC,UAAU,KAC/CD,UAAU,CAACE,GAAG,CAAE,CAAEC,OAAO,EAAEC,cAAsB,kBAChDxB,IAAA,CAACL,aAAa;MAEb8B,kBAAkB,EACjBJ,UAAU,GAAG,CAAC,IAAIG,cAAc,KAAK,CAAC,GACnC,kBAAkB,GAClBE,SACH;MAAA,GACIH;IAAO,GANN,CAAEF,UAAU,EAAEG,cAAc,CAAE,CAACG,IAAI,CAAC,CAO1C,CACA,CACH,CAAC,EACClB,QAAQ;EAAA,CACY,CAAC;AAE1B;AAEA,eAAeF,YAAY","ignoreList":[]}