{"version":3,"names":[],"sources":["@wordpress/components/src/tools-panel/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { ReactNode } from 'react';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { HeadingSize } from '../heading/types';\r\nimport type { DropdownMenu } from '../dropdown-menu';\r\n\r\nexport type ResetAllFilter = ( attributes?: any ) => any;\r\ntype ResetAll = ( filters?: ResetAllFilter[] ) => void;\r\n\r\nexport type ToolsPanelProps = {\r\n\t/**\r\n\t * The child elements.\r\n\t */\r\n\tchildren: ReactNode;\r\n\t/**\r\n\t * The dropdown menu props to configure the panel's `DropdownMenu`.\r\n\t */\r\n\tdropdownMenuProps?: React.ComponentProps< typeof DropdownMenu >;\r\n\t/**\r\n\t * Flags that the items in this ToolsPanel will be contained within an inner\r\n\t * wrapper element allowing the panel to lay them out accordingly.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\thasInnerWrapper?: boolean;\r\n\t/**\r\n\t * The heading level of the panel's header.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\theadingLevel?: HeadingSize;\r\n\t/**\r\n\t * Text to be displayed within the panel's header and as the `aria-label`\r\n\t * for the panel's dropdown menu.\r\n\t */\r\n\tlabel: string;\r\n\t/**\r\n\t * If a `panelId` is set, it is passed through the `ToolsPanelContext` and\r\n\t * used to restrict panel items. When a `panelId` is set, items can only\r\n\t * register themselves if the `panelId` is explicitly `null` or the item's\r\n\t * `panelId` matches exactly.\r\n\t */\r\n\tpanelId?: string | null;\r\n\t/**\r\n\t * A function to call when the `Reset all` menu option is selected. As an\r\n\t * argument, it receives an array containing the `resetAllFilter` callbacks\r\n\t * of all the valid registered `ToolsPanelItems`.\r\n\t */\r\n\tresetAll: ResetAll;\r\n\t/**\r\n\t * Advises the `ToolsPanel` that its child `ToolsPanelItem`s should render\r\n\t * placeholder content instead of null when they are toggled off and hidden.\r\n\t * Note that placeholder items won't apply the `className` that would be\r\n\t * normally applied to a visible `ToolsPanelItem` via the `className` prop.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tshouldRenderPlaceholderItems?: boolean;\r\n\t/**\r\n\t * Experimental prop allowing for a custom CSS class to be applied to the\r\n\t * first visible `ToolsPanelItem` within the `ToolsPanel`.\r\n\t */\r\n\t__experimentalFirstVisibleItemClass?: string;\r\n\t/**\r\n\t * Experimental prop allowing for a custom CSS class to be applied to the\r\n\t * last visible `ToolsPanelItem` within the `ToolsPanel`.\r\n\t */\r\n\t__experimentalLastVisibleItemClass?: string;\r\n};\r\n\r\nexport type ToolsPanelHeaderProps = {\r\n\t/**\r\n\t * The dropdown menu props to configure the panel's `DropdownMenu`.\r\n\t */\r\n\tdropdownMenuProps?: React.ComponentProps< typeof DropdownMenu >;\r\n\t/**\r\n\t * The heading level of the panel's header.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\theadingLevel?: HeadingSize;\r\n\t/**\r\n\t * Text to be displayed within the panel header. It is also passed along as\r\n\t * the `label` for the panel header's `DropdownMenu`.\r\n\t */\r\n\tlabel: string;\r\n\t/**\r\n\t * The `resetAll` prop provides the callback to execute when the \"Reset all\"\r\n\t * menu item is selected. Its purpose is to facilitate resetting any control\r\n\t * values for items contained within this header's panel.\r\n\t */\r\n\tresetAll: ResetAll;\r\n\t/**\r\n\t * This is executed when an individual control's menu item is toggled. It\r\n\t * will update the panel's menu item state and call the panel item's\r\n\t * `onSelect` or `onDeselect` callbacks as appropriate.\r\n\t */\r\n\ttoggleItem: ( label: string ) => void;\r\n};\r\n\r\nexport type ToolsPanelItem = {\r\n\t/**\r\n\t * This is called when building the `ToolsPanel` menu to determine the\r\n\t * item's initial checked state.\r\n\t */\r\n\thasValue: () => boolean;\r\n\t/**\r\n\t * This prop identifies the current item as being displayed by default. This\r\n\t * means it will show regardless of whether it has a value set or is toggled\r\n\t * on in the panel's menu.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tisShownByDefault?: boolean;\r\n\t/**\r\n\t * The supplied label is dual purpose. It is used as:\r\n\t * 1. the human-readable label for the panel's dropdown menu\r\n\t * 2. a key to locate the corresponding item in the panel's menu context to\r\n\t * determine if the panel item should be displayed.\r\n\t * A panel item's `label` should be unique among all items within a single\r\n\t * panel.\r\n\t */\r\n\tlabel: string;\r\n\t/**\r\n\t * Panel items will ensure they are only registering with their intended panel\r\n\t * by comparing the `panelId` props set on both the item and the panel itself,\r\n\t * or if the `panelId` is explicitly `null`. This allows items to be injected\r\n\t * from a shared source.\r\n\t */\r\n\tpanelId?: string | null;\r\n};\r\n\r\nexport type ToolsPanelItemProps = ToolsPanelItem & {\r\n\t/**\r\n\t * The child elements.\r\n\t */\r\n\tchildren?: ReactNode;\r\n\t/**\r\n\t * Called when this item is deselected in the `ToolsPanel` menu. This is\r\n\t * normally used to reset the panel item control's value.\r\n\t */\r\n\tonDeselect?: () => void;\r\n\t/**\r\n\t * A callback to take action when this item is selected in the `ToolsPanel`\r\n\t * menu.\r\n\t */\r\n\tonSelect?: () => void;\r\n\r\n\t/**\r\n\t * A `ToolsPanel` will collect each item's `resetAllFilter` and pass an\r\n\t * array of these functions through to the panel's `resetAll` callback. They\r\n\t * can then be iterated over to perform additional tasks.\r\n\t *\r\n\t * @default noop\r\n\t */\r\n\tresetAllFilter?: ResetAllFilter;\r\n};\r\n\r\nexport type ToolsPanelMenuItemKey = 'default' | 'optional';\r\n\r\nexport type ToolsPanelMenuItems = {\r\n\t[ menuItemKey in ToolsPanelMenuItemKey ]: { [ key: string ]: boolean };\r\n};\r\n\r\nexport type ToolsPanelContext = {\r\n\tpanelId?: string | null;\r\n\tmenuItems: ToolsPanelMenuItems;\r\n\thasMenuItems: boolean;\r\n\tregisterPanelItem: ( item: ToolsPanelItem ) => void;\r\n\tderegisterPanelItem: ( label: string ) => void;\r\n\tregisterResetAllFilter: ( filter: ResetAllFilter ) => void;\r\n\tderegisterResetAllFilter: ( filter: ResetAllFilter ) => void;\r\n\tflagItemCustomization: (\r\n\t\tvalue: boolean,\r\n\t\tlabel: string,\r\n\t\tgroup?: ToolsPanelMenuItemKey\r\n\t) => void;\r\n\tisResetting: boolean;\r\n\tshouldRenderPlaceholderItems: boolean;\r\n\tareAllOptionalControlsHidden: boolean;\r\n\tfirstDisplayedItem?: string;\r\n\tlastDisplayedItem?: string;\r\n\t__experimentalFirstVisibleItemClass?: string;\r\n\t__experimentalLastVisibleItemClass?: string;\r\n};\r\n\r\nexport type ToolsPanelControlsGroupProps = {\r\n\titemClassName?: string;\r\n\titems: [ string, boolean ][];\r\n\ttoggleItem: ( label: string ) => void;\r\n};\r\n\r\nexport type ToolsPanelMenuItemsConfig = {\r\n\tpanelItems: ToolsPanelItem[];\r\n\tshouldReset: boolean;\r\n\tcurrentMenuItems?: ToolsPanelMenuItems;\r\n\tmenuItemOrder: string[];\r\n};\r\n"],"mappings":"","ignoreList":[]}