{"version":3,"names":[],"sources":["@wordpress/components/src/unit-control/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { FocusEventHandler } from 'react';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type {\r\n\tInputChangeCallback,\r\n\tInputControlProps,\r\n} from '../input-control/types';\r\nimport type { NumberControlProps } from '../number-control/types';\r\n\r\nexport type SelectSize = 'default' | 'small';\r\n\r\nexport type WPUnitControlUnit = {\r\n\t/**\r\n\t * The value for the unit, used in a CSS value (e.g `px`).\r\n\t */\r\n\tvalue: string;\r\n\t/**\r\n\t * The label used in a dropdown selector for the unit.\r\n\t */\r\n\tlabel: string;\r\n\t/**\r\n\t * Default value (quantity) for the unit, used when switching units.\r\n\t */\r\n\tdefault?: number;\r\n\t/**\r\n\t * An accessible label used by screen readers.\r\n\t */\r\n\ta11yLabel?: string;\r\n\t/**\r\n\t * A step value used when incrementing/decrementing the value.\r\n\t */\r\n\tstep?: number;\r\n};\r\n\r\nexport type UnitControlOnChangeCallback = InputChangeCallback< {\r\n\tdata?: WPUnitControlUnit;\r\n} >;\r\n\r\nexport type UnitSelectControlProps = {\r\n\t/**\r\n\t * Whether the control can be focused via keyboard navigation.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tisUnitSelectTabbable?: boolean;\r\n\t/**\r\n\t * A callback function invoked when the value is changed.\r\n\t */\r\n\tonChange?: UnitControlOnChangeCallback;\r\n\t/**\r\n\t * The size of the unit select.\r\n\t */\r\n\tsize?: SelectSize;\r\n\t/**\r\n\t * Current unit.\r\n\t */\r\n\tunit?: string;\r\n\t/**\r\n\t * Available units to select from.\r\n\t *\r\n\t * @default CSS_UNITS\r\n\t */\r\n\tunits?: WPUnitControlUnit[];\r\n};\r\n\r\nexport type UnitControlProps = Pick< InputControlProps, 'size' > &\r\n\tOmit< UnitSelectControlProps, 'size' | 'unit' > &\r\n\tOmit< NumberControlProps, 'spinControls' | 'suffix' | 'type' > & {\r\n\t\t/**\r\n\t\t * If `true`, the unit `<select>` is hidden.\r\n\t\t *\r\n\t\t * @default false\r\n\t\t */\r\n\t\tdisableUnits?: boolean;\r\n\t\t/**\r\n\t\t * If `true`, and the selected unit provides a `default` value, this value is set\r\n\t\t * when changing units.\r\n\t\t *\r\n\t\t * @default false\r\n\t\t */\r\n\t\tisResetValueOnUnitChange?: boolean;\r\n\t\t/**\r\n\t\t * Callback when the `unit` changes.\r\n\t\t */\r\n\t\tonUnitChange?: UnitControlOnChangeCallback;\r\n\t\t/**\r\n\t\t * Current unit. _Note: this prop is deprecated. Instead, provide a unit with a value through the `value` prop._\r\n\t\t *\r\n\t\t * @deprecated\r\n\t\t */\r\n\t\tunit?: string;\r\n\t\t/**\r\n\t\t * Current value. If passed as a string, the current unit will be inferred from this value.\r\n\t\t * For example, a `value` of \"50%\" will set the current unit to `%`.\r\n\t\t */\r\n\t\tvalue?: string | number;\r\n\t\t/**\r\n\t\t * Callback when either the quantity or the unit inputs lose focus.\r\n\t\t */\r\n\t\tonBlur?: FocusEventHandler< HTMLInputElement | HTMLSelectElement >;\r\n\t\t/**\r\n\t\t * Callback when either the quantity or the unit inputs gains focus.\r\n\t\t */\r\n\t\tonFocus?: FocusEventHandler< HTMLInputElement | HTMLSelectElement >;\r\n\t};\r\n"],"mappings":"","ignoreList":[]}