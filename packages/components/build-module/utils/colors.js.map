{"version":3,"names":["memoize","colord","extend","namesPlugin","colorComputationNode","rgba","hexValue","alpha","toRgbString","getColorComputationNode","document","el","createElement","setAttribute","body","appendChild","isColor","value","test","isValid","_getComputedBackgroundColor","backgroundColor","includes","style","background","computedColor","window","getComputedStyle","getComputedBackgroundColor","getOptimalTextColor","isLight","getOptimalTextShade","result"],"sources":["@wordpress/components/src/utils/colors.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport memoize from 'memize';\r\nimport { colord, extend } from 'colord';\r\nimport namesPlugin from 'colord/plugins/names';\r\n\r\n/** @type {HTMLDivElement} */\r\nlet colorComputationNode;\r\n\r\nextend( [ namesPlugin ] );\r\n\r\n/**\r\n * Generating a CSS compliant rgba() color value.\r\n *\r\n * @param {string} hexValue The hex value to convert to rgba().\r\n * @param {number} alpha    The alpha value for opacity.\r\n * @return {string} The converted rgba() color value.\r\n *\r\n * @example\r\n * rgba( '#000000', 0.5 )\r\n * // rgba(0, 0, 0, 0.5)\r\n */\r\nexport function rgba( hexValue = '', alpha = 1 ) {\r\n\treturn colord( hexValue ).alpha( alpha ).toRgbString();\r\n}\r\n\r\n/**\r\n * @return {HTMLDivElement | undefined} The HTML element for color computation.\r\n */\r\nfunction getColorComputationNode() {\r\n\tif ( typeof document === 'undefined' ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif ( ! colorComputationNode ) {\r\n\t\t// Create a temporary element for style computation.\r\n\t\tconst el = document.createElement( 'div' );\r\n\t\tel.setAttribute( 'data-g2-color-computation-node', '' );\r\n\t\t// Inject for window computed style.\r\n\t\tdocument.body.appendChild( el );\r\n\t\tcolorComputationNode = el;\r\n\t}\r\n\r\n\treturn colorComputationNode;\r\n}\r\n\r\n/**\r\n * @param {string | unknown} value\r\n *\r\n * @return {boolean} Whether the value is a valid color.\r\n */\r\nfunction isColor( value ) {\r\n\tif ( typeof value !== 'string' ) {\r\n\t\treturn false;\r\n\t}\r\n\tconst test = colord( value );\r\n\r\n\treturn test.isValid();\r\n}\r\n\r\n/**\r\n * Retrieves the computed background color. This is useful for getting the\r\n * value of a CSS variable color.\r\n *\r\n * @param {string | unknown} backgroundColor The background color to compute.\r\n *\r\n * @return {string} The computed background color.\r\n */\r\nfunction _getComputedBackgroundColor( backgroundColor ) {\r\n\tif ( typeof backgroundColor !== 'string' ) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\tif ( isColor( backgroundColor ) ) {\r\n\t\treturn backgroundColor;\r\n\t}\r\n\r\n\tif ( ! backgroundColor.includes( 'var(' ) ) {\r\n\t\treturn '';\r\n\t}\r\n\tif ( typeof document === 'undefined' ) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\t// Attempts to gracefully handle CSS variables color values.\r\n\tconst el = getColorComputationNode();\r\n\tif ( ! el ) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\tel.style.background = backgroundColor;\r\n\t// Grab the style.\r\n\tconst computedColor = window?.getComputedStyle( el ).background;\r\n\t// Reset.\r\n\tel.style.background = '';\r\n\r\n\treturn computedColor || '';\r\n}\r\n\r\nconst getComputedBackgroundColor = memoize( _getComputedBackgroundColor );\r\n\r\n/**\r\n * Get the text shade optimized for readability, based on a background color.\r\n *\r\n * @param {string | unknown} backgroundColor The background color.\r\n *\r\n * @return {string} The optimized text color (black or white).\r\n */\r\nexport function getOptimalTextColor( backgroundColor ) {\r\n\tconst background = getComputedBackgroundColor( backgroundColor );\r\n\r\n\treturn colord( background ).isLight() ? '#000000' : '#ffffff';\r\n}\r\n\r\n/**\r\n * Get the text shade optimized for readability, based on a background color.\r\n *\r\n * @param {string | unknown} backgroundColor The background color.\r\n *\r\n * @return {string} The optimized text shade (dark or light).\r\n */\r\nexport function getOptimalTextShade( backgroundColor ) {\r\n\tconst result = getOptimalTextColor( backgroundColor );\r\n\r\n\treturn result === '#000000' ? 'dark' : 'light';\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,OAAO,MAAM,QAAQ;AAC5B,SAASC,MAAM,EAAEC,MAAM,QAAQ,QAAQ;AACvC,OAAOC,WAAW,MAAM,sBAAsB;;AAE9C;AACA,IAAIC,oBAAoB;AAExBF,MAAM,CAAE,CAAEC,WAAW,CAAG,CAAC;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,IAAIA,CAAEC,QAAQ,GAAG,EAAE,EAAEC,KAAK,GAAG,CAAC,EAAG;EAChD,OAAON,MAAM,CAAEK,QAAS,CAAC,CAACC,KAAK,CAAEA,KAAM,CAAC,CAACC,WAAW,CAAC,CAAC;AACvD;;AAEA;AACA;AACA;AACA,SAASC,uBAAuBA,CAAA,EAAG;EAClC,IAAK,OAAOC,QAAQ,KAAK,WAAW,EAAG;IACtC;EACD;EAEA,IAAK,CAAEN,oBAAoB,EAAG;IAC7B;IACA,MAAMO,EAAE,GAAGD,QAAQ,CAACE,aAAa,CAAE,KAAM,CAAC;IAC1CD,EAAE,CAACE,YAAY,CAAE,gCAAgC,EAAE,EAAG,CAAC;IACvD;IACAH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAAEJ,EAAG,CAAC;IAC/BP,oBAAoB,GAAGO,EAAE;EAC1B;EAEA,OAAOP,oBAAoB;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASY,OAAOA,CAAEC,KAAK,EAAG;EACzB,IAAK,OAAOA,KAAK,KAAK,QAAQ,EAAG;IAChC,OAAO,KAAK;EACb;EACA,MAAMC,IAAI,GAAGjB,MAAM,CAAEgB,KAAM,CAAC;EAE5B,OAAOC,IAAI,CAACC,OAAO,CAAC,CAAC;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,2BAA2BA,CAAEC,eAAe,EAAG;EACvD,IAAK,OAAOA,eAAe,KAAK,QAAQ,EAAG;IAC1C,OAAO,EAAE;EACV;EAEA,IAAKL,OAAO,CAAEK,eAAgB,CAAC,EAAG;IACjC,OAAOA,eAAe;EACvB;EAEA,IAAK,CAAEA,eAAe,CAACC,QAAQ,CAAE,MAAO,CAAC,EAAG;IAC3C,OAAO,EAAE;EACV;EACA,IAAK,OAAOZ,QAAQ,KAAK,WAAW,EAAG;IACtC,OAAO,EAAE;EACV;;EAEA;EACA,MAAMC,EAAE,GAAGF,uBAAuB,CAAC,CAAC;EACpC,IAAK,CAAEE,EAAE,EAAG;IACX,OAAO,EAAE;EACV;EAEAA,EAAE,CAACY,KAAK,CAACC,UAAU,GAAGH,eAAe;EACrC;EACA,MAAMI,aAAa,GAAGC,MAAM,EAAEC,gBAAgB,CAAEhB,EAAG,CAAC,CAACa,UAAU;EAC/D;EACAb,EAAE,CAACY,KAAK,CAACC,UAAU,GAAG,EAAE;EAExB,OAAOC,aAAa,IAAI,EAAE;AAC3B;AAEA,MAAMG,0BAA0B,GAAG5B,OAAO,CAAEoB,2BAA4B,CAAC;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,mBAAmBA,CAAER,eAAe,EAAG;EACtD,MAAMG,UAAU,GAAGI,0BAA0B,CAAEP,eAAgB,CAAC;EAEhE,OAAOpB,MAAM,CAAEuB,UAAW,CAAC,CAACM,OAAO,CAAC,CAAC,GAAG,SAAS,GAAG,SAAS;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAAEV,eAAe,EAAG;EACtD,MAAMW,MAAM,GAAGH,mBAAmB,CAAER,eAAgB,CAAC;EAErD,OAAOW,MAAM,KAAK,SAAS,GAAG,MAAM,GAAG,OAAO;AAC/C","ignoreList":[]}