{"version":3,"names":["useRef","useEffect","useEvent","useOnValueUpdate","value","onUpdate","previousValueRef","updateCallbackEvent","current","previousValue"],"sources":["@wordpress/components/src/utils/hooks/use-on-value-update.ts"],"sourcesContent":["/* eslint-disable jsdoc/require-param */\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { useRef, useEffect } from '@wordpress/element';\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { useEvent } from './use-event';\r\n\r\n/**\r\n * Context object for the `onUpdate` callback of `useOnValueUpdate`.\r\n */\r\nexport type ValueUpdateContext< T > = {\r\n\tpreviousValue: T;\r\n};\r\n\r\n/**\r\n * Calls the `onUpdate` callback when the `value` changes.\r\n */\r\nexport function useOnValueUpdate< T >(\r\n\t/**\r\n\t * The value to watch for changes.\r\n\t */\r\n\tvalue: T,\r\n\t/**\r\n\t * Callback to fire when the value changes.\r\n\t */\r\n\tonUpdate: ( context: ValueUpdateContext< T > ) => void\r\n) {\r\n\tconst previousValueRef = useRef( value );\r\n\tconst updateCallbackEvent = useEvent( onUpdate );\r\n\tuseEffect( () => {\r\n\t\tif ( previousValueRef.current !== value ) {\r\n\t\t\tupdateCallbackEvent( {\r\n\t\t\t\tpreviousValue: previousValueRef.current,\r\n\t\t\t} );\r\n\t\t\tpreviousValueRef.current = value;\r\n\t\t}\r\n\t}, [ updateCallbackEvent, value ] );\r\n}\r\n/* eslint-enable jsdoc/require-param */\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,MAAM,EAAEC,SAAS,QAAQ,oBAAoB;AACtD;AACA;AACA;AACA,SAASC,QAAQ,QAAQ,aAAa;;AAEtC;AACA;AACA;;AAKA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA;AAC/B;AACD;AACA;AACCC,KAAQ;AACR;AACD;AACA;AACCC,QAAsD,EACrD;EACD,MAAMC,gBAAgB,GAAGN,MAAM,CAAEI,KAAM,CAAC;EACxC,MAAMG,mBAAmB,GAAGL,QAAQ,CAAEG,QAAS,CAAC;EAChDJ,SAAS,CAAE,MAAM;IAChB,IAAKK,gBAAgB,CAACE,OAAO,KAAKJ,KAAK,EAAG;MACzCG,mBAAmB,CAAE;QACpBE,aAAa,EAAEH,gBAAgB,CAACE;MACjC,CAAE,CAAC;MACHF,gBAAgB,CAACE,OAAO,GAAGJ,KAAK;IACjC;EACD,CAAC,EAAE,CAAEG,mBAAmB,EAAEH,KAAK,CAAG,CAAC;AACpC;AACA","ignoreList":[]}