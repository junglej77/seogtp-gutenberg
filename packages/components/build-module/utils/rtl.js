/**
 * External dependencies
 */
import { css } from '@emotion/react';

/**
 * WordPress dependencies
 */
import { isRTL } from '@wordpress/i18n';
const LOWER_LEFT_REGEXP = new RegExp(/-left/g);
const LOWER_RIGHT_REGEXP = new RegExp(/-right/g);
const UPPER_LEFT_REGEXP = new RegExp(/Left/g);
const UPPER_RIGHT_REGEXP = new RegExp(/Right/g);

/**
 * Flips a CSS property from left <-> right.
 *
 * @param {string} key The CSS property name.
 *
 * @return {string} The flipped CSS property name, if applicable.
 */
function getConvertedKey(key) {
  if (key === 'left') {
    return 'right';
  }
  if (key === 'right') {
    return 'left';
  }
  if (LOWER_LEFT_REGEXP.test(key)) {
    return key.replace(LOWER_LEFT_REGEXP, '-right');
  }
  if (LOWER_RIGHT_REGEXP.test(key)) {
    return key.replace(LOWER_RIGHT_REGEXP, '-left');
  }
  if (UPPER_LEFT_REGEXP.test(key)) {
    return key.replace(UPPER_LEFT_REGEXP, 'Right');
  }
  if (UPPER_RIGHT_REGEXP.test(key)) {
    return key.replace(UPPER_RIGHT_REGEXP, 'Left');
  }
  return key;
}

/**
 * An incredibly basic ltr -> rtl converter for style properties
 *
 * @param {import('react').CSSProperties} ltrStyles
 *
 * @return {import('react').CSSProperties} Converted ltr -> rtl styles
 */
export const convertLTRToRTL = (ltrStyles = {}) => {
  return Object.fromEntries(Object.entries(ltrStyles).map(([key, value]) => [getConvertedKey(key), value]));
};

/**
 * A higher-order function that create an incredibly basic ltr -> rtl style converter for CSS objects.
 *
 * @param {import('react').CSSProperties} ltrStyles   Ltr styles. Converts and renders from ltr -> rtl styles, if applicable.
 * @param {import('react').CSSProperties} [rtlStyles] Rtl styles. Renders if provided.
 *
 * @return {() => import('@emotion/react').SerializedStyles} A function to output CSS styles for Emotion's renderer
 */
export function rtl(ltrStyles = {}, rtlStyles) {
  return () => {
    if (rtlStyles) {
      // @ts-ignore: `css` types are wrong, it can accept an object: https://emotion.sh/docs/object-styles#with-css
      return isRTL() ? /*#__PURE__*/css(rtlStyles, process.env.NODE_ENV === "production" ? "" : ";label:rtl;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdXRpbHMvcnRsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThFb0IiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy91dGlscy9ydGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXHJcbiAqL1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XHJcblxyXG4vKipcclxuICogV29yZFByZXNzIGRlcGVuZGVuY2llc1xyXG4gKi9cclxuaW1wb3J0IHsgaXNSVEwgfSBmcm9tICdAd29yZHByZXNzL2kxOG4nO1xyXG5cclxuY29uc3QgTE9XRVJfTEVGVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvLWxlZnQvZyApO1xyXG5jb25zdCBMT1dFUl9SSUdIVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvLXJpZ2h0L2cgKTtcclxuY29uc3QgVVBQRVJfTEVGVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvTGVmdC9nICk7XHJcbmNvbnN0IFVQUEVSX1JJR0hUX1JFR0VYUCA9IG5ldyBSZWdFeHAoIC9SaWdodC9nICk7XHJcblxyXG4vKipcclxuICogRmxpcHMgYSBDU1MgcHJvcGVydHkgZnJvbSBsZWZ0IDwtPiByaWdodC5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgQ1NTIHByb3BlcnR5IG5hbWUuXHJcbiAqXHJcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZsaXBwZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGlmIGFwcGxpY2FibGUuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDb252ZXJ0ZWRLZXkoIGtleSApIHtcclxuXHRpZiAoIGtleSA9PT0gJ2xlZnQnICkge1xyXG5cdFx0cmV0dXJuICdyaWdodCc7XHJcblx0fVxyXG5cclxuXHRpZiAoIGtleSA9PT0gJ3JpZ2h0JyApIHtcclxuXHRcdHJldHVybiAnbGVmdCc7XHJcblx0fVxyXG5cclxuXHRpZiAoIExPV0VSX0xFRlRfUkVHRVhQLnRlc3QoIGtleSApICkge1xyXG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBMT1dFUl9MRUZUX1JFR0VYUCwgJy1yaWdodCcgKTtcclxuXHR9XHJcblxyXG5cdGlmICggTE9XRVJfUklHSFRfUkVHRVhQLnRlc3QoIGtleSApICkge1xyXG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBMT1dFUl9SSUdIVF9SRUdFWFAsICctbGVmdCcgKTtcclxuXHR9XHJcblxyXG5cdGlmICggVVBQRVJfTEVGVF9SRUdFWFAudGVzdCgga2V5ICkgKSB7XHJcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIFVQUEVSX0xFRlRfUkVHRVhQLCAnUmlnaHQnICk7XHJcblx0fVxyXG5cclxuXHRpZiAoIFVQUEVSX1JJR0hUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcclxuXHRcdHJldHVybiBrZXkucmVwbGFjZSggVVBQRVJfUklHSFRfUkVHRVhQLCAnTGVmdCcgKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBrZXk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBpbmNyZWRpYmx5IGJhc2ljIGx0ciAtPiBydGwgY29udmVydGVyIGZvciBzdHlsZSBwcm9wZXJ0aWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7aW1wb3J0KCdyZWFjdCcpLkNTU1Byb3BlcnRpZXN9IGx0clN0eWxlc1xyXG4gKlxyXG4gKiBAcmV0dXJuIHtpbXBvcnQoJ3JlYWN0JykuQ1NTUHJvcGVydGllc30gQ29udmVydGVkIGx0ciAtPiBydGwgc3R5bGVzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY29udmVydExUUlRvUlRMID0gKCBsdHJTdHlsZXMgPSB7fSApID0+IHtcclxuXHRyZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKFxyXG5cdFx0T2JqZWN0LmVudHJpZXMoIGx0clN0eWxlcyApLm1hcCggKCBbIGtleSwgdmFsdWUgXSApID0+IFtcclxuXHRcdFx0Z2V0Q29udmVydGVkS2V5KCBrZXkgKSxcclxuXHRcdFx0dmFsdWUsXHJcblx0XHRdIClcclxuXHQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEEgaGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHRoYXQgY3JlYXRlIGFuIGluY3JlZGlibHkgYmFzaWMgbHRyIC0+IHJ0bCBzdHlsZSBjb252ZXJ0ZXIgZm9yIENTUyBvYmplY3RzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBsdHJTdHlsZXMgICBMdHIgc3R5bGVzLiBDb252ZXJ0cyBhbmQgcmVuZGVycyBmcm9tIGx0ciAtPiBydGwgc3R5bGVzLCBpZiBhcHBsaWNhYmxlLlxyXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBbcnRsU3R5bGVzXSBSdGwgc3R5bGVzLiBSZW5kZXJzIGlmIHByb3ZpZGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHsoKSA9PiBpbXBvcnQoJ0BlbW90aW9uL3JlYWN0JykuU2VyaWFsaXplZFN0eWxlc30gQSBmdW5jdGlvbiB0byBvdXRwdXQgQ1NTIHN0eWxlcyBmb3IgRW1vdGlvbidzIHJlbmRlcmVyXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcnRsKCBsdHJTdHlsZXMgPSB7fSwgcnRsU3R5bGVzICkge1xyXG5cdHJldHVybiAoKSA9PiB7XHJcblx0XHRpZiAoIHJ0bFN0eWxlcyApIHtcclxuXHRcdFx0Ly8gQHRzLWlnbm9yZTogYGNzc2AgdHlwZXMgYXJlIHdyb25nLCBpdCBjYW4gYWNjZXB0IGFuIG9iamVjdDogaHR0cHM6Ly9lbW90aW9uLnNoL2RvY3Mvb2JqZWN0LXN0eWxlcyN3aXRoLWNzc1xyXG5cdFx0XHRyZXR1cm4gaXNSVEwoKSA/IGNzcyggcnRsU3R5bGVzICkgOiBjc3MoIGx0clN0eWxlcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEB0cy1pZ25vcmU6IGBjc3NgIHR5cGVzIGFyZSB3cm9uZywgaXQgY2FuIGFjY2VwdCBhbiBvYmplY3Q6IGh0dHBzOi8vZW1vdGlvbi5zaC9kb2NzL29iamVjdC1zdHlsZXMjd2l0aC1jc3NcclxuXHRcdHJldHVybiBpc1JUTCgpID8gY3NzKCBjb252ZXJ0TFRSVG9SVEwoIGx0clN0eWxlcyApICkgOiBjc3MoIGx0clN0eWxlcyApO1xyXG5cdH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxsIHRoaXMgaW4gdGhlIGB1c2VNZW1vYCBkZXBlbmRlbmN5IGFycmF5IHRvIGVuc3VyZSB0aGF0IHN1YnNlcXVlbnQgcmVuZGVycyB3aWxsXHJcbiAqIGNhdXNlIHJ0bCBzdHlsZXMgdG8gdXBkYXRlIGJhc2VkIG9uIHRoZSBgaXNSVExgIHJldHVybiB2YWx1ZSBldmVuIGlmIGFsbCBvdGhlciBkZXBlbmRlbmNpZXNcclxuICogcmVtYWluIHRoZSBzYW1lLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBjb25zdCBzdHlsZXMgPSB1c2VNZW1vKCAoKSA9PiB7XHJcbiAqICAgcmV0dXJuIGNzc2BcclxuICogICAgICR7IHJ0bCggeyBtYXJnaW5SaWdodDogJzEwcHgnIH0gKSB9XHJcbiAqICAgYDtcclxuICogfSwgWyBydGwud2F0Y2goKSBdICk7XHJcbiAqL1xyXG5ydGwud2F0Y2ggPSAoKSA9PiBpc1JUTCgpO1xyXG4iXX0= */") : /*#__PURE__*/css(ltrStyles, process.env.NODE_ENV === "production" ? "" : ";label:rtl;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdXRpbHMvcnRsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThFdUMiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy91dGlscy9ydGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXHJcbiAqL1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XHJcblxyXG4vKipcclxuICogV29yZFByZXNzIGRlcGVuZGVuY2llc1xyXG4gKi9cclxuaW1wb3J0IHsgaXNSVEwgfSBmcm9tICdAd29yZHByZXNzL2kxOG4nO1xyXG5cclxuY29uc3QgTE9XRVJfTEVGVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvLWxlZnQvZyApO1xyXG5jb25zdCBMT1dFUl9SSUdIVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvLXJpZ2h0L2cgKTtcclxuY29uc3QgVVBQRVJfTEVGVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvTGVmdC9nICk7XHJcbmNvbnN0IFVQUEVSX1JJR0hUX1JFR0VYUCA9IG5ldyBSZWdFeHAoIC9SaWdodC9nICk7XHJcblxyXG4vKipcclxuICogRmxpcHMgYSBDU1MgcHJvcGVydHkgZnJvbSBsZWZ0IDwtPiByaWdodC5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgQ1NTIHByb3BlcnR5IG5hbWUuXHJcbiAqXHJcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZsaXBwZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGlmIGFwcGxpY2FibGUuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDb252ZXJ0ZWRLZXkoIGtleSApIHtcclxuXHRpZiAoIGtleSA9PT0gJ2xlZnQnICkge1xyXG5cdFx0cmV0dXJuICdyaWdodCc7XHJcblx0fVxyXG5cclxuXHRpZiAoIGtleSA9PT0gJ3JpZ2h0JyApIHtcclxuXHRcdHJldHVybiAnbGVmdCc7XHJcblx0fVxyXG5cclxuXHRpZiAoIExPV0VSX0xFRlRfUkVHRVhQLnRlc3QoIGtleSApICkge1xyXG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBMT1dFUl9MRUZUX1JFR0VYUCwgJy1yaWdodCcgKTtcclxuXHR9XHJcblxyXG5cdGlmICggTE9XRVJfUklHSFRfUkVHRVhQLnRlc3QoIGtleSApICkge1xyXG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBMT1dFUl9SSUdIVF9SRUdFWFAsICctbGVmdCcgKTtcclxuXHR9XHJcblxyXG5cdGlmICggVVBQRVJfTEVGVF9SRUdFWFAudGVzdCgga2V5ICkgKSB7XHJcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIFVQUEVSX0xFRlRfUkVHRVhQLCAnUmlnaHQnICk7XHJcblx0fVxyXG5cclxuXHRpZiAoIFVQUEVSX1JJR0hUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcclxuXHRcdHJldHVybiBrZXkucmVwbGFjZSggVVBQRVJfUklHSFRfUkVHRVhQLCAnTGVmdCcgKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBrZXk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBpbmNyZWRpYmx5IGJhc2ljIGx0ciAtPiBydGwgY29udmVydGVyIGZvciBzdHlsZSBwcm9wZXJ0aWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7aW1wb3J0KCdyZWFjdCcpLkNTU1Byb3BlcnRpZXN9IGx0clN0eWxlc1xyXG4gKlxyXG4gKiBAcmV0dXJuIHtpbXBvcnQoJ3JlYWN0JykuQ1NTUHJvcGVydGllc30gQ29udmVydGVkIGx0ciAtPiBydGwgc3R5bGVzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY29udmVydExUUlRvUlRMID0gKCBsdHJTdHlsZXMgPSB7fSApID0+IHtcclxuXHRyZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKFxyXG5cdFx0T2JqZWN0LmVudHJpZXMoIGx0clN0eWxlcyApLm1hcCggKCBbIGtleSwgdmFsdWUgXSApID0+IFtcclxuXHRcdFx0Z2V0Q29udmVydGVkS2V5KCBrZXkgKSxcclxuXHRcdFx0dmFsdWUsXHJcblx0XHRdIClcclxuXHQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEEgaGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHRoYXQgY3JlYXRlIGFuIGluY3JlZGlibHkgYmFzaWMgbHRyIC0+IHJ0bCBzdHlsZSBjb252ZXJ0ZXIgZm9yIENTUyBvYmplY3RzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBsdHJTdHlsZXMgICBMdHIgc3R5bGVzLiBDb252ZXJ0cyBhbmQgcmVuZGVycyBmcm9tIGx0ciAtPiBydGwgc3R5bGVzLCBpZiBhcHBsaWNhYmxlLlxyXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBbcnRsU3R5bGVzXSBSdGwgc3R5bGVzLiBSZW5kZXJzIGlmIHByb3ZpZGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHsoKSA9PiBpbXBvcnQoJ0BlbW90aW9uL3JlYWN0JykuU2VyaWFsaXplZFN0eWxlc30gQSBmdW5jdGlvbiB0byBvdXRwdXQgQ1NTIHN0eWxlcyBmb3IgRW1vdGlvbidzIHJlbmRlcmVyXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcnRsKCBsdHJTdHlsZXMgPSB7fSwgcnRsU3R5bGVzICkge1xyXG5cdHJldHVybiAoKSA9PiB7XHJcblx0XHRpZiAoIHJ0bFN0eWxlcyApIHtcclxuXHRcdFx0Ly8gQHRzLWlnbm9yZTogYGNzc2AgdHlwZXMgYXJlIHdyb25nLCBpdCBjYW4gYWNjZXB0IGFuIG9iamVjdDogaHR0cHM6Ly9lbW90aW9uLnNoL2RvY3Mvb2JqZWN0LXN0eWxlcyN3aXRoLWNzc1xyXG5cdFx0XHRyZXR1cm4gaXNSVEwoKSA/IGNzcyggcnRsU3R5bGVzICkgOiBjc3MoIGx0clN0eWxlcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEB0cy1pZ25vcmU6IGBjc3NgIHR5cGVzIGFyZSB3cm9uZywgaXQgY2FuIGFjY2VwdCBhbiBvYmplY3Q6IGh0dHBzOi8vZW1vdGlvbi5zaC9kb2NzL29iamVjdC1zdHlsZXMjd2l0aC1jc3NcclxuXHRcdHJldHVybiBpc1JUTCgpID8gY3NzKCBjb252ZXJ0TFRSVG9SVEwoIGx0clN0eWxlcyApICkgOiBjc3MoIGx0clN0eWxlcyApO1xyXG5cdH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxsIHRoaXMgaW4gdGhlIGB1c2VNZW1vYCBkZXBlbmRlbmN5IGFycmF5IHRvIGVuc3VyZSB0aGF0IHN1YnNlcXVlbnQgcmVuZGVycyB3aWxsXHJcbiAqIGNhdXNlIHJ0bCBzdHlsZXMgdG8gdXBkYXRlIGJhc2VkIG9uIHRoZSBgaXNSVExgIHJldHVybiB2YWx1ZSBldmVuIGlmIGFsbCBvdGhlciBkZXBlbmRlbmNpZXNcclxuICogcmVtYWluIHRoZSBzYW1lLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBjb25zdCBzdHlsZXMgPSB1c2VNZW1vKCAoKSA9PiB7XHJcbiAqICAgcmV0dXJuIGNzc2BcclxuICogICAgICR7IHJ0bCggeyBtYXJnaW5SaWdodDogJzEwcHgnIH0gKSB9XHJcbiAqICAgYDtcclxuICogfSwgWyBydGwud2F0Y2goKSBdICk7XHJcbiAqL1xyXG5ydGwud2F0Y2ggPSAoKSA9PiBpc1JUTCgpO1xyXG4iXX0= */");
    }

    // @ts-ignore: `css` types are wrong, it can accept an object: https://emotion.sh/docs/object-styles#with-css
    return isRTL() ? /*#__PURE__*/css(convertLTRToRTL(ltrStyles), process.env.NODE_ENV === "production" ? "" : ";label:rtl;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdXRpbHMvcnRsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtGbUIiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy91dGlscy9ydGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXHJcbiAqL1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XHJcblxyXG4vKipcclxuICogV29yZFByZXNzIGRlcGVuZGVuY2llc1xyXG4gKi9cclxuaW1wb3J0IHsgaXNSVEwgfSBmcm9tICdAd29yZHByZXNzL2kxOG4nO1xyXG5cclxuY29uc3QgTE9XRVJfTEVGVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvLWxlZnQvZyApO1xyXG5jb25zdCBMT1dFUl9SSUdIVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvLXJpZ2h0L2cgKTtcclxuY29uc3QgVVBQRVJfTEVGVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvTGVmdC9nICk7XHJcbmNvbnN0IFVQUEVSX1JJR0hUX1JFR0VYUCA9IG5ldyBSZWdFeHAoIC9SaWdodC9nICk7XHJcblxyXG4vKipcclxuICogRmxpcHMgYSBDU1MgcHJvcGVydHkgZnJvbSBsZWZ0IDwtPiByaWdodC5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgQ1NTIHByb3BlcnR5IG5hbWUuXHJcbiAqXHJcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZsaXBwZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGlmIGFwcGxpY2FibGUuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDb252ZXJ0ZWRLZXkoIGtleSApIHtcclxuXHRpZiAoIGtleSA9PT0gJ2xlZnQnICkge1xyXG5cdFx0cmV0dXJuICdyaWdodCc7XHJcblx0fVxyXG5cclxuXHRpZiAoIGtleSA9PT0gJ3JpZ2h0JyApIHtcclxuXHRcdHJldHVybiAnbGVmdCc7XHJcblx0fVxyXG5cclxuXHRpZiAoIExPV0VSX0xFRlRfUkVHRVhQLnRlc3QoIGtleSApICkge1xyXG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBMT1dFUl9MRUZUX1JFR0VYUCwgJy1yaWdodCcgKTtcclxuXHR9XHJcblxyXG5cdGlmICggTE9XRVJfUklHSFRfUkVHRVhQLnRlc3QoIGtleSApICkge1xyXG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBMT1dFUl9SSUdIVF9SRUdFWFAsICctbGVmdCcgKTtcclxuXHR9XHJcblxyXG5cdGlmICggVVBQRVJfTEVGVF9SRUdFWFAudGVzdCgga2V5ICkgKSB7XHJcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIFVQUEVSX0xFRlRfUkVHRVhQLCAnUmlnaHQnICk7XHJcblx0fVxyXG5cclxuXHRpZiAoIFVQUEVSX1JJR0hUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcclxuXHRcdHJldHVybiBrZXkucmVwbGFjZSggVVBQRVJfUklHSFRfUkVHRVhQLCAnTGVmdCcgKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBrZXk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBpbmNyZWRpYmx5IGJhc2ljIGx0ciAtPiBydGwgY29udmVydGVyIGZvciBzdHlsZSBwcm9wZXJ0aWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7aW1wb3J0KCdyZWFjdCcpLkNTU1Byb3BlcnRpZXN9IGx0clN0eWxlc1xyXG4gKlxyXG4gKiBAcmV0dXJuIHtpbXBvcnQoJ3JlYWN0JykuQ1NTUHJvcGVydGllc30gQ29udmVydGVkIGx0ciAtPiBydGwgc3R5bGVzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY29udmVydExUUlRvUlRMID0gKCBsdHJTdHlsZXMgPSB7fSApID0+IHtcclxuXHRyZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKFxyXG5cdFx0T2JqZWN0LmVudHJpZXMoIGx0clN0eWxlcyApLm1hcCggKCBbIGtleSwgdmFsdWUgXSApID0+IFtcclxuXHRcdFx0Z2V0Q29udmVydGVkS2V5KCBrZXkgKSxcclxuXHRcdFx0dmFsdWUsXHJcblx0XHRdIClcclxuXHQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEEgaGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHRoYXQgY3JlYXRlIGFuIGluY3JlZGlibHkgYmFzaWMgbHRyIC0+IHJ0bCBzdHlsZSBjb252ZXJ0ZXIgZm9yIENTUyBvYmplY3RzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBsdHJTdHlsZXMgICBMdHIgc3R5bGVzLiBDb252ZXJ0cyBhbmQgcmVuZGVycyBmcm9tIGx0ciAtPiBydGwgc3R5bGVzLCBpZiBhcHBsaWNhYmxlLlxyXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBbcnRsU3R5bGVzXSBSdGwgc3R5bGVzLiBSZW5kZXJzIGlmIHByb3ZpZGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHsoKSA9PiBpbXBvcnQoJ0BlbW90aW9uL3JlYWN0JykuU2VyaWFsaXplZFN0eWxlc30gQSBmdW5jdGlvbiB0byBvdXRwdXQgQ1NTIHN0eWxlcyBmb3IgRW1vdGlvbidzIHJlbmRlcmVyXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcnRsKCBsdHJTdHlsZXMgPSB7fSwgcnRsU3R5bGVzICkge1xyXG5cdHJldHVybiAoKSA9PiB7XHJcblx0XHRpZiAoIHJ0bFN0eWxlcyApIHtcclxuXHRcdFx0Ly8gQHRzLWlnbm9yZTogYGNzc2AgdHlwZXMgYXJlIHdyb25nLCBpdCBjYW4gYWNjZXB0IGFuIG9iamVjdDogaHR0cHM6Ly9lbW90aW9uLnNoL2RvY3Mvb2JqZWN0LXN0eWxlcyN3aXRoLWNzc1xyXG5cdFx0XHRyZXR1cm4gaXNSVEwoKSA/IGNzcyggcnRsU3R5bGVzICkgOiBjc3MoIGx0clN0eWxlcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEB0cy1pZ25vcmU6IGBjc3NgIHR5cGVzIGFyZSB3cm9uZywgaXQgY2FuIGFjY2VwdCBhbiBvYmplY3Q6IGh0dHBzOi8vZW1vdGlvbi5zaC9kb2NzL29iamVjdC1zdHlsZXMjd2l0aC1jc3NcclxuXHRcdHJldHVybiBpc1JUTCgpID8gY3NzKCBjb252ZXJ0TFRSVG9SVEwoIGx0clN0eWxlcyApICkgOiBjc3MoIGx0clN0eWxlcyApO1xyXG5cdH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxsIHRoaXMgaW4gdGhlIGB1c2VNZW1vYCBkZXBlbmRlbmN5IGFycmF5IHRvIGVuc3VyZSB0aGF0IHN1YnNlcXVlbnQgcmVuZGVycyB3aWxsXHJcbiAqIGNhdXNlIHJ0bCBzdHlsZXMgdG8gdXBkYXRlIGJhc2VkIG9uIHRoZSBgaXNSVExgIHJldHVybiB2YWx1ZSBldmVuIGlmIGFsbCBvdGhlciBkZXBlbmRlbmNpZXNcclxuICogcmVtYWluIHRoZSBzYW1lLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBjb25zdCBzdHlsZXMgPSB1c2VNZW1vKCAoKSA9PiB7XHJcbiAqICAgcmV0dXJuIGNzc2BcclxuICogICAgICR7IHJ0bCggeyBtYXJnaW5SaWdodDogJzEwcHgnIH0gKSB9XHJcbiAqICAgYDtcclxuICogfSwgWyBydGwud2F0Y2goKSBdICk7XHJcbiAqL1xyXG5ydGwud2F0Y2ggPSAoKSA9PiBpc1JUTCgpO1xyXG4iXX0= */") : /*#__PURE__*/css(ltrStyles, process.env.NODE_ENV === "production" ? "" : ";label:rtl;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdXRpbHMvcnRsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtGeUQiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy91dGlscy9ydGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXHJcbiAqL1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XHJcblxyXG4vKipcclxuICogV29yZFByZXNzIGRlcGVuZGVuY2llc1xyXG4gKi9cclxuaW1wb3J0IHsgaXNSVEwgfSBmcm9tICdAd29yZHByZXNzL2kxOG4nO1xyXG5cclxuY29uc3QgTE9XRVJfTEVGVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvLWxlZnQvZyApO1xyXG5jb25zdCBMT1dFUl9SSUdIVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvLXJpZ2h0L2cgKTtcclxuY29uc3QgVVBQRVJfTEVGVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvTGVmdC9nICk7XHJcbmNvbnN0IFVQUEVSX1JJR0hUX1JFR0VYUCA9IG5ldyBSZWdFeHAoIC9SaWdodC9nICk7XHJcblxyXG4vKipcclxuICogRmxpcHMgYSBDU1MgcHJvcGVydHkgZnJvbSBsZWZ0IDwtPiByaWdodC5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgQ1NTIHByb3BlcnR5IG5hbWUuXHJcbiAqXHJcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZsaXBwZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGlmIGFwcGxpY2FibGUuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDb252ZXJ0ZWRLZXkoIGtleSApIHtcclxuXHRpZiAoIGtleSA9PT0gJ2xlZnQnICkge1xyXG5cdFx0cmV0dXJuICdyaWdodCc7XHJcblx0fVxyXG5cclxuXHRpZiAoIGtleSA9PT0gJ3JpZ2h0JyApIHtcclxuXHRcdHJldHVybiAnbGVmdCc7XHJcblx0fVxyXG5cclxuXHRpZiAoIExPV0VSX0xFRlRfUkVHRVhQLnRlc3QoIGtleSApICkge1xyXG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBMT1dFUl9MRUZUX1JFR0VYUCwgJy1yaWdodCcgKTtcclxuXHR9XHJcblxyXG5cdGlmICggTE9XRVJfUklHSFRfUkVHRVhQLnRlc3QoIGtleSApICkge1xyXG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBMT1dFUl9SSUdIVF9SRUdFWFAsICctbGVmdCcgKTtcclxuXHR9XHJcblxyXG5cdGlmICggVVBQRVJfTEVGVF9SRUdFWFAudGVzdCgga2V5ICkgKSB7XHJcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIFVQUEVSX0xFRlRfUkVHRVhQLCAnUmlnaHQnICk7XHJcblx0fVxyXG5cclxuXHRpZiAoIFVQUEVSX1JJR0hUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcclxuXHRcdHJldHVybiBrZXkucmVwbGFjZSggVVBQRVJfUklHSFRfUkVHRVhQLCAnTGVmdCcgKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBrZXk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBpbmNyZWRpYmx5IGJhc2ljIGx0ciAtPiBydGwgY29udmVydGVyIGZvciBzdHlsZSBwcm9wZXJ0aWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7aW1wb3J0KCdyZWFjdCcpLkNTU1Byb3BlcnRpZXN9IGx0clN0eWxlc1xyXG4gKlxyXG4gKiBAcmV0dXJuIHtpbXBvcnQoJ3JlYWN0JykuQ1NTUHJvcGVydGllc30gQ29udmVydGVkIGx0ciAtPiBydGwgc3R5bGVzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY29udmVydExUUlRvUlRMID0gKCBsdHJTdHlsZXMgPSB7fSApID0+IHtcclxuXHRyZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKFxyXG5cdFx0T2JqZWN0LmVudHJpZXMoIGx0clN0eWxlcyApLm1hcCggKCBbIGtleSwgdmFsdWUgXSApID0+IFtcclxuXHRcdFx0Z2V0Q29udmVydGVkS2V5KCBrZXkgKSxcclxuXHRcdFx0dmFsdWUsXHJcblx0XHRdIClcclxuXHQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEEgaGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHRoYXQgY3JlYXRlIGFuIGluY3JlZGlibHkgYmFzaWMgbHRyIC0+IHJ0bCBzdHlsZSBjb252ZXJ0ZXIgZm9yIENTUyBvYmplY3RzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBsdHJTdHlsZXMgICBMdHIgc3R5bGVzLiBDb252ZXJ0cyBhbmQgcmVuZGVycyBmcm9tIGx0ciAtPiBydGwgc3R5bGVzLCBpZiBhcHBsaWNhYmxlLlxyXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBbcnRsU3R5bGVzXSBSdGwgc3R5bGVzLiBSZW5kZXJzIGlmIHByb3ZpZGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHsoKSA9PiBpbXBvcnQoJ0BlbW90aW9uL3JlYWN0JykuU2VyaWFsaXplZFN0eWxlc30gQSBmdW5jdGlvbiB0byBvdXRwdXQgQ1NTIHN0eWxlcyBmb3IgRW1vdGlvbidzIHJlbmRlcmVyXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcnRsKCBsdHJTdHlsZXMgPSB7fSwgcnRsU3R5bGVzICkge1xyXG5cdHJldHVybiAoKSA9PiB7XHJcblx0XHRpZiAoIHJ0bFN0eWxlcyApIHtcclxuXHRcdFx0Ly8gQHRzLWlnbm9yZTogYGNzc2AgdHlwZXMgYXJlIHdyb25nLCBpdCBjYW4gYWNjZXB0IGFuIG9iamVjdDogaHR0cHM6Ly9lbW90aW9uLnNoL2RvY3Mvb2JqZWN0LXN0eWxlcyN3aXRoLWNzc1xyXG5cdFx0XHRyZXR1cm4gaXNSVEwoKSA/IGNzcyggcnRsU3R5bGVzICkgOiBjc3MoIGx0clN0eWxlcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEB0cy1pZ25vcmU6IGBjc3NgIHR5cGVzIGFyZSB3cm9uZywgaXQgY2FuIGFjY2VwdCBhbiBvYmplY3Q6IGh0dHBzOi8vZW1vdGlvbi5zaC9kb2NzL29iamVjdC1zdHlsZXMjd2l0aC1jc3NcclxuXHRcdHJldHVybiBpc1JUTCgpID8gY3NzKCBjb252ZXJ0TFRSVG9SVEwoIGx0clN0eWxlcyApICkgOiBjc3MoIGx0clN0eWxlcyApO1xyXG5cdH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxsIHRoaXMgaW4gdGhlIGB1c2VNZW1vYCBkZXBlbmRlbmN5IGFycmF5IHRvIGVuc3VyZSB0aGF0IHN1YnNlcXVlbnQgcmVuZGVycyB3aWxsXHJcbiAqIGNhdXNlIHJ0bCBzdHlsZXMgdG8gdXBkYXRlIGJhc2VkIG9uIHRoZSBgaXNSVExgIHJldHVybiB2YWx1ZSBldmVuIGlmIGFsbCBvdGhlciBkZXBlbmRlbmNpZXNcclxuICogcmVtYWluIHRoZSBzYW1lLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBjb25zdCBzdHlsZXMgPSB1c2VNZW1vKCAoKSA9PiB7XHJcbiAqICAgcmV0dXJuIGNzc2BcclxuICogICAgICR7IHJ0bCggeyBtYXJnaW5SaWdodDogJzEwcHgnIH0gKSB9XHJcbiAqICAgYDtcclxuICogfSwgWyBydGwud2F0Y2goKSBdICk7XHJcbiAqL1xyXG5ydGwud2F0Y2ggPSAoKSA9PiBpc1JUTCgpO1xyXG4iXX0= */");
  };
}

/**
 * Call this in the `useMemo` dependency array to ensure that subsequent renders will
 * cause rtl styles to update based on the `isRTL` return value even if all other dependencies
 * remain the same.
 *
 * @example
 * const styles = useMemo( () => {
 *   return css`
 *     ${ rtl( { marginRight: '10px' } ) }
 *   `;
 * }, [ rtl.watch() ] );
 */
rtl.watch = () => isRTL();
//# sourceMappingURL=rtl.js.map