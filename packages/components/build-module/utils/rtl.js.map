{"version":3,"names":["css","isRTL","LOWER_LEFT_REGEXP","RegExp","LOWER_RIGHT_REGEXP","UPPER_LEFT_REGEXP","UPPER_RIGHT_REGEXP","getConvertedKey","key","test","replace","convertLTRToRTL","ltrStyles","Object","fromEntries","entries","map","value","rtl","rtlStyles","process","env","NODE_ENV","watch"],"sources":["@wordpress/components/src/utils/rtl.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport { css } from '@emotion/react';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { isRTL } from '@wordpress/i18n';\r\n\r\nconst LOWER_LEFT_REGEXP = new RegExp( /-left/g );\r\nconst LOWER_RIGHT_REGEXP = new RegExp( /-right/g );\r\nconst UPPER_LEFT_REGEXP = new RegExp( /Left/g );\r\nconst UPPER_RIGHT_REGEXP = new RegExp( /Right/g );\r\n\r\n/**\r\n * Flips a CSS property from left <-> right.\r\n *\r\n * @param {string} key The CSS property name.\r\n *\r\n * @return {string} The flipped CSS property name, if applicable.\r\n */\r\nfunction getConvertedKey( key ) {\r\n\tif ( key === 'left' ) {\r\n\t\treturn 'right';\r\n\t}\r\n\r\n\tif ( key === 'right' ) {\r\n\t\treturn 'left';\r\n\t}\r\n\r\n\tif ( LOWER_LEFT_REGEXP.test( key ) ) {\r\n\t\treturn key.replace( LOWER_LEFT_REGEXP, '-right' );\r\n\t}\r\n\r\n\tif ( LOWER_RIGHT_REGEXP.test( key ) ) {\r\n\t\treturn key.replace( LOWER_RIGHT_REGEXP, '-left' );\r\n\t}\r\n\r\n\tif ( UPPER_LEFT_REGEXP.test( key ) ) {\r\n\t\treturn key.replace( UPPER_LEFT_REGEXP, 'Right' );\r\n\t}\r\n\r\n\tif ( UPPER_RIGHT_REGEXP.test( key ) ) {\r\n\t\treturn key.replace( UPPER_RIGHT_REGEXP, 'Left' );\r\n\t}\r\n\r\n\treturn key;\r\n}\r\n\r\n/**\r\n * An incredibly basic ltr -> rtl converter for style properties\r\n *\r\n * @param {import('react').CSSProperties} ltrStyles\r\n *\r\n * @return {import('react').CSSProperties} Converted ltr -> rtl styles\r\n */\r\nexport const convertLTRToRTL = ( ltrStyles = {} ) => {\r\n\treturn Object.fromEntries(\r\n\t\tObject.entries( ltrStyles ).map( ( [ key, value ] ) => [\r\n\t\t\tgetConvertedKey( key ),\r\n\t\t\tvalue,\r\n\t\t] )\r\n\t);\r\n};\r\n\r\n/**\r\n * A higher-order function that create an incredibly basic ltr -> rtl style converter for CSS objects.\r\n *\r\n * @param {import('react').CSSProperties} ltrStyles   Ltr styles. Converts and renders from ltr -> rtl styles, if applicable.\r\n * @param {import('react').CSSProperties} [rtlStyles] Rtl styles. Renders if provided.\r\n *\r\n * @return {() => import('@emotion/react').SerializedStyles} A function to output CSS styles for Emotion's renderer\r\n */\r\nexport function rtl( ltrStyles = {}, rtlStyles ) {\r\n\treturn () => {\r\n\t\tif ( rtlStyles ) {\r\n\t\t\t// @ts-ignore: `css` types are wrong, it can accept an object: https://emotion.sh/docs/object-styles#with-css\r\n\t\t\treturn isRTL() ? css( rtlStyles ) : css( ltrStyles );\r\n\t\t}\r\n\r\n\t\t// @ts-ignore: `css` types are wrong, it can accept an object: https://emotion.sh/docs/object-styles#with-css\r\n\t\treturn isRTL() ? css( convertLTRToRTL( ltrStyles ) ) : css( ltrStyles );\r\n\t};\r\n}\r\n\r\n/**\r\n * Call this in the `useMemo` dependency array to ensure that subsequent renders will\r\n * cause rtl styles to update based on the `isRTL` return value even if all other dependencies\r\n * remain the same.\r\n *\r\n * @example\r\n * const styles = useMemo( () => {\r\n *   return css`\r\n *     ${ rtl( { marginRight: '10px' } ) }\r\n *   `;\r\n * }, [ rtl.watch() ] );\r\n */\r\nrtl.watch = () => isRTL();\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,GAAG,QAAQ,gBAAgB;;AAEpC;AACA;AACA;AACA,SAASC,KAAK,QAAQ,iBAAiB;AAEvC,MAAMC,iBAAiB,GAAG,IAAIC,MAAM,CAAE,QAAS,CAAC;AAChD,MAAMC,kBAAkB,GAAG,IAAID,MAAM,CAAE,SAAU,CAAC;AAClD,MAAME,iBAAiB,GAAG,IAAIF,MAAM,CAAE,OAAQ,CAAC;AAC/C,MAAMG,kBAAkB,GAAG,IAAIH,MAAM,CAAE,QAAS,CAAC;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,eAAeA,CAAEC,GAAG,EAAG;EAC/B,IAAKA,GAAG,KAAK,MAAM,EAAG;IACrB,OAAO,OAAO;EACf;EAEA,IAAKA,GAAG,KAAK,OAAO,EAAG;IACtB,OAAO,MAAM;EACd;EAEA,IAAKN,iBAAiB,CAACO,IAAI,CAAED,GAAI,CAAC,EAAG;IACpC,OAAOA,GAAG,CAACE,OAAO,CAAER,iBAAiB,EAAE,QAAS,CAAC;EAClD;EAEA,IAAKE,kBAAkB,CAACK,IAAI,CAAED,GAAI,CAAC,EAAG;IACrC,OAAOA,GAAG,CAACE,OAAO,CAAEN,kBAAkB,EAAE,OAAQ,CAAC;EAClD;EAEA,IAAKC,iBAAiB,CAACI,IAAI,CAAED,GAAI,CAAC,EAAG;IACpC,OAAOA,GAAG,CAACE,OAAO,CAAEL,iBAAiB,EAAE,OAAQ,CAAC;EACjD;EAEA,IAAKC,kBAAkB,CAACG,IAAI,CAAED,GAAI,CAAC,EAAG;IACrC,OAAOA,GAAG,CAACE,OAAO,CAAEJ,kBAAkB,EAAE,MAAO,CAAC;EACjD;EAEA,OAAOE,GAAG;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,eAAe,GAAGA,CAAEC,SAAS,GAAG,CAAC,CAAC,KAAM;EACpD,OAAOC,MAAM,CAACC,WAAW,CACxBD,MAAM,CAACE,OAAO,CAAEH,SAAU,CAAC,CAACI,GAAG,CAAE,CAAE,CAAER,GAAG,EAAES,KAAK,CAAE,KAAM,CACtDV,eAAe,CAAEC,GAAI,CAAC,EACtBS,KAAK,CACJ,CACH,CAAC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,GAAGA,CAAEN,SAAS,GAAG,CAAC,CAAC,EAAEO,SAAS,EAAG;EAChD,OAAO,MAAM;IACZ,IAAKA,SAAS,EAAG;MAChB;MACA,OAAOlB,KAAK,CAAC,CAAC,gBAAGD,GAAG,CAAEmB,SAAS,EAAAC,OAAA,CAAAC,GAAA,CAAAC,QAAA,wCAAAF,OAAA,CAAAC,GAAA,CAAAC,QAAA,00IAAC,CAAC,gBAAGtB,GAAG,CAAEY,SAAS,EAAAQ,OAAA,CAAAC,GAAA,CAAAC,QAAA,wCAAAF,OAAA,CAAAC,GAAA,CAAAC,QAAA,00IAAC,CAAC;IACrD;;IAEA;IACA,OAAOrB,KAAK,CAAC,CAAC,gBAAGD,GAAG,CAAEW,eAAe,CAAEC,SAAU,CAAC,EAAAQ,OAAA,CAAAC,GAAA,CAAAC,QAAA,wCAAAF,OAAA,CAAAC,GAAA,CAAAC,QAAA,00IAAC,CAAC,gBAAGtB,GAAG,CAAEY,SAAS,EAAAQ,OAAA,CAAAC,GAAA,CAAAC,QAAA,wCAAAF,OAAA,CAAAC,GAAA,CAAAC,QAAA,00IAAC,CAAC;EACxE,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,GAAG,CAACK,KAAK,GAAG,MAAMtB,KAAK,CAAC,CAAC","ignoreList":[]}