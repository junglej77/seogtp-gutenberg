{"version":3,"names":["withIgnoreIMEEvents","keydownHandler","event","isComposing","nativeEvent","keyCode"],"sources":["@wordpress/components/src/utils/with-ignore-ime-events.ts"],"sourcesContent":["/**\r\n * A higher-order function that wraps a keydown event handler to ensure it is not an IME event.\r\n *\r\n * In CJK languages, an IME (Input Method Editor) is used to input complex characters.\r\n * During an IME composition, keydown events (e.g. Enter or Escape) can be fired\r\n * which are intended to control the IME and not the application.\r\n * These events should be ignored by any application logic.\r\n *\r\n * @param keydownHandler The keydown event handler to execute after ensuring it was not an IME event.\r\n *\r\n * @return A wrapped version of the given event handler that ignores IME events.\r\n */\r\nexport function withIgnoreIMEEvents<\r\n\tE extends React.KeyboardEvent | KeyboardEvent,\r\n>( keydownHandler: ( event: E ) => void ) {\r\n\treturn ( event: E ) => {\r\n\t\tconst { isComposing } =\r\n\t\t\t'nativeEvent' in event ? event.nativeEvent : event;\r\n\r\n\t\tif (\r\n\t\t\tisComposing ||\r\n\t\t\t// Workaround for Mac Safari where the final Enter/Backspace of an IME composition\r\n\t\t\t// is `isComposing=false`, even though it's technically still part of the composition.\r\n\t\t\t// These can only be detected by keyCode.\r\n\t\t\tevent.keyCode === 229\r\n\t\t) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tkeydownHandler( event );\r\n\t};\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,mBAAmBA,CAEhCC,cAAoC,EAAG;EACzC,OAASC,KAAQ,IAAM;IACtB,MAAM;MAAEC;IAAY,CAAC,GACpB,aAAa,IAAID,KAAK,GAAGA,KAAK,CAACE,WAAW,GAAGF,KAAK;IAEnD,IACCC,WAAW;IACX;IACA;IACA;IACAD,KAAK,CAACG,OAAO,KAAK,GAAG,EACpB;MACD;IACD;IAEAJ,cAAc,CAAEC,KAAM,CAAC;EACxB,CAAC;AACF","ignoreList":[]}