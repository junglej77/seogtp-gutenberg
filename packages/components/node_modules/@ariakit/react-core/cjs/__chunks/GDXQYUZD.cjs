"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _V2557HFXcjs = require('./V2557HFX.cjs');


var _HHTQYHYLcjs = require('./HHTQYHYL.cjs');




var _M5IWBORBcjs = require('./M5IWBORB.cjs');



var _3IVNQNIVcjs = require('./3IVNQNIV.cjs');

// src/dialog/dialog-disclosure.tsx
var _dom = require('@ariakit/core/utils/dom');
var _misc = require('@ariakit/core/utils/misc');
var TagName = "button";
var useDialogDisclosure = _M5IWBORBcjs.createHook.call(void 0, 
  function useDialogDisclosure2(_a) {
    var _b = _a, { store } = _b, props = _3IVNQNIVcjs.__objRest.call(void 0, _b, ["store"]);
    const context = _HHTQYHYLcjs.useDialogProviderContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "DialogDisclosure must receive a `store` prop or be wrapped in a DialogProvider component."
    );
    const contentElement = store.useState("contentElement");
    props = _3IVNQNIVcjs.__spreadValues.call(void 0, {
      "aria-haspopup": _dom.getPopupRole.call(void 0, contentElement, "dialog")
    }, props);
    props = _V2557HFXcjs.useDisclosure.call(void 0, _3IVNQNIVcjs.__spreadValues.call(void 0, { store }, props));
    return props;
  }
);
var DialogDisclosure = _M5IWBORBcjs.forwardRef.call(void 0, function DialogDisclosure2(props) {
  const htmlProps = useDialogDisclosure(props);
  return _M5IWBORBcjs.createElement.call(void 0, TagName, htmlProps);
});




exports.useDialogDisclosure = useDialogDisclosure; exports.DialogDisclosure = DialogDisclosure;
