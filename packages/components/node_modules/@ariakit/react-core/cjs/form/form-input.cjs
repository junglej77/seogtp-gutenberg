"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _MTP2XD7Acjs = require('../__chunks/MTP2XD7A.cjs');


var _CEAT6DDRcjs = require('../__chunks/CEAT6DDR.cjs');
require('../__chunks/RRCMCI3I.cjs');
require('../__chunks/32EK4BGY.cjs');


var _YGEHBXGAcjs = require('../__chunks/YGEHBXGA.cjs');
require('../__chunks/DYIDES27.cjs');





var _M5IWBORBcjs = require('../__chunks/M5IWBORB.cjs');


var _WT6AUJWVcjs = require('../__chunks/WT6AUJWV.cjs');
require('../__chunks/54XFMNDS.cjs');




var _3IVNQNIVcjs = require('../__chunks/3IVNQNIV.cjs');

// src/form/form-input.tsx
var _misc = require('@ariakit/core/utils/misc');
var TagName = "input";
var useFormInput = _M5IWBORBcjs.createHook.call(void 0, 
  function useFormInput2(_a) {
    var _b = _a, { store, name: nameProp } = _b, props = _3IVNQNIVcjs.__objRest.call(void 0, _b, ["store", "name"]);
    const context = _CEAT6DDRcjs.useFormContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "FormInput must be wrapped in a Form component."
    );
    const name = `${nameProp}`;
    const onChangeProp = props.onChange;
    const onChange = _WT6AUJWVcjs.useEvent.call(void 0, (event) => {
      onChangeProp == null ? void 0 : onChangeProp(event);
      if (event.defaultPrevented) return;
      store == null ? void 0 : store.setValue(name, event.target.value);
    });
    const value = store.useValue(name);
    props = _3IVNQNIVcjs.__spreadProps.call(void 0, _3IVNQNIVcjs.__spreadValues.call(void 0, {
      value
    }, props), {
      onChange
    });
    props = _YGEHBXGAcjs.useFocusable.call(void 0, props);
    props = _MTP2XD7Acjs.useFormControl.call(void 0, _3IVNQNIVcjs.__spreadValues.call(void 0, { store, name }, props));
    return props;
  }
);
var FormInput = _M5IWBORBcjs.memo.call(void 0, 
  _M5IWBORBcjs.forwardRef.call(void 0, function FormInput2(props) {
    const htmlProps = useFormInput(props);
    return _M5IWBORBcjs.createElement.call(void 0, TagName, htmlProps);
  })
);



exports.FormInput = FormInput; exports.useFormInput = useFormInput;
