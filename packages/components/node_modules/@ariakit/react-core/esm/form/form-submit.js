"use client";
import {
  useFormContext
} from "../__chunks/XJENYSWS.js";
import {
  useButton
} from "../__chunks/3R3N43YO.js";
import "../__chunks/NAXN2XAB.js";
import "../__chunks/FMYQNSCK.js";
import "../__chunks/HGZKAGPL.js";
import "../__chunks/SWN3JYXT.js";
import {
  createElement,
  createHook,
  forwardRef
} from "../__chunks/HKOOKEDE.js";
import "../__chunks/Z32BISHQ.js";
import "../__chunks/SK3NAZA3.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/3YLGPPWQ.js";

// src/form/form-submit.tsx
import { invariant } from "@ariakit/core/utils/misc";
var TagName = "button";
var useFormSubmit = createHook(
  function useFormSubmit2(_a) {
    var _b = _a, { store, accessibleWhenDisabled = true } = _b, props = __objRest(_b, ["store", "accessibleWhenDisabled"]);
    const context = useFormContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "FormSubmit must be wrapped in a Form component."
    );
    props = __spreadValues({
      type: "submit",
      disabled: store.useState("submitting")
    }, props);
    props = useButton(__spreadProps(__spreadValues({}, props), { accessibleWhenDisabled }));
    return props;
  }
);
var FormSubmit = forwardRef(function FormSubmit2(props) {
  const htmlProps = useFormSubmit(props);
  return createElement(TagName, htmlProps);
});
export {
  FormSubmit,
  useFormSubmit
};
