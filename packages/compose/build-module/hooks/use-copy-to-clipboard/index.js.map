{"version":3,"names":["Clipboard","useRef","useRefEffect","useUpdatedRef","value","ref","current","useCopyToClipboard","text","onSuccess","textRef","onSuccessRef","node","clipboard","on","clearSelection","destroy"],"sources":["@wordpress/compose/src/hooks/use-copy-to-clipboard/index.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport Clipboard from 'clipboard';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { useRef } from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport useRefEffect from '../use-ref-effect';\r\n\r\n/**\r\n * @template T\r\n * @param {T} value\r\n * @return {import('react').RefObject<T>} The updated ref\r\n */\r\nfunction useUpdatedRef( value ) {\r\n\tconst ref = useRef( value );\r\n\tref.current = value;\r\n\treturn ref;\r\n}\r\n\r\n/**\r\n * Copies the given text to the clipboard when the element is clicked.\r\n *\r\n * @template {HTMLElement} TElementType\r\n * @param {string | (() => string)} text      The text to copy. Use a function if not\r\n *                                            already available and expensive to compute.\r\n * @param {Function}                onSuccess Called when to text is copied.\r\n *\r\n * @return {import('react').Ref<TElementType>} A ref to assign to the target element.\r\n */\r\nexport default function useCopyToClipboard( text, onSuccess ) {\r\n\t// Store the dependencies as refs and continuously update them so they're\r\n\t// fresh when the callback is called.\r\n\tconst textRef = useUpdatedRef( text );\r\n\tconst onSuccessRef = useUpdatedRef( onSuccess );\r\n\treturn useRefEffect( ( node ) => {\r\n\t\t// Clipboard listens to click events.\r\n\t\tconst clipboard = new Clipboard( node, {\r\n\t\t\ttext() {\r\n\t\t\t\treturn typeof textRef.current === 'function'\r\n\t\t\t\t\t? textRef.current()\r\n\t\t\t\t\t: textRef.current || '';\r\n\t\t\t},\r\n\t\t} );\r\n\r\n\t\tclipboard.on( 'success', ( { clearSelection } ) => {\r\n\t\t\t// Clearing selection will move focus back to the triggering\r\n\t\t\t// button, ensuring that it is not reset to the body, and\r\n\t\t\t// further that it is kept within the rendered node.\r\n\t\t\tclearSelection();\r\n\r\n\t\t\tif ( onSuccessRef.current ) {\r\n\t\t\t\tonSuccessRef.current();\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\treturn () => {\r\n\t\t\tclipboard.destroy();\r\n\t\t};\r\n\t}, [] );\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,SAAS,MAAM,WAAW;;AAEjC;AACA;AACA;AACA,SAASC,MAAM,QAAQ,oBAAoB;;AAE3C;AACA;AACA;AACA,OAAOC,YAAY,MAAM,mBAAmB;;AAE5C;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAAEC,KAAK,EAAG;EAC/B,MAAMC,GAAG,GAAGJ,MAAM,CAAEG,KAAM,CAAC;EAC3BC,GAAG,CAACC,OAAO,GAAGF,KAAK;EACnB,OAAOC,GAAG;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASE,kBAAkBA,CAAEC,IAAI,EAAEC,SAAS,EAAG;EAC7D;EACA;EACA,MAAMC,OAAO,GAAGP,aAAa,CAAEK,IAAK,CAAC;EACrC,MAAMG,YAAY,GAAGR,aAAa,CAAEM,SAAU,CAAC;EAC/C,OAAOP,YAAY,CAAIU,IAAI,IAAM;IAChC;IACA,MAAMC,SAAS,GAAG,IAAIb,SAAS,CAAEY,IAAI,EAAE;MACtCJ,IAAIA,CAAA,EAAG;QACN,OAAO,OAAOE,OAAO,CAACJ,OAAO,KAAK,UAAU,GACzCI,OAAO,CAACJ,OAAO,CAAC,CAAC,GACjBI,OAAO,CAACJ,OAAO,IAAI,EAAE;MACzB;IACD,CAAE,CAAC;IAEHO,SAAS,CAACC,EAAE,CAAE,SAAS,EAAE,CAAE;MAAEC;IAAe,CAAC,KAAM;MAClD;MACA;MACA;MACAA,cAAc,CAAC,CAAC;MAEhB,IAAKJ,YAAY,CAACL,OAAO,EAAG;QAC3BK,YAAY,CAACL,OAAO,CAAC,CAAC;MACvB;IACD,CAAE,CAAC;IAEH,OAAO,MAAM;MACZO,SAAS,CAACG,OAAO,CAAC,CAAC;IACpB,CAAC;EACF,CAAC,EAAE,EAAG,CAAC;AACR","ignoreList":[]}