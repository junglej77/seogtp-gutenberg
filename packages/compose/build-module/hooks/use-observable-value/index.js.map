{"version":3,"names":["useMemo","useSyncExternalStore","useObservableValue","map","name","subscribe","getValue","listener","get"],"sources":["@wordpress/compose/src/hooks/use-observable-value/index.ts"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useMemo, useSyncExternalStore } from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { ObservableMap } from '../../utils/observable-map';\r\n\r\n/**\r\n * React hook that lets you observe an entry in an `ObservableMap`. The hook returns the\r\n * current value corresponding to the key, or `undefined` when there is no value stored.\r\n * It also observes changes to the value and triggers an update of the calling component\r\n * in case the value changes.\r\n *\r\n * @template K    The type of the keys in the map.\r\n * @template V    The type of the values in the map.\r\n * @param    map  The `ObservableMap` to observe.\r\n * @param    name The map key to observe.\r\n * @return   The value corresponding to the map key requested.\r\n */\r\nexport default function useObservableValue< K, V >(\r\n\tmap: ObservableMap< K, V >,\r\n\tname: K\r\n): V | undefined {\r\n\tconst [ subscribe, getValue ] = useMemo(\r\n\t\t() => [\r\n\t\t\t( listener: () => void ) => map.subscribe( name, listener ),\r\n\t\t\t() => map.get( name ),\r\n\t\t],\r\n\t\t[ map, name ]\r\n\t);\r\n\treturn useSyncExternalStore( subscribe, getValue, getValue );\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,OAAO,EAAEC,oBAAoB,QAAQ,oBAAoB;;AAElE;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,kBAAkBA,CACzCC,GAA0B,EAC1BC,IAAO,EACS;EAChB,MAAM,CAAEC,SAAS,EAAEC,QAAQ,CAAE,GAAGN,OAAO,CACtC,MAAM,CACHO,QAAoB,IAAMJ,GAAG,CAACE,SAAS,CAAED,IAAI,EAAEG,QAAS,CAAC,EAC3D,MAAMJ,GAAG,CAACK,GAAG,CAAEJ,IAAK,CAAC,CACrB,EACD,CAAED,GAAG,EAAEC,IAAI,CACZ,CAAC;EACD,OAAOH,oBAAoB,CAAEI,SAAS,EAAEC,QAAQ,EAAEA,QAAS,CAAC;AAC7D","ignoreList":[]}