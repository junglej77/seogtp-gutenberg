{"version":3,"names":["useCallback","useRef","useState","useResizeObserver","jsx","_jsx","extractSize","entry","entrySize","contentBoxSize","contentRect","width","height","inlineSize","blockSize","map","d","Math","round","RESIZE_ELEMENT_STYLES","position","top","left","right","bottom","pointerEvents","opacity","overflow","zIndex","ResizeElement","onResize","resizeElementRef","entries","newSize","at","ref","style","sizeEquals","a","b","NULL_SIZE","useLegacyResizeObserver","size","setSize","previousSizeRef","handleResize","current","resizeElement"],"sources":["@wordpress/compose/src/hooks/use-resize-observer/_legacy/index.tsx"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { ReactElement } from 'react';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { useCallback, useRef, useState } from '@wordpress/element';\r\n/**\r\n * Internal dependencies\r\n */\r\nimport useResizeObserver from '../index';\r\n\r\nexport type ObservedSize = {\r\n\twidth: number | null;\r\n\theight: number | null;\r\n};\r\n\r\n// We're only using the first element of the size sequences, until future versions of the spec solidify on how\r\n// exactly it'll be used for fragments in multi-column scenarios:\r\n// From the spec:\r\n// > The box size properties are exposed as FrozenArray in order to support elements that have multiple fragments,\r\n// > which occur in multi-column scenarios. However the current definitions of content rect and border box do not\r\n// > mention how those boxes are affected by multi-column layout. In this spec, there will only be a single\r\n// > ResizeObserverSize returned in the FrozenArray, which will correspond to the dimensions of the first column.\r\n// > A future version of this spec will extend the returned FrozenArray to contain the per-fragment size information.\r\n// (https://drafts.csswg.org/resize-observer/#resize-observer-entry-interface)\r\n//\r\n// Also, testing these new box options revealed that in both Chrome and FF everything is returned in the callback,\r\n// regardless of the \"box\" option.\r\n// The spec states the following on this:\r\n// > This does not have any impact on which box dimensions are returned to the defined callback when the event\r\n// > is fired, it solely defines which box the author wishes to observe layout changes on.\r\n// (https://drafts.csswg.org/resize-observer/#resize-observer-interface)\r\n// I'm not exactly clear on what this means, especially when you consider a later section stating the following:\r\n// > This section is non-normative. An author may desire to observe more than one CSS box.\r\n// > In this case, author will need to use multiple ResizeObservers.\r\n// (https://drafts.csswg.org/resize-observer/#resize-observer-interface)\r\n// Which is clearly not how current browser implementations behave, and seems to contradict the previous quote.\r\n// For this reason I decided to only return the requested size,\r\n// even though it seems we have access to results for all box types.\r\n// This also means that we get to keep the current api, being able to return a simple { width, height } pair,\r\n// regardless of box option.\r\nconst extractSize = ( entry: ResizeObserverEntry ): ObservedSize => {\r\n\tlet entrySize;\r\n\tif ( ! entry.contentBoxSize ) {\r\n\t\t// The dimensions in `contentBoxSize` and `contentRect` are equivalent according to the spec.\r\n\t\t// See the 6th step in the description for the RO algorithm:\r\n\t\t// https://drafts.csswg.org/resize-observer/#create-and-populate-resizeobserverentry-h\r\n\t\t// > Set this.contentRect to logical this.contentBoxSize given target and observedBox of \"content-box\".\r\n\t\t// In real browser implementations of course these objects differ, but the width/height values should be equivalent.\r\n\t\tentrySize = [ entry.contentRect.width, entry.contentRect.height ];\r\n\t} else if ( entry.contentBoxSize[ 0 ] ) {\r\n\t\tconst contentBoxSize = entry.contentBoxSize[ 0 ];\r\n\t\tentrySize = [ contentBoxSize.inlineSize, contentBoxSize.blockSize ];\r\n\t} else {\r\n\t\t// TS complains about this, because the RO entry type follows the spec and does not reflect Firefox's buggy\r\n\t\t// behaviour of returning objects instead of arrays for `borderBoxSize` and `contentBoxSize`.\r\n\t\tconst contentBoxSize =\r\n\t\t\tentry.contentBoxSize as unknown as ResizeObserverSize;\r\n\t\tentrySize = [ contentBoxSize.inlineSize, contentBoxSize.blockSize ];\r\n\t}\r\n\r\n\tconst [ width, height ] = entrySize.map( ( d ) => Math.round( d ) );\r\n\treturn { width, height };\r\n};\r\n\r\nconst RESIZE_ELEMENT_STYLES = {\r\n\tposition: 'absolute',\r\n\ttop: 0,\r\n\tleft: 0,\r\n\tright: 0,\r\n\tbottom: 0,\r\n\tpointerEvents: 'none',\r\n\topacity: 0,\r\n\toverflow: 'hidden',\r\n\tzIndex: -1,\r\n} as const;\r\n\r\ntype ResizeElementProps = {\r\n\tonResize: ( s: ObservedSize ) => void;\r\n};\r\n\r\nfunction ResizeElement( { onResize }: ResizeElementProps ) {\r\n\tconst resizeElementRef = useResizeObserver( ( entries ) => {\r\n\t\tconst newSize = extractSize( entries.at( -1 )! ); // Entries are never empty.\r\n\t\tonResize( newSize );\r\n\t} );\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tref={ resizeElementRef }\r\n\t\t\tstyle={ RESIZE_ELEMENT_STYLES }\r\n\t\t\taria-hidden=\"true\"\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nfunction sizeEquals( a: ObservedSize, b: ObservedSize ) {\r\n\treturn a.width === b.width && a.height === b.height;\r\n}\r\n\r\nconst NULL_SIZE: ObservedSize = { width: null, height: null };\r\n\r\n/**\r\n * Hook which allows to listen to the resize event of any target element when it changes size.\r\n * _Note: `useResizeObserver` will report `null` sizes until after first render.\r\n *\r\n * @example\r\n *\r\n * ```js\r\n * const App = () => {\r\n * \tconst [ resizeListener, sizes ] = useResizeObserver();\r\n *\r\n * \treturn (\r\n * \t\t<div>\r\n * \t\t\t{ resizeListener }\r\n * \t\t\tYour content here\r\n * \t\t</div>\r\n * \t);\r\n * };\r\n * ```\r\n */\r\nexport default function useLegacyResizeObserver(): [\r\n\tReactElement,\r\n\tObservedSize,\r\n] {\r\n\tconst [ size, setSize ] = useState( NULL_SIZE );\r\n\r\n\t// Using a ref to track the previous width / height to avoid unnecessary renders.\r\n\tconst previousSizeRef = useRef( NULL_SIZE );\r\n\r\n\tconst handleResize = useCallback( ( newSize: ObservedSize ) => {\r\n\t\tif ( ! sizeEquals( previousSizeRef.current, newSize ) ) {\r\n\t\t\tpreviousSizeRef.current = newSize;\r\n\t\t\tsetSize( newSize );\r\n\t\t}\r\n\t}, [] );\r\n\r\n\tconst resizeElement = <ResizeElement onResize={ handleResize } />;\r\n\treturn [ resizeElement, size ];\r\n}\r\n"],"mappings":"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","ignoreList":[]}