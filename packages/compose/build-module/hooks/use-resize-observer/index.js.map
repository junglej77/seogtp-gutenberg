{"version":3,"names":["useRef","useEvent","_useLegacyResizeObserver","_useResizeObserver","callback","resizeObserverOptions","callbackEvent","observedElementRef","resizeObserverRef","element","_resizeObserverRef$cu","current","ResizeObserver","resizeObserver","unobserve","observe","useResizeObserver","options"],"sources":["@wordpress/compose/src/hooks/use-resize-observer/index.ts"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useRef } from '@wordpress/element';\r\n/**\r\n * Internal dependencies\r\n */\r\nimport useEvent from '../use-event';\r\nimport type { ObservedSize } from './_legacy';\r\nimport _useLegacyResizeObserver from './_legacy';\r\n/**\r\n * External dependencies\r\n */\r\nimport type { ReactElement } from 'react';\r\n\r\n// This is the current implementation of `useResizeObserver`.\r\n//\r\n// The legacy implementation is still supported for backwards compatibility.\r\n// This is achieved by overloading the exported function with both signatures,\r\n// and detecting which API is being used at runtime.\r\nfunction _useResizeObserver< T extends HTMLElement >(\r\n\tcallback: ResizeObserverCallback,\r\n\tresizeObserverOptions: ResizeObserverOptions = {}\r\n): ( element?: T | null ) => void {\r\n\tconst callbackEvent = useEvent( callback );\r\n\r\n\tconst observedElementRef = useRef< T | null >();\r\n\tconst resizeObserverRef = useRef< ResizeObserver >();\r\n\treturn useEvent( ( element?: T | null ) => {\r\n\t\tif ( element === observedElementRef.current ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tobservedElementRef.current = element;\r\n\r\n\t\t// Set up `ResizeObserver`.\r\n\t\tresizeObserverRef.current ??= new ResizeObserver( callbackEvent );\r\n\t\tconst { current: resizeObserver } = resizeObserverRef;\r\n\r\n\t\t// Unobserve previous element.\r\n\t\tif ( observedElementRef.current ) {\r\n\t\t\tresizeObserver.unobserve( observedElementRef.current );\r\n\t\t}\r\n\r\n\t\t// Observe new element.\r\n\t\tif ( element ) {\r\n\t\t\tresizeObserver.observe( element, resizeObserverOptions );\r\n\t\t}\r\n\t} );\r\n}\r\n\r\n/**\r\n * Sets up a [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API)\r\n * for an HTML or SVG element.\r\n *\r\n * Pass the returned setter as a callback ref to the React element you want\r\n * to observe, or use it in layout effects for advanced use cases.\r\n *\r\n * @example\r\n *\r\n * ```tsx\r\n * const setElement = useResizeObserver(\r\n * \t( resizeObserverEntries ) => console.log( resizeObserverEntries ),\r\n * \t{ box: 'border-box' }\r\n * );\r\n * <div ref={ setElement } />;\r\n *\r\n * // The setter can be used in other ways, for example:\r\n * useLayoutEffect( () => {\r\n * \tsetElement( document.querySelector( `data-element-id=\"${ elementId }\"` ) );\r\n * }, [ elementId ] );\r\n * ```\r\n *\r\n * @param callback The `ResizeObserver` callback - [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/ResizeObserver#callback).\r\n * @param options  Options passed to `ResizeObserver.observe` when called - [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/observe#options). Changes will be ignored.\r\n */\r\nexport default function useResizeObserver< T extends Element >(\r\n\t/**\r\n\t * The `ResizeObserver` callback - [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/ResizeObserver#callback).\r\n\t */\r\n\tcallback: ResizeObserverCallback,\r\n\t/**\r\n\t * Options passed to `ResizeObserver.observe` when called - [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/observe#options). Changes will be ignored.\r\n\t */\r\n\toptions?: ResizeObserverOptions\r\n): ( element?: T | null ) => void;\r\n\r\n/**\r\n * **This is a legacy API and should not be used.**\r\n *\r\n * @deprecated Use the other `useResizeObserver` API instead: `const ref = useResizeObserver( ( entries ) => { ... } )`.\r\n *\r\n * Hook which allows to listen to the resize event of any target element when it changes size.\r\n * _Note: `useResizeObserver` will report `null` sizes until after first render.\r\n *\r\n * @example\r\n *\r\n * ```js\r\n * const App = () => {\r\n * \tconst [ resizeListener, sizes ] = useResizeObserver();\r\n *\r\n * \treturn (\r\n * \t\t<div>\r\n * \t\t\t{ resizeListener }\r\n * \t\t\tYour content here\r\n * \t\t</div>\r\n * \t);\r\n * };\r\n * ```\r\n */\r\nexport default function useResizeObserver(): [ ReactElement, ObservedSize ];\r\n\r\nexport default function useResizeObserver< T extends HTMLElement >(\r\n\tcallback?: ResizeObserverCallback,\r\n\toptions: ResizeObserverOptions = {}\r\n): ( ( element?: T | null ) => void ) | [ ReactElement, ObservedSize ] {\r\n\treturn callback\r\n\t\t? _useResizeObserver( callback, options )\r\n\t\t: _useLegacyResizeObserver();\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,oBAAoB;AAC3C;AACA;AACA;AACA,OAAOC,QAAQ,MAAM,cAAc;AAEnC,OAAOC,wBAAwB,MAAM,WAAW;AAChD;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkBA,CAC1BC,QAAgC,EAChCC,qBAA4C,GAAG,CAAC,CAAC,EAChB;EACjC,MAAMC,aAAa,GAAGL,QAAQ,CAAEG,QAAS,CAAC;EAE1C,MAAMG,kBAAkB,GAAGP,MAAM,CAAa,CAAC;EAC/C,MAAMQ,iBAAiB,GAAGR,MAAM,CAAmB,CAAC;EACpD,OAAOC,QAAQ,CAAIQ,OAAkB,IAAM;IAAA,IAAAC,qBAAA;IAC1C,IAAKD,OAAO,KAAKF,kBAAkB,CAACI,OAAO,EAAG;MAC7C;IACD;IACAJ,kBAAkB,CAACI,OAAO,GAAGF,OAAO;;IAEpC;IACA,CAAAC,qBAAA,GAAAF,iBAAiB,CAACG,OAAO,cAAAD,qBAAA,cAAAA,qBAAA,GAAzBF,iBAAiB,CAACG,OAAO,GAAK,IAAIC,cAAc,CAAEN,aAAc,CAAC;IACjE,MAAM;MAAEK,OAAO,EAAEE;IAAe,CAAC,GAAGL,iBAAiB;;IAErD;IACA,IAAKD,kBAAkB,CAACI,OAAO,EAAG;MACjCE,cAAc,CAACC,SAAS,CAAEP,kBAAkB,CAACI,OAAQ,CAAC;IACvD;;IAEA;IACA,IAAKF,OAAO,EAAG;MACdI,cAAc,CAACE,OAAO,CAAEN,OAAO,EAAEJ,qBAAsB,CAAC;IACzD;EACD,CAAE,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAe,SAASW,iBAAiBA,CACxCZ,QAAiC,EACjCa,OAA8B,GAAG,CAAC,CAAC,EACmC;EACtE,OAAOb,QAAQ,GACZD,kBAAkB,CAAEC,QAAQ,EAAEa,OAAQ,CAAC,GACvCf,wBAAwB,CAAC,CAAC;AAC9B","ignoreList":[]}