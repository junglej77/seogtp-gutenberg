{"version":3,"names":["createContext","useContext","useMediaQuery","BREAKPOINTS","xhuge","huge","wide","xlarge","large","medium","small","mobile","CONDITIONS","OPERATOR_EVALUATORS",">=","breakpointValue","width","<","ViewportMatchWidthContext","useViewportMatch","breakpoint","operator","simulatedWidth","mediaQuery","mediaQueryResult","undefined","__experimentalWidthProvider","Provider"],"sources":["@wordpress/compose/src/hooks/use-viewport-match/index.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { createContext, useContext } from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport useMediaQuery from '../use-media-query';\r\n\r\n/**\r\n * @typedef {\"xhuge\" | \"huge\" | \"wide\" | \"xlarge\" | \"large\" | \"medium\" | \"small\" | \"mobile\"} WPBreakpoint\r\n */\r\n\r\n/**\r\n * Hash of breakpoint names with pixel width at which it becomes effective.\r\n *\r\n * @see _breakpoints.scss\r\n *\r\n * @type {Record<WPBreakpoint, number>}\r\n */\r\nconst BREAKPOINTS = {\r\n\txhuge: 1920,\r\n\thuge: 1440,\r\n\twide: 1280,\r\n\txlarge: 1080,\r\n\tlarge: 960,\r\n\tmedium: 782,\r\n\tsmall: 600,\r\n\tmobile: 480,\r\n};\r\n\r\n/**\r\n * @typedef {\">=\" | \"<\"} WPViewportOperator\r\n */\r\n\r\n/**\r\n * Object mapping media query operators to the condition to be used.\r\n *\r\n * @type {Record<WPViewportOperator, string>}\r\n */\r\nconst CONDITIONS = {\r\n\t'>=': 'min-width',\r\n\t'<': 'max-width',\r\n};\r\n\r\n/**\r\n * Object mapping media query operators to a function that given a breakpointValue and a width evaluates if the operator matches the values.\r\n *\r\n * @type {Record<WPViewportOperator, (breakpointValue: number, width: number) => boolean>}\r\n */\r\nconst OPERATOR_EVALUATORS = {\r\n\t'>=': ( breakpointValue, width ) => width >= breakpointValue,\r\n\t'<': ( breakpointValue, width ) => width < breakpointValue,\r\n};\r\n\r\nconst ViewportMatchWidthContext = createContext(\r\n\t/** @type {null | number} */ ( null )\r\n);\r\n\r\n/**\r\n * Returns true if the viewport matches the given query, or false otherwise.\r\n *\r\n * @param {WPBreakpoint}       breakpoint      Breakpoint size name.\r\n * @param {WPViewportOperator} [operator=\">=\"] Viewport operator.\r\n *\r\n * @example\r\n *\r\n * ```js\r\n * useViewportMatch( 'huge', '<' );\r\n * useViewportMatch( 'medium' );\r\n * ```\r\n *\r\n * @return {boolean} Whether viewport matches query.\r\n */\r\nconst useViewportMatch = ( breakpoint, operator = '>=' ) => {\r\n\tconst simulatedWidth = useContext( ViewportMatchWidthContext );\r\n\tconst mediaQuery =\r\n\t\t! simulatedWidth &&\r\n\t\t`(${ CONDITIONS[ operator ] }: ${ BREAKPOINTS[ breakpoint ] }px)`;\r\n\tconst mediaQueryResult = useMediaQuery( mediaQuery || undefined );\r\n\tif ( simulatedWidth ) {\r\n\t\treturn OPERATOR_EVALUATORS[ operator ](\r\n\t\t\tBREAKPOINTS[ breakpoint ],\r\n\t\t\tsimulatedWidth\r\n\t\t);\r\n\t}\r\n\treturn mediaQueryResult;\r\n};\r\n\r\nuseViewportMatch.__experimentalWidthProvider =\r\n\tViewportMatchWidthContext.Provider;\r\n\r\nexport default useViewportMatch;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,aAAa,EAAEC,UAAU,QAAQ,oBAAoB;;AAE9D;AACA;AACA;AACA,OAAOC,aAAa,MAAM,oBAAoB;;AAE9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG;EACnBC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE,IAAI;EACVC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,IAAI;EACZC,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE,GAAG;EACXC,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE;AACT,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG;EAClB,IAAI,EAAE,WAAW;EACjB,GAAG,EAAE;AACN,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG;EAC3B,IAAI,EAAEC,CAAEC,eAAe,EAAEC,KAAK,KAAMA,KAAK,IAAID,eAAe;EAC5D,GAAG,EAAEE,CAAEF,eAAe,EAAEC,KAAK,KAAMA,KAAK,GAAGD;AAC5C,CAAC;AAED,MAAMG,yBAAyB,GAAGlB,aAAa,EAC9C,4BAA+B,IAChC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMmB,gBAAgB,GAAGA,CAAEC,UAAU,EAAEC,QAAQ,GAAG,IAAI,KAAM;EAC3D,MAAMC,cAAc,GAAGrB,UAAU,CAAEiB,yBAA0B,CAAC;EAC9D,MAAMK,UAAU,GACf,CAAED,cAAc,IACf,IAAIV,UAAU,CAAES,QAAQ,CAAI,KAAKlB,WAAW,CAAEiB,UAAU,CAAI,KAAI;EAClE,MAAMI,gBAAgB,GAAGtB,aAAa,CAAEqB,UAAU,IAAIE,SAAU,CAAC;EACjE,IAAKH,cAAc,EAAG;IACrB,OAAOT,mBAAmB,CAAEQ,QAAQ,CAAE,CACrClB,WAAW,CAAEiB,UAAU,CAAE,EACzBE,cACD,CAAC;EACF;EACA,OAAOE,gBAAgB;AACxB,CAAC;AAEDL,gBAAgB,CAACO,2BAA2B,GAC3CR,yBAAyB,CAACS,QAAQ;AAEnC,eAAeR,gBAAgB","ignoreList":[]}