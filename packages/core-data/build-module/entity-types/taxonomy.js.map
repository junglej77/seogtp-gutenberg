{"version":3,"names":[],"sources":["@wordpress/core-data/src/entity-types/taxonomy.ts"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport type { Context, ContextualField, OmitNevers } from './helpers';\r\n\r\nimport type { BaseEntityRecords as _BaseEntityRecords } from './base-entity-records';\r\n\r\ndeclare module './base-entity-records' {\r\n\texport namespace BaseEntityRecords {\r\n\t\texport interface Taxonomy< C extends Context > {\r\n\t\t\t/**\r\n\t\t\t * All capabilities used by the taxonomy.\r\n\t\t\t */\r\n\t\t\tcapabilities: ContextualField<\r\n\t\t\t\tRecord< string, string >,\r\n\t\t\t\t'edit',\r\n\t\t\t\tC\r\n\t\t\t>;\r\n\t\t\t/**\r\n\t\t\t * A human-readable description of the taxonomy.\r\n\t\t\t */\r\n\t\t\tdescription: ContextualField< string, 'view' | 'edit', C >;\r\n\t\t\t/**\r\n\t\t\t * Whether or not the taxonomy should have children.\r\n\t\t\t */\r\n\t\t\thierarchical: ContextualField< boolean, 'view' | 'edit', C >;\r\n\t\t\t/**\r\n\t\t\t * Human-readable labels for the taxonomy for various contexts.\r\n\t\t\t */\r\n\t\t\tlabels: ContextualField< Record< string, string >, 'edit', C >;\r\n\t\t\t/**\r\n\t\t\t * The title for the taxonomy.\r\n\t\t\t */\r\n\t\t\tname: string;\r\n\t\t\t/**\r\n\t\t\t * An alphanumeric identifier for the taxonomy.\r\n\t\t\t */\r\n\t\t\tslug: string;\r\n\t\t\t/**\r\n\t\t\t * Whether or not the term cloud should be displayed.\r\n\t\t\t */\r\n\t\t\tshow_cloud: ContextualField< boolean, 'edit', C >;\r\n\t\t\t/**\r\n\t\t\t * Types associated with the taxonomy.\r\n\t\t\t */\r\n\t\t\ttypes: ContextualField< string[], 'view' | 'edit', C >;\r\n\t\t\t/**\r\n\t\t\t * REST base route for the taxonomy.\r\n\t\t\t */\r\n\t\t\trest_base: string;\r\n\t\t\t/**\r\n\t\t\t * REST namespace route for the taxonomy.\r\n\t\t\t */\r\n\t\t\trest_namespace: string;\r\n\t\t\t/**\r\n\t\t\t * The visibility settings for the taxonomy.\r\n\t\t\t */\r\n\t\t\tvisibility: TaxonomyVisibility;\r\n\t\t}\r\n\r\n\t\texport interface TaxonomyVisibility {\r\n\t\t\t/**\r\n\t\t\t * Whether a taxonomy is intended for use publicly either via the admin interface or by front-end users.\r\n\t\t\t */\r\n\t\t\tpublic: boolean;\r\n\t\t\t/**\r\n\t\t\t * Whether the taxonomy is publicly queryable.\r\n\t\t\t */\r\n\t\t\tpublicly_queryable: boolean;\r\n\t\t\t/**\r\n\t\t\t * Whether to generate a default UI for managing this taxonomy.\r\n\t\t\t */\r\n\t\t\tshow_ui: boolean;\r\n\t\t\t/**\r\n\t\t\t * Whether to allow automatic creation of taxonomy columns on associated post-types table.\r\n\t\t\t */\r\n\t\t\tshow_admin_column: boolean;\r\n\t\t\t/**\r\n\t\t\t * Whether to make the taxonomy available for selection in navigation menus.\r\n\t\t\t */\r\n\t\t\tshow_in_nav_menus: boolean;\r\n\t\t\t/**\r\n\t\t\t * Whether to show the taxonomy in the quick/bulk edit panel.\r\n\t\t\t */\r\n\t\t\tshow_in_quick_edit: boolean;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport type Taxonomy< C extends Context = 'edit' > = OmitNevers<\r\n\t_BaseEntityRecords.Taxonomy< C >\r\n>;\r\n"],"mappings":"","ignoreList":[]}