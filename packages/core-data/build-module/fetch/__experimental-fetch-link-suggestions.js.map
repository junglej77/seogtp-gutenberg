{"version":3,"names":["apiFetch","addQueryArgs","decodeEntities","__","fetchLinkSuggestions","search","searchOptions","editorSettings","searchOptionsToUse","isInitialSuggestions","initialSuggestionsSearchOptions","type","subtype","page","perPage","disablePostFormats","queries","push","path","per_page","then","results","map","result","id","url","title","kind","catch","source_url","rendered","responses","Promise","all","flat","filter","sortResults","slice","searchTokens","tokenize","scores","titleTokens","matchingTokens","titleToken","some","searchToken","includes","length","sort","a","b","text","toLowerCase","match"],"sources":["@wordpress/core-data/src/fetch/__experimental-fetch-link-suggestions.ts"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport apiFetch from '@wordpress/api-fetch';\r\nimport { addQueryArgs } from '@wordpress/url';\r\nimport { decodeEntities } from '@wordpress/html-entities';\r\nimport { __ } from '@wordpress/i18n';\r\n\r\nexport type SearchOptions = {\r\n\t/**\r\n\t * Displays initial search suggestions, when true.\r\n\t */\r\n\tisInitialSuggestions?: boolean;\r\n\t/**\r\n\t * Search options for initial suggestions.\r\n\t */\r\n\tinitialSuggestionsSearchOptions?: Omit<\r\n\t\tSearchOptions,\r\n\t\t'isInitialSuggestions' | 'initialSuggestionsSearchOptions'\r\n\t>;\r\n\t/**\r\n\t * Filters by search type.\r\n\t */\r\n\ttype?: 'attachment' | 'post' | 'term' | 'post-format';\r\n\t/**\r\n\t * Slug of the post-type or taxonomy.\r\n\t */\r\n\tsubtype?: string;\r\n\t/**\r\n\t * Which page of results to return.\r\n\t */\r\n\tpage?: number;\r\n\t/**\r\n\t * Search results per page.\r\n\t */\r\n\tperPage?: number;\r\n};\r\n\r\nexport type EditorSettings = {\r\n\t/**\r\n\t * Disables post formats, when true.\r\n\t */\r\n\tdisablePostFormats?: boolean;\r\n};\r\n\r\ntype SearchAPIResult = {\r\n\tid: number;\r\n\ttitle: string;\r\n\turl: string;\r\n\ttype: string;\r\n\tsubtype: string;\r\n};\r\n\r\ntype MediaAPIResult = {\r\n\tid: number;\r\n\ttitle: { rendered: string };\r\n\tsource_url: string;\r\n\ttype: string;\r\n};\r\n\r\nexport type SearchResult = {\r\n\t/**\r\n\t * Post or term id.\r\n\t */\r\n\tid: number;\r\n\t/**\r\n\t * Link url.\r\n\t */\r\n\turl: string;\r\n\t/**\r\n\t * Title of the link.\r\n\t */\r\n\ttitle: string;\r\n\t/**\r\n\t * The taxonomy or post type slug or type URL.\r\n\t */\r\n\ttype: string;\r\n\t/**\r\n\t * Link kind of post-type or taxonomy\r\n\t */\r\n\tkind?: string;\r\n};\r\n\r\n/**\r\n * Fetches link suggestions from the WordPress API.\r\n *\r\n * WordPress does not support searching multiple tables at once, e.g. posts and terms, so we\r\n * perform multiple queries at the same time and then merge the results together.\r\n *\r\n * @param search\r\n * @param searchOptions\r\n * @param editorSettings\r\n *\r\n * @example\r\n * ```js\r\n * import { __experimentalFetchLinkSuggestions as fetchLinkSuggestions } from '@wordpress/core-data';\r\n *\r\n * //...\r\n *\r\n * export function initialize( id, settings ) {\r\n *\r\n * settings.__experimentalFetchLinkSuggestions = (\r\n *     search,\r\n *     searchOptions\r\n * ) => fetchLinkSuggestions( search, searchOptions, settings );\r\n * ```\r\n */\r\nexport default async function fetchLinkSuggestions(\r\n\tsearch: string,\r\n\tsearchOptions: SearchOptions = {},\r\n\teditorSettings: EditorSettings = {}\r\n): Promise< SearchResult[] > {\r\n\tconst searchOptionsToUse =\r\n\t\tsearchOptions.isInitialSuggestions &&\r\n\t\tsearchOptions.initialSuggestionsSearchOptions\r\n\t\t\t? {\r\n\t\t\t\t\t...searchOptions,\r\n\t\t\t\t\t...searchOptions.initialSuggestionsSearchOptions,\r\n\t\t\t  }\r\n\t\t\t: searchOptions;\r\n\r\n\tconst {\r\n\t\ttype,\r\n\t\tsubtype,\r\n\t\tpage,\r\n\t\tperPage = searchOptions.isInitialSuggestions ? 3 : 20,\r\n\t} = searchOptionsToUse;\r\n\r\n\tconst { disablePostFormats = false } = editorSettings;\r\n\r\n\tconst queries: Promise< SearchResult[] >[] = [];\r\n\r\n\tif ( ! type || type === 'post' ) {\r\n\t\tqueries.push(\r\n\t\t\tapiFetch< SearchAPIResult[] >( {\r\n\t\t\t\tpath: addQueryArgs( '/wp/v2/search', {\r\n\t\t\t\t\tsearch,\r\n\t\t\t\t\tpage,\r\n\t\t\t\t\tper_page: perPage,\r\n\t\t\t\t\ttype: 'post',\r\n\t\t\t\t\tsubtype,\r\n\t\t\t\t} ),\r\n\t\t\t} )\r\n\t\t\t\t.then( ( results ) => {\r\n\t\t\t\t\treturn results.map( ( result ) => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tid: result.id,\r\n\t\t\t\t\t\t\turl: result.url,\r\n\t\t\t\t\t\t\ttitle:\r\n\t\t\t\t\t\t\t\tdecodeEntities( result.title || '' ) ||\r\n\t\t\t\t\t\t\t\t__( '(no title)' ),\r\n\t\t\t\t\t\t\ttype: result.subtype || result.type,\r\n\t\t\t\t\t\t\tkind: 'post-type',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t} );\r\n\t\t\t\t} )\r\n\t\t\t\t.catch( () => [] ) // Fail by returning no results.\r\n\t\t);\r\n\t}\r\n\r\n\tif ( ! type || type === 'term' ) {\r\n\t\tqueries.push(\r\n\t\t\tapiFetch< SearchAPIResult[] >( {\r\n\t\t\t\tpath: addQueryArgs( '/wp/v2/search', {\r\n\t\t\t\t\tsearch,\r\n\t\t\t\t\tpage,\r\n\t\t\t\t\tper_page: perPage,\r\n\t\t\t\t\ttype: 'term',\r\n\t\t\t\t\tsubtype,\r\n\t\t\t\t} ),\r\n\t\t\t} )\r\n\t\t\t\t.then( ( results ) => {\r\n\t\t\t\t\treturn results.map( ( result ) => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tid: result.id,\r\n\t\t\t\t\t\t\turl: result.url,\r\n\t\t\t\t\t\t\ttitle:\r\n\t\t\t\t\t\t\t\tdecodeEntities( result.title || '' ) ||\r\n\t\t\t\t\t\t\t\t__( '(no title)' ),\r\n\t\t\t\t\t\t\ttype: result.subtype || result.type,\r\n\t\t\t\t\t\t\tkind: 'taxonomy',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t} );\r\n\t\t\t\t} )\r\n\t\t\t\t.catch( () => [] ) // Fail by returning no results.\r\n\t\t);\r\n\t}\r\n\r\n\tif ( ! disablePostFormats && ( ! type || type === 'post-format' ) ) {\r\n\t\tqueries.push(\r\n\t\t\tapiFetch< SearchAPIResult[] >( {\r\n\t\t\t\tpath: addQueryArgs( '/wp/v2/search', {\r\n\t\t\t\t\tsearch,\r\n\t\t\t\t\tpage,\r\n\t\t\t\t\tper_page: perPage,\r\n\t\t\t\t\ttype: 'post-format',\r\n\t\t\t\t\tsubtype,\r\n\t\t\t\t} ),\r\n\t\t\t} )\r\n\t\t\t\t.then( ( results ) => {\r\n\t\t\t\t\treturn results.map( ( result ) => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tid: result.id,\r\n\t\t\t\t\t\t\turl: result.url,\r\n\t\t\t\t\t\t\ttitle:\r\n\t\t\t\t\t\t\t\tdecodeEntities( result.title || '' ) ||\r\n\t\t\t\t\t\t\t\t__( '(no title)' ),\r\n\t\t\t\t\t\t\ttype: result.subtype || result.type,\r\n\t\t\t\t\t\t\tkind: 'taxonomy',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t} );\r\n\t\t\t\t} )\r\n\t\t\t\t.catch( () => [] ) // Fail by returning no results.\r\n\t\t);\r\n\t}\r\n\r\n\tif ( ! type || type === 'attachment' ) {\r\n\t\tqueries.push(\r\n\t\t\tapiFetch< MediaAPIResult[] >( {\r\n\t\t\t\tpath: addQueryArgs( '/wp/v2/media', {\r\n\t\t\t\t\tsearch,\r\n\t\t\t\t\tpage,\r\n\t\t\t\t\tper_page: perPage,\r\n\t\t\t\t} ),\r\n\t\t\t} )\r\n\t\t\t\t.then( ( results ) => {\r\n\t\t\t\t\treturn results.map( ( result ) => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tid: result.id,\r\n\t\t\t\t\t\t\turl: result.source_url,\r\n\t\t\t\t\t\t\ttitle:\r\n\t\t\t\t\t\t\t\tdecodeEntities( result.title.rendered || '' ) ||\r\n\t\t\t\t\t\t\t\t__( '(no title)' ),\r\n\t\t\t\t\t\t\ttype: result.type,\r\n\t\t\t\t\t\t\tkind: 'media',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t} );\r\n\t\t\t\t} )\r\n\t\t\t\t.catch( () => [] ) // Fail by returning no results.\r\n\t\t);\r\n\t}\r\n\r\n\tconst responses = await Promise.all( queries );\r\n\r\n\tlet results = responses.flat();\r\n\tresults = results.filter( ( result ) => !! result.id );\r\n\tresults = sortResults( results, search );\r\n\tresults = results.slice( 0, perPage );\r\n\treturn results;\r\n}\r\n\r\n/**\r\n * Sort search results by relevance to the given query.\r\n *\r\n * Sorting is necessary as we're querying multiple endpoints and merging the results. For example\r\n * a taxonomy title might be more relevant than a post title, but by default taxonomy results will\r\n * be ordered after all the (potentially irrelevant) post results.\r\n *\r\n * We sort by scoring each result, where the score is the number of tokens in the title that are\r\n * also in the search query, divided by the total number of tokens in the title. This gives us a\r\n * score between 0 and 1, where 1 is a perfect match.\r\n *\r\n * @param results\r\n * @param search\r\n */\r\nexport function sortResults( results: SearchResult[], search: string ) {\r\n\tconst searchTokens = tokenize( search );\r\n\r\n\tconst scores = {};\r\n\tfor ( const result of results ) {\r\n\t\tif ( result.title ) {\r\n\t\t\tconst titleTokens = tokenize( result.title );\r\n\t\t\tconst matchingTokens = titleTokens.filter( ( titleToken ) =>\r\n\t\t\t\tsearchTokens.some( ( searchToken ) =>\r\n\t\t\t\t\ttitleToken.includes( searchToken )\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t\tscores[ result.id ] = matchingTokens.length / titleTokens.length;\r\n\t\t} else {\r\n\t\t\tscores[ result.id ] = 0;\r\n\t\t}\r\n\t}\r\n\r\n\treturn results.sort( ( a, b ) => scores[ b.id ] - scores[ a.id ] );\r\n}\r\n\r\n/**\r\n * Turns text into an array of tokens, with whitespace and punctuation removed.\r\n *\r\n * For example, `\"I'm having a ball.\"` becomes `[ \"im\", \"having\", \"a\", \"ball\" ]`.\r\n *\r\n * @param text\r\n */\r\nexport function tokenize( text: string ): string[] {\r\n\t// \\p{L} matches any kind of letter from any language.\r\n\t// \\p{N} matches any kind of numeric character.\r\n\treturn text.toLowerCase().match( /[\\p{L}\\p{N}]+/gu ) || [];\r\n}\r\n"],"mappings":"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","ignoreList":[]}