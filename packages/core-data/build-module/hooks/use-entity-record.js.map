{"version":3,"names":["useDispatch","useSelect","deprecated","useMemo","useQuerySelect","store","coreStore","EMPTY_OBJECT","useEntityRecord","kind","name","recordId","options","enabled","editEntityRecord","saveEditedEntityRecord","mutations","edit","record","editOptions","save","saveOptions","throwOnError","editedRecord","hasEdits","edits","select","getEditedEntityRecord","hasEditsForEntityRecord","getEntityRecordNonTransientEdits","data","querySelectRest","query","getEntityRecord","__experimentalUseEntityRecord","alternative","since"],"sources":["@wordpress/core-data/src/hooks/use-entity-record.ts"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useDispatch, useSelect } from '@wordpress/data';\r\nimport deprecated from '@wordpress/deprecated';\r\nimport { useMemo } from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport useQuerySelect from './use-query-select';\r\nimport { store as coreStore } from '../';\r\nimport type { Status } from './constants';\r\n\r\nexport interface EntityRecordResolution< RecordType > {\r\n\t/** The requested entity record */\r\n\trecord: RecordType | null;\r\n\r\n\t/** The edited entity record */\r\n\teditedRecord: Partial< RecordType >;\r\n\r\n\t/** The edits to the edited entity record */\r\n\tedits: Partial< RecordType >;\r\n\r\n\t/** Apply local (in-browser) edits to the edited entity record */\r\n\tedit: ( diff: Partial< RecordType > ) => void;\r\n\r\n\t/** Persist the edits to the server */\r\n\tsave: () => Promise< void >;\r\n\r\n\t/**\r\n\t * Is the record still being resolved?\r\n\t */\r\n\tisResolving: boolean;\r\n\r\n\t/**\r\n\t * Does the record have any local edits?\r\n\t */\r\n\thasEdits: boolean;\r\n\r\n\t/**\r\n\t * Is the record resolved by now?\r\n\t */\r\n\thasResolved: boolean;\r\n\r\n\t/** Resolution status */\r\n\tstatus: Status;\r\n}\r\n\r\nexport interface Options {\r\n\t/**\r\n\t * Whether to run the query or short-circuit and return null.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tenabled: boolean;\r\n}\r\n\r\nconst EMPTY_OBJECT = {};\r\n\r\n/**\r\n * Resolves the specified entity record.\r\n *\r\n * @since 6.1.0 Introduced in WordPress core.\r\n *\r\n * @param    kind     Kind of the entity, e.g. `root` or a `postType`. See rootEntitiesConfig in ../entities.ts for a list of available kinds.\r\n * @param    name     Name of the entity, e.g. `plugin` or a `post`. See rootEntitiesConfig in ../entities.ts for a list of available names.\r\n * @param    recordId ID of the requested entity record.\r\n * @param    options  Optional hook options.\r\n * @example\r\n * ```js\r\n * import { useEntityRecord } from '@wordpress/core-data';\r\n *\r\n * function PageTitleDisplay( { id } ) {\r\n *   const { record, isResolving } = useEntityRecord( 'postType', 'page', id );\r\n *\r\n *   if ( isResolving ) {\r\n *     return 'Loading...';\r\n *   }\r\n *\r\n *   return record.title;\r\n * }\r\n *\r\n * // Rendered in the application:\r\n * // <PageTitleDisplay id={ 1 } />\r\n * ```\r\n *\r\n * In the above example, when `PageTitleDisplay` is rendered into an\r\n * application, the page and the resolution details will be retrieved from\r\n * the store state using `getEntityRecord()`, or resolved if missing.\r\n *\r\n * @example\r\n * ```js\r\n * import { useCallback } from 'react';\r\n * import { useDispatch } from '@wordpress/data';\r\n * import { __ } from '@wordpress/i18n';\r\n * import { TextControl } from '@wordpress/components';\r\n * import { store as noticeStore } from '@wordpress/notices';\r\n * import { useEntityRecord } from '@wordpress/core-data';\r\n *\r\n * function PageRenameForm( { id } ) {\r\n * \tconst page = useEntityRecord( 'postType', 'page', id );\r\n * \tconst { createSuccessNotice, createErrorNotice } =\r\n * \t\tuseDispatch( noticeStore );\r\n *\r\n * \tconst setTitle = useCallback( ( title ) => {\r\n * \t\tpage.edit( { title } );\r\n * \t}, [ page.edit ] );\r\n *\r\n * \tif ( page.isResolving ) {\r\n * \t\treturn 'Loading...';\r\n * \t}\r\n *\r\n * \tasync function onRename( event ) {\r\n * \t\tevent.preventDefault();\r\n * \t\ttry {\r\n * \t\t\tawait page.save();\r\n * \t\t\tcreateSuccessNotice( __( 'Page renamed.' ), {\r\n * \t\t\t\ttype: 'snackbar',\r\n * \t\t\t} );\r\n * \t\t} catch ( error ) {\r\n * \t\t\tcreateErrorNotice( error.message, { type: 'snackbar' } );\r\n * \t\t}\r\n * \t}\r\n *\r\n * \treturn (\r\n * \t\t<form onSubmit={ onRename }>\r\n * \t\t\t<TextControl\r\n * \t\t\t\tlabel={ __( 'Name' ) }\r\n * \t\t\t\tvalue={ page.editedRecord.title }\r\n * \t\t\t\tonChange={ setTitle }\r\n * \t\t\t/>\r\n * \t\t\t<button type=\"submit\">{ __( 'Save' ) }</button>\r\n * \t\t</form>\r\n * \t);\r\n * }\r\n *\r\n * // Rendered in the application:\r\n * // <PageRenameForm id={ 1 } />\r\n * ```\r\n *\r\n * In the above example, updating and saving the page title is handled\r\n * via the `edit()` and `save()` mutation helpers provided by\r\n * `useEntityRecord()`;\r\n *\r\n * @return Entity record data.\r\n * @template RecordType\r\n */\r\nexport default function useEntityRecord< RecordType >(\r\n\tkind: string,\r\n\tname: string,\r\n\trecordId: string | number,\r\n\toptions: Options = { enabled: true }\r\n): EntityRecordResolution< RecordType > {\r\n\tconst { editEntityRecord, saveEditedEntityRecord } =\r\n\t\tuseDispatch( coreStore );\r\n\r\n\tconst mutations = useMemo(\r\n\t\t() => ( {\r\n\t\t\tedit: ( record, editOptions: any = {} ) =>\r\n\t\t\t\teditEntityRecord( kind, name, recordId, record, editOptions ),\r\n\t\t\tsave: ( saveOptions: any = {} ) =>\r\n\t\t\t\tsaveEditedEntityRecord( kind, name, recordId, {\r\n\t\t\t\t\tthrowOnError: true,\r\n\t\t\t\t\t...saveOptions,\r\n\t\t\t\t} ),\r\n\t\t} ),\r\n\t\t[ editEntityRecord, kind, name, recordId, saveEditedEntityRecord ]\r\n\t);\r\n\r\n\tconst { editedRecord, hasEdits, edits } = useSelect(\r\n\t\t( select ) => {\r\n\t\t\tif ( ! options.enabled ) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\teditedRecord: EMPTY_OBJECT,\r\n\t\t\t\t\thasEdits: false,\r\n\t\t\t\t\tedits: EMPTY_OBJECT,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\teditedRecord: select( coreStore ).getEditedEntityRecord(\r\n\t\t\t\t\tkind,\r\n\t\t\t\t\tname,\r\n\t\t\t\t\trecordId\r\n\t\t\t\t),\r\n\t\t\t\thasEdits: select( coreStore ).hasEditsForEntityRecord(\r\n\t\t\t\t\tkind,\r\n\t\t\t\t\tname,\r\n\t\t\t\t\trecordId\r\n\t\t\t\t),\r\n\t\t\t\tedits: select( coreStore ).getEntityRecordNonTransientEdits(\r\n\t\t\t\t\tkind,\r\n\t\t\t\t\tname,\r\n\t\t\t\t\trecordId\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\t},\r\n\t\t[ kind, name, recordId, options.enabled ]\r\n\t);\r\n\r\n\tconst { data: record, ...querySelectRest } = useQuerySelect(\r\n\t\t( query ) => {\r\n\t\t\tif ( ! options.enabled ) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdata: null,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treturn query( coreStore ).getEntityRecord( kind, name, recordId );\r\n\t\t},\r\n\t\t[ kind, name, recordId, options.enabled ]\r\n\t);\r\n\r\n\treturn {\r\n\t\trecord,\r\n\t\teditedRecord,\r\n\t\thasEdits,\r\n\t\tedits,\r\n\t\t...querySelectRest,\r\n\t\t...mutations,\r\n\t};\r\n}\r\n\r\nexport function __experimentalUseEntityRecord(\r\n\tkind: string,\r\n\tname: string,\r\n\trecordId: any,\r\n\toptions: any\r\n) {\r\n\tdeprecated( `wp.data.__experimentalUseEntityRecord`, {\r\n\t\talternative: 'wp.data.useEntityRecord',\r\n\t\tsince: '6.1',\r\n\t} );\r\n\treturn useEntityRecord( kind, name, recordId, options );\r\n}\r\n"],"mappings":"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","ignoreList":[]}