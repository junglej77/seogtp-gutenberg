{"version":3,"names":["addQueryArgs","deprecated","useSelect","useMemo","useQuerySelect","store","coreStore","unlock","EMPTY_ARRAY","useEntityRecords","kind","name","queryArgs","options","enabled","queryAsString","data","records","rest","query","getEntityRecords","totalItems","totalPages","select","getEntityRecordsTotalItems","getEntityRecordsTotalPages","__experimentalUseEntityRecords","alternative","since","useEntityRecordsWithPermissions","entityConfig","getEntityConfig","ret","ids","_data$map","map","record","_entityConfig$key","key","permissions","getEntityRecordsPermissions","dataWithPermissions","_data$map2","index"],"sources":["@wordpress/core-data/src/hooks/use-entity-records.ts"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { addQueryArgs } from '@wordpress/url';\r\nimport deprecated from '@wordpress/deprecated';\r\nimport { useSelect } from '@wordpress/data';\r\nimport { useMemo } from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport useQuerySelect from './use-query-select';\r\nimport { store as coreStore } from '../';\r\nimport type { Options } from './use-entity-record';\r\nimport type { Status } from './constants';\r\nimport { unlock } from '../lock-unlock';\r\n\r\ninterface EntityRecordsResolution< RecordType > {\r\n\t/** The requested entity record */\r\n\trecords: RecordType[] | null;\r\n\r\n\t/**\r\n\t * Is the record still being resolved?\r\n\t */\r\n\tisResolving: boolean;\r\n\r\n\t/**\r\n\t * Is the record resolved by now?\r\n\t */\r\n\thasResolved: boolean;\r\n\r\n\t/** Resolution status */\r\n\tstatus: Status;\r\n\r\n\t/**\r\n\t * The total number of available items (if not paginated).\r\n\t */\r\n\ttotalItems: number | null;\r\n\r\n\t/**\r\n\t * The total number of pages.\r\n\t */\r\n\ttotalPages: number | null;\r\n}\r\n\r\nconst EMPTY_ARRAY = [];\r\n\r\n/**\r\n * Resolves the specified entity records.\r\n *\r\n * @since 6.1.0 Introduced in WordPress core.\r\n *\r\n * @param    kind      Kind of the entity, e.g. `root` or a `postType`. See rootEntitiesConfig in ../entities.ts for a list of available kinds.\r\n * @param    name      Name of the entity, e.g. `plugin` or a `post`. See rootEntitiesConfig in ../entities.ts for a list of available names.\r\n * @param    queryArgs Optional HTTP query description for how to fetch the data, passed to the requested API endpoint.\r\n * @param    options   Optional hook options.\r\n * @example\r\n * ```js\r\n * import { useEntityRecords } from '@wordpress/core-data';\r\n *\r\n * function PageTitlesList() {\r\n *   const { records, isResolving } = useEntityRecords( 'postType', 'page' );\r\n *\r\n *   if ( isResolving ) {\r\n *     return 'Loading...';\r\n *   }\r\n *\r\n *   return (\r\n *     <ul>\r\n *       {records.map(( page ) => (\r\n *         <li>{ page.title }</li>\r\n *       ))}\r\n *     </ul>\r\n *   );\r\n * }\r\n *\r\n * // Rendered in the application:\r\n * // <PageTitlesList />\r\n * ```\r\n *\r\n * In the above example, when `PageTitlesList` is rendered into an\r\n * application, the list of records and the resolution details will be retrieved from\r\n * the store state using `getEntityRecords()`, or resolved if missing.\r\n *\r\n * @return Entity records data.\r\n * @template RecordType\r\n */\r\nexport default function useEntityRecords< RecordType >(\r\n\tkind: string,\r\n\tname: string,\r\n\tqueryArgs: Record< string, unknown > = {},\r\n\toptions: Options = { enabled: true }\r\n): EntityRecordsResolution< RecordType > {\r\n\t// Serialize queryArgs to a string that can be safely used as a React dep.\r\n\t// We can't just pass queryArgs as one of the deps, because if it is passed\r\n\t// as an object literal, then it will be a different object on each call even\r\n\t// if the values remain the same.\r\n\tconst queryAsString = addQueryArgs( '', queryArgs );\r\n\r\n\tconst { data: records, ...rest } = useQuerySelect(\r\n\t\t( query ) => {\r\n\t\t\tif ( ! options.enabled ) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t// Avoiding returning a new reference on every execution.\r\n\t\t\t\t\tdata: EMPTY_ARRAY,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treturn query( coreStore ).getEntityRecords( kind, name, queryArgs );\r\n\t\t},\r\n\t\t[ kind, name, queryAsString, options.enabled ]\r\n\t);\r\n\r\n\tconst { totalItems, totalPages } = useSelect(\r\n\t\t( select ) => {\r\n\t\t\tif ( ! options.enabled ) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\ttotalItems: null,\r\n\t\t\t\t\ttotalPages: null,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\ttotalItems: select( coreStore ).getEntityRecordsTotalItems(\r\n\t\t\t\t\tkind,\r\n\t\t\t\t\tname,\r\n\t\t\t\t\tqueryArgs\r\n\t\t\t\t),\r\n\t\t\t\ttotalPages: select( coreStore ).getEntityRecordsTotalPages(\r\n\t\t\t\t\tkind,\r\n\t\t\t\t\tname,\r\n\t\t\t\t\tqueryArgs\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\t},\r\n\t\t[ kind, name, queryAsString, options.enabled ]\r\n\t);\r\n\r\n\treturn {\r\n\t\trecords,\r\n\t\ttotalItems,\r\n\t\ttotalPages,\r\n\t\t...rest,\r\n\t};\r\n}\r\n\r\nexport function __experimentalUseEntityRecords(\r\n\tkind: string,\r\n\tname: string,\r\n\tqueryArgs: any,\r\n\toptions: any\r\n) {\r\n\tdeprecated( `wp.data.__experimentalUseEntityRecords`, {\r\n\t\talternative: 'wp.data.useEntityRecords',\r\n\t\tsince: '6.1',\r\n\t} );\r\n\treturn useEntityRecords( kind, name, queryArgs, options );\r\n}\r\n\r\nexport function useEntityRecordsWithPermissions< RecordType >(\r\n\tkind: string,\r\n\tname: string,\r\n\tqueryArgs: Record< string, unknown > = {},\r\n\toptions: Options = { enabled: true }\r\n): EntityRecordsResolution< RecordType > {\r\n\tconst entityConfig = useSelect(\r\n\t\t( select ) => select( coreStore ).getEntityConfig( kind, name ),\r\n\t\t[ kind, name ]\r\n\t);\r\n\tconst { records: data, ...ret } = useEntityRecords(\r\n\t\tkind,\r\n\t\tname,\r\n\t\tqueryArgs,\r\n\t\toptions\r\n\t);\r\n\tconst ids = useMemo(\r\n\t\t() =>\r\n\t\t\tdata?.map(\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\t( record: RecordType ) => record[ entityConfig?.key ?? 'id' ]\r\n\t\t\t) ?? [],\r\n\t\t[ data, entityConfig?.key ]\r\n\t);\r\n\r\n\tconst permissions = useSelect(\r\n\t\t( select ) => {\r\n\t\t\tconst { getEntityRecordsPermissions } = unlock(\r\n\t\t\t\tselect( coreStore )\r\n\t\t\t);\r\n\t\t\treturn getEntityRecordsPermissions( kind, name, ids );\r\n\t\t},\r\n\t\t[ ids, kind, name ]\r\n\t);\r\n\r\n\tconst dataWithPermissions = useMemo(\r\n\t\t() =>\r\n\t\t\tdata?.map( ( record, index ) => ( {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\t...record,\r\n\t\t\t\tpermissions: permissions[ index ],\r\n\t\t\t} ) ) ?? [],\r\n\t\t[ data, permissions ]\r\n\t);\r\n\r\n\treturn { records: dataWithPermissions, ...ret };\r\n}\r\n"],"mappings":"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","ignoreList":[]}