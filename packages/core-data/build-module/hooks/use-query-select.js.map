{"version":3,"names":["useSelect","memoize","Status","META_SELECTORS","useQuerySelect","mapQuerySelect","deps","select","registry","resolve","store","enrichSelectors","selectors","resolvers","selectorName","includes","Object","defineProperty","get","args","data","resolutionStatus","getResolutionState","status","Resolving","Success","Error","undefined","Idle","isResolving","hasStarted","hasResolved"],"sources":["@wordpress/core-data/src/hooks/use-query-select.ts"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useSelect } from '@wordpress/data';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport memoize from './memoize';\r\nimport { Status } from './constants';\r\n\r\nexport const META_SELECTORS = [\r\n\t'getIsResolving',\r\n\t'hasStartedResolution',\r\n\t'hasFinishedResolution',\r\n\t'isResolving',\r\n\t'getCachedResolvers',\r\n];\r\n\r\ninterface QuerySelectResponse< Data > {\r\n\t/** the requested selector return value */\r\n\tdata: Data;\r\n\r\n\t/** is the record still being resolved? Via the `isResolving` meta-selector */\r\n\tisResolving: boolean;\r\n\r\n\t/** was the resolution started? Via the `hasStartedResolution` meta-selector */\r\n\thasStarted: boolean;\r\n\r\n\t/** has the resolution finished? Via the `hasFinishedResolution` meta-selector. */\r\n\thasResolved: boolean;\r\n}\r\n\r\n/**\r\n * Like useSelect, but the selectors return objects containing\r\n * both the original data AND the resolution info.\r\n *\r\n * @since 6.1.0 Introduced in WordPress core.\r\n * @private\r\n *\r\n * @param {Function} mapQuerySelect see useSelect\r\n * @param {Array}    deps           see useSelect\r\n *\r\n * @example\r\n * ```js\r\n * import { useQuerySelect } from '@wordpress/data';\r\n * import { store as coreDataStore } from '@wordpress/core-data';\r\n *\r\n * function PageTitleDisplay( { id } ) {\r\n *   const { data: page, isResolving } = useQuerySelect( ( query ) => {\r\n *     return query( coreDataStore ).getEntityRecord( 'postType', 'page', id )\r\n *   }, [ id ] );\r\n *\r\n *   if ( isResolving ) {\r\n *     return 'Loading...';\r\n *   }\r\n *\r\n *   return page.title;\r\n * }\r\n *\r\n * // Rendered in the application:\r\n * // <PageTitleDisplay id={ 10 } />\r\n * ```\r\n *\r\n * In the above example, when `PageTitleDisplay` is rendered into an\r\n * application, the page and the resolution details will be retrieved from\r\n * the store state using the `mapSelect` callback on `useQuerySelect`.\r\n *\r\n * If the id prop changes then any page in the state for that id is\r\n * retrieved. If the id prop doesn't change and other props are passed in\r\n * that do change, the title will not change because the dependency is just\r\n * the id.\r\n * @see useSelect\r\n *\r\n * @return {QuerySelectResponse} Queried data.\r\n */\r\nexport default function useQuerySelect( mapQuerySelect, deps ) {\r\n\treturn useSelect( ( select, registry ) => {\r\n\t\tconst resolve = ( store ) => enrichSelectors( select( store ) );\r\n\t\treturn mapQuerySelect( resolve, registry );\r\n\t}, deps );\r\n}\r\n\r\ninterface EnrichedSelectors {\r\n\t< Selectors extends Record< string, ( ...args: any[] ) => any > >(\r\n\t\tselectors: Selectors\r\n\t): {\r\n\t\t[ Selector in keyof Selectors ]: (\r\n\t\t\t...args: Parameters< Selectors[ Selector ] >\r\n\t\t) => QuerySelectResponse< ReturnType< Selectors[ Selector ] > >;\r\n\t};\r\n}\r\n\r\n/**\r\n * Transform simple selectors into ones that return an object with the\r\n * original return value AND the resolution info.\r\n *\r\n * @param {Object} selectors Selectors to enrich\r\n * @return {EnrichedSelectors} Enriched selectors\r\n */\r\nconst enrichSelectors = memoize( ( ( selectors ) => {\r\n\tconst resolvers = {};\r\n\tfor ( const selectorName in selectors ) {\r\n\t\tif ( META_SELECTORS.includes( selectorName ) ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tObject.defineProperty( resolvers, selectorName, {\r\n\t\t\tget:\r\n\t\t\t\t() =>\r\n\t\t\t\t( ...args: unknown[] ) => {\r\n\t\t\t\t\tconst data = selectors[ selectorName ]( ...args );\r\n\t\t\t\t\tconst resolutionStatus = selectors.getResolutionState(\r\n\t\t\t\t\t\tselectorName,\r\n\t\t\t\t\t\targs\r\n\t\t\t\t\t)?.status;\r\n\r\n\t\t\t\t\tlet status;\r\n\t\t\t\t\tswitch ( resolutionStatus ) {\r\n\t\t\t\t\t\tcase 'resolving':\r\n\t\t\t\t\t\t\tstatus = Status.Resolving;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'finished':\r\n\t\t\t\t\t\t\tstatus = Status.Success;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'error':\r\n\t\t\t\t\t\t\tstatus = Status.Error;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase undefined:\r\n\t\t\t\t\t\t\tstatus = Status.Idle;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdata,\r\n\t\t\t\t\t\tstatus,\r\n\t\t\t\t\t\tisResolving: status === Status.Resolving,\r\n\t\t\t\t\t\thasStarted: status !== Status.Idle,\r\n\t\t\t\t\t\thasResolved:\r\n\t\t\t\t\t\t\tstatus === Status.Success ||\r\n\t\t\t\t\t\t\tstatus === Status.Error,\r\n\t\t\t\t\t};\r\n\t\t\t\t},\r\n\t\t} );\r\n\t}\r\n\treturn resolvers;\r\n} ) as EnrichedSelectors );\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,iBAAiB;;AAE3C;AACA;AACA;AACA,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAASC,MAAM,QAAQ,aAAa;AAEpC,OAAO,MAAMC,cAAc,GAAG,CAC7B,gBAAgB,EAChB,sBAAsB,EACtB,uBAAuB,EACvB,aAAa,EACb,oBAAoB,CACpB;AAgBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,cAAcA,CAAEC,cAAc,EAAEC,IAAI,EAAG;EAC9D,OAAON,SAAS,CAAE,CAAEO,MAAM,EAAEC,QAAQ,KAAM;IACzC,MAAMC,OAAO,GAAKC,KAAK,IAAMC,eAAe,CAAEJ,MAAM,CAAEG,KAAM,CAAE,CAAC;IAC/D,OAAOL,cAAc,CAAEI,OAAO,EAAED,QAAS,CAAC;EAC3C,CAAC,EAAEF,IAAK,CAAC;AACV;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,eAAe,GAAGV,OAAO,CAAMW,SAAS,IAAM;EACnD,MAAMC,SAAS,GAAG,CAAC,CAAC;EACpB,KAAM,MAAMC,YAAY,IAAIF,SAAS,EAAG;IACvC,IAAKT,cAAc,CAACY,QAAQ,CAAED,YAAa,CAAC,EAAG;MAC9C;IACD;IACAE,MAAM,CAACC,cAAc,CAAEJ,SAAS,EAAEC,YAAY,EAAE;MAC/CI,GAAG,EACFA,CAAA,KACA,CAAE,GAAGC,IAAe,KAAM;QACzB,MAAMC,IAAI,GAAGR,SAAS,CAAEE,YAAY,CAAE,CAAE,GAAGK,IAAK,CAAC;QACjD,MAAME,gBAAgB,GAAGT,SAAS,CAACU,kBAAkB,CACpDR,YAAY,EACZK,IACD,CAAC,EAAEI,MAAM;QAET,IAAIA,MAAM;QACV,QAASF,gBAAgB;UACxB,KAAK,WAAW;YACfE,MAAM,GAAGrB,MAAM,CAACsB,SAAS;YACzB;UACD,KAAK,UAAU;YACdD,MAAM,GAAGrB,MAAM,CAACuB,OAAO;YACvB;UACD,KAAK,OAAO;YACXF,MAAM,GAAGrB,MAAM,CAACwB,KAAK;YACrB;UACD,KAAKC,SAAS;YACbJ,MAAM,GAAGrB,MAAM,CAAC0B,IAAI;YACpB;QACF;QAEA,OAAO;UACNR,IAAI;UACJG,MAAM;UACNM,WAAW,EAAEN,MAAM,KAAKrB,MAAM,CAACsB,SAAS;UACxCM,UAAU,EAAEP,MAAM,KAAKrB,MAAM,CAAC0B,IAAI;UAClCG,WAAW,EACVR,MAAM,KAAKrB,MAAM,CAACuB,OAAO,IACzBF,MAAM,KAAKrB,MAAM,CAACwB;QACpB,CAAC;MACF;IACF,CAAE,CAAC;EACJ;EACA,OAAOb,SAAS;AACjB,CAAyB,CAAC","ignoreList":[]}