{"version":3,"names":["camelCase","addQueryArgs","decodeEntities","apiFetch","STORE_NAME","getOrLoadEntitiesConfig","DEFAULT_ENTITY_KEY","forwardResolver","getNormalizedCommaSeparable","getUserPermissionCacheKey","getUserPermissionsFromAllowHeader","ALLOWED_RESOURCE_ACTIONS","getSyncProvider","fetchBlockPatterns","getAuthors","query","dispatch","path","users","receiveUserQuery","getCurrentUser","currentUser","receiveCurrentUser","getEntityRecord","kind","name","key","select","registry","configs","entityConfig","find","config","lock","__unstableAcquireStoreLock","exclusive","window","__experimentalEnableSync","syncConfig","globalThis","IS_GUTENBERG_PLUGIN","objectId","getSyncObjectId","bootstrap","syncObjectType","record","receiveEntityRecords","type","recordId","edits","meta","undo","undefined","_fields","Set","join","baseURL","baseURLParams","include","hasRecords","hasEntityRecords","response","parse","json","permissions","headers","get","canUserResolutionsArgs","receiveUserPermissionArgs","action","id","push","batch","receiveUserPermissions","finishResolutions","__unstableReleaseStoreLock","getRawEntityRecord","getEditedEntityRecord","getEntityRecords","records","supportsPagination","per_page","Object","values","totalItems","parseInt","totalPages","length","map","split","forEach","field","hasOwnProperty","context","resolutionsArgs","filter","targetHints","_links","self","allow","targetHint","e","shouldInvalidate","invalidateCache","getCurrentTheme","resolveSelect","activeThemes","status","receiveCurrentTheme","getThemeSupports","getEmbedPreview","url","embedProxyResponse","receiveEmbedPreview","error","canUser","requestedAction","resource","includes","Error","resourcePath","hasStartedResolution","relatedAction","isAlreadyResolving","method","receiveUserPermission","finishResolution","canUserEditEntityRecord","getAutosaves","postType","postId","rest_base","restBase","rest_namespace","restNamespace","getPostType","autosaves","receiveAutosaves","getAutosave","__experimentalGetTemplateForLink","link","template","then","data","__experimentalGetCurrentGlobalStylesId","globalStylesURL","href","matches","match","Number","__experimentalReceiveCurrentGlobalStylesId","__experimentalGetCurrentThemeBaseGlobalStyles","currentTheme","themeGlobalStyles","stylesheet","__experimentalReceiveThemeBaseGlobalStyles","__experimentalGetCurrentThemeGlobalStylesVariations","variations","__experimentalReceiveThemeGlobalStyleVariations","getCurrentThemeGlobalStylesRevisions","globalStylesId","revisionsURL","resetRevisions","revisions","revision","fromEntries","entries","value","receiveThemeGlobalStyleRevisions","getBlockPatterns","patterns","getBlockPatternCategories","categories","getUserPatternCategories","patternCategories","mappedPatternCategories","userCategory","label","slug","getNavigationFallbackId","fallback","_embed","_embedded","receiveNavigationFallbackId","existingFallbackEntityRecord","invalidateNavigationQueries","getDefaultTemplateId","receiveDefaultTemplateId","getRevisions","recordKey","revisionKey","getRevisionsUrl","isPaginated","receiveRevisions","getRevision"],"sources":["@wordpress/core-data/src/resolvers.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport { camelCase } from 'change-case';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { addQueryArgs } from '@wordpress/url';\r\nimport { decodeEntities } from '@wordpress/html-entities';\r\nimport apiFetch from '@wordpress/api-fetch';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { STORE_NAME } from './name';\r\nimport { getOrLoadEntitiesConfig, DEFAULT_ENTITY_KEY } from './entities';\r\nimport {\r\n\tforwardResolver,\r\n\tgetNormalizedCommaSeparable,\r\n\tgetUserPermissionCacheKey,\r\n\tgetUserPermissionsFromAllowHeader,\r\n\tALLOWED_RESOURCE_ACTIONS,\r\n} from './utils';\r\nimport { getSyncProvider } from './sync';\r\nimport { fetchBlockPatterns } from './fetch';\r\n\r\n/**\r\n * Requests authors from the REST API.\r\n *\r\n * @param {Object|undefined} query Optional object of query parameters to\r\n *                                 include with request.\r\n */\r\nexport const getAuthors =\r\n\t( query ) =>\r\n\tasync ( { dispatch } ) => {\r\n\t\tconst path = addQueryArgs(\r\n\t\t\t'/wp/v2/users/?who=authors&per_page=100',\r\n\t\t\tquery\r\n\t\t);\r\n\t\tconst users = await apiFetch( { path } );\r\n\t\tdispatch.receiveUserQuery( path, users );\r\n\t};\r\n\r\n/**\r\n * Requests the current user from the REST API.\r\n */\r\nexport const getCurrentUser =\r\n\t() =>\r\n\tasync ( { dispatch } ) => {\r\n\t\tconst currentUser = await apiFetch( { path: '/wp/v2/users/me' } );\r\n\t\tdispatch.receiveCurrentUser( currentUser );\r\n\t};\r\n\r\n/**\r\n * Requests an entity's record from the REST API.\r\n *\r\n * @param {string}           kind  Entity kind.\r\n * @param {string}           name  Entity name.\r\n * @param {number|string}    key   Record's key\r\n * @param {Object|undefined} query Optional object of query parameters to\r\n *                                 include with request. If requesting specific\r\n *                                 fields, fields must always include the ID.\r\n */\r\nexport const getEntityRecord =\r\n\t( kind, name, key = '', query ) =>\r\n\tasync ( { select, dispatch, registry } ) => {\r\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind, name ) );\r\n\t\tconst entityConfig = configs.find(\r\n\t\t\t( config ) => config.name === name && config.kind === kind\r\n\t\t);\r\n\t\tif ( ! entityConfig ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst lock = await dispatch.__unstableAcquireStoreLock(\r\n\t\t\tSTORE_NAME,\r\n\t\t\t[ 'entities', 'records', kind, name, key ],\r\n\t\t\t{ exclusive: false }\r\n\t\t);\r\n\r\n\t\ttry {\r\n\t\t\t// Entity supports configs,\r\n\t\t\t// use the sync algorithm instead of the old fetch behavior.\r\n\t\t\tif (\r\n\t\t\t\twindow.__experimentalEnableSync &&\r\n\t\t\t\tentityConfig.syncConfig &&\r\n\t\t\t\t! query\r\n\t\t\t) {\r\n\t\t\t\tif ( globalThis.IS_GUTENBERG_PLUGIN ) {\r\n\t\t\t\t\tconst objectId = entityConfig.getSyncObjectId( key );\r\n\r\n\t\t\t\t\t// Loads the persisted document.\r\n\t\t\t\t\tawait getSyncProvider().bootstrap(\r\n\t\t\t\t\t\tentityConfig.syncObjectType,\r\n\t\t\t\t\t\tobjectId,\r\n\t\t\t\t\t\t( record ) => {\r\n\t\t\t\t\t\t\tdispatch.receiveEntityRecords(\r\n\t\t\t\t\t\t\t\tkind,\r\n\t\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\t\trecord,\r\n\t\t\t\t\t\t\t\tquery\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// Boostraps the edited document as well (and load from peers).\r\n\t\t\t\t\tawait getSyncProvider().bootstrap(\r\n\t\t\t\t\t\tentityConfig.syncObjectType + '--edit',\r\n\t\t\t\t\t\tobjectId,\r\n\t\t\t\t\t\t( record ) => {\r\n\t\t\t\t\t\t\tdispatch( {\r\n\t\t\t\t\t\t\t\ttype: 'EDIT_ENTITY_RECORD',\r\n\t\t\t\t\t\t\t\tkind,\r\n\t\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\t\trecordId: key,\r\n\t\t\t\t\t\t\t\tedits: record,\r\n\t\t\t\t\t\t\t\tmeta: {\r\n\t\t\t\t\t\t\t\t\tundo: undefined,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t} );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif ( query !== undefined && query._fields ) {\r\n\t\t\t\t\t// If requesting specific fields, items and query association to said\r\n\t\t\t\t\t// records are stored by ID reference. Thus, fields must always include\r\n\t\t\t\t\t// the ID.\r\n\t\t\t\t\tquery = {\r\n\t\t\t\t\t\t...query,\r\n\t\t\t\t\t\t_fields: [\r\n\t\t\t\t\t\t\t...new Set( [\r\n\t\t\t\t\t\t\t\t...( getNormalizedCommaSeparable(\r\n\t\t\t\t\t\t\t\t\tquery._fields\r\n\t\t\t\t\t\t\t\t) || [] ),\r\n\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY,\r\n\t\t\t\t\t\t\t] ),\r\n\t\t\t\t\t\t].join(),\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Disable reason: While true that an early return could leave `path`\r\n\t\t\t\t// unused, it's important that path is derived using the query prior to\r\n\t\t\t\t// additional query modifications in the condition below, since those\r\n\t\t\t\t// modifications are relevant to how the data is tracked in state, and not\r\n\t\t\t\t// for how the request is made to the REST API.\r\n\r\n\t\t\t\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\r\n\t\t\t\tconst path = addQueryArgs(\r\n\t\t\t\t\tentityConfig.baseURL + ( key ? '/' + key : '' ),\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t...entityConfig.baseURLParams,\r\n\t\t\t\t\t\t...query,\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif ( query !== undefined && query._fields ) {\r\n\t\t\t\t\tquery = { ...query, include: [ key ] };\r\n\r\n\t\t\t\t\t// The resolution cache won't consider query as reusable based on the\r\n\t\t\t\t\t// fields, so it's tested here, prior to initiating the REST request,\r\n\t\t\t\t\t// and without causing `getEntityRecords` resolution to occur.\r\n\t\t\t\t\tconst hasRecords = select.hasEntityRecords(\r\n\t\t\t\t\t\tkind,\r\n\t\t\t\t\t\tname,\r\n\t\t\t\t\t\tquery\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif ( hasRecords ) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst response = await apiFetch( { path, parse: false } );\r\n\t\t\t\tconst record = await response.json();\r\n\t\t\t\tconst permissions = getUserPermissionsFromAllowHeader(\r\n\t\t\t\t\tresponse.headers?.get( 'allow' )\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst canUserResolutionsArgs = [];\r\n\t\t\t\tconst receiveUserPermissionArgs = {};\r\n\t\t\t\tfor ( const action of ALLOWED_RESOURCE_ACTIONS ) {\r\n\t\t\t\t\treceiveUserPermissionArgs[\r\n\t\t\t\t\t\tgetUserPermissionCacheKey( action, {\r\n\t\t\t\t\t\t\tkind,\r\n\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\tid: key,\r\n\t\t\t\t\t\t} )\r\n\t\t\t\t\t] = permissions[ action ];\r\n\r\n\t\t\t\t\tcanUserResolutionsArgs.push( [\r\n\t\t\t\t\t\taction,\r\n\t\t\t\t\t\t{ kind, name, id: key },\r\n\t\t\t\t\t] );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tregistry.batch( () => {\r\n\t\t\t\t\tdispatch.receiveEntityRecords( kind, name, record, query );\r\n\t\t\t\t\tdispatch.receiveUserPermissions(\r\n\t\t\t\t\t\treceiveUserPermissionArgs\r\n\t\t\t\t\t);\r\n\t\t\t\t\tdispatch.finishResolutions(\r\n\t\t\t\t\t\t'canUser',\r\n\t\t\t\t\t\tcanUserResolutionsArgs\r\n\t\t\t\t\t);\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t} finally {\r\n\t\t\tdispatch.__unstableReleaseStoreLock( lock );\r\n\t\t}\r\n\t};\r\n\r\n/**\r\n * Requests an entity's record from the REST API.\r\n */\r\nexport const getRawEntityRecord = forwardResolver( 'getEntityRecord' );\r\n\r\n/**\r\n * Requests an entity's record from the REST API.\r\n */\r\nexport const getEditedEntityRecord = forwardResolver( 'getEntityRecord' );\r\n\r\n/**\r\n * Requests the entity's records from the REST API.\r\n *\r\n * @param {string}  kind  Entity kind.\r\n * @param {string}  name  Entity name.\r\n * @param {Object?} query Query Object. If requesting specific fields, fields\r\n *                        must always include the ID.\r\n */\r\nexport const getEntityRecords =\r\n\t( kind, name, query = {} ) =>\r\n\tasync ( { dispatch, registry } ) => {\r\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind, name ) );\r\n\t\tconst entityConfig = configs.find(\r\n\t\t\t( config ) => config.name === name && config.kind === kind\r\n\t\t);\r\n\t\tif ( ! entityConfig ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst lock = await dispatch.__unstableAcquireStoreLock(\r\n\t\t\tSTORE_NAME,\r\n\t\t\t[ 'entities', 'records', kind, name ],\r\n\t\t\t{ exclusive: false }\r\n\t\t);\r\n\r\n\t\ttry {\r\n\t\t\tif ( query._fields ) {\r\n\t\t\t\t// If requesting specific fields, items and query association to said\r\n\t\t\t\t// records are stored by ID reference. Thus, fields must always include\r\n\t\t\t\t// the ID.\r\n\t\t\t\tquery = {\r\n\t\t\t\t\t...query,\r\n\t\t\t\t\t_fields: [\r\n\t\t\t\t\t\t...new Set( [\r\n\t\t\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) ||\r\n\t\t\t\t\t\t\t\t[] ),\r\n\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY,\r\n\t\t\t\t\t\t] ),\r\n\t\t\t\t\t].join(),\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tconst path = addQueryArgs( entityConfig.baseURL, {\r\n\t\t\t\t...entityConfig.baseURLParams,\r\n\t\t\t\t...query,\r\n\t\t\t} );\r\n\r\n\t\t\tlet records, meta;\r\n\t\t\tif ( entityConfig.supportsPagination && query.per_page !== -1 ) {\r\n\t\t\t\tconst response = await apiFetch( { path, parse: false } );\r\n\t\t\t\trecords = Object.values( await response.json() );\r\n\t\t\t\tmeta = {\r\n\t\t\t\t\ttotalItems: parseInt(\r\n\t\t\t\t\t\tresponse.headers.get( 'X-WP-Total' )\r\n\t\t\t\t\t),\r\n\t\t\t\t\ttotalPages: parseInt(\r\n\t\t\t\t\t\tresponse.headers.get( 'X-WP-TotalPages' )\r\n\t\t\t\t\t),\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\trecords = Object.values( await apiFetch( { path } ) );\r\n\t\t\t\tmeta = {\r\n\t\t\t\t\ttotalItems: records.length,\r\n\t\t\t\t\ttotalPages: 1,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// If we request fields but the result doesn't contain the fields,\r\n\t\t\t// explicitly set these fields as \"undefined\"\r\n\t\t\t// that way we consider the query \"fulfilled\".\r\n\t\t\tif ( query._fields ) {\r\n\t\t\t\trecords = records.map( ( record ) => {\r\n\t\t\t\t\tquery._fields.split( ',' ).forEach( ( field ) => {\r\n\t\t\t\t\t\tif ( ! record.hasOwnProperty( field ) ) {\r\n\t\t\t\t\t\t\trecord[ field ] = undefined;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\treturn record;\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t\tregistry.batch( () => {\r\n\t\t\t\tdispatch.receiveEntityRecords(\r\n\t\t\t\t\tkind,\r\n\t\t\t\t\tname,\r\n\t\t\t\t\trecords,\r\n\t\t\t\t\tquery,\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\tundefined,\r\n\t\t\t\t\tmeta\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// When requesting all fields, the list of results can be used to resolve\r\n\t\t\t\t// the `getEntityRecord` and `canUser` selectors in addition to `getEntityRecords`.\r\n\t\t\t\t// See https://github.com/WordPress/gutenberg/pull/26575\r\n\t\t\t\t// See https://github.com/WordPress/gutenberg/pull/64504\r\n\t\t\t\tif ( ! query?._fields && ! query.context ) {\r\n\t\t\t\t\tconst key = entityConfig.key || DEFAULT_ENTITY_KEY;\r\n\t\t\t\t\tconst resolutionsArgs = records\r\n\t\t\t\t\t\t.filter( ( record ) => record?.[ key ] )\r\n\t\t\t\t\t\t.map( ( record ) => [ kind, name, record[ key ] ] );\r\n\r\n\t\t\t\t\tconst targetHints = records\r\n\t\t\t\t\t\t.filter( ( record ) => record?.[ key ] )\r\n\t\t\t\t\t\t.map( ( record ) => ( {\r\n\t\t\t\t\t\t\tid: record[ key ],\r\n\t\t\t\t\t\t\tpermissions: getUserPermissionsFromAllowHeader(\r\n\t\t\t\t\t\t\t\trecord?._links?.self?.[ 0 ].targetHints.allow\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t\tconst canUserResolutionsArgs = [];\r\n\t\t\t\t\tconst receiveUserPermissionArgs = {};\r\n\t\t\t\t\tfor ( const targetHint of targetHints ) {\r\n\t\t\t\t\t\tfor ( const action of ALLOWED_RESOURCE_ACTIONS ) {\r\n\t\t\t\t\t\t\tcanUserResolutionsArgs.push( [\r\n\t\t\t\t\t\t\t\taction,\r\n\t\t\t\t\t\t\t\t{ kind, name, id: targetHint.id },\r\n\t\t\t\t\t\t\t] );\r\n\r\n\t\t\t\t\t\t\treceiveUserPermissionArgs[\r\n\t\t\t\t\t\t\t\tgetUserPermissionCacheKey( action, {\r\n\t\t\t\t\t\t\t\t\tkind,\r\n\t\t\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\t\t\tid: targetHint.id,\r\n\t\t\t\t\t\t\t\t} )\r\n\t\t\t\t\t\t\t] = targetHint.permissions[ action ];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdispatch.receiveUserPermissions(\r\n\t\t\t\t\t\treceiveUserPermissionArgs\r\n\t\t\t\t\t);\r\n\t\t\t\t\tdispatch.finishResolutions(\r\n\t\t\t\t\t\t'getEntityRecord',\r\n\t\t\t\t\t\tresolutionsArgs\r\n\t\t\t\t\t);\r\n\t\t\t\t\tdispatch.finishResolutions(\r\n\t\t\t\t\t\t'canUser',\r\n\t\t\t\t\t\tcanUserResolutionsArgs\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdispatch.__unstableReleaseStoreLock( lock );\r\n\t\t\t} );\r\n\t\t} catch ( e ) {\r\n\t\t\tdispatch.__unstableReleaseStoreLock( lock );\r\n\t\t}\r\n\t};\r\n\r\ngetEntityRecords.shouldInvalidate = ( action, kind, name ) => {\r\n\treturn (\r\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\r\n\t\taction.invalidateCache &&\r\n\t\tkind === action.kind &&\r\n\t\tname === action.name\r\n\t);\r\n};\r\n\r\n/**\r\n * Requests the current theme.\r\n */\r\nexport const getCurrentTheme =\r\n\t() =>\r\n\tasync ( { dispatch, resolveSelect } ) => {\r\n\t\tconst activeThemes = await resolveSelect.getEntityRecords(\r\n\t\t\t'root',\r\n\t\t\t'theme',\r\n\t\t\t{ status: 'active' }\r\n\t\t);\r\n\r\n\t\tdispatch.receiveCurrentTheme( activeThemes[ 0 ] );\r\n\t};\r\n\r\n/**\r\n * Requests theme supports data from the index.\r\n */\r\nexport const getThemeSupports = forwardResolver( 'getCurrentTheme' );\r\n\r\n/**\r\n * Requests a preview from the Embed API.\r\n *\r\n * @param {string} url URL to get the preview for.\r\n */\r\nexport const getEmbedPreview =\r\n\t( url ) =>\r\n\tasync ( { dispatch } ) => {\r\n\t\ttry {\r\n\t\t\tconst embedProxyResponse = await apiFetch( {\r\n\t\t\t\tpath: addQueryArgs( '/oembed/1.0/proxy', { url } ),\r\n\t\t\t} );\r\n\t\t\tdispatch.receiveEmbedPreview( url, embedProxyResponse );\r\n\t\t} catch ( error ) {\r\n\t\t\t// Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.\r\n\t\t\tdispatch.receiveEmbedPreview( url, false );\r\n\t\t}\r\n\t};\r\n\r\n/**\r\n * Checks whether the current user can perform the given action on the given\r\n * REST resource.\r\n *\r\n * @param {string}        requestedAction Action to check. One of: 'create', 'read', 'update',\r\n *                                        'delete'.\r\n * @param {string|Object} resource        Entity resource to check. Accepts entity object `{ kind: 'root', name: 'media', id: 1 }`\r\n *                                        or REST base as a string - `media`.\r\n * @param {?string}       id              ID of the rest resource to check.\r\n */\r\nexport const canUser =\r\n\t( requestedAction, resource, id ) =>\r\n\tasync ( { dispatch, registry } ) => {\r\n\t\tif ( ! ALLOWED_RESOURCE_ACTIONS.includes( requestedAction ) ) {\r\n\t\t\tthrow new Error( `'${ requestedAction }' is not a valid action.` );\r\n\t\t}\r\n\r\n\t\tlet resourcePath = null;\r\n\t\tif ( typeof resource === 'object' ) {\r\n\t\t\tif ( ! resource.kind || ! resource.name ) {\r\n\t\t\t\tthrow new Error( 'The entity resource object is not valid.' );\r\n\t\t\t}\r\n\r\n\t\t\tconst configs = await dispatch(\r\n\t\t\t\tgetOrLoadEntitiesConfig( resource.kind, resource.name )\r\n\t\t\t);\r\n\t\t\tconst entityConfig = configs.find(\r\n\t\t\t\t( config ) =>\r\n\t\t\t\t\tconfig.name === resource.name &&\r\n\t\t\t\t\tconfig.kind === resource.kind\r\n\t\t\t);\r\n\t\t\tif ( ! entityConfig ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tresourcePath =\r\n\t\t\t\tentityConfig.baseURL + ( resource.id ? '/' + resource.id : '' );\r\n\t\t} else {\r\n\t\t\tresourcePath = `/wp/v2/${ resource }` + ( id ? '/' + id : '' );\r\n\t\t}\r\n\r\n\t\tconst { hasStartedResolution } = registry.select( STORE_NAME );\r\n\r\n\t\t// Prevent resolving the same resource twice.\r\n\t\tfor ( const relatedAction of ALLOWED_RESOURCE_ACTIONS ) {\r\n\t\t\tif ( relatedAction === requestedAction ) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tconst isAlreadyResolving = hasStartedResolution( 'canUser', [\r\n\t\t\t\trelatedAction,\r\n\t\t\t\tresource,\r\n\t\t\t\tid,\r\n\t\t\t] );\r\n\t\t\tif ( isAlreadyResolving ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet response;\r\n\t\ttry {\r\n\t\t\tresponse = await apiFetch( {\r\n\t\t\t\tpath: resourcePath,\r\n\t\t\t\tmethod: 'OPTIONS',\r\n\t\t\t\tparse: false,\r\n\t\t\t} );\r\n\t\t} catch ( error ) {\r\n\t\t\t// Do nothing if our OPTIONS request comes back with an API error (4xx or\r\n\t\t\t// 5xx). The previously determined isAllowed value will remain in the store.\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Optional chaining operator is used here because the API requests don't\r\n\t\t// return the expected result in the React native version. Instead, API requests\r\n\t\t// only return the result, without including response properties like the headers.\r\n\t\tconst permissions = getUserPermissionsFromAllowHeader(\r\n\t\t\tresponse.headers?.get( 'allow' )\r\n\t\t);\r\n\t\tregistry.batch( () => {\r\n\t\t\tfor ( const action of ALLOWED_RESOURCE_ACTIONS ) {\r\n\t\t\t\tconst key = getUserPermissionCacheKey( action, resource, id );\r\n\r\n\t\t\t\tdispatch.receiveUserPermission( key, permissions[ action ] );\r\n\r\n\t\t\t\t// Mark related action resolutions as finished.\r\n\t\t\t\tif ( action !== requestedAction ) {\r\n\t\t\t\t\tdispatch.finishResolution( 'canUser', [\r\n\t\t\t\t\t\taction,\r\n\t\t\t\t\t\tresource,\r\n\t\t\t\t\t\tid,\r\n\t\t\t\t\t] );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\t};\r\n\r\n/**\r\n * Checks whether the current user can perform the given action on the given\r\n * REST resource.\r\n *\r\n * @param {string}        kind     Entity kind.\r\n * @param {string}        name     Entity name.\r\n * @param {number|string} recordId Record's id.\r\n */\r\nexport const canUserEditEntityRecord =\r\n\t( kind, name, recordId ) =>\r\n\tasync ( { dispatch } ) => {\r\n\t\tawait dispatch( canUser( 'update', { kind, name, id: recordId } ) );\r\n\t};\r\n\r\n/**\r\n * Request autosave data from the REST API.\r\n *\r\n * @param {string} postType The type of the parent post.\r\n * @param {number} postId   The id of the parent post.\r\n */\r\nexport const getAutosaves =\r\n\t( postType, postId ) =>\r\n\tasync ( { dispatch, resolveSelect } ) => {\r\n\t\tconst { rest_base: restBase, rest_namespace: restNamespace = 'wp/v2' } =\r\n\t\t\tawait resolveSelect.getPostType( postType );\r\n\t\tconst autosaves = await apiFetch( {\r\n\t\t\tpath: `/${ restNamespace }/${ restBase }/${ postId }/autosaves?context=edit`,\r\n\t\t} );\r\n\r\n\t\tif ( autosaves && autosaves.length ) {\r\n\t\t\tdispatch.receiveAutosaves( postId, autosaves );\r\n\t\t}\r\n\t};\r\n\r\n/**\r\n * Request autosave data from the REST API.\r\n *\r\n * This resolver exists to ensure the underlying autosaves are fetched via\r\n * `getAutosaves` when a call to the `getAutosave` selector is made.\r\n *\r\n * @param {string} postType The type of the parent post.\r\n * @param {number} postId   The id of the parent post.\r\n */\r\nexport const getAutosave =\r\n\t( postType, postId ) =>\r\n\tasync ( { resolveSelect } ) => {\r\n\t\tawait resolveSelect.getAutosaves( postType, postId );\r\n\t};\r\n\r\n/**\r\n * Retrieve the frontend template used for a given link.\r\n *\r\n * @param {string} link Link.\r\n */\r\nexport const __experimentalGetTemplateForLink =\r\n\t( link ) =>\r\n\tasync ( { dispatch, resolveSelect } ) => {\r\n\t\tlet template;\r\n\t\ttry {\r\n\t\t\t// This is NOT calling a REST endpoint but rather ends up with a response from\r\n\t\t\t// an Ajax function which has a different shape from a WP_REST_Response.\r\n\t\t\ttemplate = await apiFetch( {\r\n\t\t\t\turl: addQueryArgs( link, {\r\n\t\t\t\t\t'_wp-find-template': true,\r\n\t\t\t\t} ),\r\n\t\t\t} ).then( ( { data } ) => data );\r\n\t\t} catch ( e ) {\r\n\t\t\t// For non-FSE themes, it is possible that this request returns an error.\r\n\t\t}\r\n\r\n\t\tif ( ! template ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst record = await resolveSelect.getEntityRecord(\r\n\t\t\t'postType',\r\n\t\t\t'wp_template',\r\n\t\t\ttemplate.id\r\n\t\t);\r\n\r\n\t\tif ( record ) {\r\n\t\t\tdispatch.receiveEntityRecords(\r\n\t\t\t\t'postType',\r\n\t\t\t\t'wp_template',\r\n\t\t\t\t[ record ],\r\n\t\t\t\t{\r\n\t\t\t\t\t'find-template': link,\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n__experimentalGetTemplateForLink.shouldInvalidate = ( action ) => {\r\n\treturn (\r\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\r\n\t\taction.invalidateCache &&\r\n\t\taction.kind === 'postType' &&\r\n\t\taction.name === 'wp_template'\r\n\t);\r\n};\r\n\r\nexport const __experimentalGetCurrentGlobalStylesId =\r\n\t() =>\r\n\tasync ( { dispatch, resolveSelect } ) => {\r\n\t\tconst activeThemes = await resolveSelect.getEntityRecords(\r\n\t\t\t'root',\r\n\t\t\t'theme',\r\n\t\t\t{ status: 'active' }\r\n\t\t);\r\n\t\tconst globalStylesURL =\r\n\t\t\tactiveThemes?.[ 0 ]?._links?.[ 'wp:user-global-styles' ]?.[ 0 ]\r\n\t\t\t\t?.href;\r\n\t\tif ( ! globalStylesURL ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Regex matches the ID at the end of a URL or immediately before\r\n\t\t// the query string.\r\n\t\tconst matches = globalStylesURL.match( /\\/(\\d+)(?:\\?|$)/ );\r\n\t\tconst id = matches ? Number( matches[ 1 ] ) : null;\r\n\r\n\t\tif ( id ) {\r\n\t\t\tdispatch.__experimentalReceiveCurrentGlobalStylesId( id );\r\n\t\t}\r\n\t};\r\n\r\nexport const __experimentalGetCurrentThemeBaseGlobalStyles =\r\n\t() =>\r\n\tasync ( { resolveSelect, dispatch } ) => {\r\n\t\tconst currentTheme = await resolveSelect.getCurrentTheme();\r\n\t\tconst themeGlobalStyles = await apiFetch( {\r\n\t\t\tpath: `/wp/v2/global-styles/themes/${ currentTheme.stylesheet }`,\r\n\t\t} );\r\n\t\tdispatch.__experimentalReceiveThemeBaseGlobalStyles(\r\n\t\t\tcurrentTheme.stylesheet,\r\n\t\t\tthemeGlobalStyles\r\n\t\t);\r\n\t};\r\n\r\nexport const __experimentalGetCurrentThemeGlobalStylesVariations =\r\n\t() =>\r\n\tasync ( { resolveSelect, dispatch } ) => {\r\n\t\tconst currentTheme = await resolveSelect.getCurrentTheme();\r\n\t\tconst variations = await apiFetch( {\r\n\t\t\tpath: `/wp/v2/global-styles/themes/${ currentTheme.stylesheet }/variations`,\r\n\t\t} );\r\n\t\tdispatch.__experimentalReceiveThemeGlobalStyleVariations(\r\n\t\t\tcurrentTheme.stylesheet,\r\n\t\t\tvariations\r\n\t\t);\r\n\t};\r\n\r\n/**\r\n * Fetches and returns the revisions of the current global styles theme.\r\n */\r\nexport const getCurrentThemeGlobalStylesRevisions =\r\n\t() =>\r\n\tasync ( { resolveSelect, dispatch } ) => {\r\n\t\tconst globalStylesId =\r\n\t\t\tawait resolveSelect.__experimentalGetCurrentGlobalStylesId();\r\n\t\tconst record = globalStylesId\r\n\t\t\t? await resolveSelect.getEntityRecord(\r\n\t\t\t\t\t'root',\r\n\t\t\t\t\t'globalStyles',\r\n\t\t\t\t\tglobalStylesId\r\n\t\t\t  )\r\n\t\t\t: undefined;\r\n\t\tconst revisionsURL = record?._links?.[ 'version-history' ]?.[ 0 ]?.href;\r\n\r\n\t\tif ( revisionsURL ) {\r\n\t\t\tconst resetRevisions = await apiFetch( {\r\n\t\t\t\turl: revisionsURL,\r\n\t\t\t} );\r\n\t\t\tconst revisions = resetRevisions?.map( ( revision ) =>\r\n\t\t\t\tObject.fromEntries(\r\n\t\t\t\t\tObject.entries( revision ).map( ( [ key, value ] ) => [\r\n\t\t\t\t\t\tcamelCase( key ),\r\n\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t] )\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t\tdispatch.receiveThemeGlobalStyleRevisions(\r\n\t\t\t\tglobalStylesId,\r\n\t\t\t\trevisions\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\ngetCurrentThemeGlobalStylesRevisions.shouldInvalidate = ( action ) => {\r\n\treturn (\r\n\t\taction.type === 'SAVE_ENTITY_RECORD_FINISH' &&\r\n\t\taction.kind === 'root' &&\r\n\t\t! action.error &&\r\n\t\taction.name === 'globalStyles'\r\n\t);\r\n};\r\n\r\nexport const getBlockPatterns =\r\n\t() =>\r\n\tasync ( { dispatch } ) => {\r\n\t\tconst patterns = await fetchBlockPatterns();\r\n\t\tdispatch( { type: 'RECEIVE_BLOCK_PATTERNS', patterns } );\r\n\t};\r\n\r\nexport const getBlockPatternCategories =\r\n\t() =>\r\n\tasync ( { dispatch } ) => {\r\n\t\tconst categories = await apiFetch( {\r\n\t\t\tpath: '/wp/v2/block-patterns/categories',\r\n\t\t} );\r\n\t\tdispatch( { type: 'RECEIVE_BLOCK_PATTERN_CATEGORIES', categories } );\r\n\t};\r\n\r\nexport const getUserPatternCategories =\r\n\t() =>\r\n\tasync ( { dispatch, resolveSelect } ) => {\r\n\t\tconst patternCategories = await resolveSelect.getEntityRecords(\r\n\t\t\t'taxonomy',\r\n\t\t\t'wp_pattern_category',\r\n\t\t\t{\r\n\t\t\t\tper_page: -1,\r\n\t\t\t\t_fields: 'id,name,description,slug',\r\n\t\t\t\tcontext: 'view',\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tconst mappedPatternCategories =\r\n\t\t\tpatternCategories?.map( ( userCategory ) => ( {\r\n\t\t\t\t...userCategory,\r\n\t\t\t\tlabel: decodeEntities( userCategory.name ),\r\n\t\t\t\tname: userCategory.slug,\r\n\t\t\t} ) ) || [];\r\n\r\n\t\tdispatch( {\r\n\t\t\ttype: 'RECEIVE_USER_PATTERN_CATEGORIES',\r\n\t\t\tpatternCategories: mappedPatternCategories,\r\n\t\t} );\r\n\t};\r\n\r\nexport const getNavigationFallbackId =\r\n\t() =>\r\n\tasync ( { dispatch, select, registry } ) => {\r\n\t\tconst fallback = await apiFetch( {\r\n\t\t\tpath: addQueryArgs( '/wp-block-editor/v1/navigation-fallback', {\r\n\t\t\t\t_embed: true,\r\n\t\t\t} ),\r\n\t\t} );\r\n\r\n\t\tconst record = fallback?._embedded?.self;\r\n\r\n\t\tregistry.batch( () => {\r\n\t\t\tdispatch.receiveNavigationFallbackId( fallback?.id );\r\n\r\n\t\t\tif ( ! record ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// If the fallback is already in the store, don't invalidate navigation queries.\r\n\t\t\t// Otherwise, invalidate the cache for the scenario where there were no Navigation\r\n\t\t\t// posts in the state and the fallback created one.\r\n\t\t\tconst existingFallbackEntityRecord = select.getEntityRecord(\r\n\t\t\t\t'postType',\r\n\t\t\t\t'wp_navigation',\r\n\t\t\t\tfallback.id\r\n\t\t\t);\r\n\t\t\tconst invalidateNavigationQueries = ! existingFallbackEntityRecord;\r\n\t\t\tdispatch.receiveEntityRecords(\r\n\t\t\t\t'postType',\r\n\t\t\t\t'wp_navigation',\r\n\t\t\t\trecord,\r\n\t\t\t\tundefined,\r\n\t\t\t\tinvalidateNavigationQueries\r\n\t\t\t);\r\n\r\n\t\t\t// Resolve to avoid further network requests.\r\n\t\t\tdispatch.finishResolution( 'getEntityRecord', [\r\n\t\t\t\t'postType',\r\n\t\t\t\t'wp_navigation',\r\n\t\t\t\tfallback.id,\r\n\t\t\t] );\r\n\t\t} );\r\n\t};\r\n\r\nexport const getDefaultTemplateId =\r\n\t( query ) =>\r\n\tasync ( { dispatch } ) => {\r\n\t\tconst template = await apiFetch( {\r\n\t\t\tpath: addQueryArgs( '/wp/v2/templates/lookup', query ),\r\n\t\t} );\r\n\t\t// Endpoint may return an empty object if no template is found.\r\n\t\tif ( template?.id ) {\r\n\t\t\tdispatch.receiveDefaultTemplateId( query, template.id );\r\n\t\t}\r\n\t};\r\n\r\n/**\r\n * Requests an entity's revisions from the REST API.\r\n *\r\n * @param {string}           kind      Entity kind.\r\n * @param {string}           name      Entity name.\r\n * @param {number|string}    recordKey The key of the entity record whose revisions you want to fetch.\r\n * @param {Object|undefined} query     Optional object of query parameters to\r\n *                                     include with request. If requesting specific\r\n *                                     fields, fields must always include the ID.\r\n */\r\nexport const getRevisions =\r\n\t( kind, name, recordKey, query = {} ) =>\r\n\tasync ( { dispatch, registry } ) => {\r\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind, name ) );\r\n\t\tconst entityConfig = configs.find(\r\n\t\t\t( config ) => config.name === name && config.kind === kind\r\n\t\t);\r\n\r\n\t\tif ( ! entityConfig ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( query._fields ) {\r\n\t\t\t// If requesting specific fields, items and query association to said\r\n\t\t\t// records are stored by ID reference. Thus, fields must always include\r\n\t\t\t// the ID.\r\n\t\t\tquery = {\r\n\t\t\t\t...query,\r\n\t\t\t\t_fields: [\r\n\t\t\t\t\t...new Set( [\r\n\t\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) ||\r\n\t\t\t\t\t\t\t[] ),\r\n\t\t\t\t\t\tentityConfig.revisionKey || DEFAULT_ENTITY_KEY,\r\n\t\t\t\t\t] ),\r\n\t\t\t\t].join(),\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst path = addQueryArgs(\r\n\t\t\tentityConfig.getRevisionsUrl( recordKey ),\r\n\t\t\tquery\r\n\t\t);\r\n\r\n\t\tlet records, response;\r\n\t\tconst meta = {};\r\n\t\tconst isPaginated =\r\n\t\t\tentityConfig.supportsPagination && query.per_page !== -1;\r\n\t\ttry {\r\n\t\t\tresponse = await apiFetch( { path, parse: ! isPaginated } );\r\n\t\t} catch ( error ) {\r\n\t\t\t// Do nothing if our request comes back with an API error.\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( response ) {\r\n\t\t\tif ( isPaginated ) {\r\n\t\t\t\trecords = Object.values( await response.json() );\r\n\t\t\t\tmeta.totalItems = parseInt(\r\n\t\t\t\t\tresponse.headers.get( 'X-WP-Total' )\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\trecords = Object.values( response );\r\n\t\t\t}\r\n\r\n\t\t\t// If we request fields but the result doesn't contain the fields,\r\n\t\t\t// explicitly set these fields as \"undefined\"\r\n\t\t\t// that way we consider the query \"fulfilled\".\r\n\t\t\tif ( query._fields ) {\r\n\t\t\t\trecords = records.map( ( record ) => {\r\n\t\t\t\t\tquery._fields.split( ',' ).forEach( ( field ) => {\r\n\t\t\t\t\t\tif ( ! record.hasOwnProperty( field ) ) {\r\n\t\t\t\t\t\t\trecord[ field ] = undefined;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\treturn record;\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t\tregistry.batch( () => {\r\n\t\t\t\tdispatch.receiveRevisions(\r\n\t\t\t\t\tkind,\r\n\t\t\t\t\tname,\r\n\t\t\t\t\trecordKey,\r\n\t\t\t\t\trecords,\r\n\t\t\t\t\tquery,\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\tmeta\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// When requesting all fields, the list of results can be used to\r\n\t\t\t\t// resolve the `getRevision` selector in addition to `getRevisions`.\r\n\t\t\t\tif ( ! query?._fields && ! query.context ) {\r\n\t\t\t\t\tconst key = entityConfig.key || DEFAULT_ENTITY_KEY;\r\n\t\t\t\t\tconst resolutionsArgs = records\r\n\t\t\t\t\t\t.filter( ( record ) => record[ key ] )\r\n\t\t\t\t\t\t.map( ( record ) => [\r\n\t\t\t\t\t\t\tkind,\r\n\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\trecordKey,\r\n\t\t\t\t\t\t\trecord[ key ],\r\n\t\t\t\t\t\t] );\r\n\r\n\t\t\t\t\tdispatch.finishResolutions(\r\n\t\t\t\t\t\t'getRevision',\r\n\t\t\t\t\t\tresolutionsArgs\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t}\r\n\t};\r\n\r\n// Invalidate cache when a new revision is created.\r\ngetRevisions.shouldInvalidate = ( action, kind, name, recordKey ) =>\r\n\taction.type === 'SAVE_ENTITY_RECORD_FINISH' &&\r\n\tname === action.name &&\r\n\tkind === action.kind &&\r\n\t! action.error &&\r\n\trecordKey === action.recordId;\r\n\r\n/**\r\n * Requests a specific Entity revision from the REST API.\r\n *\r\n * @param {string}           kind        Entity kind.\r\n * @param {string}           name        Entity name.\r\n * @param {number|string}    recordKey   The key of the entity record whose revisions you want to fetch.\r\n * @param {number|string}    revisionKey The revision's key.\r\n * @param {Object|undefined} query       Optional object of query parameters to\r\n *                                       include with request. If requesting specific\r\n *                                       fields, fields must always include the ID.\r\n */\r\nexport const getRevision =\r\n\t( kind, name, recordKey, revisionKey, query ) =>\r\n\tasync ( { dispatch } ) => {\r\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind, name ) );\r\n\t\tconst entityConfig = configs.find(\r\n\t\t\t( config ) => config.name === name && config.kind === kind\r\n\t\t);\r\n\r\n\t\tif ( ! entityConfig ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( query !== undefined && query._fields ) {\r\n\t\t\t// If requesting specific fields, items and query association to said\r\n\t\t\t// records are stored by ID reference. Thus, fields must always include\r\n\t\t\t// the ID.\r\n\t\t\tquery = {\r\n\t\t\t\t...query,\r\n\t\t\t\t_fields: [\r\n\t\t\t\t\t...new Set( [\r\n\t\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) ||\r\n\t\t\t\t\t\t\t[] ),\r\n\t\t\t\t\t\tentityConfig.revisionKey || DEFAULT_ENTITY_KEY,\r\n\t\t\t\t\t] ),\r\n\t\t\t\t].join(),\r\n\t\t\t};\r\n\t\t}\r\n\t\tconst path = addQueryArgs(\r\n\t\t\tentityConfig.getRevisionsUrl( recordKey, revisionKey ),\r\n\t\t\tquery\r\n\t\t);\r\n\r\n\t\tlet record;\r\n\t\ttry {\r\n\t\t\trecord = await apiFetch( { path } );\r\n\t\t} catch ( error ) {\r\n\t\t\t// Do nothing if our request comes back with an API error.\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( record ) {\r\n\t\t\tdispatch.receiveRevisions( kind, name, recordKey, record, query );\r\n\t\t}\r\n\t};\r\n"],"mappings":"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","ignoreList":[]}