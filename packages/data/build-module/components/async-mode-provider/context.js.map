{"version":3,"names":["createContext","Context","Consumer","Provider","AsyncModeConsumer"],"sources":["@wordpress/data/src/components/async-mode-provider/context.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { createContext } from '@wordpress/element';\r\n\r\nexport const Context = createContext( false );\r\n\r\nconst { Consumer, Provider } = Context;\r\n\r\nexport const AsyncModeConsumer = Consumer;\r\n\r\n/**\r\n * Context Provider Component used to switch the data module component rerendering\r\n * between Sync and Async modes.\r\n *\r\n * @example\r\n *\r\n * ```js\r\n * import { useSelect, AsyncModeProvider } from '@wordpress/data';\r\n * import { store as blockEditorStore } from '@wordpress/block-editor';\r\n *\r\n * function BlockCount() {\r\n *   const count = useSelect( ( select ) => {\r\n *     return select( blockEditorStore ).getBlockCount()\r\n *   }, [] );\r\n *\r\n *   return count;\r\n * }\r\n *\r\n * function App() {\r\n *   return (\r\n *     <AsyncModeProvider value={ true }>\r\n *       <BlockCount />\r\n *     </AsyncModeProvider>\r\n *   );\r\n * }\r\n * ```\r\n *\r\n * In this example, the BlockCount component is rerendered asynchronously.\r\n * It means if a more critical task is being performed (like typing in an input),\r\n * the rerendering is delayed until the browser becomes IDLE.\r\n * It is possible to nest multiple levels of AsyncModeProvider to fine-tune the rendering behavior.\r\n *\r\n * @param {boolean} props.value Enable Async Mode.\r\n * @return {Component} The component to be rendered.\r\n */\r\nexport default Provider;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,aAAa,QAAQ,oBAAoB;AAElD,OAAO,MAAMC,OAAO,GAAGD,aAAa,CAAE,KAAM,CAAC;AAE7C,MAAM;EAAEE,QAAQ;EAAEC;AAAS,CAAC,GAAGF,OAAO;AAEtC,OAAO,MAAMG,iBAAiB,GAAGF,QAAQ;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,QAAQ","ignoreList":[]}