{"version":3,"names":["useRegistry","useDispatch","storeNameOrDescriptor","dispatch"],"sources":["@wordpress/data/src/components/use-dispatch/use-dispatch.js"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport useRegistry from '../registry-provider/use-registry';\r\n\r\n/**\r\n * @typedef {import('../../types').StoreDescriptor<StoreConfig>} StoreDescriptor\r\n * @template {import('../../types').AnyConfig} StoreConfig\r\n */\r\n/**\r\n * @typedef {import('../../types').UseDispatchReturn<StoreNameOrDescriptor>} UseDispatchReturn\r\n * @template StoreNameOrDescriptor\r\n */\r\n\r\n/**\r\n * A custom react hook returning the current registry dispatch actions creators.\r\n *\r\n * Note: The component using this hook must be within the context of a\r\n * RegistryProvider.\r\n *\r\n * @template {undefined | string | StoreDescriptor<any>} StoreNameOrDescriptor\r\n * @param {StoreNameOrDescriptor} [storeNameOrDescriptor] Optionally provide the name of the\r\n *                                                        store or its descriptor from which to\r\n *                                                        retrieve action creators. If not\r\n *                                                        provided, the registry.dispatch\r\n *                                                        function is returned instead.\r\n *\r\n * @example\r\n * This illustrates a pattern where you may need to retrieve dynamic data from\r\n * the server via the `useSelect` hook to use in combination with the dispatch\r\n * action.\r\n *\r\n * ```jsx\r\n * import { useCallback } from 'react';\r\n * import { useDispatch, useSelect } from '@wordpress/data';\r\n * import { store as myCustomStore } from 'my-custom-store';\r\n *\r\n * function Button( { onClick, children } ) {\r\n *   return <button type=\"button\" onClick={ onClick }>{ children }</button>\r\n * }\r\n *\r\n * const SaleButton = ( { children } ) => {\r\n *   const { stockNumber } = useSelect(\r\n *     ( select ) => select( myCustomStore ).getStockNumber(),\r\n *     []\r\n *   );\r\n *   const { startSale } = useDispatch( myCustomStore );\r\n *   const onClick = useCallback( () => {\r\n *     const discountPercent = stockNumber > 50 ? 10: 20;\r\n *     startSale( discountPercent );\r\n *   }, [ stockNumber ] );\r\n *   return <Button onClick={ onClick }>{ children }</Button>\r\n * }\r\n *\r\n * // Rendered somewhere in the application:\r\n * //\r\n * // <SaleButton>Start Sale!</SaleButton>\r\n * ```\r\n * @return {UseDispatchReturn<StoreNameOrDescriptor>} A custom react hook.\r\n */\r\nconst useDispatch = ( storeNameOrDescriptor ) => {\r\n\tconst { dispatch } = useRegistry();\r\n\treturn storeNameOrDescriptor === void 0\r\n\t\t? dispatch\r\n\t\t: dispatch( storeNameOrDescriptor );\r\n};\r\n\r\nexport default useDispatch;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,WAAW,MAAM,mCAAmC;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAKC,qBAAqB,IAAM;EAChD,MAAM;IAAEC;EAAS,CAAC,GAAGH,WAAW,CAAC,CAAC;EAClC,OAAOE,qBAAqB,KAAK,KAAK,CAAC,GACpCC,QAAQ,GACRA,QAAQ,CAAED,qBAAsB,CAAC;AACrC,CAAC;AAED,eAAeD,WAAW","ignoreList":[]}