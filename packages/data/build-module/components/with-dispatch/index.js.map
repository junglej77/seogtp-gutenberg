{"version":3,"names":["createHigherOrderComponent","useDispatchWithMap","jsx","_jsx","withDispatch","mapDispatchToProps","WrappedComponent","ownProps","mapDispatch","dispatch","registry","dispatchProps"],"sources":["@wordpress/data/src/components/with-dispatch/index.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { createHigherOrderComponent } from '@wordpress/compose';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { useDispatchWithMap } from '../use-dispatch';\r\n\r\n/** @typedef {import('react').ComponentType} ComponentType */\r\n\r\n/**\r\n * Higher-order component used to add dispatch props using registered action\r\n * creators.\r\n *\r\n * @param {Function} mapDispatchToProps A function of returning an object of\r\n *                                      prop names where value is a\r\n *                                      dispatch-bound action creator, or a\r\n *                                      function to be called with the\r\n *                                      component's props and returning an\r\n *                                      action creator.\r\n *\r\n * @example\r\n * ```jsx\r\n * function Button( { onClick, children } ) {\r\n *     return <button type=\"button\" onClick={ onClick }>{ children }</button>;\r\n * }\r\n *\r\n * import { withDispatch } from '@wordpress/data';\r\n * import { store as myCustomStore } from 'my-custom-store';\r\n *\r\n * const SaleButton = withDispatch( ( dispatch, ownProps ) => {\r\n *     const { startSale } = dispatch( myCustomStore );\r\n *     const { discountPercent } = ownProps;\r\n *\r\n *     return {\r\n *         onClick() {\r\n *             startSale( discountPercent );\r\n *         },\r\n *     };\r\n * } )( Button );\r\n *\r\n * // Rendered in the application:\r\n * //\r\n * // <SaleButton discountPercent=\"20\">Start Sale!</SaleButton>\r\n * ```\r\n *\r\n * @example\r\n * In the majority of cases, it will be sufficient to use only two first params\r\n * passed to `mapDispatchToProps` as illustrated in the previous example.\r\n * However, there might be some very advanced use cases where using the\r\n * `registry` object might be used as a tool to optimize the performance of\r\n * your component. Using `select` function from the registry might be useful\r\n * when you need to fetch some dynamic data from the store at the time when the\r\n * event is fired, but at the same time, you never use it to render your\r\n * component. In such scenario, you can avoid using the `withSelect` higher\r\n * order component to compute such prop, which might lead to unnecessary\r\n * re-renders of your component caused by its frequent value change.\r\n * Keep in mind, that `mapDispatchToProps` must return an object with functions\r\n * only.\r\n *\r\n * ```jsx\r\n * function Button( { onClick, children } ) {\r\n *     return <button type=\"button\" onClick={ onClick }>{ children }</button>;\r\n * }\r\n *\r\n * import { withDispatch } from '@wordpress/data';\r\n * import { store as myCustomStore } from 'my-custom-store';\r\n *\r\n * const SaleButton = withDispatch( ( dispatch, ownProps, { select } ) => {\r\n *    // Stock number changes frequently.\r\n *    const { getStockNumber } = select( myCustomStore );\r\n *    const { startSale } = dispatch( myCustomStore );\r\n *    return {\r\n *        onClick() {\r\n *            const discountPercent = getStockNumber() > 50 ? 10 : 20;\r\n *            startSale( discountPercent );\r\n *        },\r\n *    };\r\n * } )( Button );\r\n *\r\n * // Rendered in the application:\r\n * //\r\n * //  <SaleButton>Start Sale!</SaleButton>\r\n * ```\r\n *\r\n * _Note:_ It is important that the `mapDispatchToProps` function always\r\n * returns an object with the same keys. For example, it should not contain\r\n * conditions under which a different value would be returned.\r\n *\r\n * @return {ComponentType} Enhanced component with merged dispatcher props.\r\n */\r\nconst withDispatch = ( mapDispatchToProps ) =>\r\n\tcreateHigherOrderComponent(\r\n\t\t( WrappedComponent ) => ( ownProps ) => {\r\n\t\t\tconst mapDispatch = ( dispatch, registry ) =>\r\n\t\t\t\tmapDispatchToProps( dispatch, ownProps, registry );\r\n\t\t\tconst dispatchProps = useDispatchWithMap( mapDispatch, [] );\r\n\t\t\treturn <WrappedComponent { ...ownProps } { ...dispatchProps } />;\r\n\t\t},\r\n\t\t'withDispatch'\r\n\t);\r\n\r\nexport default withDispatch;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,0BAA0B,QAAQ,oBAAoB;;AAE/D;AACA;AACA;AACA,SAASC,kBAAkB,QAAQ,iBAAiB;;AAEpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhFA,SAAAC,GAAA,IAAAC,IAAA;AAiFA,MAAMC,YAAY,GAAKC,kBAAkB,IACxCL,0BAA0B,CACvBM,gBAAgB,IAAQC,QAAQ,IAAM;EACvC,MAAMC,WAAW,GAAGA,CAAEC,QAAQ,EAAEC,QAAQ,KACvCL,kBAAkB,CAAEI,QAAQ,EAAEF,QAAQ,EAAEG,QAAS,CAAC;EACnD,MAAMC,aAAa,GAAGV,kBAAkB,CAAEO,WAAW,EAAE,EAAG,CAAC;EAC3D,oBAAOL,IAAA,CAACG,gBAAgB;IAAA,GAAMC,QAAQ;IAAA,GAAQI;EAAa,CAAI,CAAC;AACjE,CAAC,EACD,cACD,CAAC;AAEF,eAAeP,YAAY","ignoreList":[]}