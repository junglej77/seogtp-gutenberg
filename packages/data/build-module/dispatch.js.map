{"version":3,"names":["defaultRegistry","dispatch","storeNameOrDescriptor"],"sources":["@wordpress/data/src/dispatch.ts"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport type { AnyConfig, StoreDescriptor, DispatchReturn } from './types';\r\nimport defaultRegistry from './default-registry';\r\n\r\n/**\r\n * Given a store descriptor, returns an object of the store's action creators.\r\n * Calling an action creator will cause it to be dispatched, updating the state value accordingly.\r\n *\r\n * Note: Action creators returned by the dispatch will return a promise when\r\n * they are called.\r\n *\r\n * @param storeNameOrDescriptor The store descriptor. The legacy calling convention of passing\r\n *                              the store name is also supported.\r\n *\r\n * @example\r\n * ```js\r\n * import { dispatch } from '@wordpress/data';\r\n * import { store as myCustomStore } from 'my-custom-store';\r\n *\r\n * dispatch( myCustomStore ).setPrice( 'hammer', 9.75 );\r\n * ```\r\n * @return Object containing the action creators.\r\n */\r\nexport function dispatch<\r\n\tStoreNameOrDescriptor extends StoreDescriptor< AnyConfig > | string,\r\n>(\r\n\tstoreNameOrDescriptor: StoreNameOrDescriptor\r\n): DispatchReturn< StoreNameOrDescriptor > {\r\n\treturn defaultRegistry.dispatch( storeNameOrDescriptor );\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAOA,eAAe,MAAM,oBAAoB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAGvBC,qBAA4C,EACF;EAC1C,OAAOF,eAAe,CAACC,QAAQ,CAAEC,qBAAsB,CAAC;AACzD","ignoreList":[]}