{"version":3,"names":["defaultRegistry","plugins","combineReducers","combineReducersModule","default","withSelect","withDispatch","withRegistry","RegistryProvider","RegistryConsumer","useRegistry","useSelect","useSuspenseSelect","useDispatch","AsyncModeProvider","createRegistry","createRegistrySelector","createRegistryControl","createSelector","controls","createReduxStore","dispatch","select","resolveSelect","suspendSelect","subscribe","registerGenericStore","registerStore","use","register"],"sources":["D:/jungle/gutenberg/packages/data/src/index.js"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport defaultRegistry from './default-registry';\r\nimport * as plugins from './plugins';\r\nimport { combineReducers as combineReducersModule } from './redux-store';\r\n\r\n/** @typedef {import('./types').StoreDescriptor} StoreDescriptor */\r\n\r\nexport { default as withSelect } from './components/with-select';\r\nexport { default as withDispatch } from './components/with-dispatch';\r\nexport { default as withRegistry } from './components/with-registry';\r\nexport {\r\n\tRegistryProvider,\r\n\tRegistryConsumer,\r\n\tuseRegistry,\r\n} from './components/registry-provider';\r\nexport {\r\n\tdefault as useSelect,\r\n\tuseSuspenseSelect,\r\n} from './components/use-select';\r\nexport { useDispatch } from './components/use-dispatch';\r\nexport { AsyncModeProvider } from './components/async-mode-provider';\r\nexport { createRegistry } from './registry';\r\nexport { createRegistrySelector, createRegistryControl } from './factory';\r\nexport { createSelector } from './create-selector';\r\nexport { controls } from './controls';\r\nexport { default as createReduxStore } from './redux-store';\r\nexport { dispatch } from './dispatch';\r\nexport { select } from './select';\r\n\r\n/**\r\n * Object of available plugins to use with a registry.\r\n *\r\n * @see [use](#use)\r\n *\r\n * @type {Object}\r\n */\r\nexport { plugins };\r\n\r\n/**\r\n * The combineReducers helper function turns an object whose values are different\r\n * reducing functions into a single reducing function you can pass to registerReducer.\r\n *\r\n * @type  {import('./types').combineReducers}\r\n * @param {Object} reducers An object whose values correspond to different reducing\r\n *                          functions that need to be combined into one.\r\n *\r\n * @example\r\n * ```js\r\n * import { combineReducers, createReduxStore, register } from '@wordpress/data';\r\n *\r\n * const prices = ( state = {}, action ) => {\r\n * \treturn action.type === 'SET_PRICE' ?\r\n * \t\t{\r\n * \t\t\t...state,\r\n * \t\t\t[ action.item ]: action.price,\r\n * \t\t} :\r\n * \t\tstate;\r\n * };\r\n *\r\n * const discountPercent = ( state = 0, action ) => {\r\n * \treturn action.type === 'START_SALE' ?\r\n * \t\taction.discountPercent :\r\n * \t\tstate;\r\n * };\r\n *\r\n * const store = createReduxStore( 'my-shop', {\r\n * \treducer: combineReducers( {\r\n * \t\tprices,\r\n * \t\tdiscountPercent,\r\n * \t} ),\r\n * } );\r\n * register( store );\r\n * ```\r\n *\r\n * @return {Function} A reducer that invokes every reducer inside the reducers\r\n *                    object, and constructs a state object with the same shape.\r\n */\r\nexport const combineReducers = combineReducersModule;\r\n\r\n/**\r\n * Given a store descriptor, returns an object containing the store's selectors pre-bound to state\r\n * so that you only need to supply additional arguments, and modified so that they return promises\r\n * that resolve to their eventual values, after any resolvers have ran.\r\n *\r\n * @param {StoreDescriptor|string} storeNameOrDescriptor The store descriptor. The legacy calling\r\n *                                                       convention of passing the store name is\r\n *                                                       also supported.\r\n *\r\n * @example\r\n * ```js\r\n * import { resolveSelect } from '@wordpress/data';\r\n * import { store as myCustomStore } from 'my-custom-store';\r\n *\r\n * resolveSelect( myCustomStore ).getPrice( 'hammer' ).then(console.log)\r\n * ```\r\n *\r\n * @return {Object} Object containing the store's promise-wrapped selectors.\r\n */\r\nexport const resolveSelect = defaultRegistry.resolveSelect;\r\n\r\n/**\r\n * Given a store descriptor, returns an object containing the store's selectors pre-bound to state\r\n * so that you only need to supply additional arguments, and modified so that they throw promises\r\n * in case the selector is not resolved yet.\r\n *\r\n * @param {StoreDescriptor|string} storeNameOrDescriptor The store descriptor. The legacy calling\r\n *                                                       convention of passing the store name is\r\n *                                                       also supported.\r\n *\r\n * @return {Object} Object containing the store's suspense-wrapped selectors.\r\n */\r\nexport const suspendSelect = defaultRegistry.suspendSelect;\r\n\r\n/**\r\n * Given a listener function, the function will be called any time the state value\r\n * of one of the registered stores has changed. If you specify the optional\r\n * `storeNameOrDescriptor` parameter, the listener function will be called only\r\n * on updates on that one specific registered store.\r\n *\r\n * This function returns an `unsubscribe` function used to stop the subscription.\r\n *\r\n * @param {Function}                listener              Callback function.\r\n * @param {string|StoreDescriptor?} storeNameOrDescriptor Optional store name.\r\n *\r\n * @example\r\n * ```js\r\n * import { subscribe } from '@wordpress/data';\r\n *\r\n * const unsubscribe = subscribe( () => {\r\n * \t// You could use this opportunity to test whether the derived result of a\r\n * \t// selector has subsequently changed as the result of a state update.\r\n * } );\r\n *\r\n * // Later, if necessary...\r\n * unsubscribe();\r\n * ```\r\n */\r\nexport const subscribe = defaultRegistry.subscribe;\r\n\r\n/**\r\n * Registers a generic store instance.\r\n *\r\n * @deprecated Use `register( storeDescriptor )` instead.\r\n *\r\n * @param {string} name  Store registry name.\r\n * @param {Object} store Store instance (`{ getSelectors, getActions, subscribe }`).\r\n */\r\nexport const registerGenericStore = defaultRegistry.registerGenericStore;\r\n\r\n/**\r\n * Registers a standard `@wordpress/data` store.\r\n *\r\n * @deprecated Use `register` instead.\r\n *\r\n * @param {string} storeName Unique namespace identifier for the store.\r\n * @param {Object} options   Store description (reducer, actions, selectors, resolvers).\r\n *\r\n * @return {Object} Registered store object.\r\n */\r\nexport const registerStore = defaultRegistry.registerStore;\r\n\r\n/**\r\n * Extends a registry to inherit functionality provided by a given plugin. A\r\n * plugin is an object with properties aligning to that of a registry, merged\r\n * to extend the default registry behavior.\r\n *\r\n * @param {Object} plugin Plugin object.\r\n */\r\nexport const use = defaultRegistry.use;\r\n\r\n/**\r\n * Registers a standard `@wordpress/data` store descriptor.\r\n *\r\n * @example\r\n * ```js\r\n * import { createReduxStore, register } from '@wordpress/data';\r\n *\r\n * const store = createReduxStore( 'demo', {\r\n *     reducer: ( state = 'OK' ) => state,\r\n *     selectors: {\r\n *         getValue: ( state ) => state,\r\n *     },\r\n * } );\r\n * register( store );\r\n * ```\r\n *\r\n * @param {StoreDescriptor} store Store descriptor.\r\n */\r\nexport const register = defaultRegistry.register;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,eAAe,MAAM,oBAAoB;AAChD,OAAO,KAAKC,OAAO,MAAM,WAAW;AACpC,SAASC,eAAe,IAAIC,qBAAqB,QAAQ,eAAe;;AAExE;;AAEA,SAASC,OAAO,IAAIC,UAAU,QAAQ,0BAA0B;AAChE,SAASD,OAAO,IAAIE,YAAY,QAAQ,4BAA4B;AACpE,SAASF,OAAO,IAAIG,YAAY,QAAQ,4BAA4B;AACpE,SACCC,gBAAgB,EAChBC,gBAAgB,EAChBC,WAAW,QACL,gCAAgC;AACvC,SACCN,OAAO,IAAIO,SAAS,EACpBC,iBAAiB,QACX,yBAAyB;AAChC,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,iBAAiB,QAAQ,kCAAkC;AACpE,SAASC,cAAc,QAAQ,YAAY;AAC3C,SAASC,sBAAsB,EAAEC,qBAAqB,QAAQ,WAAW;AACzE,SAASC,cAAc,QAAQ,mBAAmB;AAClD,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASf,OAAO,IAAIgB,gBAAgB,QAAQ,eAAe;AAC3D,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,MAAM,QAAQ,UAAU;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASrB,OAAO;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAGC,qBAAqB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMoB,aAAa,GAAGvB,eAAe,CAACuB,aAAa;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGxB,eAAe,CAACwB,aAAa;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGzB,eAAe,CAACyB,SAAS;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAG1B,eAAe,CAAC0B,oBAAoB;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG3B,eAAe,CAAC2B,aAAa;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,GAAG,GAAG5B,eAAe,CAAC4B,GAAG;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAG7B,eAAe,CAAC6B,QAAQ","ignoreList":[]}