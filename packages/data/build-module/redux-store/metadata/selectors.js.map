{"version":3,"names":["deprecated","createSelector","selectorArgsToStateKey","getResolutionState","state","selectorName","args","map","get","getIsResolving","since","version","alternative","resolutionState","status","hasStartedResolution","undefined","hasFinishedResolution","hasResolutionFailed","getResolutionError","error","isResolving","getCachedResolvers","hasResolvingSelectors","Object","values","some","selectorState","Array","from","_map","resolution","countSelectorsByStatus","selectorsByStatus","forEach","_resolution$1$status","currentStatus"],"sources":["@wordpress/data/src/redux-store/metadata/selectors.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport deprecated from '@wordpress/deprecated';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { createSelector } from '../../create-selector';\r\nimport { selectorArgsToStateKey } from './utils';\r\n\r\n/** @typedef {Record<string, import('./reducer').State>} State */\r\n/** @typedef {import('./reducer').StateValue} StateValue */\r\n/** @typedef {import('./reducer').Status} Status */\r\n\r\n/**\r\n * Returns the raw resolution state value for a given selector name,\r\n * and arguments set. May be undefined if the selector has never been resolved\r\n * or not resolved for the given set of arguments, otherwise true or false for\r\n * resolution started and completed respectively.\r\n *\r\n * @param {State}      state        Data state.\r\n * @param {string}     selectorName Selector name.\r\n * @param {unknown[]?} args         Arguments passed to selector.\r\n *\r\n * @return {StateValue|undefined} isResolving value.\r\n */\r\nexport function getResolutionState( state, selectorName, args ) {\r\n\tconst map = state[ selectorName ];\r\n\tif ( ! map ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\treturn map.get( selectorArgsToStateKey( args ) );\r\n}\r\n\r\n/**\r\n * Returns an `isResolving`-like value for a given selector name and arguments set.\r\n * Its value is either `undefined` if the selector has never been resolved or has been\r\n * invalidated, or a `true`/`false` boolean value if the resolution is in progress or\r\n * has finished, respectively.\r\n *\r\n * This is a legacy selector that was implemented when the \"raw\" internal data had\r\n * this `undefined | boolean` format. Nowadays the internal value is an object that\r\n * can be retrieved with `getResolutionState`.\r\n *\r\n * @deprecated\r\n *\r\n * @param {State}      state        Data state.\r\n * @param {string}     selectorName Selector name.\r\n * @param {unknown[]?} args         Arguments passed to selector.\r\n *\r\n * @return {boolean | undefined} isResolving value.\r\n */\r\nexport function getIsResolving( state, selectorName, args ) {\r\n\tdeprecated( 'wp.data.select( store ).getIsResolving', {\r\n\t\tsince: '6.6',\r\n\t\tversion: '6.8',\r\n\t\talternative: 'wp.data.select( store ).getResolutionState',\r\n\t} );\r\n\r\n\tconst resolutionState = getResolutionState( state, selectorName, args );\r\n\treturn resolutionState && resolutionState.status === 'resolving';\r\n}\r\n\r\n/**\r\n * Returns true if resolution has already been triggered for a given\r\n * selector name, and arguments set.\r\n *\r\n * @param {State}      state        Data state.\r\n * @param {string}     selectorName Selector name.\r\n * @param {unknown[]?} args         Arguments passed to selector.\r\n *\r\n * @return {boolean} Whether resolution has been triggered.\r\n */\r\nexport function hasStartedResolution( state, selectorName, args ) {\r\n\treturn getResolutionState( state, selectorName, args ) !== undefined;\r\n}\r\n\r\n/**\r\n * Returns true if resolution has completed for a given selector\r\n * name, and arguments set.\r\n *\r\n * @param {State}      state        Data state.\r\n * @param {string}     selectorName Selector name.\r\n * @param {unknown[]?} args         Arguments passed to selector.\r\n *\r\n * @return {boolean} Whether resolution has completed.\r\n */\r\nexport function hasFinishedResolution( state, selectorName, args ) {\r\n\tconst status = getResolutionState( state, selectorName, args )?.status;\r\n\treturn status === 'finished' || status === 'error';\r\n}\r\n\r\n/**\r\n * Returns true if resolution has failed for a given selector\r\n * name, and arguments set.\r\n *\r\n * @param {State}      state        Data state.\r\n * @param {string}     selectorName Selector name.\r\n * @param {unknown[]?} args         Arguments passed to selector.\r\n *\r\n * @return {boolean} Has resolution failed\r\n */\r\nexport function hasResolutionFailed( state, selectorName, args ) {\r\n\treturn getResolutionState( state, selectorName, args )?.status === 'error';\r\n}\r\n\r\n/**\r\n * Returns the resolution error for a given selector name, and arguments set.\r\n * Note it may be of an Error type, but may also be null, undefined, or anything else\r\n * that can be `throw`-n.\r\n *\r\n * @param {State}      state        Data state.\r\n * @param {string}     selectorName Selector name.\r\n * @param {unknown[]?} args         Arguments passed to selector.\r\n *\r\n * @return {Error|unknown} Last resolution error\r\n */\r\nexport function getResolutionError( state, selectorName, args ) {\r\n\tconst resolutionState = getResolutionState( state, selectorName, args );\r\n\treturn resolutionState?.status === 'error' ? resolutionState.error : null;\r\n}\r\n\r\n/**\r\n * Returns true if resolution has been triggered but has not yet completed for\r\n * a given selector name, and arguments set.\r\n *\r\n * @param {State}      state        Data state.\r\n * @param {string}     selectorName Selector name.\r\n * @param {unknown[]?} args         Arguments passed to selector.\r\n *\r\n * @return {boolean} Whether resolution is in progress.\r\n */\r\nexport function isResolving( state, selectorName, args ) {\r\n\treturn (\r\n\t\tgetResolutionState( state, selectorName, args )?.status === 'resolving'\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns the list of the cached resolvers.\r\n *\r\n * @param {State} state Data state.\r\n *\r\n * @return {State} Resolvers mapped by args and selectorName.\r\n */\r\nexport function getCachedResolvers( state ) {\r\n\treturn state;\r\n}\r\n\r\n/**\r\n * Whether the store has any currently resolving selectors.\r\n *\r\n * @param {State} state Data state.\r\n *\r\n * @return {boolean} True if one or more selectors are resolving, false otherwise.\r\n */\r\nexport function hasResolvingSelectors( state ) {\r\n\treturn Object.values( state ).some( ( selectorState ) =>\r\n\t\t/**\r\n\t\t * This uses the internal `_map` property of `EquivalentKeyMap` for\r\n\t\t * optimization purposes, since the `EquivalentKeyMap` implementation\r\n\t\t * does not support a `.values()` implementation.\r\n\t\t *\r\n\t\t * @see https://github.com/aduth/equivalent-key-map\r\n\t\t */\r\n\t\tArray.from( selectorState._map.values() ).some(\r\n\t\t\t( resolution ) => resolution[ 1 ]?.status === 'resolving'\r\n\t\t)\r\n\t);\r\n}\r\n\r\n/**\r\n * Retrieves the total number of selectors, grouped per status.\r\n *\r\n * @param {State} state Data state.\r\n *\r\n * @return {Object} Object, containing selector totals by status.\r\n */\r\nexport const countSelectorsByStatus = createSelector(\r\n\t( state ) => {\r\n\t\tconst selectorsByStatus = {};\r\n\r\n\t\tObject.values( state ).forEach( ( selectorState ) =>\r\n\t\t\t/**\r\n\t\t\t * This uses the internal `_map` property of `EquivalentKeyMap` for\r\n\t\t\t * optimization purposes, since the `EquivalentKeyMap` implementation\r\n\t\t\t * does not support a `.values()` implementation.\r\n\t\t\t *\r\n\t\t\t * @see https://github.com/aduth/equivalent-key-map\r\n\t\t\t */\r\n\t\t\tArray.from( selectorState._map.values() ).forEach(\r\n\t\t\t\t( resolution ) => {\r\n\t\t\t\t\tconst currentStatus = resolution[ 1 ]?.status ?? 'error';\r\n\t\t\t\t\tif ( ! selectorsByStatus[ currentStatus ] ) {\r\n\t\t\t\t\t\tselectorsByStatus[ currentStatus ] = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tselectorsByStatus[ currentStatus ]++;\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\treturn selectorsByStatus;\r\n\t},\r\n\t( state ) => [ state ]\r\n);\r\n"],"mappings":"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","ignoreList":[]}