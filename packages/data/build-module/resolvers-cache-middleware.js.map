{"version":3,"names":["createResolversCacheMiddleware","registry","storeName","next","action","resolvers","select","getCachedResolvers","resolverEntries","Object","entries","forEach","selectorName","resolversByArgs","resolver","stores","shouldInvalidate","value","args","undefined","status","dispatch","invalidateResolution"],"sources":["@wordpress/data/src/resolvers-cache-middleware.js"],"sourcesContent":["/** @typedef {import('./registry').WPDataRegistry} WPDataRegistry */\r\n\r\n/**\r\n * Creates a middleware handling resolvers cache invalidation.\r\n *\r\n * @param {WPDataRegistry} registry  Registry for which to create the middleware.\r\n * @param {string}         storeName Name of the store for which to create the middleware.\r\n *\r\n * @return {Function} Middleware function.\r\n */\r\nconst createResolversCacheMiddleware =\r\n\t( registry, storeName ) => () => ( next ) => ( action ) => {\r\n\t\tconst resolvers = registry.select( storeName ).getCachedResolvers();\r\n\t\tconst resolverEntries = Object.entries( resolvers );\r\n\t\tresolverEntries.forEach( ( [ selectorName, resolversByArgs ] ) => {\r\n\t\t\tconst resolver =\r\n\t\t\t\tregistry.stores[ storeName ]?.resolvers?.[ selectorName ];\r\n\t\t\tif ( ! resolver || ! resolver.shouldInvalidate ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tresolversByArgs.forEach( ( value, args ) => {\r\n\t\t\t\t// Works around a bug in `EquivalentKeyMap` where `map.delete` merely sets an entry value\r\n\t\t\t\t// to `undefined` and `map.forEach` then iterates also over these orphaned entries.\r\n\t\t\t\tif ( value === undefined ) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// resolversByArgs is the map Map([ args ] => boolean) storing the cache resolution status for a given selector.\r\n\t\t\t\t// If the value is \"finished\" or \"error\" it means this resolver has finished its resolution which means we need\r\n\t\t\t\t// to invalidate it, if it's true it means it's inflight and the invalidation is not necessary.\r\n\t\t\t\tif ( value.status !== 'finished' && value.status !== 'error' ) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! resolver.shouldInvalidate( action, ...args ) ) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Trigger cache invalidation\r\n\t\t\t\tregistry\r\n\t\t\t\t\t.dispatch( storeName )\r\n\t\t\t\t\t.invalidateResolution( selectorName, args );\r\n\t\t\t} );\r\n\t\t} );\r\n\t\treturn next( action );\r\n\t};\r\n\r\nexport default createResolversCacheMiddleware;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,8BAA8B,GACnCA,CAAEC,QAAQ,EAAEC,SAAS,KAAM,MAAQC,IAAI,IAAQC,MAAM,IAAM;EAC1D,MAAMC,SAAS,GAAGJ,QAAQ,CAACK,MAAM,CAAEJ,SAAU,CAAC,CAACK,kBAAkB,CAAC,CAAC;EACnE,MAAMC,eAAe,GAAGC,MAAM,CAACC,OAAO,CAAEL,SAAU,CAAC;EACnDG,eAAe,CAACG,OAAO,CAAE,CAAE,CAAEC,YAAY,EAAEC,eAAe,CAAE,KAAM;IACjE,MAAMC,QAAQ,GACbb,QAAQ,CAACc,MAAM,CAAEb,SAAS,CAAE,EAAEG,SAAS,GAAIO,YAAY,CAAE;IAC1D,IAAK,CAAEE,QAAQ,IAAI,CAAEA,QAAQ,CAACE,gBAAgB,EAAG;MAChD;IACD;IACAH,eAAe,CAACF,OAAO,CAAE,CAAEM,KAAK,EAAEC,IAAI,KAAM;MAC3C;MACA;MACA,IAAKD,KAAK,KAAKE,SAAS,EAAG;QAC1B;MACD;;MAEA;MACA;MACA;MACA,IAAKF,KAAK,CAACG,MAAM,KAAK,UAAU,IAAIH,KAAK,CAACG,MAAM,KAAK,OAAO,EAAG;QAC9D;MACD;MAEA,IAAK,CAAEN,QAAQ,CAACE,gBAAgB,CAAEZ,MAAM,EAAE,GAAGc,IAAK,CAAC,EAAG;QACrD;MACD;;MAEA;MACAjB,QAAQ,CACNoB,QAAQ,CAAEnB,SAAU,CAAC,CACrBoB,oBAAoB,CAAEV,YAAY,EAAEM,IAAK,CAAC;IAC7C,CAAE,CAAC;EACJ,CAAE,CAAC;EACH,OAAOf,IAAI,CAAEC,MAAO,CAAC;AACtB,CAAC;AAEF,eAAeJ,8BAA8B","ignoreList":[]}