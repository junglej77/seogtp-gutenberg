{"version":3,"names":[],"sources":["@wordpress/dataviews/src/types.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport type { ReactElement, ComponentType } from 'react';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport type { SetSelection } from './private-types';\r\n\r\nexport type SortDirection = 'asc' | 'desc';\r\n\r\n/**\r\n * Generic option type.\r\n */\r\nexport interface Option< Value extends any = any > {\r\n\tvalue: Value;\r\n\tlabel: string;\r\n\tdescription?: string;\r\n}\r\n\r\ninterface FilterByConfig {\r\n\t/**\r\n\t * The list of operators supported by the field.\r\n\t */\r\n\toperators?: Operator[];\r\n\r\n\t/**\r\n\t * Whether it is a primary filter.\r\n\t *\r\n\t * A primary filter is always visible and is not listed in the \"Add filter\" component,\r\n\t * except for the list layout where it behaves like a secondary filter.\r\n\t */\r\n\tisPrimary?: boolean;\r\n}\r\n\r\nexport type Operator =\r\n\t| 'is'\r\n\t| 'isNot'\r\n\t| 'isAny'\r\n\t| 'isNone'\r\n\t| 'isAll'\r\n\t| 'isNotAll';\r\n\r\nexport type FieldType = 'text' | 'integer' | 'datetime';\r\n\r\nexport type ValidationContext = {\r\n\telements?: Option[];\r\n};\r\n\r\n/**\r\n * An abstract interface for Field based on the field type.\r\n */\r\nexport type FieldTypeDefinition< Item > = {\r\n\t/**\r\n\t * Callback used to sort the field.\r\n\t */\r\n\tsort: ( a: Item, b: Item, direction: SortDirection ) => number;\r\n\r\n\t/**\r\n\t * Callback used to validate the field.\r\n\t */\r\n\tisValid: ( item: Item, context?: ValidationContext ) => boolean;\r\n\r\n\t/**\r\n\t * Callback used to render an edit control for the field or control name.\r\n\t */\r\n\tEdit: ComponentType< DataFormControlProps< Item > > | string;\r\n};\r\n\r\n/**\r\n * A dataview field for a specific property of a data type.\r\n */\r\nexport type Field< Item > = {\r\n\t/**\r\n\t * Type of the fields.\r\n\t */\r\n\ttype?: FieldType;\r\n\r\n\t/**\r\n\t * The unique identifier of the field.\r\n\t */\r\n\tid: string;\r\n\r\n\t/**\r\n\t * The label of the field. Defaults to the id.\r\n\t */\r\n\tlabel?: string;\r\n\r\n\t/**\r\n\t * The header of the field. Defaults to the label.\r\n\t * It allows the usage of a React Element to render the field labels.\r\n\t */\r\n\theader?: string | ReactElement;\r\n\r\n\t/**\r\n\t * A description of the field.\r\n\t */\r\n\tdescription?: string;\r\n\r\n\t/**\r\n\t * Placeholder for the field.\r\n\t */\r\n\tplaceholder?: string;\r\n\r\n\t/**\r\n\t * Callback used to render the field. Defaults to `field.getValue`.\r\n\t */\r\n\trender?: ComponentType< { item: Item } >;\r\n\r\n\t/**\r\n\t * Callback used to render an edit control for the field.\r\n\t */\r\n\tEdit?: ComponentType< DataFormControlProps< Item > > | string;\r\n\r\n\t/**\r\n\t * Callback used to sort the field.\r\n\t */\r\n\tsort?: ( a: Item, b: Item, direction: SortDirection ) => number;\r\n\r\n\t/**\r\n\t * Callback used to validate the field.\r\n\t */\r\n\tisValid?: ( item: Item, context?: ValidationContext ) => boolean;\r\n\r\n\t/**\r\n\t * Whether the field is sortable.\r\n\t */\r\n\tenableSorting?: boolean;\r\n\r\n\t/**\r\n\t * Whether the field is searchable.\r\n\t */\r\n\tenableGlobalSearch?: boolean;\r\n\r\n\t/**\r\n\t * Whether the field is filterable.\r\n\t */\r\n\tenableHiding?: boolean;\r\n\r\n\t/**\r\n\t * The list of options to pick from when using the field as a filter.\r\n\t */\r\n\telements?: Option[];\r\n\r\n\t/**\r\n\t * Filter config for the field.\r\n\t */\r\n\tfilterBy?: FilterByConfig | undefined;\r\n\r\n\t/**\r\n\t * Callback used to retrieve the value of the field from the item.\r\n\t * Defaults to `item[ field.id ]`.\r\n\t */\r\n\tgetValue?: ( args: { item: Item } ) => any;\r\n};\r\n\r\nexport type NormalizedField< Item > = Field< Item > & {\r\n\tlabel: string;\r\n\theader: string | ReactElement;\r\n\tgetValue: ( args: { item: Item } ) => any;\r\n\trender: ComponentType< { item: Item } >;\r\n\tEdit: ComponentType< DataFormControlProps< Item > >;\r\n\tsort: ( a: Item, b: Item, direction: SortDirection ) => number;\r\n\tisValid: ( item: Item, context?: ValidationContext ) => boolean;\r\n\tenableHiding: boolean;\r\n\tenableSorting: boolean;\r\n};\r\n\r\n/**\r\n * A collection of dataview fields for a data type.\r\n */\r\nexport type Fields< Item > = Field< Item >[];\r\n\r\nexport type Data< Item > = Item[];\r\n\r\n/**\r\n * The form configuration.\r\n */\r\nexport type Form = {\r\n\ttype?: 'regular' | 'panel';\r\n\tfields?: string[];\r\n};\r\n\r\nexport type DataFormControlProps< Item > = {\r\n\tdata: Item;\r\n\tfield: NormalizedField< Item >;\r\n\tonChange: ( value: Record< string, any > ) => void;\r\n\thideLabelFromVision?: boolean;\r\n};\r\n\r\n/**\r\n * The filters applied to the dataset.\r\n */\r\nexport interface Filter {\r\n\t/**\r\n\t * The field to filter by.\r\n\t */\r\n\tfield: string;\r\n\r\n\t/**\r\n\t * The operator to use.\r\n\t */\r\n\toperator: Operator;\r\n\r\n\t/**\r\n\t * The value to filter by.\r\n\t */\r\n\tvalue: any;\r\n}\r\n\r\nexport interface NormalizedFilter {\r\n\t/**\r\n\t * The field to filter by.\r\n\t */\r\n\tfield: string;\r\n\r\n\t/**\r\n\t * The field name.\r\n\t */\r\n\tname: string;\r\n\r\n\t/**\r\n\t * The list of options to pick from when using the field as a filter.\r\n\t */\r\n\telements: Option[];\r\n\r\n\t/**\r\n\t * Is a single selection filter.\r\n\t */\r\n\tsingleSelection: boolean;\r\n\r\n\t/**\r\n\t * The list of operators supported by the field.\r\n\t */\r\n\toperators: Operator[];\r\n\r\n\t/**\r\n\t * Whether the filter is visible.\r\n\t */\r\n\tisVisible: boolean;\r\n\r\n\t/**\r\n\t * Whether it is a primary filter.\r\n\t */\r\n\tisPrimary: boolean;\r\n}\r\n\r\ninterface ViewBase {\r\n\t/**\r\n\t * The layout of the view.\r\n\t */\r\n\ttype: string;\r\n\r\n\t/**\r\n\t * The global search term.\r\n\t */\r\n\tsearch?: string;\r\n\r\n\t/**\r\n\t * The filters to apply.\r\n\t */\r\n\tfilters?: Filter[];\r\n\r\n\t/**\r\n\t * The sorting configuration.\r\n\t */\r\n\tsort?: {\r\n\t\t/**\r\n\t\t * The field to sort by.\r\n\t\t */\r\n\t\tfield: string;\r\n\r\n\t\t/**\r\n\t\t * The direction to sort by.\r\n\t\t */\r\n\t\tdirection: SortDirection;\r\n\t};\r\n\r\n\t/**\r\n\t * The active page\r\n\t */\r\n\tpage?: number;\r\n\r\n\t/**\r\n\t * The number of items per page\r\n\t */\r\n\tperPage?: number;\r\n\r\n\t/**\r\n\t * The fields to render\r\n\t */\r\n\tfields?: string[];\r\n}\r\n\r\nexport interface CombinedField {\r\n\tid: string;\r\n\r\n\tlabel: string;\r\n\r\n\theader?: string | ReactElement;\r\n\r\n\t/**\r\n\t * The fields to use as columns.\r\n\t */\r\n\tchildren: string[];\r\n\r\n\t/**\r\n\t * The direction of the stack.\r\n\t */\r\n\tdirection: 'horizontal' | 'vertical';\r\n}\r\n\r\nexport interface ColumnStyle {\r\n\t/**\r\n\t * The width of the field column.\r\n\t */\r\n\twidth?: string | number;\r\n\r\n\t/**\r\n\t * The minimum width of the field column.\r\n\t */\r\n\tmaxWidth?: string | number;\r\n\r\n\t/**\r\n\t * The maximum width of the field column.\r\n\t */\r\n\tminWidth?: string | number;\r\n}\r\n\r\nexport interface ViewTable extends ViewBase {\r\n\ttype: 'table';\r\n\r\n\tlayout?: {\r\n\t\t/**\r\n\t\t * The field to use as the primary field.\r\n\t\t */\r\n\t\tprimaryField?: string;\r\n\r\n\t\t/**\r\n\t\t * The fields to use as columns.\r\n\t\t */\r\n\t\tcombinedFields?: CombinedField[];\r\n\r\n\t\t/**\r\n\t\t * The styles for the columns.\r\n\t\t */\r\n\t\tstyles?: Record< string, ColumnStyle >;\r\n\t};\r\n}\r\n\r\nexport interface ViewList extends ViewBase {\r\n\ttype: 'list';\r\n\r\n\tlayout?: {\r\n\t\t/**\r\n\t\t * The field to use as the primary field.\r\n\t\t */\r\n\t\tprimaryField?: string;\r\n\r\n\t\t/**\r\n\t\t * The field to use as the media field.\r\n\t\t */\r\n\t\tmediaField?: string;\r\n\t};\r\n}\r\n\r\nexport interface ViewGrid extends ViewBase {\r\n\ttype: 'grid';\r\n\r\n\tlayout?: {\r\n\t\t/**\r\n\t\t * The field to use as the primary field.\r\n\t\t */\r\n\t\tprimaryField?: string;\r\n\r\n\t\t/**\r\n\t\t * The field to use as the media field.\r\n\t\t */\r\n\t\tmediaField?: string;\r\n\r\n\t\t/**\r\n\t\t * The fields to use as columns.\r\n\t\t */\r\n\t\tcolumnFields?: string[];\r\n\r\n\t\t/**\r\n\t\t * The fields to use as badge fields.\r\n\t\t */\r\n\t\tbadgeFields?: string[];\r\n\t};\r\n}\r\n\r\nexport type View = ViewList | ViewGrid | ViewTable;\r\n\r\ninterface ActionBase< Item > {\r\n\t/**\r\n\t * The unique identifier of the action.\r\n\t */\r\n\tid: string;\r\n\r\n\t/**\r\n\t * The label of the action.\r\n\t * In case we want to adjust the label based on the selected items,\r\n\t * a function can be provided.\r\n\t */\r\n\tlabel: string | ( ( items: Item[] ) => string );\r\n\r\n\t/**\r\n\t * The icon of the action. (Either a string or an SVG element)\r\n\t * This should be IconType from the components package\r\n\t * but that import is breaking typescript build for the moment.\r\n\t */\r\n\ticon?: any;\r\n\r\n\t/**\r\n\t * Whether the action is disabled.\r\n\t */\r\n\tdisabled?: boolean;\r\n\r\n\t/**\r\n\t * Whether the action is destructive.\r\n\t */\r\n\tisDestructive?: boolean;\r\n\r\n\t/**\r\n\t * Whether the action is a primary action.\r\n\t */\r\n\tisPrimary?: boolean;\r\n\r\n\t/**\r\n\t * Whether the item passed as an argument supports the current action.\r\n\t */\r\n\tisEligible?: ( item: Item ) => boolean;\r\n\r\n\t/**\r\n\t * Whether the action can be used as a bulk action.\r\n\t */\r\n\tsupportsBulk?: boolean;\r\n\r\n\t/**\r\n\t * The context in which the action is visible.\r\n\t * This is only a \"meta\" information for now.\r\n\t */\r\n\tcontext?: 'list' | 'single';\r\n}\r\n\r\nexport interface RenderModalProps< Item > {\r\n\titems: Item[];\r\n\tcloseModal?: () => void;\r\n\tonActionPerformed?: ( items: Item[] ) => void;\r\n}\r\n\r\nexport interface ActionModal< Item > extends ActionBase< Item > {\r\n\t/**\r\n\t * Modal to render when the action is triggered.\r\n\t */\r\n\tRenderModal: ( {\r\n\t\titems,\r\n\t\tcloseModal,\r\n\t\tonActionPerformed,\r\n\t}: RenderModalProps< Item > ) => ReactElement;\r\n\r\n\t/**\r\n\t * Whether to hide the modal header.\r\n\t */\r\n\thideModalHeader?: boolean;\r\n\r\n\t/**\r\n\t * The header of the modal.\r\n\t */\r\n\tmodalHeader?: string;\r\n}\r\n\r\nexport interface ActionButton< Item > extends ActionBase< Item > {\r\n\t/**\r\n\t * The callback to execute when the action is triggered.\r\n\t */\r\n\tcallback: (\r\n\t\titems: Item[],\r\n\t\tcontext: {\r\n\t\t\tregistry: any;\r\n\t\t\tonActionPerformed?: ( items: Item[] ) => void;\r\n\t\t}\r\n\t) => void;\r\n}\r\n\r\nexport type Action< Item > = ActionModal< Item > | ActionButton< Item >;\r\n\r\nexport interface ViewBaseProps< Item > {\r\n\tactions: Action< Item >[];\r\n\tdata: Item[];\r\n\tfields: NormalizedField< Item >[];\r\n\tgetItemId: ( item: Item ) => string;\r\n\tisLoading?: boolean;\r\n\tonChangeView: ( view: View ) => void;\r\n\tonChangeSelection: SetSelection;\r\n\tselection: string[];\r\n\tsetOpenedFilter: ( fieldId: string ) => void;\r\n\tview: View;\r\n\tdensity: number;\r\n}\r\n\r\nexport interface ViewTableProps< Item > extends ViewBaseProps< Item > {\r\n\tview: ViewTable;\r\n}\r\n\r\nexport interface ViewListProps< Item > extends ViewBaseProps< Item > {\r\n\tview: ViewList;\r\n}\r\n\r\nexport interface ViewGridProps< Item > extends ViewBaseProps< Item > {\r\n\tview: ViewGrid;\r\n}\r\n\r\nexport type ViewProps< Item > =\r\n\t| ViewTableProps< Item >\r\n\t| ViewGridProps< Item >\r\n\t| ViewListProps< Item >;\r\n\r\nexport interface SupportedLayouts {\r\n\tlist?: Omit< ViewList, 'type' >;\r\n\tgrid?: Omit< ViewGrid, 'type' >;\r\n\ttable?: Omit< ViewTable, 'type' >;\r\n}\r\n\r\nexport interface DataFormProps< Item > {\r\n\tdata: Item;\r\n\tfields: Field< Item >[];\r\n\tform: Form;\r\n\tonChange: ( value: Record< string, any > ) => void;\r\n}\r\n"],"mappings":"","ignoreList":[]}