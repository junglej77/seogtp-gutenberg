"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _Y27X3JNFcjs = require('./Y27X3JNF.cjs');


var _AALEVRDHcjs = require('./AALEVRDH.cjs');





var _M5IWBORBcjs = require('./M5IWBORB.cjs');


var _DMH7HONVcjs = require('./DMH7HONV.cjs');






var _WT6AUJWVcjs = require('./WT6AUJWV.cjs');




var _3IVNQNIVcjs = require('./3IVNQNIV.cjs');

// src/radio/radio.tsx



var _misc = require('@ariakit/core/utils/misc');
var _react = require('react');
var TagName = "input";
function getIsChecked(value, storeValue) {
  if (storeValue === void 0) return;
  if (value != null && storeValue != null) {
    return storeValue === value;
  }
  return !!storeValue;
}
function isNativeRadio(tagName, type) {
  return tagName === "input" && (!type || type === "radio");
}
var useRadio = _M5IWBORBcjs.createHook.call(void 0, function useRadio2(_a) {
  var _b = _a, {
    store,
    name,
    value,
    checked
  } = _b, props = _3IVNQNIVcjs.__objRest.call(void 0, _b, [
    "store",
    "name",
    "value",
    "checked"
  ]);
  const context = _Y27X3JNFcjs.useRadioContext.call(void 0, );
  store = store || context;
  const id = _WT6AUJWVcjs.useId.call(void 0, props.id);
  const ref = _react.useRef.call(void 0, null);
  const isChecked = _DMH7HONVcjs.useStoreState.call(void 0, 
    store,
    (state) => checked != null ? checked : getIsChecked(value, state == null ? void 0 : state.value)
  );
  _react.useEffect.call(void 0, () => {
    if (!id) return;
    if (!isChecked) return;
    const isActiveItem = (store == null ? void 0 : store.getState().activeId) === id;
    if (isActiveItem) return;
    store == null ? void 0 : store.setActiveId(id);
  }, [store, isChecked, id]);
  const onChangeProp = props.onChange;
  const tagName = _WT6AUJWVcjs.useTagName.call(void 0, ref, TagName);
  const nativeRadio = isNativeRadio(tagName, props.type);
  const disabled = _misc.disabledFromProps.call(void 0, props);
  const [propertyUpdated, schedulePropertyUpdate] = _WT6AUJWVcjs.useForceUpdate.call(void 0, );
  _react.useEffect.call(void 0, () => {
    const element = ref.current;
    if (!element) return;
    if (nativeRadio) return;
    if (isChecked !== void 0) {
      element.checked = isChecked;
    }
    if (name !== void 0) {
      element.name = name;
    }
    if (value !== void 0) {
      element.value = `${value}`;
    }
  }, [propertyUpdated, nativeRadio, isChecked, name, value]);
  const onChange = _WT6AUJWVcjs.useEvent.call(void 0, (event) => {
    if (disabled) {
      event.preventDefault();
      event.stopPropagation();
      return;
    }
    if (!nativeRadio) {
      event.currentTarget.checked = true;
      schedulePropertyUpdate();
    }
    onChangeProp == null ? void 0 : onChangeProp(event);
    if (event.defaultPrevented) return;
    store == null ? void 0 : store.setValue(value);
  });
  const onClickProp = props.onClick;
  const onClick = _WT6AUJWVcjs.useEvent.call(void 0, (event) => {
    onClickProp == null ? void 0 : onClickProp(event);
    if (event.defaultPrevented) return;
    if (nativeRadio) return;
    onChange(event);
  });
  const onFocusProp = props.onFocus;
  const onFocus = _WT6AUJWVcjs.useEvent.call(void 0, (event) => {
    onFocusProp == null ? void 0 : onFocusProp(event);
    if (event.defaultPrevented) return;
    if (!nativeRadio) return;
    if (!store) return;
    const { moves, activeId } = store.getState();
    if (!moves) return;
    if (id && activeId !== id) return;
    onChange(event);
  });
  props = _3IVNQNIVcjs.__spreadProps.call(void 0, _3IVNQNIVcjs.__spreadValues.call(void 0, {
    id,
    role: !nativeRadio ? "radio" : void 0,
    type: nativeRadio ? "radio" : void 0,
    "aria-checked": isChecked
  }, props), {
    ref: _WT6AUJWVcjs.useMergeRefs.call(void 0, ref, props.ref),
    onChange,
    onClick,
    onFocus
  });
  props = _AALEVRDHcjs.useCompositeItem.call(void 0, _3IVNQNIVcjs.__spreadValues.call(void 0, {
    store,
    clickOnEnter: !nativeRadio
  }, props));
  return _misc.removeUndefinedValues.call(void 0, _3IVNQNIVcjs.__spreadValues.call(void 0, {
    name: nativeRadio ? name : void 0,
    value: nativeRadio ? value : void 0,
    checked: isChecked
  }, props));
});
var Radio = _M5IWBORBcjs.memo.call(void 0, 
  _M5IWBORBcjs.forwardRef.call(void 0, function Radio2(props) {
    const htmlProps = useRadio(props);
    return _M5IWBORBcjs.createElement.call(void 0, TagName, htmlProps);
  })
);




exports.useRadio = useRadio; exports.Radio = Radio;
