"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _TTVWSMCCcjs = require('./TTVWSMCC.cjs');


var _O3ON5SWHcjs = require('./O3ON5SWH.cjs');


var _I5DDKOOPcjs = require('./I5DDKOOP.cjs');


var _AALEVRDHcjs = require('./AALEVRDH.cjs');





var _M5IWBORBcjs = require('./M5IWBORB.cjs');


var _DMH7HONVcjs = require('./DMH7HONV.cjs');



var _WT6AUJWVcjs = require('./WT6AUJWV.cjs');




var _3IVNQNIVcjs = require('./3IVNQNIV.cjs');

// src/menu/menu-item.tsx
var _dom = require('@ariakit/core/utils/dom');
var _events = require('@ariakit/core/utils/events');
var _focus = require('@ariakit/core/utils/focus');
var _misc = require('@ariakit/core/utils/misc');
var TagName = "div";
function menuHasFocus(baseElement, items, currentTarget) {
  var _a;
  if (!baseElement) return false;
  if (_focus.hasFocusWithin.call(void 0, baseElement)) return true;
  const expandedItem = items == null ? void 0 : items.find((item) => {
    var _a2;
    if (item.element === currentTarget) return false;
    return ((_a2 = item.element) == null ? void 0 : _a2.getAttribute("aria-expanded")) === "true";
  });
  const expandedMenuId = (_a = expandedItem == null ? void 0 : expandedItem.element) == null ? void 0 : _a.getAttribute("aria-controls");
  if (!expandedMenuId) return false;
  const doc = _dom.getDocument.call(void 0, baseElement);
  const expandedMenu = doc.getElementById(expandedMenuId);
  if (!expandedMenu) return false;
  if (_focus.hasFocusWithin.call(void 0, expandedMenu)) return true;
  return !!expandedMenu.querySelector("[role=menuitem][aria-expanded=true]");
}
var useMenuItem = _M5IWBORBcjs.createHook.call(void 0, 
  function useMenuItem2(_a) {
    var _b = _a, {
      store,
      hideOnClick = true,
      preventScrollOnKeyDown = true,
      focusOnHover,
      blurOnHoverEnd
    } = _b, props = _3IVNQNIVcjs.__objRest.call(void 0, _b, [
      "store",
      "hideOnClick",
      "preventScrollOnKeyDown",
      "focusOnHover",
      "blurOnHoverEnd"
    ]);
    const menuContext = _TTVWSMCCcjs.useMenuScopedContext.call(void 0, true);
    const menubarContext = _O3ON5SWHcjs.useMenubarScopedContext.call(void 0, );
    store = store || menuContext || menubarContext;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "MenuItem must be wrapped in a MenuList, Menu or Menubar component"
    );
    const onClickProp = props.onClick;
    const hideOnClickProp = _WT6AUJWVcjs.useBooleanEvent.call(void 0, hideOnClick);
    const hideMenu = "hideAll" in store ? store.hideAll : void 0;
    const isWithinMenu = !!hideMenu;
    const onClick = _WT6AUJWVcjs.useEvent.call(void 0, (event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented) return;
      if (_events.isDownloading.call(void 0, event)) return;
      if (_events.isOpeningInNewTab.call(void 0, event)) return;
      if (!hideMenu) return;
      const popupType = event.currentTarget.getAttribute("aria-haspopup");
      if (popupType === "menu") return;
      if (!hideOnClickProp(event)) return;
      hideMenu();
    });
    const contentElement = _DMH7HONVcjs.useStoreState.call(void 0, 
      store,
      (state) => "contentElement" in state ? state.contentElement : null
    );
    const role = _dom.getPopupItemRole.call(void 0, contentElement, "menuitem");
    props = _3IVNQNIVcjs.__spreadProps.call(void 0, _3IVNQNIVcjs.__spreadValues.call(void 0, {
      role
    }, props), {
      onClick
    });
    props = _AALEVRDHcjs.useCompositeItem.call(void 0, _3IVNQNIVcjs.__spreadValues.call(void 0, {
      store,
      preventScrollOnKeyDown
    }, props));
    props = _I5DDKOOPcjs.useCompositeHover.call(void 0, _3IVNQNIVcjs.__spreadProps.call(void 0, _3IVNQNIVcjs.__spreadValues.call(void 0, {
      store
    }, props), {
      focusOnHover(event) {
        const getFocusOnHover = () => {
          if (typeof focusOnHover === "function") return focusOnHover(event);
          if (focusOnHover != null) return focusOnHover;
          return true;
        };
        if (!store) return false;
        if (!getFocusOnHover()) return false;
        const { baseElement, items } = store.getState();
        if (isWithinMenu) {
          if (event.currentTarget.hasAttribute("aria-expanded")) {
            event.currentTarget.focus();
          }
          return true;
        }
        if (menuHasFocus(baseElement, items, event.currentTarget)) {
          event.currentTarget.focus();
          return true;
        }
        return false;
      },
      blurOnHoverEnd(event) {
        if (typeof blurOnHoverEnd === "function") return blurOnHoverEnd(event);
        if (blurOnHoverEnd != null) return blurOnHoverEnd;
        return isWithinMenu;
      }
    }));
    return props;
  }
);
var MenuItem = _M5IWBORBcjs.memo.call(void 0, 
  _M5IWBORBcjs.forwardRef.call(void 0, function MenuItem2(props) {
    const htmlProps = useMenuItem(props);
    return _M5IWBORBcjs.createElement.call(void 0, TagName, htmlProps);
  })
);




exports.useMenuItem = useMenuItem; exports.MenuItem = MenuItem;
