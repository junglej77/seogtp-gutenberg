"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _P7J6L26Kcjs = require('./P7J6L26K.cjs');


var _7K2RM2SDcjs = require('./7K2RM2SD.cjs');




var _M5IWBORBcjs = require('./M5IWBORB.cjs');





var _WT6AUJWVcjs = require('./WT6AUJWV.cjs');




var _3IVNQNIVcjs = require('./3IVNQNIV.cjs');

// src/disclosure/disclosure.tsx
var _misc = require('@ariakit/core/utils/misc');
var _react = require('react');
var TagName = "button";
var symbol = Symbol("disclosure");
var useDisclosure = _M5IWBORBcjs.createHook.call(void 0, 
  function useDisclosure2(_a) {
    var _b = _a, { store, toggleOnClick = true } = _b, props = _3IVNQNIVcjs.__objRest.call(void 0, _b, ["store", "toggleOnClick"]);
    const context = _7K2RM2SDcjs.useDisclosureProviderContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "Disclosure must receive a `store` prop or be wrapped in a DisclosureProvider component."
    );
    const ref = _react.useRef.call(void 0, null);
    const [expanded, setExpanded] = _react.useState.call(void 0, false);
    const disclosureElement = store.useState("disclosureElement");
    const open = store.useState("open");
    _react.useEffect.call(void 0, () => {
      let isCurrentDisclosure = disclosureElement === ref.current;
      if (!(disclosureElement == null ? void 0 : disclosureElement.isConnected)) {
        store == null ? void 0 : store.setDisclosureElement(ref.current);
        isCurrentDisclosure = true;
      }
      setExpanded(open && isCurrentDisclosure);
    }, [disclosureElement, store, open]);
    const onClickProp = props.onClick;
    const toggleOnClickProp = _WT6AUJWVcjs.useBooleanEvent.call(void 0, toggleOnClick);
    const [isDuplicate, metadataProps] = _WT6AUJWVcjs.useMetadataProps.call(void 0, props, symbol, true);
    const onClick = _WT6AUJWVcjs.useEvent.call(void 0, (event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented) return;
      if (isDuplicate) return;
      if (!toggleOnClickProp(event)) return;
      store == null ? void 0 : store.setDisclosureElement(event.currentTarget);
      store == null ? void 0 : store.toggle();
    });
    const contentElement = store.useState("contentElement");
    props = _3IVNQNIVcjs.__spreadProps.call(void 0, _3IVNQNIVcjs.__spreadValues.call(void 0, _3IVNQNIVcjs.__spreadValues.call(void 0, {
      "aria-expanded": expanded,
      "aria-controls": contentElement == null ? void 0 : contentElement.id
    }, metadataProps), props), {
      ref: _WT6AUJWVcjs.useMergeRefs.call(void 0, ref, props.ref),
      onClick
    });
    props = _P7J6L26Kcjs.useButton.call(void 0, props);
    return props;
  }
);
var Disclosure = _M5IWBORBcjs.forwardRef.call(void 0, function Disclosure2(props) {
  const htmlProps = useDisclosure(props);
  return _M5IWBORBcjs.createElement.call(void 0, TagName, htmlProps);
});




exports.useDisclosure = useDisclosure; exports.Disclosure = Disclosure;
