"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _F4DU6MSGcjs = require('../__chunks/F4DU6MSG.cjs');


var _P7J6L26Kcjs = require('../__chunks/P7J6L26K.cjs');
require('../__chunks/VQ52RGDH.cjs');
require('../__chunks/3MQN464L.cjs');
require('../__chunks/32EK4BGY.cjs');
require('../__chunks/AMARRBCF.cjs');
require('../__chunks/HHTQYHYL.cjs');
require('../__chunks/7K2RM2SD.cjs');
require('../__chunks/YGEHBXGA.cjs');
require('../__chunks/DYIDES27.cjs');




var _M5IWBORBcjs = require('../__chunks/M5IWBORB.cjs');



var _WT6AUJWVcjs = require('../__chunks/WT6AUJWV.cjs');
require('../__chunks/54XFMNDS.cjs');




var _3IVNQNIVcjs = require('../__chunks/3IVNQNIV.cjs');

// src/combobox/combobox-cancel.tsx
var _misc = require('@ariakit/core/utils/misc');
var _react = require('react');
var _jsxruntime = require('react/jsx-runtime');
var TagName = "button";
var children = /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
  "svg",
  {
    "aria-hidden": "true",
    display: "block",
    viewBox: "0 0 16 16",
    fill: "none",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 1.5,
    width: "1em",
    height: "1em",
    pointerEvents: "none",
    children: [
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "line", { x1: "5", y1: "5", x2: "11", y2: "11" }),
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "line", { x1: "5", y1: "11", x2: "11", y2: "5" })
    ]
  }
);
var useComboboxCancel = _M5IWBORBcjs.createHook.call(void 0, 
  function useComboboxCancel2(_a) {
    var _b = _a, { store, hideWhenEmpty } = _b, props = _3IVNQNIVcjs.__objRest.call(void 0, _b, ["store", "hideWhenEmpty"]);
    const context = _F4DU6MSGcjs.useComboboxProviderContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "ComboboxCancel must receive a `store` prop or be wrapped in a ComboboxProvider component."
    );
    const onClickProp = props.onClick;
    const onClick = _WT6AUJWVcjs.useEvent.call(void 0, (event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented) return;
      store == null ? void 0 : store.setValue("");
      store == null ? void 0 : store.move(null);
    });
    const comboboxId = store.useState((state) => {
      var _a2;
      return (_a2 = state.baseElement) == null ? void 0 : _a2.id;
    });
    const empty = store.useState((state) => state.value === "");
    props = _WT6AUJWVcjs.useWrapElement.call(void 0, 
      props,
      (element) => {
        if (!hideWhenEmpty) return element;
        if (empty) return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, _react.Fragment, {});
        return element;
      },
      [hideWhenEmpty, empty]
    );
    props = _3IVNQNIVcjs.__spreadProps.call(void 0, _3IVNQNIVcjs.__spreadValues.call(void 0, {
      children,
      "aria-label": "Clear input",
      // This aria-controls will ensure the combobox popup remains visible when
      // this element gets focused. This logic is done in the ComboboxPopover
      // component.
      "aria-controls": comboboxId
    }, props), {
      onClick
    });
    props = _P7J6L26Kcjs.useButton.call(void 0, props);
    return props;
  }
);
var ComboboxCancel = _M5IWBORBcjs.forwardRef.call(void 0, function ComboboxCancel2(props) {
  const htmlProps = useComboboxCancel(props);
  return _M5IWBORBcjs.createElement.call(void 0, TagName, htmlProps);
});



exports.ComboboxCancel = ComboboxCancel; exports.useComboboxCancel = useComboboxCancel;
