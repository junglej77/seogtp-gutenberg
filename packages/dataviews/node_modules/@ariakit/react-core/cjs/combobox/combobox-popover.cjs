"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _SQTAYASRcjs = require('../__chunks/SQTAYASR.cjs');


var _F4DU6MSGcjs = require('../__chunks/F4DU6MSG.cjs');
require('../__chunks/3MQN464L.cjs');
require('../__chunks/32EK4BGY.cjs');


var _6HSWYGH7cjs = require('../__chunks/6HSWYGH7.cjs');


var _LSIE3AZTcjs = require('../__chunks/LSIE3AZT.cjs');
require('../__chunks/5KP7SROC.cjs');
require('../__chunks/OZFFK5VS.cjs');
require('../__chunks/NMKMMUOR.cjs');
require('../__chunks/67WF5W26.cjs');
require('../__chunks/TJR4NN4V.cjs');
require('../__chunks/DRV5RKI2.cjs');
require('../__chunks/PNSA4OTL.cjs');
require('../__chunks/6IUEXB4L.cjs');
require('../__chunks/JF225FQ5.cjs');
require('../__chunks/MUQXBDUR.cjs');
require('../__chunks/MTP72GGY.cjs');
require('../__chunks/OVBWMHNO.cjs');
require('../__chunks/YS72JDSE.cjs');
require('../__chunks/WQXPJKQO.cjs');
require('../__chunks/4S6ECZOG.cjs');
require('../__chunks/FAFAXYUE.cjs');
require('../__chunks/QMBTS2OC.cjs');
require('../__chunks/K32UV4VJ.cjs');
require('../__chunks/4LJ6O7GM.cjs');
require('../__chunks/3LZQUHIB.cjs');
require('../__chunks/VRPZ4HD5.cjs');
require('../__chunks/6UCNERDT.cjs');
require('../__chunks/AMARRBCF.cjs');
require('../__chunks/HHTQYHYL.cjs');
require('../__chunks/7K2RM2SD.cjs');
require('../__chunks/YGEHBXGA.cjs');
require('../__chunks/DYIDES27.cjs');
require('../__chunks/2P4N5BIR.cjs');




var _M5IWBORBcjs = require('../__chunks/M5IWBORB.cjs');
require('../__chunks/SDBASOGF.cjs');
require('../__chunks/C55AGIGA.cjs');


var _DMH7HONVcjs = require('../__chunks/DMH7HONV.cjs');
require('../__chunks/WT6AUJWV.cjs');
require('../__chunks/54XFMNDS.cjs');




var _3IVNQNIVcjs = require('../__chunks/3IVNQNIV.cjs');

// src/combobox/combobox-popover.tsx
var _dom = require('@ariakit/core/utils/dom');
var _misc = require('@ariakit/core/utils/misc');
var _react = require('react');
var TagName = "div";
function isController(target, ...ids) {
  if (!target) return false;
  if ("id" in target) {
    const selector = ids.filter(Boolean).map((id) => `[aria-controls~="${id}"]`).join(", ");
    if (!selector) return false;
    return target.matches(selector);
  }
  return false;
}
var useComboboxPopover = _M5IWBORBcjs.createHook.call(void 0, 
  function useComboboxPopover2(_a) {
    var _b = _a, {
      store,
      modal,
      tabIndex,
      alwaysVisible,
      autoFocusOnHide = true,
      hideOnInteractOutside = true
    } = _b, props = _3IVNQNIVcjs.__objRest.call(void 0, _b, [
      "store",
      "modal",
      "tabIndex",
      "alwaysVisible",
      "autoFocusOnHide",
      "hideOnInteractOutside"
    ]);
    const context = _F4DU6MSGcjs.useComboboxProviderContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "ComboboxPopover must receive a `store` prop or be wrapped in a ComboboxProvider component."
    );
    const baseElement = store.useState("baseElement");
    const hiddenByClickOutsideRef = _react.useRef.call(void 0, false);
    const treeSnapshotKey = _DMH7HONVcjs.useStoreState.call(void 0, 
      store.tag,
      (state) => state == null ? void 0 : state.renderedItems.length
    );
    props = _SQTAYASRcjs.useComboboxList.call(void 0, _3IVNQNIVcjs.__spreadValues.call(void 0, { store, alwaysVisible }, props));
    props = _6HSWYGH7cjs.usePopover.call(void 0, _3IVNQNIVcjs.__spreadProps.call(void 0, _3IVNQNIVcjs.__spreadValues.call(void 0, {
      store,
      modal,
      alwaysVisible,
      backdrop: false,
      autoFocusOnShow: false,
      finalFocus: baseElement,
      preserveTabOrderAnchor: null,
      unstable_treeSnapshotKey: treeSnapshotKey
    }, props), {
      // When the combobox popover is modal, we make sure to include the
      // combobox input and all the combobox controls (cancel, disclosure) in
      // the list of persistent elements so they make part of the modal context,
      // allowing users to tab through them.
      getPersistentElements() {
        var _a2;
        const elements = ((_a2 = props.getPersistentElements) == null ? void 0 : _a2.call(props)) || [];
        if (!modal) return elements;
        if (!store) return elements;
        const { contentElement, baseElement: baseElement2 } = store.getState();
        if (!baseElement2) return elements;
        const doc = _dom.getDocument.call(void 0, baseElement2);
        const selectors = [];
        if (contentElement == null ? void 0 : contentElement.id) {
          selectors.push(`[aria-controls~="${contentElement.id}"]`);
        }
        if (baseElement2 == null ? void 0 : baseElement2.id) {
          selectors.push(`[aria-controls~="${baseElement2.id}"]`);
        }
        if (!selectors.length) return [...elements, baseElement2];
        const selector = selectors.join(",");
        const controlElements = doc.querySelectorAll(selector);
        return [...elements, ...controlElements];
      },
      // The combobox popover should focus on the combobox input when it hides,
      // unless the event was triggered by a click outside the popover, in which
      // case the input shouldn't be re-focused.
      autoFocusOnHide(element) {
        if (_misc.isFalsyBooleanCallback.call(void 0, autoFocusOnHide, element)) return false;
        if (hiddenByClickOutsideRef.current) {
          hiddenByClickOutsideRef.current = false;
          return false;
        }
        return true;
      },
      // Make sure we don't hide the popover when the user interacts with the
      // combobox cancel or the combobox disclosure buttons. They will have the
      // aria-controls attribute pointing to either the combobox input or the
      // combobox popover elements.
      hideOnInteractOutside(event) {
        var _a2, _b2;
        const state = store == null ? void 0 : store.getState();
        const contentId = (_a2 = state == null ? void 0 : state.contentElement) == null ? void 0 : _a2.id;
        const baseId = (_b2 = state == null ? void 0 : state.baseElement) == null ? void 0 : _b2.id;
        if (isController(event.target, contentId, baseId)) return false;
        const result = typeof hideOnInteractOutside === "function" ? hideOnInteractOutside(event) : hideOnInteractOutside;
        if (result) {
          hiddenByClickOutsideRef.current = event.type === "click";
        }
        return result;
      }
    }));
    return props;
  }
);
var ComboboxPopover = _LSIE3AZTcjs.createDialogComponent.call(void 0, 
  _M5IWBORBcjs.forwardRef.call(void 0, function ComboboxPopover2(props) {
    const htmlProps = useComboboxPopover(props);
    return _M5IWBORBcjs.createElement.call(void 0, TagName, htmlProps);
  }),
  _F4DU6MSGcjs.useComboboxProviderContext
);



exports.ComboboxPopover = ComboboxPopover; exports.useComboboxPopover = useComboboxPopover;
