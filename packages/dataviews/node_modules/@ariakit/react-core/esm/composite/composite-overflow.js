"use client";
import {
  usePopover
} from "../__chunks/JS55N6L7.js";
import "../__chunks/TT2355LN.js";
import "../__chunks/UQBPM777.js";
import "../__chunks/NSFBIL2Z.js";
import "../__chunks/ESSM74HH.js";
import "../__chunks/KB6RR6FL.js";
import "../__chunks/T3RMEPVH.js";
import "../__chunks/43UOHFGG.js";
import "../__chunks/HLTQOHKZ.js";
import "../__chunks/677M2CI3.js";
import "../__chunks/6GXEOXGT.js";
import "../__chunks/2PGBN2Y4.js";
import "../__chunks/63XF7ACK.js";
import "../__chunks/AOUGVQZ3.js";
import "../__chunks/K2ZF5NU7.js";
import "../__chunks/YJS26JVG.js";
import "../__chunks/HT3UEUDM.js";
import "../__chunks/5M6RIVE2.js";
import "../__chunks/UNZQGRPO.js";
import "../__chunks/LWDIJ7XK.js";
import "../__chunks/AOQQTIBO.js";
import "../__chunks/CZ4GFWYL.js";
import "../__chunks/BSEL4YAF.js";
import "../__chunks/AXRBYZQP.js";
import "../__chunks/54MGSIOI.js";
import "../__chunks/DU4D3UCJ.js";
import "../__chunks/RGUP62TM.js";
import "../__chunks/HGZKAGPL.js";
import "../__chunks/SWN3JYXT.js";
import "../__chunks/ILNAUGA4.js";
import {
  createElement,
  createHook,
  forwardRef
} from "../__chunks/HKOOKEDE.js";
import "../__chunks/QYS5FHDY.js";
import "../__chunks/KGK2TTFO.js";
import "../__chunks/2GXGCHW6.js";
import {
  useEvent
} from "../__chunks/Z32BISHQ.js";
import "../__chunks/SK3NAZA3.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/3YLGPPWQ.js";

// src/composite/composite-overflow.tsx
var TagName = "div";
var hiddenStyle = {
  opacity: 0,
  pointerEvents: "none"
};
var useCompositeOverflow = createHook(function useCompositeOverflow2(_a) {
  var _b = _a, {
    store,
    wrapperProps: wrapperPropsProp,
    portal = false
  } = _b, props = __objRest(_b, [
    "store",
    "wrapperProps",
    "portal"
  ]);
  const onFocusProp = props.onFocus;
  const onFocus = useEvent((event) => {
    onFocusProp == null ? void 0 : onFocusProp(event);
    if (event.defaultPrevented) return;
    store.show();
  });
  const mounted = store.useState("mounted");
  const getStyle = (styleProp) => mounted ? styleProp : __spreadValues(__spreadValues({}, hiddenStyle), styleProp);
  const wrapperProps = __spreadProps(__spreadValues({}, wrapperPropsProp), {
    style: getStyle(wrapperPropsProp == null ? void 0 : wrapperPropsProp.style)
  });
  props = __spreadProps(__spreadValues({
    role: "presentation"
  }, props), {
    onFocus
  });
  props = usePopover(__spreadValues({
    store,
    focusable: false,
    alwaysVisible: true,
    wrapperProps,
    portal
  }, props));
  return props;
});
var CompositeOverflow = forwardRef(function CompositeOverflow2(props) {
  const htmlProps = useCompositeOverflow(props);
  return createElement(TagName, htmlProps);
});
export {
  CompositeOverflow,
  useCompositeOverflow
};
