"use client";
import {
  TabScopedContextProvider,
  useTabProviderContext
} from "../__chunks/TNITL632.js";
import {
  useCollectionItem
} from "../__chunks/PLQDTVXM.js";
import "../__chunks/WENSINUV.js";
import "../__chunks/FMYQNSCK.js";
import {
  useDisclosureContent
} from "../__chunks/BSEL4YAF.js";
import "../__chunks/DU4D3UCJ.js";
import "../__chunks/RGUP62TM.js";
import {
  useFocusable
} from "../__chunks/HGZKAGPL.js";
import "../__chunks/SWN3JYXT.js";
import {
  createElement,
  createHook,
  forwardRef
} from "../__chunks/HKOOKEDE.js";
import {
  useDisclosureStore
} from "../__chunks/KGK2TTFO.js";
import "../__chunks/2GXGCHW6.js";
import {
  useEvent,
  useId,
  useMergeRefs,
  useWrapElement
} from "../__chunks/Z32BISHQ.js";
import "../__chunks/SK3NAZA3.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/3YLGPPWQ.js";

// src/tab/tab-panel.tsx
import { createTabStore } from "@ariakit/core/tab/tab-store";
import { getAllTabbableIn } from "@ariakit/core/utils/focus";
import { invariant } from "@ariakit/core/utils/misc";
import { useCallback, useEffect, useRef, useState } from "react";
import { jsx } from "react/jsx-runtime";
var TagName = "div";
var useTabPanel = createHook(
  function useTabPanel2(_a) {
    var _b = _a, {
      store,
      unmountOnHide,
      tabId: tabIdProp,
      getItem: getItemProp
    } = _b, props = __objRest(_b, [
      "store",
      "unmountOnHide",
      "tabId",
      "getItem"
    ]);
    const context = useTabProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "TabPanel must receive a `store` prop or be wrapped in a TabProvider component."
    );
    const ref = useRef(null);
    const id = useId(props.id);
    const [hasTabbableChildren, setHasTabbableChildren] = useState(false);
    useEffect(() => {
      const element = ref.current;
      if (!element) return;
      const tabbable = getAllTabbableIn(element);
      setHasTabbableChildren(!!tabbable.length);
    }, []);
    const getItem = useCallback(
      (item) => {
        const nextItem = __spreadProps(__spreadValues({}, item), { id: id || item.id, tabId: tabIdProp });
        if (getItemProp) {
          return getItemProp(nextItem);
        }
        return nextItem;
      },
      [id, tabIdProp, getItemProp]
    );
    const onKeyDownProp = props.onKeyDown;
    const onKeyDown = useEvent((event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (event.defaultPrevented) return;
      if (!(store == null ? void 0 : store.composite)) return;
      const state = store.getState();
      const tab = createTabStore(__spreadProps(__spreadValues({}, state), { activeId: state.selectedId }));
      tab.setState("renderedItems", state.renderedItems);
      const keyMap = {
        ArrowLeft: tab.previous,
        ArrowRight: tab.next,
        Home: tab.first,
        End: tab.last
      };
      const action = keyMap[event.key];
      if (!action) return;
      const nextId = action();
      if (!nextId) return;
      event.preventDefault();
      store.move(nextId);
    });
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(TabScopedContextProvider, { value: store, children: element }),
      [store]
    );
    const tabId = store.panels.useState(
      () => {
        var _a2;
        return tabIdProp || ((_a2 = store == null ? void 0 : store.panels.item(id)) == null ? void 0 : _a2.tabId);
      }
    );
    const open = store.useState(
      (state) => !!tabId && state.selectedId === tabId
    );
    const disclosure = useDisclosureStore({ open });
    const mounted = disclosure.useState("mounted");
    props = __spreadProps(__spreadValues({
      id,
      role: "tabpanel",
      "aria-labelledby": tabId || void 0
    }, props), {
      children: unmountOnHide && !mounted ? null : props.children,
      ref: useMergeRefs(ref, props.ref),
      onKeyDown
    });
    props = useFocusable(__spreadValues({
      // If the tab panel is rendered as part of another composite widget such
      // as combobox, it should not be focusable.
      focusable: !store.composite && !hasTabbableChildren
    }, props));
    props = useDisclosureContent(__spreadValues({ store: disclosure }, props));
    props = useCollectionItem(__spreadProps(__spreadValues({ store: store.panels }, props), { getItem }));
    return props;
  }
);
var TabPanel = forwardRef(function TabPanel2(props) {
  const htmlProps = useTabPanel(props);
  return createElement(TagName, htmlProps);
});
export {
  TabPanel,
  useTabPanel
};
