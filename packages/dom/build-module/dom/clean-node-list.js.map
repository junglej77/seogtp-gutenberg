{"version":3,"names":["isEmpty","remove","unwrap","isPhrasingContent","insertAfter","isElement","noop","cleanNodeList","nodeList","doc","schema","inline","Array","from","forEach","node","tag","nodeName","toLowerCase","hasOwnProperty","isMatch","attributes","classes","children","require","allowEmpty","hasAttributes","name","includes","removeAttribute","classList","length","mattchers","map","item","className","RegExp","test","some","hasChildNodes","querySelector","join","childNodes","parentNode","child","firstChild","nextElementSibling","createElement"],"sources":["@wordpress/dom/src/dom/clean-node-list.js"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport isEmpty from './is-empty';\r\nimport remove from './remove';\r\nimport unwrap from './unwrap';\r\nimport { isPhrasingContent } from '../phrasing-content';\r\nimport insertAfter from './insert-after';\r\nimport isElement from './is-element';\r\n\r\nconst noop = () => {};\r\n\r\n/* eslint-disable jsdoc/valid-types */\r\n/**\r\n * @typedef SchemaItem\r\n * @property {string[]}                            [attributes] Attributes.\r\n * @property {(string | RegExp)[]}                 [classes]    Classnames or RegExp to test against.\r\n * @property {'*' | { [tag: string]: SchemaItem }} [children]   Child schemas.\r\n * @property {string[]}                            [require]    Selectors to test required children against. Leave empty or undefined if there are no requirements.\r\n * @property {boolean}                             allowEmpty   Whether to allow nodes without children.\r\n * @property {(node: Node) => boolean}             [isMatch]    Function to test whether a node is a match. If left undefined any node will be assumed to match.\r\n */\r\n\r\n/** @typedef {{ [tag: string]: SchemaItem }} Schema */\r\n/* eslint-enable jsdoc/valid-types */\r\n\r\n/**\r\n * Given a schema, unwraps or removes nodes, attributes and classes on a node\r\n * list.\r\n *\r\n * @param {NodeList} nodeList The nodeList to filter.\r\n * @param {Document} doc      The document of the nodeList.\r\n * @param {Schema}   schema   An array of functions that can mutate with the provided node.\r\n * @param {boolean}  inline   Whether to clean for inline mode.\r\n */\r\nexport default function cleanNodeList( nodeList, doc, schema, inline ) {\r\n\tArray.from( nodeList ).forEach(\r\n\t\t( /** @type {Node & { nextElementSibling?: unknown }} */ node ) => {\r\n\t\t\tconst tag = node.nodeName.toLowerCase();\r\n\r\n\t\t\t// It's a valid child, if the tag exists in the schema without an isMatch\r\n\t\t\t// function, or with an isMatch function that matches the node.\r\n\t\t\tif (\r\n\t\t\t\tschema.hasOwnProperty( tag ) &&\r\n\t\t\t\t( ! schema[ tag ].isMatch || schema[ tag ].isMatch?.( node ) )\r\n\t\t\t) {\r\n\t\t\t\tif ( isElement( node ) ) {\r\n\t\t\t\t\tconst {\r\n\t\t\t\t\t\tattributes = [],\r\n\t\t\t\t\t\tclasses = [],\r\n\t\t\t\t\t\tchildren,\r\n\t\t\t\t\t\trequire = [],\r\n\t\t\t\t\t\tallowEmpty,\r\n\t\t\t\t\t} = schema[ tag ];\r\n\r\n\t\t\t\t\t// If the node is empty and it's supposed to have children,\r\n\t\t\t\t\t// remove the node.\r\n\t\t\t\t\tif ( children && ! allowEmpty && isEmpty( node ) ) {\r\n\t\t\t\t\t\tremove( node );\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( node.hasAttributes() ) {\r\n\t\t\t\t\t\t// Strip invalid attributes.\r\n\t\t\t\t\t\tArray.from( node.attributes ).forEach( ( { name } ) => {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tname !== 'class' &&\r\n\t\t\t\t\t\t\t\t! attributes.includes( name )\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tnode.removeAttribute( name );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t\t// Strip invalid classes.\r\n\t\t\t\t\t\t// In jsdom-jscore, 'node.classList' can be undefined.\r\n\t\t\t\t\t\t// TODO: Explore patching this in jsdom-jscore.\r\n\t\t\t\t\t\tif ( node.classList && node.classList.length ) {\r\n\t\t\t\t\t\t\tconst mattchers = classes.map( ( item ) => {\r\n\t\t\t\t\t\t\t\tif ( typeof item === 'string' ) {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t/** @type {string} */ className\r\n\t\t\t\t\t\t\t\t\t) => className === item;\r\n\t\t\t\t\t\t\t\t} else if ( item instanceof RegExp ) {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t/** @type {string} */ className\r\n\t\t\t\t\t\t\t\t\t) => item.test( className );\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\treturn noop;\r\n\t\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t\t\tArray.from( node.classList ).forEach( ( name ) => {\r\n\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t! mattchers.some( ( isMatch ) =>\r\n\t\t\t\t\t\t\t\t\t\tisMatch( name )\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\tnode.classList.remove( name );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t\t\tif ( ! node.classList.length ) {\r\n\t\t\t\t\t\t\t\tnode.removeAttribute( 'class' );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( node.hasChildNodes() ) {\r\n\t\t\t\t\t\t// Do not filter any content.\r\n\t\t\t\t\t\tif ( children === '*' ) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Continue if the node is supposed to have children.\r\n\t\t\t\t\t\tif ( children ) {\r\n\t\t\t\t\t\t\t// If a parent requires certain children, but it does\r\n\t\t\t\t\t\t\t// not have them, drop the parent and continue.\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\trequire.length &&\r\n\t\t\t\t\t\t\t\t! node.querySelector( require.join( ',' ) )\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tcleanNodeList(\r\n\t\t\t\t\t\t\t\t\tnode.childNodes,\r\n\t\t\t\t\t\t\t\t\tdoc,\r\n\t\t\t\t\t\t\t\t\tschema,\r\n\t\t\t\t\t\t\t\t\tinline\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tunwrap( node );\r\n\t\t\t\t\t\t\t\t// If the node is at the top, phrasing content, and\r\n\t\t\t\t\t\t\t\t// contains children that are block content, unwrap\r\n\t\t\t\t\t\t\t\t// the node because it is invalid.\r\n\t\t\t\t\t\t\t} else if (\r\n\t\t\t\t\t\t\t\tnode.parentNode &&\r\n\t\t\t\t\t\t\t\tnode.parentNode.nodeName === 'BODY' &&\r\n\t\t\t\t\t\t\t\tisPhrasingContent( node )\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tcleanNodeList(\r\n\t\t\t\t\t\t\t\t\tnode.childNodes,\r\n\t\t\t\t\t\t\t\t\tdoc,\r\n\t\t\t\t\t\t\t\t\tschema,\r\n\t\t\t\t\t\t\t\t\tinline\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\tArray.from( node.childNodes ).some(\r\n\t\t\t\t\t\t\t\t\t\t( child ) =>\r\n\t\t\t\t\t\t\t\t\t\t\t! isPhrasingContent( child )\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\tunwrap( node );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tcleanNodeList(\r\n\t\t\t\t\t\t\t\t\tnode.childNodes,\r\n\t\t\t\t\t\t\t\t\tdoc,\r\n\t\t\t\t\t\t\t\t\tchildren,\r\n\t\t\t\t\t\t\t\t\tinline\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// Remove children if the node is not supposed to have any.\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\twhile ( node.firstChild ) {\r\n\t\t\t\t\t\t\t\tremove( node.firstChild );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Invalid child. Continue with schema at the same place and unwrap.\r\n\t\t\t} else {\r\n\t\t\t\tcleanNodeList( node.childNodes, doc, schema, inline );\r\n\r\n\t\t\t\t// For inline mode, insert a line break when unwrapping nodes that\r\n\t\t\t\t// are not phrasing content.\r\n\t\t\t\tif (\r\n\t\t\t\t\tinline &&\r\n\t\t\t\t\t! isPhrasingContent( node ) &&\r\n\t\t\t\t\tnode.nextElementSibling\r\n\t\t\t\t) {\r\n\t\t\t\t\tinsertAfter( doc.createElement( 'br' ), node );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tunwrap( node );\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n}\r\n"],"mappings":"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","ignoreList":[]}