{"version":3,"names":["interceptionInitialized","requestMocks","setUpResponseMocking","mocks","page","setRequestInterception","on","request","i","length","mock","match","onRequestMatch","continue"],"sources":["@wordpress/e2e-test-utils/src/mocks/set-up-response-mocking.js"],"sourcesContent":["/**\r\n * Track if we have already initialized the request interception.\r\n */\r\nlet interceptionInitialized = false;\r\n\r\n/**\r\n * Array of mock responses.\r\n */\r\nlet requestMocks = [];\r\n\r\n/**\r\n * Sets up mock checks and responses. Accepts a list of mock settings with the following properties:\r\n *\r\n * - `match`: function to check if a request should be mocked.\r\n * - `onRequestMatch`: async function to respond to the request.\r\n *\r\n * @example\r\n *\r\n * ```js\r\n * const MOCK_RESPONSES = [\r\n *   {\r\n *     match: isEmbedding( 'https://wordpress.org/gutenberg/handbook/' ),\r\n *     onRequestMatch: JSONResponse( MOCK_BAD_WORDPRESS_RESPONSE ),\r\n *   },\r\n *   {\r\n *     match: isEmbedding( 'https://wordpress.org/gutenberg/handbook/block-api/attributes/' ),\r\n *     onRequestMatch: JSONResponse( MOCK_EMBED_WORDPRESS_SUCCESS_RESPONSE ),\r\n *   }\r\n * ];\r\n * setUpResponseMocking( MOCK_RESPONSES );\r\n * ```\r\n *\r\n * If none of the mock settings match the request, the request is allowed to continue.\r\n *\r\n * @param {Array} mocks Array of mock settings.\r\n */\r\nexport async function setUpResponseMocking( mocks ) {\r\n\tif ( ! interceptionInitialized ) {\r\n\t\t// We only want to set up the request interception once, or else we get a crash\r\n\t\t// when we try to process the same request twice.\r\n\t\tinterceptionInitialized = true;\r\n\t\tawait page.setRequestInterception( true );\r\n\t\tpage.on( 'request', async ( request ) => {\r\n\t\t\tfor ( let i = 0; i < requestMocks.length; i++ ) {\r\n\t\t\t\tconst mock = requestMocks[ i ];\r\n\t\t\t\tif ( mock.match( request ) ) {\r\n\t\t\t\t\tawait mock.onRequestMatch( request );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\trequest.continue();\r\n\t\t} );\r\n\t}\r\n\t// Overwrite with the passed in mocks, so we can change the mocks mid-test to test\r\n\t// recovery from scenarios where a request had failed, but is working again.\r\n\trequestMocks = [ ...mocks ];\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,uBAAuB,GAAG,KAAK;;AAEnC;AACA;AACA;AACA,IAAIC,YAAY,GAAG,EAAE;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,oBAAoBA,CAAEC,KAAK,EAAG;EACnD,IAAK,CAAEH,uBAAuB,EAAG;IAChC;IACA;IACAA,uBAAuB,GAAG,IAAI;IAC9B,MAAMI,IAAI,CAACC,sBAAsB,CAAE,IAAK,CAAC;IACzCD,IAAI,CAACE,EAAE,CAAE,SAAS,EAAE,MAAQC,OAAO,IAAM;MACxC,KAAM,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,YAAY,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAG;QAC/C,MAAME,IAAI,GAAGT,YAAY,CAAEO,CAAC,CAAE;QAC9B,IAAKE,IAAI,CAACC,KAAK,CAAEJ,OAAQ,CAAC,EAAG;UAC5B,MAAMG,IAAI,CAACE,cAAc,CAAEL,OAAQ,CAAC;UACpC;QACD;MACD;MACAA,OAAO,CAACM,QAAQ,CAAC,CAAC;IACnB,CAAE,CAAC;EACJ;EACA;EACA;EACAZ,YAAY,GAAG,CAAE,GAAGE,KAAK,CAAE;AAC5B","ignoreList":[]}