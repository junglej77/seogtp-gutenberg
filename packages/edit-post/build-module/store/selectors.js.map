{"version":3,"names":["createSelector","createRegistrySelector","store","preferencesStore","coreStore","editorStore","privateApis","editorPrivateApis","deprecated","unlock","getEditedPostTemplateId","interfaceStore","EMPTY_ARRAY","EMPTY_OBJECT","getEditorMode","select","_select$get","get","isEditorSidebarOpened","activeGeneralSidebar","getActiveComplementaryArea","includes","isPluginSidebarOpened","getActiveGeneralSidebarName","convertPanelsToOldFormat","inactivePanels","openPanels","_ref","panelsWithEnabledState","reduce","accumulatedPanels","panelName","enabled","panels","currentPanelState","opened","getPreferences","since","alternative","corePreferences","accumulatedPrefs","preferenceKey","value","getPreference","state","defaultValue","preferences","undefined","getHiddenBlockTypes","_select$get2","isPublishSidebarOpened","isEditorPanelRemoved","isEditorPanelEnabled","isEditorPanelOpened","isModalActive","modalName","isFeatureActive","feature","isPluginItemPinned","pluginName","isItemPinned","getActiveMetaBoxLocations","Object","keys","metaBoxes","locations","filter","location","isMetaBoxLocationActive","isMetaBoxLocationVisible","getMetaBoxesPerLocation","some","id","length","getAllMetaBoxes","values","flat","hasMetaBoxes","isSavingMetaBoxes","isSaving","__experimentalGetPreviewDeviceType","version","getDeviceType","isInserterOpened","__experimentalGetInsertionPoint","getInsertionPoint","isListViewOpened","isEditingTemplate","getCurrentPostType","areMetaBoxesInitialized","initialized","getEditedPostTemplate","templateId","getEditedEntityRecord"],"sources":["@wordpress/edit-post/src/store/selectors.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { createSelector, createRegistrySelector } from '@wordpress/data';\r\nimport { store as preferencesStore } from '@wordpress/preferences';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\nimport {\r\n\tstore as editorStore,\r\n\tprivateApis as editorPrivateApis,\r\n} from '@wordpress/editor';\r\nimport deprecated from '@wordpress/deprecated';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { unlock } from '../lock-unlock';\r\nimport { getEditedPostTemplateId } from './private-selectors';\r\n\r\nconst { interfaceStore } = unlock( editorPrivateApis );\r\nconst EMPTY_ARRAY = [];\r\nconst EMPTY_OBJECT = {};\r\n\r\n/**\r\n * Returns the current editing mode.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {string} Editing mode.\r\n */\r\nexport const getEditorMode = createRegistrySelector(\r\n\t( select ) => () =>\r\n\t\tselect( preferencesStore ).get( 'core', 'editorMode' ) ?? 'visual'\r\n);\r\n\r\n/**\r\n * Returns true if the editor sidebar is opened.\r\n *\r\n * @param {Object} state Global application state\r\n *\r\n * @return {boolean} Whether the editor sidebar is opened.\r\n */\r\nexport const isEditorSidebarOpened = createRegistrySelector(\r\n\t( select ) => () => {\r\n\t\tconst activeGeneralSidebar =\r\n\t\t\tselect( interfaceStore ).getActiveComplementaryArea( 'core' );\r\n\t\treturn [ 'edit-post/document', 'edit-post/block' ].includes(\r\n\t\t\tactiveGeneralSidebar\r\n\t\t);\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if the plugin sidebar is opened.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the plugin sidebar is opened.\r\n */\r\nexport const isPluginSidebarOpened = createRegistrySelector(\r\n\t( select ) => () => {\r\n\t\tconst activeGeneralSidebar =\r\n\t\t\tselect( interfaceStore ).getActiveComplementaryArea( 'core' );\r\n\t\treturn (\r\n\t\t\t!! activeGeneralSidebar &&\r\n\t\t\t! [ 'edit-post/document', 'edit-post/block' ].includes(\r\n\t\t\t\tactiveGeneralSidebar\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns the current active general sidebar name, or null if there is no\r\n * general sidebar active. The active general sidebar is a unique name to\r\n * identify either an editor or plugin sidebar.\r\n *\r\n * Examples:\r\n *\r\n *  - `edit-post/document`\r\n *  - `my-plugin/insert-image-sidebar`\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {?string} Active general sidebar name.\r\n */\r\nexport const getActiveGeneralSidebarName = createRegistrySelector(\r\n\t( select ) => () => {\r\n\t\treturn select( interfaceStore ).getActiveComplementaryArea( 'core' );\r\n\t}\r\n);\r\n\r\n/**\r\n * Converts panels from the new preferences store format to the old format\r\n * that the post editor previously used.\r\n *\r\n * The resultant converted data should look like this:\r\n * {\r\n *     panelName: {\r\n *         enabled: false,\r\n *         opened: true,\r\n *     },\r\n *     anotherPanelName: {\r\n *         opened: true\r\n *     },\r\n * }\r\n *\r\n * @param {string[] | undefined} inactivePanels An array of inactive panel names.\r\n * @param {string[] | undefined} openPanels     An array of open panel names.\r\n *\r\n * @return {Object} The converted panel data.\r\n */\r\nfunction convertPanelsToOldFormat( inactivePanels, openPanels ) {\r\n\t// First reduce the inactive panels.\r\n\tconst panelsWithEnabledState = inactivePanels?.reduce(\r\n\t\t( accumulatedPanels, panelName ) => ( {\r\n\t\t\t...accumulatedPanels,\r\n\t\t\t[ panelName ]: {\r\n\t\t\t\tenabled: false,\r\n\t\t\t},\r\n\t\t} ),\r\n\t\t{}\r\n\t);\r\n\r\n\t// Then reduce the open panels, passing in the result of the previous\r\n\t// reduction as the initial value so that both open and inactive\r\n\t// panel state is combined.\r\n\tconst panels = openPanels?.reduce( ( accumulatedPanels, panelName ) => {\r\n\t\tconst currentPanelState = accumulatedPanels?.[ panelName ];\r\n\t\treturn {\r\n\t\t\t...accumulatedPanels,\r\n\t\t\t[ panelName ]: {\r\n\t\t\t\t...currentPanelState,\r\n\t\t\t\topened: true,\r\n\t\t\t},\r\n\t\t};\r\n\t}, panelsWithEnabledState ?? {} );\r\n\r\n\t// The panels variable will only be set if openPanels wasn't `undefined`.\r\n\t// If it isn't set just return `panelsWithEnabledState`, and if that isn't\r\n\t// set return an empty object.\r\n\treturn panels ?? panelsWithEnabledState ?? EMPTY_OBJECT;\r\n}\r\n\r\n/**\r\n * Returns the preferences (these preferences are persisted locally).\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Object} Preferences Object.\r\n */\r\nexport const getPreferences = createRegistrySelector( ( select ) => () => {\r\n\tdeprecated( `select( 'core/edit-post' ).getPreferences`, {\r\n\t\tsince: '6.0',\r\n\t\talternative: `select( 'core/preferences' ).get`,\r\n\t} );\r\n\r\n\tconst corePreferences = [ 'editorMode', 'hiddenBlockTypes' ].reduce(\r\n\t\t( accumulatedPrefs, preferenceKey ) => {\r\n\t\t\tconst value = select( preferencesStore ).get(\r\n\t\t\t\t'core',\r\n\t\t\t\tpreferenceKey\r\n\t\t\t);\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...accumulatedPrefs,\r\n\t\t\t\t[ preferenceKey ]: value,\r\n\t\t\t};\r\n\t\t},\r\n\t\t{}\r\n\t);\r\n\r\n\t// Panels were a preference, but the data structure changed when the state\r\n\t// was migrated to the preferences store. They need to be converted from\r\n\t// the new preferences store format to old format to ensure no breaking\r\n\t// changes for plugins.\r\n\tconst inactivePanels = select( preferencesStore ).get(\r\n\t\t'core',\r\n\t\t'inactivePanels'\r\n\t);\r\n\tconst openPanels = select( preferencesStore ).get( 'core', 'openPanels' );\r\n\tconst panels = convertPanelsToOldFormat( inactivePanels, openPanels );\r\n\r\n\treturn {\r\n\t\t...corePreferences,\r\n\t\tpanels,\r\n\t};\r\n} );\r\n\r\n/**\r\n *\r\n * @param {Object} state         Global application state.\r\n * @param {string} preferenceKey Preference Key.\r\n * @param {*}      defaultValue  Default Value.\r\n *\r\n * @return {*} Preference Value.\r\n */\r\nexport function getPreference( state, preferenceKey, defaultValue ) {\r\n\tdeprecated( `select( 'core/edit-post' ).getPreference`, {\r\n\t\tsince: '6.0',\r\n\t\talternative: `select( 'core/preferences' ).get`,\r\n\t} );\r\n\r\n\t// Avoid using the `getPreferences` registry selector where possible.\r\n\tconst preferences = getPreferences( state );\r\n\tconst value = preferences[ preferenceKey ];\r\n\treturn value === undefined ? defaultValue : value;\r\n}\r\n\r\n/**\r\n * Returns an array of blocks that are hidden.\r\n *\r\n * @return {Array} A list of the hidden block types\r\n */\r\nexport const getHiddenBlockTypes = createRegistrySelector( ( select ) => () => {\r\n\treturn (\r\n\t\tselect( preferencesStore ).get( 'core', 'hiddenBlockTypes' ) ??\r\n\t\tEMPTY_ARRAY\r\n\t);\r\n} );\r\n\r\n/**\r\n * Returns true if the publish sidebar is opened.\r\n *\r\n * @deprecated\r\n *\r\n * @param {Object} state Global application state\r\n *\r\n * @return {boolean} Whether the publish sidebar is open.\r\n */\r\nexport const isPublishSidebarOpened = createRegistrySelector(\r\n\t( select ) => () => {\r\n\t\tdeprecated( `select( 'core/edit-post' ).isPublishSidebarOpened`, {\r\n\t\t\tsince: '6.6',\r\n\t\t\talternative: `select( 'core/editor' ).isPublishSidebarOpened`,\r\n\t\t} );\r\n\t\treturn select( editorStore ).isPublishSidebarOpened();\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if the given panel was programmatically removed, or false otherwise.\r\n * All panels are not removed by default.\r\n *\r\n * @deprecated\r\n *\r\n * @param {Object} state     Global application state.\r\n * @param {string} panelName A string that identifies the panel.\r\n *\r\n * @return {boolean} Whether or not the panel is removed.\r\n */\r\nexport const isEditorPanelRemoved = createRegistrySelector(\r\n\t( select ) => ( state, panelName ) => {\r\n\t\tdeprecated( `select( 'core/edit-post' ).isEditorPanelRemoved`, {\r\n\t\t\tsince: '6.5',\r\n\t\t\talternative: `select( 'core/editor' ).isEditorPanelRemoved`,\r\n\t\t} );\r\n\t\treturn select( editorStore ).isEditorPanelRemoved( panelName );\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if the given panel is enabled, or false otherwise. Panels are\r\n * enabled by default.\r\n *\r\n * @deprecated\r\n *\r\n * @param {Object} state     Global application state.\r\n * @param {string} panelName A string that identifies the panel.\r\n *\r\n * @return {boolean} Whether or not the panel is enabled.\r\n */\r\nexport const isEditorPanelEnabled = createRegistrySelector(\r\n\t( select ) => ( state, panelName ) => {\r\n\t\tdeprecated( `select( 'core/edit-post' ).isEditorPanelEnabled`, {\r\n\t\t\tsince: '6.5',\r\n\t\t\talternative: `select( 'core/editor' ).isEditorPanelEnabled`,\r\n\t\t} );\r\n\t\treturn select( editorStore ).isEditorPanelEnabled( panelName );\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if the given panel is open, or false otherwise. Panels are\r\n * closed by default.\r\n *\r\n * @deprecated\r\n *\r\n * @param {Object} state     Global application state.\r\n * @param {string} panelName A string that identifies the panel.\r\n *\r\n * @return {boolean} Whether or not the panel is open.\r\n */\r\nexport const isEditorPanelOpened = createRegistrySelector(\r\n\t( select ) => ( state, panelName ) => {\r\n\t\tdeprecated( `select( 'core/edit-post' ).isEditorPanelOpened`, {\r\n\t\t\tsince: '6.5',\r\n\t\t\talternative: `select( 'core/editor' ).isEditorPanelOpened`,\r\n\t\t} );\r\n\t\treturn select( editorStore ).isEditorPanelOpened( panelName );\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if a modal is active, or false otherwise.\r\n *\r\n * @deprecated since WP 6.3 use `core/interface` store's selector with the same name instead.\r\n *\r\n * @param {Object} state     Global application state.\r\n * @param {string} modalName A string that uniquely identifies the modal.\r\n *\r\n * @return {boolean} Whether the modal is active.\r\n */\r\nexport const isModalActive = createRegistrySelector(\r\n\t( select ) => ( state, modalName ) => {\r\n\t\tdeprecated( `select( 'core/edit-post' ).isModalActive`, {\r\n\t\t\tsince: '6.3',\r\n\t\t\talternative: `select( 'core/interface' ).isModalActive`,\r\n\t\t} );\r\n\t\treturn !! select( interfaceStore ).isModalActive( modalName );\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns whether the given feature is enabled or not.\r\n *\r\n * @param {Object} state   Global application state.\r\n * @param {string} feature Feature slug.\r\n *\r\n * @return {boolean} Is active.\r\n */\r\nexport const isFeatureActive = createRegistrySelector(\r\n\t( select ) => ( state, feature ) => {\r\n\t\treturn !! select( preferencesStore ).get( 'core/edit-post', feature );\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if the plugin item is pinned to the header.\r\n * When the value is not set it defaults to true.\r\n *\r\n * @param {Object} state      Global application state.\r\n * @param {string} pluginName Plugin item name.\r\n *\r\n * @return {boolean} Whether the plugin item is pinned.\r\n */\r\nexport const isPluginItemPinned = createRegistrySelector(\r\n\t( select ) => ( state, pluginName ) => {\r\n\t\treturn select( interfaceStore ).isItemPinned( 'core', pluginName );\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns an array of active meta box locations.\r\n *\r\n * @param {Object} state Post editor state.\r\n *\r\n * @return {string[]} Active meta box locations.\r\n */\r\nexport const getActiveMetaBoxLocations = createSelector(\r\n\t( state ) => {\r\n\t\treturn Object.keys( state.metaBoxes.locations ).filter( ( location ) =>\r\n\t\t\tisMetaBoxLocationActive( state, location )\r\n\t\t);\r\n\t},\r\n\t( state ) => [ state.metaBoxes.locations ]\r\n);\r\n\r\n/**\r\n * Returns true if a metabox location is active and visible\r\n *\r\n * @param {Object} state    Post editor state.\r\n * @param {string} location Meta box location to test.\r\n *\r\n * @return {boolean} Whether the meta box location is active and visible.\r\n */\r\nexport const isMetaBoxLocationVisible = createRegistrySelector(\r\n\t( select ) => ( state, location ) => {\r\n\t\treturn (\r\n\t\t\tisMetaBoxLocationActive( state, location ) &&\r\n\t\t\tgetMetaBoxesPerLocation( state, location )?.some( ( { id } ) => {\r\n\t\t\t\treturn select( editorStore ).isEditorPanelEnabled(\r\n\t\t\t\t\tstate,\r\n\t\t\t\t\t`meta-box-${ id }`\r\n\t\t\t\t);\r\n\t\t\t} )\r\n\t\t);\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if there is an active meta box in the given location, or false\r\n * otherwise.\r\n *\r\n * @param {Object} state    Post editor state.\r\n * @param {string} location Meta box location to test.\r\n *\r\n * @return {boolean} Whether the meta box location is active.\r\n */\r\nexport function isMetaBoxLocationActive( state, location ) {\r\n\tconst metaBoxes = getMetaBoxesPerLocation( state, location );\r\n\treturn !! metaBoxes && metaBoxes.length !== 0;\r\n}\r\n\r\n/**\r\n * Returns the list of all the available meta boxes for a given location.\r\n *\r\n * @param {Object} state    Global application state.\r\n * @param {string} location Meta box location to test.\r\n *\r\n * @return {?Array} List of meta boxes.\r\n */\r\nexport function getMetaBoxesPerLocation( state, location ) {\r\n\treturn state.metaBoxes.locations[ location ];\r\n}\r\n\r\n/**\r\n * Returns the list of all the available meta boxes.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Array} List of meta boxes.\r\n */\r\nexport const getAllMetaBoxes = createSelector(\r\n\t( state ) => {\r\n\t\treturn Object.values( state.metaBoxes.locations ).flat();\r\n\t},\r\n\t( state ) => [ state.metaBoxes.locations ]\r\n);\r\n\r\n/**\r\n * Returns true if the post is using Meta Boxes\r\n *\r\n * @param {Object} state Global application state\r\n *\r\n * @return {boolean} Whether there are metaboxes or not.\r\n */\r\nexport function hasMetaBoxes( state ) {\r\n\treturn getActiveMetaBoxLocations( state ).length > 0;\r\n}\r\n\r\n/**\r\n * Returns true if the Meta Boxes are being saved.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the metaboxes are being saved.\r\n */\r\nexport function isSavingMetaBoxes( state ) {\r\n\treturn state.metaBoxes.isSaving;\r\n}\r\n\r\n/**\r\n * Returns the current editing canvas device type.\r\n *\r\n * @deprecated\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {string} Device type.\r\n */\r\nexport const __experimentalGetPreviewDeviceType = createRegistrySelector(\r\n\t( select ) => () => {\r\n\t\tdeprecated(\r\n\t\t\t`select( 'core/edit-site' ).__experimentalGetPreviewDeviceType`,\r\n\t\t\t{\r\n\t\t\t\tsince: '6.5',\r\n\t\t\t\tversion: '6.7',\r\n\t\t\t\talternative: `select( 'core/editor' ).getDeviceType`,\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn select( editorStore ).getDeviceType();\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if the inserter is opened.\r\n *\r\n * @deprecated\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the inserter is opened.\r\n */\r\nexport const isInserterOpened = createRegistrySelector( ( select ) => () => {\r\n\tdeprecated( `select( 'core/edit-post' ).isInserterOpened`, {\r\n\t\tsince: '6.5',\r\n\t\talternative: `select( 'core/editor' ).isInserterOpened`,\r\n\t} );\r\n\treturn select( editorStore ).isInserterOpened();\r\n} );\r\n\r\n/**\r\n * Get the insertion point for the inserter.\r\n *\r\n * @deprecated\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Object} The root client ID, index to insert at and starting filter value.\r\n */\r\nexport const __experimentalGetInsertionPoint = createRegistrySelector(\r\n\t( select ) => () => {\r\n\t\tdeprecated(\r\n\t\t\t`select( 'core/edit-post' ).__experimentalGetInsertionPoint`,\r\n\t\t\t{\r\n\t\t\t\tsince: '6.5',\r\n\t\t\t\tversion: '6.7',\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn unlock( select( editorStore ) ).getInsertionPoint();\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if the list view is opened.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the list view is opened.\r\n */\r\nexport const isListViewOpened = createRegistrySelector( ( select ) => () => {\r\n\tdeprecated( `select( 'core/edit-post' ).isListViewOpened`, {\r\n\t\tsince: '6.5',\r\n\t\talternative: `select( 'core/editor' ).isListViewOpened`,\r\n\t} );\r\n\treturn select( editorStore ).isListViewOpened();\r\n} );\r\n\r\n/**\r\n * Returns true if the template editing mode is enabled.\r\n *\r\n * @deprecated\r\n */\r\nexport const isEditingTemplate = createRegistrySelector( ( select ) => () => {\r\n\tdeprecated( `select( 'core/edit-post' ).isEditingTemplate`, {\r\n\t\tsince: '6.5',\r\n\t\talternative: `select( 'core/editor' ).getRenderingMode`,\r\n\t} );\r\n\treturn select( editorStore ).getCurrentPostType() === 'wp_template';\r\n} );\r\n\r\n/**\r\n * Returns true if meta boxes are initialized.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether meta boxes are initialized.\r\n */\r\nexport function areMetaBoxesInitialized( state ) {\r\n\treturn state.metaBoxes.initialized;\r\n}\r\n\r\n/**\r\n * Retrieves the template of the currently edited post.\r\n *\r\n * @return {Object?} Post Template.\r\n */\r\nexport const getEditedPostTemplate = createRegistrySelector(\r\n\t( select ) => ( state ) => {\r\n\t\tconst templateId = getEditedPostTemplateId( state );\r\n\t\tif ( ! templateId ) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\treturn select( coreStore ).getEditedEntityRecord(\r\n\t\t\t'postType',\r\n\t\t\t'wp_template',\r\n\t\t\ttemplateId\r\n\t\t);\r\n\t}\r\n);\r\n"],"mappings":"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","ignoreList":[]}