{"version":3,"names":["useSelect","store","coreStore","editorStore","decodeEntities","useMemo","useCallback","__","sprintf","blockMeta","post","archive","TEMPLATE_POST_TYPE","EMPTY_OBJECT","getValueFromObjectPath","object","path","value","split","forEach","fieldName","mapToIHasNameAndId","entities","map","entity","name","useExistingTemplates","select","getEntityRecords","per_page","useDefaultTemplateTypes","__experimentalGetDefaultTemplateTypes","usePublicPostTypes","postTypes","getPostTypes","excludedPostTypes","filter","viewable","slug","includes","usePublicTaxonomies","taxonomies","getTaxonomies","visibility","publicly_queryable","usePostTypeArchiveMenuItems","publicPostTypes","postTypesWithArchives","postType","has_archive","existingTemplates","postTypeLabels","reduce","accumulator","labels","singularName","singular_name","toLowerCase","needsUniqueIdentifier","some","existingTemplate","title","description","icon","startsWith","slice","templatePrefix","usePostTypeMenuItems","onClickMenuItem","defaultTemplateTypes","templateLabels","templateName","template_name","templatePrefixes","suffix","postTypesInfo","useEntitiesInfo","existingTemplateSlugs","menuItems","generalTemplateSlug","defaultTemplateType","find","_slug","hasGeneralTemplate","_needsUniqueIdentifier","menuItemTitle","menuItem","hasEntities","onClick","template","type","config","recordNamePath","queryArgs","search","_fields","orderBy","exclude","existingEntitiesIds","getSpecificTemplate","suggestion","templateSlug","push","postTypesMenuItems","key","defaultPostTypesMenuItems","useTaxonomiesMenuItems","publicTaxonomies","taxonomyLabels","taxonomiesInfo","taxonomy","taxonomiesMenuItems","defaultTaxonomiesMenuItems","USE_AUTHOR_MENU_ITEM_TEMPLATE_PREFIX","user","USE_AUTHOR_MENU_ITEM_QUERY_PARAMETERS","who","useAuthorMenuItem","authorInfo","authorMenuItem","search_items","not_found","all_items","useExistingTemplateSlugs","existingSlugs","Object","entries","prefix","slugsWithTemplates","_accumulator","_prefix","substring","length","useTemplatesToExclude","entityName","additionalQueryParameters","slugsToExcludePerEntity","recordsToExcludePerEntity","entitiesWithTemplates","context","entitiesHasRecords","keys","id","entitiesInfo"],"sources":["@wordpress/edit-site/src/components/add-new-template/utils.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useSelect } from '@wordpress/data';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\nimport { store as editorStore } from '@wordpress/editor';\r\nimport { decodeEntities } from '@wordpress/html-entities';\r\nimport { useMemo, useCallback } from '@wordpress/element';\r\nimport { __, sprintf } from '@wordpress/i18n';\r\nimport { blockMeta, post, archive } from '@wordpress/icons';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { TEMPLATE_POST_TYPE } from '../../utils/constants';\r\n\r\nconst EMPTY_OBJECT = {};\r\n\r\n/**\r\n * @typedef IHasNameAndId\r\n * @property {string|number} id   The entity's id.\r\n * @property {string}        name The entity's name.\r\n */\r\n\r\nconst getValueFromObjectPath = ( object, path ) => {\r\n\tlet value = object;\r\n\tpath.split( '.' ).forEach( ( fieldName ) => {\r\n\t\tvalue = value?.[ fieldName ];\r\n\t} );\r\n\treturn value;\r\n};\r\n\r\n/**\r\n * Helper util to map records to add a `name` prop from a\r\n * provided path, in order to handle all entities in the same\r\n * fashion(implementing`IHasNameAndId` interface).\r\n *\r\n * @param {Object[]} entities The array of entities.\r\n * @param {string}   path     The path to map a `name` property from the entity.\r\n * @return {IHasNameAndId[]} An array of enitities that now implement the `IHasNameAndId` interface.\r\n */\r\nexport const mapToIHasNameAndId = ( entities, path ) => {\r\n\treturn ( entities || [] ).map( ( entity ) => ( {\r\n\t\t...entity,\r\n\t\tname: decodeEntities( getValueFromObjectPath( entity, path ) ),\r\n\t} ) );\r\n};\r\n\r\n/**\r\n * @typedef {Object} EntitiesInfo\r\n * @property {boolean}  hasEntities         If an entity has available records(posts, terms, etc..).\r\n * @property {number[]} existingEntitiesIds An array of the existing entities ids.\r\n */\r\n\r\nexport const useExistingTemplates = () => {\r\n\treturn useSelect(\r\n\t\t( select ) =>\r\n\t\t\tselect( coreStore ).getEntityRecords(\r\n\t\t\t\t'postType',\r\n\t\t\t\tTEMPLATE_POST_TYPE,\r\n\t\t\t\t{\r\n\t\t\t\t\tper_page: -1,\r\n\t\t\t\t}\r\n\t\t\t),\r\n\t\t[]\r\n\t);\r\n};\r\n\r\nexport const useDefaultTemplateTypes = () => {\r\n\treturn useSelect(\r\n\t\t( select ) =>\r\n\t\t\tselect( editorStore ).__experimentalGetDefaultTemplateTypes(),\r\n\t\t[]\r\n\t);\r\n};\r\n\r\nconst usePublicPostTypes = () => {\r\n\tconst postTypes = useSelect(\r\n\t\t( select ) => select( coreStore ).getPostTypes( { per_page: -1 } ),\r\n\t\t[]\r\n\t);\r\n\treturn useMemo( () => {\r\n\t\tconst excludedPostTypes = [ 'attachment' ];\r\n\t\treturn postTypes?.filter(\r\n\t\t\t( { viewable, slug } ) =>\r\n\t\t\t\tviewable && ! excludedPostTypes.includes( slug )\r\n\t\t);\r\n\t}, [ postTypes ] );\r\n};\r\n\r\nconst usePublicTaxonomies = () => {\r\n\tconst taxonomies = useSelect(\r\n\t\t( select ) => select( coreStore ).getTaxonomies( { per_page: -1 } ),\r\n\t\t[]\r\n\t);\r\n\treturn useMemo( () => {\r\n\t\treturn taxonomies?.filter(\r\n\t\t\t( { visibility } ) => visibility?.publicly_queryable\r\n\t\t);\r\n\t}, [ taxonomies ] );\r\n};\r\n\r\nexport function usePostTypeArchiveMenuItems() {\r\n\tconst publicPostTypes = usePublicPostTypes();\r\n\tconst postTypesWithArchives = useMemo(\r\n\t\t() => publicPostTypes?.filter( ( postType ) => postType.has_archive ),\r\n\t\t[ publicPostTypes ]\r\n\t);\r\n\tconst existingTemplates = useExistingTemplates();\r\n\t// We need to keep track of naming conflicts. If a conflict\r\n\t// occurs, we need to add slug.\r\n\tconst postTypeLabels = useMemo(\r\n\t\t() =>\r\n\t\t\tpublicPostTypes?.reduce( ( accumulator, { labels } ) => {\r\n\t\t\t\tconst singularName = labels.singular_name.toLowerCase();\r\n\t\t\t\taccumulator[ singularName ] =\r\n\t\t\t\t\t( accumulator[ singularName ] || 0 ) + 1;\r\n\t\t\t\treturn accumulator;\r\n\t\t\t}, {} ),\r\n\t\t[ publicPostTypes ]\r\n\t);\r\n\tconst needsUniqueIdentifier = useCallback(\r\n\t\t( { labels, slug } ) => {\r\n\t\t\tconst singularName = labels.singular_name.toLowerCase();\r\n\t\t\treturn postTypeLabels[ singularName ] > 1 && singularName !== slug;\r\n\t\t},\r\n\t\t[ postTypeLabels ]\r\n\t);\r\n\treturn useMemo(\r\n\t\t() =>\r\n\t\t\tpostTypesWithArchives\r\n\t\t\t\t?.filter(\r\n\t\t\t\t\t( postType ) =>\r\n\t\t\t\t\t\t! ( existingTemplates || [] ).some(\r\n\t\t\t\t\t\t\t( existingTemplate ) =>\r\n\t\t\t\t\t\t\t\texistingTemplate.slug ===\r\n\t\t\t\t\t\t\t\t'archive-' + postType.slug\r\n\t\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t\t.map( ( postType ) => {\r\n\t\t\t\t\tlet title;\r\n\t\t\t\t\tif ( needsUniqueIdentifier( postType ) ) {\r\n\t\t\t\t\t\ttitle = sprintf(\r\n\t\t\t\t\t\t\t// translators: %1s: Name of the post type e.g: \"Post\"; %2s: Slug of the post type e.g: \"book\".\r\n\t\t\t\t\t\t\t__( 'Archive: %1$s (%2$s)' ),\r\n\t\t\t\t\t\t\tpostType.labels.singular_name,\r\n\t\t\t\t\t\t\tpostType.slug\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttitle = sprintf(\r\n\t\t\t\t\t\t\t// translators: %s: Name of the post type e.g: \"Post\".\r\n\t\t\t\t\t\t\t__( 'Archive: %s' ),\r\n\t\t\t\t\t\t\tpostType.labels.singular_name\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tslug: 'archive-' + postType.slug,\r\n\t\t\t\t\t\tdescription: sprintf(\r\n\t\t\t\t\t\t\t// translators: %s: Name of the post type e.g: \"Post\".\r\n\t\t\t\t\t\t\t__(\r\n\t\t\t\t\t\t\t\t'Displays an archive with the latest posts of type: %s.'\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\tpostType.labels.singular_name\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\ttitle,\r\n\t\t\t\t\t\t// `icon` is the `menu_icon` property of a post type. We\r\n\t\t\t\t\t\t// only handle `dashicons` for now, even if the `menu_icon`\r\n\t\t\t\t\t\t// also supports urls and svg as values.\r\n\t\t\t\t\t\ticon:\r\n\t\t\t\t\t\t\ttypeof postType.icon === 'string' &&\r\n\t\t\t\t\t\t\tpostType.icon.startsWith( 'dashicons-' )\r\n\t\t\t\t\t\t\t\t? postType.icon.slice( 10 )\r\n\t\t\t\t\t\t\t\t: archive,\r\n\t\t\t\t\t\ttemplatePrefix: 'archive',\r\n\t\t\t\t\t};\r\n\t\t\t\t} ) || [],\r\n\t\t[ postTypesWithArchives, existingTemplates, needsUniqueIdentifier ]\r\n\t);\r\n}\r\n\r\nexport const usePostTypeMenuItems = ( onClickMenuItem ) => {\r\n\tconst publicPostTypes = usePublicPostTypes();\r\n\tconst existingTemplates = useExistingTemplates();\r\n\tconst defaultTemplateTypes = useDefaultTemplateTypes();\r\n\t// We need to keep track of naming conflicts. If a conflict\r\n\t// occurs, we need to add slug.\r\n\tconst templateLabels = useMemo(\r\n\t\t() =>\r\n\t\t\tpublicPostTypes?.reduce( ( accumulator, { labels } ) => {\r\n\t\t\t\tconst templateName = (\r\n\t\t\t\t\tlabels.template_name || labels.singular_name\r\n\t\t\t\t).toLowerCase();\r\n\t\t\t\taccumulator[ templateName ] =\r\n\t\t\t\t\t( accumulator[ templateName ] || 0 ) + 1;\r\n\t\t\t\treturn accumulator;\r\n\t\t\t}, {} ),\r\n\t\t[ publicPostTypes ]\r\n\t);\r\n\tconst needsUniqueIdentifier = useCallback(\r\n\t\t( { labels, slug } ) => {\r\n\t\t\tconst templateName = (\r\n\t\t\t\tlabels.template_name || labels.singular_name\r\n\t\t\t).toLowerCase();\r\n\t\t\treturn templateLabels[ templateName ] > 1 && templateName !== slug;\r\n\t\t},\r\n\t\t[ templateLabels ]\r\n\t);\r\n\r\n\t// `page`is a special case in template hierarchy.\r\n\tconst templatePrefixes = useMemo(\r\n\t\t() =>\r\n\t\t\tpublicPostTypes?.reduce( ( accumulator, { slug } ) => {\r\n\t\t\t\tlet suffix = slug;\r\n\t\t\t\tif ( slug !== 'page' ) {\r\n\t\t\t\t\tsuffix = `single-${ suffix }`;\r\n\t\t\t\t}\r\n\t\t\t\taccumulator[ slug ] = suffix;\r\n\t\t\t\treturn accumulator;\r\n\t\t\t}, {} ),\r\n\t\t[ publicPostTypes ]\r\n\t);\r\n\tconst postTypesInfo = useEntitiesInfo( 'postType', templatePrefixes );\r\n\tconst existingTemplateSlugs = ( existingTemplates || [] ).map(\r\n\t\t( { slug } ) => slug\r\n\t);\r\n\tconst menuItems = ( publicPostTypes || [] ).reduce(\r\n\t\t( accumulator, postType ) => {\r\n\t\t\tconst { slug, labels, icon } = postType;\r\n\t\t\t// We need to check if the general template is part of the\r\n\t\t\t// defaultTemplateTypes. If it is, just use that info and\r\n\t\t\t// augment it with the specific template functionality.\r\n\t\t\tconst generalTemplateSlug = templatePrefixes[ slug ];\r\n\t\t\tconst defaultTemplateType = defaultTemplateTypes?.find(\r\n\t\t\t\t( { slug: _slug } ) => _slug === generalTemplateSlug\r\n\t\t\t);\r\n\t\t\tconst hasGeneralTemplate =\r\n\t\t\t\texistingTemplateSlugs?.includes( generalTemplateSlug );\r\n\t\t\tconst _needsUniqueIdentifier = needsUniqueIdentifier( postType );\r\n\t\t\tlet menuItemTitle =\r\n\t\t\t\tlabels.template_name ||\r\n\t\t\t\tsprintf(\r\n\t\t\t\t\t// translators: %s: Name of the post type e.g: \"Post\".\r\n\t\t\t\t\t__( 'Single item: %s' ),\r\n\t\t\t\t\tlabels.singular_name\r\n\t\t\t\t);\r\n\t\t\tif ( _needsUniqueIdentifier ) {\r\n\t\t\t\tmenuItemTitle = labels.template_name\r\n\t\t\t\t\t? sprintf(\r\n\t\t\t\t\t\t\t// translators: %1s: Name of the template e.g: \"Single Item: Post\"; %2s: Slug of the post type e.g: \"book\".\r\n\t\t\t\t\t\t\t__( '%1$s (%2$s)' ),\r\n\t\t\t\t\t\t\tlabels.template_name,\r\n\t\t\t\t\t\t\tslug\r\n\t\t\t\t\t  )\r\n\t\t\t\t\t: sprintf(\r\n\t\t\t\t\t\t\t// translators: %1s: Name of the post type e.g: \"Post\"; %2s: Slug of the post type e.g: \"book\".\r\n\t\t\t\t\t\t\t__( 'Single item: %1$s (%2$s)' ),\r\n\t\t\t\t\t\t\tlabels.singular_name,\r\n\t\t\t\t\t\t\tslug\r\n\t\t\t\t\t  );\r\n\t\t\t}\r\n\t\t\tconst menuItem = defaultTemplateType\r\n\t\t\t\t? {\r\n\t\t\t\t\t\t...defaultTemplateType,\r\n\t\t\t\t\t\ttemplatePrefix: templatePrefixes[ slug ],\r\n\t\t\t\t  }\r\n\t\t\t\t: {\r\n\t\t\t\t\t\tslug: generalTemplateSlug,\r\n\t\t\t\t\t\ttitle: menuItemTitle,\r\n\t\t\t\t\t\tdescription: sprintf(\r\n\t\t\t\t\t\t\t// translators: %s: Name of the post type e.g: \"Post\".\r\n\t\t\t\t\t\t\t__( 'Displays a single item: %s.' ),\r\n\t\t\t\t\t\t\tlabels.singular_name\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\t// `icon` is the `menu_icon` property of a post type. We\r\n\t\t\t\t\t\t// only handle `dashicons` for now, even if the `menu_icon`\r\n\t\t\t\t\t\t// also supports urls and svg as values.\r\n\t\t\t\t\t\ticon:\r\n\t\t\t\t\t\t\ttypeof icon === 'string' &&\r\n\t\t\t\t\t\t\ticon.startsWith( 'dashicons-' )\r\n\t\t\t\t\t\t\t\t? icon.slice( 10 )\r\n\t\t\t\t\t\t\t\t: post,\r\n\t\t\t\t\t\ttemplatePrefix: templatePrefixes[ slug ],\r\n\t\t\t\t  };\r\n\t\t\tconst hasEntities = postTypesInfo?.[ slug ]?.hasEntities;\r\n\t\t\t// We have a different template creation flow only if they have entities.\r\n\t\t\tif ( hasEntities ) {\r\n\t\t\t\tmenuItem.onClick = ( template ) => {\r\n\t\t\t\t\tonClickMenuItem( {\r\n\t\t\t\t\t\ttype: 'postType',\r\n\t\t\t\t\t\tslug,\r\n\t\t\t\t\t\tconfig: {\r\n\t\t\t\t\t\t\trecordNamePath: 'title.rendered',\r\n\t\t\t\t\t\t\tqueryArgs: ( { search } ) => {\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t_fields: 'id,title,slug,link',\r\n\t\t\t\t\t\t\t\t\torderBy: search ? 'relevance' : 'modified',\r\n\t\t\t\t\t\t\t\t\texclude:\r\n\t\t\t\t\t\t\t\t\t\tpostTypesInfo[ slug ]\r\n\t\t\t\t\t\t\t\t\t\t\t.existingEntitiesIds,\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tgetSpecificTemplate: ( suggestion ) => {\r\n\t\t\t\t\t\t\t\tconst templateSlug = `${ templatePrefixes[ slug ] }-${ suggestion.slug }`;\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\ttitle: templateSlug,\r\n\t\t\t\t\t\t\t\t\tslug: templateSlug,\r\n\t\t\t\t\t\t\t\t\ttemplatePrefix: templatePrefixes[ slug ],\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlabels,\r\n\t\t\t\t\t\thasGeneralTemplate,\r\n\t\t\t\t\t\ttemplate,\r\n\t\t\t\t\t} );\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t// We don't need to add the menu item if there are no\r\n\t\t\t// entities and the general template exists.\r\n\t\t\tif ( ! hasGeneralTemplate || hasEntities ) {\r\n\t\t\t\taccumulator.push( menuItem );\r\n\t\t\t}\r\n\t\t\treturn accumulator;\r\n\t\t},\r\n\t\t[]\r\n\t);\r\n\t// Split menu items into two groups: one for the default post types\r\n\t// and one for the rest.\r\n\tconst postTypesMenuItems = useMemo(\r\n\t\t() =>\r\n\t\t\tmenuItems.reduce(\r\n\t\t\t\t( accumulator, postType ) => {\r\n\t\t\t\t\tconst { slug } = postType;\r\n\t\t\t\t\tlet key = 'postTypesMenuItems';\r\n\t\t\t\t\tif ( slug === 'page' ) {\r\n\t\t\t\t\t\tkey = 'defaultPostTypesMenuItems';\r\n\t\t\t\t\t}\r\n\t\t\t\t\taccumulator[ key ].push( postType );\r\n\t\t\t\t\treturn accumulator;\r\n\t\t\t\t},\r\n\t\t\t\t{ defaultPostTypesMenuItems: [], postTypesMenuItems: [] }\r\n\t\t\t),\r\n\t\t[ menuItems ]\r\n\t);\r\n\treturn postTypesMenuItems;\r\n};\r\n\r\nexport const useTaxonomiesMenuItems = ( onClickMenuItem ) => {\r\n\tconst publicTaxonomies = usePublicTaxonomies();\r\n\tconst existingTemplates = useExistingTemplates();\r\n\tconst defaultTemplateTypes = useDefaultTemplateTypes();\r\n\t// `category` and `post_tag` are special cases in template hierarchy.\r\n\tconst templatePrefixes = useMemo(\r\n\t\t() =>\r\n\t\t\tpublicTaxonomies?.reduce( ( accumulator, { slug } ) => {\r\n\t\t\t\tlet suffix = slug;\r\n\t\t\t\tif ( ! [ 'category', 'post_tag' ].includes( slug ) ) {\r\n\t\t\t\t\tsuffix = `taxonomy-${ suffix }`;\r\n\t\t\t\t}\r\n\t\t\t\tif ( slug === 'post_tag' ) {\r\n\t\t\t\t\tsuffix = `tag`;\r\n\t\t\t\t}\r\n\t\t\t\taccumulator[ slug ] = suffix;\r\n\t\t\t\treturn accumulator;\r\n\t\t\t}, {} ),\r\n\t\t[ publicTaxonomies ]\r\n\t);\r\n\t// We need to keep track of naming conflicts. If a conflict\r\n\t// occurs, we need to add slug.\r\n\tconst taxonomyLabels = publicTaxonomies?.reduce(\r\n\t\t( accumulator, { labels } ) => {\r\n\t\t\tconst templateName = (\r\n\t\t\t\tlabels.template_name || labels.singular_name\r\n\t\t\t).toLowerCase();\r\n\t\t\taccumulator[ templateName ] =\r\n\t\t\t\t( accumulator[ templateName ] || 0 ) + 1;\r\n\t\t\treturn accumulator;\r\n\t\t},\r\n\t\t{}\r\n\t);\r\n\tconst needsUniqueIdentifier = ( labels, slug ) => {\r\n\t\tif ( [ 'category', 'post_tag' ].includes( slug ) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst templateName = (\r\n\t\t\tlabels.template_name || labels.singular_name\r\n\t\t).toLowerCase();\r\n\t\treturn taxonomyLabels[ templateName ] > 1 && templateName !== slug;\r\n\t};\r\n\tconst taxonomiesInfo = useEntitiesInfo( 'taxonomy', templatePrefixes );\r\n\tconst existingTemplateSlugs = ( existingTemplates || [] ).map(\r\n\t\t( { slug } ) => slug\r\n\t);\r\n\tconst menuItems = ( publicTaxonomies || [] ).reduce(\r\n\t\t( accumulator, taxonomy ) => {\r\n\t\t\tconst { slug, labels } = taxonomy;\r\n\t\t\t// We need to check if the general template is part of the\r\n\t\t\t// defaultTemplateTypes. If it is, just use that info and\r\n\t\t\t// augment it with the specific template functionality.\r\n\t\t\tconst generalTemplateSlug = templatePrefixes[ slug ];\r\n\t\t\tconst defaultTemplateType = defaultTemplateTypes?.find(\r\n\t\t\t\t( { slug: _slug } ) => _slug === generalTemplateSlug\r\n\t\t\t);\r\n\t\t\tconst hasGeneralTemplate =\r\n\t\t\t\texistingTemplateSlugs?.includes( generalTemplateSlug );\r\n\t\t\tconst _needsUniqueIdentifier = needsUniqueIdentifier(\r\n\t\t\t\tlabels,\r\n\t\t\t\tslug\r\n\t\t\t);\r\n\t\t\tlet menuItemTitle = labels.template_name || labels.singular_name;\r\n\t\t\tif ( _needsUniqueIdentifier ) {\r\n\t\t\t\tmenuItemTitle = labels.template_name\r\n\t\t\t\t\t? sprintf(\r\n\t\t\t\t\t\t\t// translators: %1s: Name of the template e.g: \"Products by Category\"; %2s: Slug of the taxonomy e.g: \"product_cat\".\r\n\t\t\t\t\t\t\t__( '%1$s (%2$s)' ),\r\n\t\t\t\t\t\t\tlabels.template_name,\r\n\t\t\t\t\t\t\tslug\r\n\t\t\t\t\t  )\r\n\t\t\t\t\t: sprintf(\r\n\t\t\t\t\t\t\t// translators: %1s: Name of the taxonomy e.g: \"Category\"; %2s: Slug of the taxonomy e.g: \"product_cat\".\r\n\t\t\t\t\t\t\t__( '%1$s (%2$s)' ),\r\n\t\t\t\t\t\t\tlabels.singular_name,\r\n\t\t\t\t\t\t\tslug\r\n\t\t\t\t\t  );\r\n\t\t\t}\r\n\t\t\tconst menuItem = defaultTemplateType\r\n\t\t\t\t? {\r\n\t\t\t\t\t\t...defaultTemplateType,\r\n\t\t\t\t\t\ttemplatePrefix: templatePrefixes[ slug ],\r\n\t\t\t\t  }\r\n\t\t\t\t: {\r\n\t\t\t\t\t\tslug: generalTemplateSlug,\r\n\t\t\t\t\t\ttitle: menuItemTitle,\r\n\t\t\t\t\t\tdescription: sprintf(\r\n\t\t\t\t\t\t\t// translators: %s: Name of the taxonomy e.g: \"Product Categories\".\r\n\t\t\t\t\t\t\t__( 'Displays taxonomy: %s.' ),\r\n\t\t\t\t\t\t\tlabels.singular_name\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\ticon: blockMeta,\r\n\t\t\t\t\t\ttemplatePrefix: templatePrefixes[ slug ],\r\n\t\t\t\t  };\r\n\t\t\tconst hasEntities = taxonomiesInfo?.[ slug ]?.hasEntities;\r\n\t\t\t// We have a different template creation flow only if they have entities.\r\n\t\t\tif ( hasEntities ) {\r\n\t\t\t\tmenuItem.onClick = ( template ) => {\r\n\t\t\t\t\tonClickMenuItem( {\r\n\t\t\t\t\t\ttype: 'taxonomy',\r\n\t\t\t\t\t\tslug,\r\n\t\t\t\t\t\tconfig: {\r\n\t\t\t\t\t\t\tqueryArgs: ( { search } ) => {\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t_fields: 'id,name,slug,link',\r\n\t\t\t\t\t\t\t\t\torderBy: search ? 'name' : 'count',\r\n\t\t\t\t\t\t\t\t\texclude:\r\n\t\t\t\t\t\t\t\t\t\ttaxonomiesInfo[ slug ]\r\n\t\t\t\t\t\t\t\t\t\t\t.existingEntitiesIds,\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tgetSpecificTemplate: ( suggestion ) => {\r\n\t\t\t\t\t\t\t\tconst templateSlug = `${ templatePrefixes[ slug ] }-${ suggestion.slug }`;\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\ttitle: templateSlug,\r\n\t\t\t\t\t\t\t\t\tslug: templateSlug,\r\n\t\t\t\t\t\t\t\t\ttemplatePrefix: templatePrefixes[ slug ],\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlabels,\r\n\t\t\t\t\t\thasGeneralTemplate,\r\n\t\t\t\t\t\ttemplate,\r\n\t\t\t\t\t} );\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t// We don't need to add the menu item if there are no\r\n\t\t\t// entities and the general template exists.\r\n\t\t\tif ( ! hasGeneralTemplate || hasEntities ) {\r\n\t\t\t\taccumulator.push( menuItem );\r\n\t\t\t}\r\n\t\t\treturn accumulator;\r\n\t\t},\r\n\t\t[]\r\n\t);\r\n\t// Split menu items into two groups: one for the default taxonomies\r\n\t// and one for the rest.\r\n\tconst taxonomiesMenuItems = useMemo(\r\n\t\t() =>\r\n\t\t\tmenuItems.reduce(\r\n\t\t\t\t( accumulator, taxonomy ) => {\r\n\t\t\t\t\tconst { slug } = taxonomy;\r\n\t\t\t\t\tlet key = 'taxonomiesMenuItems';\r\n\t\t\t\t\tif ( [ 'category', 'tag' ].includes( slug ) ) {\r\n\t\t\t\t\t\tkey = 'defaultTaxonomiesMenuItems';\r\n\t\t\t\t\t}\r\n\t\t\t\t\taccumulator[ key ].push( taxonomy );\r\n\t\t\t\t\treturn accumulator;\r\n\t\t\t\t},\r\n\t\t\t\t{ defaultTaxonomiesMenuItems: [], taxonomiesMenuItems: [] }\r\n\t\t\t),\r\n\t\t[ menuItems ]\r\n\t);\r\n\treturn taxonomiesMenuItems;\r\n};\r\n\r\nconst USE_AUTHOR_MENU_ITEM_TEMPLATE_PREFIX = { user: 'author' };\r\nconst USE_AUTHOR_MENU_ITEM_QUERY_PARAMETERS = { user: { who: 'authors' } };\r\nexport function useAuthorMenuItem( onClickMenuItem ) {\r\n\tconst existingTemplates = useExistingTemplates();\r\n\tconst defaultTemplateTypes = useDefaultTemplateTypes();\r\n\tconst authorInfo = useEntitiesInfo(\r\n\t\t'root',\r\n\t\tUSE_AUTHOR_MENU_ITEM_TEMPLATE_PREFIX,\r\n\t\tUSE_AUTHOR_MENU_ITEM_QUERY_PARAMETERS\r\n\t);\r\n\tlet authorMenuItem = defaultTemplateTypes?.find(\r\n\t\t( { slug } ) => slug === 'author'\r\n\t);\r\n\tif ( ! authorMenuItem ) {\r\n\t\tauthorMenuItem = {\r\n\t\t\tdescription: __(\r\n\t\t\t\t'Displays latest posts written by a single author.'\r\n\t\t\t),\r\n\t\t\tslug: 'author',\r\n\t\t\ttitle: 'Author',\r\n\t\t};\r\n\t}\r\n\tconst hasGeneralTemplate = !! existingTemplates?.find(\r\n\t\t( { slug } ) => slug === 'author'\r\n\t);\r\n\tif ( authorInfo.user?.hasEntities ) {\r\n\t\tauthorMenuItem = { ...authorMenuItem, templatePrefix: 'author' };\r\n\t\tauthorMenuItem.onClick = ( template ) => {\r\n\t\t\tonClickMenuItem( {\r\n\t\t\t\ttype: 'root',\r\n\t\t\t\tslug: 'user',\r\n\t\t\t\tconfig: {\r\n\t\t\t\t\tqueryArgs: ( { search } ) => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t_fields: 'id,name,slug,link',\r\n\t\t\t\t\t\t\torderBy: search ? 'name' : 'registered_date',\r\n\t\t\t\t\t\t\texclude: authorInfo.user.existingEntitiesIds,\r\n\t\t\t\t\t\t\twho: 'authors',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t},\r\n\t\t\t\t\tgetSpecificTemplate: ( suggestion ) => {\r\n\t\t\t\t\t\tconst templateSlug = `author-${ suggestion.slug }`;\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\ttitle: templateSlug,\r\n\t\t\t\t\t\t\tslug: templateSlug,\r\n\t\t\t\t\t\t\ttemplatePrefix: 'author',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\tlabels: {\r\n\t\t\t\t\tsingular_name: __( 'Author' ),\r\n\t\t\t\t\tsearch_items: __( 'Search Authors' ),\r\n\t\t\t\t\tnot_found: __( 'No authors found.' ),\r\n\t\t\t\t\tall_items: __( 'All Authors' ),\r\n\t\t\t\t},\r\n\t\t\t\thasGeneralTemplate,\r\n\t\t\t\ttemplate,\r\n\t\t\t} );\r\n\t\t};\r\n\t}\r\n\tif ( ! hasGeneralTemplate || authorInfo.user?.hasEntities ) {\r\n\t\treturn authorMenuItem;\r\n\t}\r\n}\r\n\r\n/**\r\n * Helper hook that filters all the existing templates by the given\r\n * object with the entity's slug as key and the template prefix as value.\r\n *\r\n * Example:\r\n * `existingTemplates` is: [ { slug: 'tag-apple' }, { slug: 'page-about' }, { slug: 'tag' } ]\r\n * `templatePrefixes` is: { post_tag: 'tag' }\r\n * It will return: { post_tag: ['apple'] }\r\n *\r\n * Note: We append the `-` to the given template prefix in this function for our checks.\r\n *\r\n * @param {Record<string,string>} templatePrefixes An object with the entity's slug as key and the template prefix as value.\r\n * @return {Record<string,string[]>} An object with the entity's slug as key and an array with the existing template slugs as value.\r\n */\r\nconst useExistingTemplateSlugs = ( templatePrefixes ) => {\r\n\tconst existingTemplates = useExistingTemplates();\r\n\tconst existingSlugs = useMemo( () => {\r\n\t\treturn Object.entries( templatePrefixes || {} ).reduce(\r\n\t\t\t( accumulator, [ slug, prefix ] ) => {\r\n\t\t\t\tconst slugsWithTemplates = ( existingTemplates || [] ).reduce(\r\n\t\t\t\t\t( _accumulator, existingTemplate ) => {\r\n\t\t\t\t\t\tconst _prefix = `${ prefix }-`;\r\n\t\t\t\t\t\tif ( existingTemplate.slug.startsWith( _prefix ) ) {\r\n\t\t\t\t\t\t\t_accumulator.push(\r\n\t\t\t\t\t\t\t\texistingTemplate.slug.substring(\r\n\t\t\t\t\t\t\t\t\t_prefix.length\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn _accumulator;\r\n\t\t\t\t\t},\r\n\t\t\t\t\t[]\r\n\t\t\t\t);\r\n\t\t\t\tif ( slugsWithTemplates.length ) {\r\n\t\t\t\t\taccumulator[ slug ] = slugsWithTemplates;\r\n\t\t\t\t}\r\n\t\t\t\treturn accumulator;\r\n\t\t\t},\r\n\t\t\t{}\r\n\t\t);\r\n\t}, [ templatePrefixes, existingTemplates ] );\r\n\treturn existingSlugs;\r\n};\r\n\r\n/**\r\n * Helper hook that finds the existing records with an associated template,\r\n * as they need to be excluded from the template suggestions.\r\n *\r\n * @param {string}                entityName                The entity's name.\r\n * @param {Record<string,string>} templatePrefixes          An object with the entity's slug as key and the template prefix as value.\r\n * @param {Record<string,Object>} additionalQueryParameters An object with the entity's slug as key and additional query parameters as value.\r\n * @return {Record<string,EntitiesInfo>} An object with the entity's slug as key and the existing records as value.\r\n */\r\nconst useTemplatesToExclude = (\r\n\tentityName,\r\n\ttemplatePrefixes,\r\n\tadditionalQueryParameters = {}\r\n) => {\r\n\tconst slugsToExcludePerEntity =\r\n\t\tuseExistingTemplateSlugs( templatePrefixes );\r\n\tconst recordsToExcludePerEntity = useSelect(\r\n\t\t( select ) => {\r\n\t\t\treturn Object.entries( slugsToExcludePerEntity || {} ).reduce(\r\n\t\t\t\t( accumulator, [ slug, slugsWithTemplates ] ) => {\r\n\t\t\t\t\tconst entitiesWithTemplates = select(\r\n\t\t\t\t\t\tcoreStore\r\n\t\t\t\t\t).getEntityRecords( entityName, slug, {\r\n\t\t\t\t\t\t_fields: 'id',\r\n\t\t\t\t\t\tcontext: 'view',\r\n\t\t\t\t\t\tslug: slugsWithTemplates,\r\n\t\t\t\t\t\t...additionalQueryParameters[ slug ],\r\n\t\t\t\t\t} );\r\n\t\t\t\t\tif ( entitiesWithTemplates?.length ) {\r\n\t\t\t\t\t\taccumulator[ slug ] = entitiesWithTemplates;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn accumulator;\r\n\t\t\t\t},\r\n\t\t\t\t{}\r\n\t\t\t);\r\n\t\t},\r\n\t\t[ slugsToExcludePerEntity ]\r\n\t);\r\n\treturn recordsToExcludePerEntity;\r\n};\r\n\r\n/**\r\n * Helper hook that returns information about an entity having\r\n * records that we can create a specific template for.\r\n *\r\n * For example we can search for `terms` in `taxonomy` entity or\r\n * `posts` in `postType` entity.\r\n *\r\n * First we need to find the existing records with an associated template,\r\n * to query afterwards for any remaining record, by excluding them.\r\n *\r\n * @param {string}                entityName                The entity's name.\r\n * @param {Record<string,string>} templatePrefixes          An object with the entity's slug as key and the template prefix as value.\r\n * @param {Record<string,Object>} additionalQueryParameters An object with the entity's slug as key and additional query parameters as value.\r\n * @return {Record<string,EntitiesInfo>} An object with the entity's slug as key and the EntitiesInfo as value.\r\n */\r\nconst useEntitiesInfo = (\r\n\tentityName,\r\n\ttemplatePrefixes,\r\n\tadditionalQueryParameters = EMPTY_OBJECT\r\n) => {\r\n\tconst recordsToExcludePerEntity = useTemplatesToExclude(\r\n\t\tentityName,\r\n\t\ttemplatePrefixes,\r\n\t\tadditionalQueryParameters\r\n\t);\r\n\tconst entitiesHasRecords = useSelect(\r\n\t\t( select ) => {\r\n\t\t\treturn Object.keys( templatePrefixes || {} ).reduce(\r\n\t\t\t\t( accumulator, slug ) => {\r\n\t\t\t\t\tconst existingEntitiesIds =\r\n\t\t\t\t\t\trecordsToExcludePerEntity?.[ slug ]?.map(\r\n\t\t\t\t\t\t\t( { id } ) => id\r\n\t\t\t\t\t\t) || [];\r\n\t\t\t\t\taccumulator[ slug ] = !! select(\r\n\t\t\t\t\t\tcoreStore\r\n\t\t\t\t\t).getEntityRecords( entityName, slug, {\r\n\t\t\t\t\t\tper_page: 1,\r\n\t\t\t\t\t\t_fields: 'id',\r\n\t\t\t\t\t\tcontext: 'view',\r\n\t\t\t\t\t\texclude: existingEntitiesIds,\r\n\t\t\t\t\t\t...additionalQueryParameters[ slug ],\r\n\t\t\t\t\t} )?.length;\r\n\t\t\t\t\treturn accumulator;\r\n\t\t\t\t},\r\n\t\t\t\t{}\r\n\t\t\t);\r\n\t\t},\r\n\t\t[\r\n\t\t\ttemplatePrefixes,\r\n\t\t\trecordsToExcludePerEntity,\r\n\t\t\tentityName,\r\n\t\t\tadditionalQueryParameters,\r\n\t\t]\r\n\t);\r\n\tconst entitiesInfo = useMemo( () => {\r\n\t\treturn Object.keys( templatePrefixes || {} ).reduce(\r\n\t\t\t( accumulator, slug ) => {\r\n\t\t\t\tconst existingEntitiesIds =\r\n\t\t\t\t\trecordsToExcludePerEntity?.[ slug ]?.map(\r\n\t\t\t\t\t\t( { id } ) => id\r\n\t\t\t\t\t) || [];\r\n\t\t\t\taccumulator[ slug ] = {\r\n\t\t\t\t\thasEntities: entitiesHasRecords[ slug ],\r\n\t\t\t\t\texistingEntitiesIds,\r\n\t\t\t\t};\r\n\t\t\t\treturn accumulator;\r\n\t\t\t},\r\n\t\t\t{}\r\n\t\t);\r\n\t}, [ templatePrefixes, recordsToExcludePerEntity, entitiesHasRecords ] );\r\n\treturn entitiesInfo;\r\n};\r\n"],"mappings":"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","ignoreList":[]}