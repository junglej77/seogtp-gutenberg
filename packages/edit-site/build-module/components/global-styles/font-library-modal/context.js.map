{"version":3,"names":["createContext","useState","useEffect","privateApis","blockEditorPrivateApis","useSelect","useDispatch","useEntityRecord","useEntityRecords","store","coreStore","__","fetchGetFontFamilyBySlug","fetchInstallFontFamily","fetchUninstallFontFamily","fetchFontCollections","fetchFontCollection","unlock","useGlobalSetting","setUIValuesNeeded","mergeFontFamilies","loadFontFaceInBrowser","unloadFontFaceInBrowser","getDisplaySrcFromFontFace","makeFontFacesFormData","makeFontFamilyFormData","batchInstallFontFaces","checkFontFaceInstalled","toggleFont","setNestedValue","jsx","_jsx","FontLibraryContext","FontLibraryProvider","children","saveEntityRecord","globalStylesId","select","__experimentalGetCurrentGlobalStylesId","globalStyles","isInstalling","setIsInstalling","refreshKey","setRefreshKey","refreshLibrary","Date","now","records","libraryPosts","isResolving","isResolvingLibrary","_embed","libraryFonts","map","fontFamilyPost","id","font_family_settings","fontFace","_embedded","font_faces","face","font_face_settings","fontFamilies","setFontFamilies","saveFontFamilies","fonts","updatedGlobalStyles","record","modalTabOpen","setModalTabOpen","libraryFontSelected","setLibraryFontSelected","themeFonts","theme","f","source","sort","a","b","name","localeCompare","customFonts","custom","baseCustomFonts","handleSetLibraryFontSelected","font","fontSelected","find","slug","loadedFontUrls","Set","getAvailableFontsOutline","availableFontFamilies","outline","reduce","acc","availableFontFaces","length","fontStyle","fontWeight","getActivatedFontsOutline","isFontActivated","style","weight","includes","getFontFacesActivated","installFonts","fontFamiliesToInstall","fontFamiliesToActivate","installationErrors","fontFamilyToInstall","isANewFontFamily","installedFontFamily","alreadyInstalledFontFaces","filter","fontFaceToInstall","successfullyInstalledFontFaces","unsuccessfullyInstalledFontFaces","response","successes","errors","push","concat","unique","item","message","activeFonts","activateCustomFontFamilies","installError","Error","uninstallFontFamily","fontFamilyToUninstall","uninstalledFontFamily","deleted","deactivateFontFamily","error","console","_fontFamilies$font$so","initialCustomFonts","newCustomFonts","forEach","fontsToAdd","fontsToActivate","cleanFontsForSave","loadFontsInBrowser","_familyDbId","_faceDbId","src","toggleActivateFont","_fontFamilies$font$so2","initialFonts","newFonts","isFaceActivated","loadFontFaceAsset","has","add","collections","setFontCollections","getFontCollections","getFontCollection","hasData","collection","font_families","updatedCollections","e","Provider","value"],"sources":["@wordpress/edit-site/src/components/global-styles/font-library-modal/context.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { createContext, useState, useEffect } from '@wordpress/element';\r\nimport { privateApis as blockEditorPrivateApis } from '@wordpress/block-editor';\r\nimport { useSelect, useDispatch } from '@wordpress/data';\r\nimport {\r\n\tuseEntityRecord,\r\n\tuseEntityRecords,\r\n\tstore as coreStore,\r\n} from '@wordpress/core-data';\r\nimport { __ } from '@wordpress/i18n';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport {\r\n\tfetchGetFontFamilyBySlug,\r\n\tfetchInstallFontFamily,\r\n\tfetchUninstallFontFamily,\r\n\tfetchFontCollections,\r\n\tfetchFontCollection,\r\n} from './resolvers';\r\nimport { unlock } from '../../../lock-unlock';\r\nconst { useGlobalSetting } = unlock( blockEditorPrivateApis );\r\nimport {\r\n\tsetUIValuesNeeded,\r\n\tmergeFontFamilies,\r\n\tloadFontFaceInBrowser,\r\n\tunloadFontFaceInBrowser,\r\n\tgetDisplaySrcFromFontFace,\r\n\tmakeFontFacesFormData,\r\n\tmakeFontFamilyFormData,\r\n\tbatchInstallFontFaces,\r\n\tcheckFontFaceInstalled,\r\n} from './utils';\r\nimport { toggleFont } from './utils/toggleFont';\r\nimport setNestedValue from '../../../utils/set-nested-value';\r\n\r\nexport const FontLibraryContext = createContext( {} );\r\n\r\nfunction FontLibraryProvider( { children } ) {\r\n\tconst { saveEntityRecord } = useDispatch( coreStore );\r\n\tconst { globalStylesId } = useSelect( ( select ) => {\r\n\t\tconst { __experimentalGetCurrentGlobalStylesId } = select( coreStore );\r\n\t\treturn { globalStylesId: __experimentalGetCurrentGlobalStylesId() };\r\n\t} );\r\n\r\n\tconst globalStyles = useEntityRecord(\r\n\t\t'root',\r\n\t\t'globalStyles',\r\n\t\tglobalStylesId\r\n\t);\r\n\r\n\tconst [ isInstalling, setIsInstalling ] = useState( false );\r\n\tconst [ refreshKey, setRefreshKey ] = useState( 0 );\r\n\r\n\tconst refreshLibrary = () => {\r\n\t\tsetRefreshKey( Date.now() );\r\n\t};\r\n\r\n\tconst { records: libraryPosts = [], isResolving: isResolvingLibrary } =\r\n\t\tuseEntityRecords( 'postType', 'wp_font_family', {\r\n\t\t\trefreshKey,\r\n\t\t\t_embed: true,\r\n\t\t} );\r\n\r\n\tconst libraryFonts =\r\n\t\t( libraryPosts || [] ).map( ( fontFamilyPost ) => {\r\n\t\t\treturn {\r\n\t\t\t\tid: fontFamilyPost.id,\r\n\t\t\t\t...fontFamilyPost.font_family_settings,\r\n\t\t\t\tfontFace:\r\n\t\t\t\t\tfontFamilyPost?._embedded?.font_faces.map(\r\n\t\t\t\t\t\t( face ) => face.font_face_settings\r\n\t\t\t\t\t) || [],\r\n\t\t\t};\r\n\t\t} ) || [];\r\n\r\n\t// Global Styles (settings) font families\r\n\tconst [ fontFamilies, setFontFamilies ] = useGlobalSetting(\r\n\t\t'typography.fontFamilies'\r\n\t);\r\n\r\n\t/*\r\n\t * Save the font families to the database.\r\n\r\n\t * This function is called when the user activates or deactivates a font family.\r\n\t * It only updates the global styles post content in the database for new font families.\r\n\t * This avoids saving other styles/settings changed by the user using other parts of the editor.\r\n\t *\r\n\t * It uses the font families from the param to avoid using the font families from an outdated state.\r\n\t *\r\n\t * @param {Array} fonts - The font families that will be saved to the database.\r\n\t */\r\n\tconst saveFontFamilies = async ( fonts ) => {\r\n\t\t// Gets the global styles database post content.\r\n\t\tconst updatedGlobalStyles = globalStyles.record;\r\n\r\n\t\t// Updates the database version of global styles with the edited font families in the client.\r\n\t\tsetNestedValue(\r\n\t\t\tupdatedGlobalStyles,\r\n\t\t\t[ 'settings', 'typography', 'fontFamilies' ],\r\n\t\t\tfonts\r\n\t\t);\r\n\r\n\t\t// Saves a new version of the global styles in the database.\r\n\t\tawait saveEntityRecord( 'root', 'globalStyles', updatedGlobalStyles );\r\n\t};\r\n\r\n\t// Library Fonts\r\n\tconst [ modalTabOpen, setModalTabOpen ] = useState( false );\r\n\tconst [ libraryFontSelected, setLibraryFontSelected ] = useState( null );\r\n\r\n\t// Themes Fonts are the fonts defined in the global styles (database persisted theme.json data).\r\n\tconst themeFonts = fontFamilies?.theme\r\n\t\t? fontFamilies.theme\r\n\t\t\t\t.map( ( f ) => setUIValuesNeeded( f, { source: 'theme' } ) )\r\n\t\t\t\t.sort( ( a, b ) => a.name.localeCompare( b.name ) )\r\n\t\t: [];\r\n\r\n\tconst customFonts = fontFamilies?.custom\r\n\t\t? fontFamilies.custom\r\n\t\t\t\t.map( ( f ) => setUIValuesNeeded( f, { source: 'custom' } ) )\r\n\t\t\t\t.sort( ( a, b ) => a.name.localeCompare( b.name ) )\r\n\t\t: [];\r\n\r\n\tconst baseCustomFonts = libraryFonts\r\n\t\t? libraryFonts\r\n\t\t\t\t.map( ( f ) => setUIValuesNeeded( f, { source: 'custom' } ) )\r\n\t\t\t\t.sort( ( a, b ) => a.name.localeCompare( b.name ) )\r\n\t\t: [];\r\n\r\n\tuseEffect( () => {\r\n\t\tif ( ! modalTabOpen ) {\r\n\t\t\tsetLibraryFontSelected( null );\r\n\t\t}\r\n\t}, [ modalTabOpen ] );\r\n\r\n\tconst handleSetLibraryFontSelected = ( font ) => {\r\n\t\t// If font is null, reset the selected font\r\n\t\tif ( ! font ) {\r\n\t\t\tsetLibraryFontSelected( null );\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst fonts = font.source === 'theme' ? themeFonts : baseCustomFonts;\r\n\r\n\t\t// Tries to find the font in the installed fonts\r\n\t\tconst fontSelected = fonts.find( ( f ) => f.slug === font.slug );\r\n\t\t// If the font is not found (it is only defined in custom styles), use the font from custom styles\r\n\t\tsetLibraryFontSelected( {\r\n\t\t\t...( fontSelected || font ),\r\n\t\t\tsource: font.source,\r\n\t\t} );\r\n\t};\r\n\r\n\t// Demo\r\n\tconst [ loadedFontUrls ] = useState( new Set() );\r\n\r\n\tconst getAvailableFontsOutline = ( availableFontFamilies ) => {\r\n\t\tconst outline = availableFontFamilies.reduce( ( acc, font ) => {\r\n\t\t\tconst availableFontFaces =\r\n\t\t\t\tfont?.fontFace && font.fontFace?.length > 0\r\n\t\t\t\t\t? font?.fontFace.map(\r\n\t\t\t\t\t\t\t( face ) => `${ face.fontStyle + face.fontWeight }`\r\n\t\t\t\t\t  )\r\n\t\t\t\t\t: [ 'normal400' ]; // If the font doesn't have fontFace, we assume it is a system font and we add the defaults: normal 400\r\n\r\n\t\t\tacc[ font.slug ] = availableFontFaces;\r\n\t\t\treturn acc;\r\n\t\t}, {} );\r\n\t\treturn outline;\r\n\t};\r\n\r\n\tconst getActivatedFontsOutline = ( source ) => {\r\n\t\tswitch ( source ) {\r\n\t\t\tcase 'theme':\r\n\t\t\t\treturn getAvailableFontsOutline( themeFonts );\r\n\t\t\tcase 'custom':\r\n\t\t\tdefault:\r\n\t\t\t\treturn getAvailableFontsOutline( customFonts );\r\n\t\t}\r\n\t};\r\n\r\n\tconst isFontActivated = ( slug, style, weight, source ) => {\r\n\t\tif ( ! style && ! weight ) {\r\n\t\t\treturn !! getActivatedFontsOutline( source )[ slug ];\r\n\t\t}\r\n\t\treturn !! getActivatedFontsOutline( source )[ slug ]?.includes(\r\n\t\t\tstyle + weight\r\n\t\t);\r\n\t};\r\n\r\n\tconst getFontFacesActivated = ( slug, source ) => {\r\n\t\treturn getActivatedFontsOutline( source )[ slug ] || [];\r\n\t};\r\n\r\n\tasync function installFonts( fontFamiliesToInstall ) {\r\n\t\tsetIsInstalling( true );\r\n\t\ttry {\r\n\t\t\tconst fontFamiliesToActivate = [];\r\n\t\t\tlet installationErrors = [];\r\n\r\n\t\t\tfor ( const fontFamilyToInstall of fontFamiliesToInstall ) {\r\n\t\t\t\tlet isANewFontFamily = false;\r\n\r\n\t\t\t\t// Get the font family if it already exists.\r\n\t\t\t\tlet installedFontFamily = await fetchGetFontFamilyBySlug(\r\n\t\t\t\t\tfontFamilyToInstall.slug\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Otherwise create it.\r\n\t\t\t\tif ( ! installedFontFamily ) {\r\n\t\t\t\t\tisANewFontFamily = true;\r\n\t\t\t\t\t// Prepare font family form data to install.\r\n\t\t\t\t\tinstalledFontFamily = await fetchInstallFontFamily(\r\n\t\t\t\t\t\tmakeFontFamilyFormData( fontFamilyToInstall )\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Collect font faces that have already been installed (to be activated later)\r\n\t\t\t\tconst alreadyInstalledFontFaces =\r\n\t\t\t\t\tinstalledFontFamily.fontFace && fontFamilyToInstall.fontFace\r\n\t\t\t\t\t\t? installedFontFamily.fontFace.filter(\r\n\t\t\t\t\t\t\t\t( fontFaceToInstall ) =>\r\n\t\t\t\t\t\t\t\t\tcheckFontFaceInstalled(\r\n\t\t\t\t\t\t\t\t\t\tfontFaceToInstall,\r\n\t\t\t\t\t\t\t\t\t\tfontFamilyToInstall.fontFace\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t: [];\r\n\r\n\t\t\t\t// Filter out Font Faces that have already been installed (so that they are not re-installed)\r\n\t\t\t\tif (\r\n\t\t\t\t\tinstalledFontFamily.fontFace &&\r\n\t\t\t\t\tfontFamilyToInstall.fontFace\r\n\t\t\t\t) {\r\n\t\t\t\t\tfontFamilyToInstall.fontFace =\r\n\t\t\t\t\t\tfontFamilyToInstall.fontFace.filter(\r\n\t\t\t\t\t\t\t( fontFaceToInstall ) =>\r\n\t\t\t\t\t\t\t\t! checkFontFaceInstalled(\r\n\t\t\t\t\t\t\t\t\tfontFaceToInstall,\r\n\t\t\t\t\t\t\t\t\tinstalledFontFamily.fontFace\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Install the fonts (upload the font files to the server and create the post in the database).\r\n\t\t\t\tlet successfullyInstalledFontFaces = [];\r\n\t\t\t\tlet unsuccessfullyInstalledFontFaces = [];\r\n\t\t\t\tif ( fontFamilyToInstall?.fontFace?.length > 0 ) {\r\n\t\t\t\t\tconst response = await batchInstallFontFaces(\r\n\t\t\t\t\t\tinstalledFontFamily.id,\r\n\t\t\t\t\t\tmakeFontFacesFormData( fontFamilyToInstall )\r\n\t\t\t\t\t);\r\n\t\t\t\t\tsuccessfullyInstalledFontFaces = response?.successes;\r\n\t\t\t\t\tunsuccessfullyInstalledFontFaces = response?.errors;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Use the successfully installed font faces\r\n\t\t\t\t// As well as any font faces that were already installed (those will be activated)\r\n\t\t\t\tif (\r\n\t\t\t\t\tsuccessfullyInstalledFontFaces?.length > 0 ||\r\n\t\t\t\t\talreadyInstalledFontFaces?.length > 0\r\n\t\t\t\t) {\r\n\t\t\t\t\t// Use font data from REST API not from client to ensure\r\n\t\t\t\t\t// correct font information is used.\r\n\t\t\t\t\tinstalledFontFamily.fontFace = [\r\n\t\t\t\t\t\t...successfullyInstalledFontFaces,\r\n\t\t\t\t\t];\r\n\r\n\t\t\t\t\tfontFamiliesToActivate.push( installedFontFamily );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If it's a system font but was installed successfully, activate it.\r\n\t\t\t\tif (\r\n\t\t\t\t\tinstalledFontFamily &&\r\n\t\t\t\t\t! fontFamilyToInstall?.fontFace?.length\r\n\t\t\t\t) {\r\n\t\t\t\t\tfontFamiliesToActivate.push( installedFontFamily );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If the font family is new and is not a system font, delete it to avoid having font families without font faces.\r\n\t\t\t\tif (\r\n\t\t\t\t\tisANewFontFamily &&\r\n\t\t\t\t\tfontFamilyToInstall?.fontFace?.length > 0 &&\r\n\t\t\t\t\tsuccessfullyInstalledFontFaces?.length === 0\r\n\t\t\t\t) {\r\n\t\t\t\t\tawait fetchUninstallFontFamily( installedFontFamily.id );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinstallationErrors = installationErrors.concat(\r\n\t\t\t\t\tunsuccessfullyInstalledFontFaces\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tinstallationErrors = installationErrors.reduce(\r\n\t\t\t\t( unique, item ) =>\r\n\t\t\t\t\tunique.includes( item.message )\r\n\t\t\t\t\t\t? unique\r\n\t\t\t\t\t\t: [ ...unique, item.message ],\r\n\t\t\t\t[]\r\n\t\t\t);\r\n\r\n\t\t\tif ( fontFamiliesToActivate.length > 0 ) {\r\n\t\t\t\t// Activate the font family (add the font family to the global styles).\r\n\t\t\t\tconst activeFonts = activateCustomFontFamilies(\r\n\t\t\t\t\tfontFamiliesToActivate\r\n\t\t\t\t);\r\n\t\t\t\t// Save the global styles to the database.\r\n\t\t\t\tawait saveFontFamilies( activeFonts );\r\n\r\n\t\t\t\trefreshLibrary();\r\n\t\t\t}\r\n\r\n\t\t\tif ( installationErrors.length > 0 ) {\r\n\t\t\t\tconst installError = new Error(\r\n\t\t\t\t\t__( 'There was an error installing fonts.' )\r\n\t\t\t\t);\r\n\r\n\t\t\t\tinstallError.installationErrors = installationErrors;\r\n\r\n\t\t\t\tthrow installError;\r\n\t\t\t}\r\n\t\t} finally {\r\n\t\t\tsetIsInstalling( false );\r\n\t\t}\r\n\t}\r\n\r\n\tasync function uninstallFontFamily( fontFamilyToUninstall ) {\r\n\t\ttry {\r\n\t\t\t// Uninstall the font family.\r\n\t\t\t// (Removes the font files from the server and the posts from the database).\r\n\t\t\tconst uninstalledFontFamily = await fetchUninstallFontFamily(\r\n\t\t\t\tfontFamilyToUninstall.id\r\n\t\t\t);\r\n\r\n\t\t\t// Deactivate the font family if delete request is successful\r\n\t\t\t// (Removes the font family from the global styles).\r\n\t\t\tif ( uninstalledFontFamily.deleted ) {\r\n\t\t\t\tconst activeFonts = deactivateFontFamily(\r\n\t\t\t\t\tfontFamilyToUninstall\r\n\t\t\t\t);\r\n\t\t\t\t// Save the global styles to the database.\r\n\t\t\t\tawait saveFontFamilies( activeFonts );\r\n\t\t\t}\r\n\r\n\t\t\t// Refresh the library (the library font families from database).\r\n\t\t\trefreshLibrary();\r\n\r\n\t\t\treturn uninstalledFontFamily;\r\n\t\t} catch ( error ) {\r\n\t\t\t// eslint-disable-next-line no-console\r\n\t\t\tconsole.error(\r\n\t\t\t\t`There was an error uninstalling the font family:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\tconst deactivateFontFamily = ( font ) => {\r\n\t\t// If the user doesn't have custom fonts defined, include as custom fonts all the theme fonts\r\n\t\t// We want to save as active all the theme fonts at the beginning\r\n\t\tconst initialCustomFonts = fontFamilies?.[ font.source ] ?? [];\r\n\t\tconst newCustomFonts = initialCustomFonts.filter(\r\n\t\t\t( f ) => f.slug !== font.slug\r\n\t\t);\r\n\t\tconst activeFonts = {\r\n\t\t\t...fontFamilies,\r\n\t\t\t[ font.source ]: newCustomFonts,\r\n\t\t};\r\n\t\tsetFontFamilies( activeFonts );\r\n\r\n\t\tif ( font.fontFace ) {\r\n\t\t\tfont.fontFace.forEach( ( face ) => {\r\n\t\t\t\tunloadFontFaceInBrowser( face, 'all' );\r\n\t\t\t} );\r\n\t\t}\r\n\t\treturn activeFonts;\r\n\t};\r\n\r\n\tconst activateCustomFontFamilies = ( fontsToAdd ) => {\r\n\t\tconst fontsToActivate = cleanFontsForSave( fontsToAdd );\r\n\r\n\t\tconst activeFonts = {\r\n\t\t\t...fontFamilies,\r\n\t\t\t// Merge the existing custom fonts with the new fonts.\r\n\t\t\tcustom: mergeFontFamilies( fontFamilies?.custom, fontsToActivate ),\r\n\t\t};\r\n\r\n\t\t// Activate the fonts by set the new custom fonts array.\r\n\t\tsetFontFamilies( activeFonts );\r\n\r\n\t\tloadFontsInBrowser( fontsToActivate );\r\n\r\n\t\treturn activeFonts;\r\n\t};\r\n\r\n\t// Removes the id from the families and faces to avoid saving that to global styles post content.\r\n\tconst cleanFontsForSave = ( fonts ) => {\r\n\t\treturn fonts.map( ( { id: _familyDbId, fontFace, ...font } ) => ( {\r\n\t\t\t...font,\r\n\t\t\t...( fontFace && fontFace.length > 0\r\n\t\t\t\t? {\r\n\t\t\t\t\t\tfontFace: fontFace.map(\r\n\t\t\t\t\t\t\t( { id: _faceDbId, ...face } ) => face\r\n\t\t\t\t\t\t),\r\n\t\t\t\t  }\r\n\t\t\t\t: {} ),\r\n\t\t} ) );\r\n\t};\r\n\r\n\tconst loadFontsInBrowser = ( fonts ) => {\r\n\t\t// Add custom fonts to the browser.\r\n\t\tfonts.forEach( ( font ) => {\r\n\t\t\tif ( font.fontFace ) {\r\n\t\t\t\tfont.fontFace.forEach( ( face ) => {\r\n\t\t\t\t\t// Load font faces just in the iframe because they already are in the document.\r\n\t\t\t\t\tloadFontFaceInBrowser(\r\n\t\t\t\t\t\tface,\r\n\t\t\t\t\t\tgetDisplaySrcFromFontFace( face.src ),\r\n\t\t\t\t\t\t'all'\r\n\t\t\t\t\t);\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t} );\r\n\t};\r\n\r\n\tconst toggleActivateFont = ( font, face ) => {\r\n\t\t// If the user doesn't have custom fonts defined, include as custom fonts all the theme fonts\r\n\t\t// We want to save as active all the theme fonts at the beginning\r\n\t\tconst initialFonts = fontFamilies?.[ font.source ] ?? [];\r\n\t\t// Toggles the received font family or font face\r\n\t\tconst newFonts = toggleFont( font, face, initialFonts );\r\n\t\t// Updates the font families activated in global settings:\r\n\t\tsetFontFamilies( {\r\n\t\t\t...fontFamilies,\r\n\t\t\t[ font.source ]: newFonts,\r\n\t\t} );\r\n\r\n\t\tconst isFaceActivated = isFontActivated(\r\n\t\t\tfont.slug,\r\n\t\t\tface?.fontStyle,\r\n\t\t\tface?.fontWeight,\r\n\t\t\tfont.source\r\n\t\t);\r\n\r\n\t\tif ( isFaceActivated ) {\r\n\t\t\tunloadFontFaceInBrowser( face, 'all' );\r\n\t\t} else {\r\n\t\t\tloadFontFaceInBrowser(\r\n\t\t\t\tface,\r\n\t\t\t\tgetDisplaySrcFromFontFace( face?.src ),\r\n\t\t\t\t'all'\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\tconst loadFontFaceAsset = async ( fontFace ) => {\r\n\t\t// If the font doesn't have a src, don't load it.\r\n\t\tif ( ! fontFace.src ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Get the src of the font.\r\n\t\tconst src = getDisplaySrcFromFontFace( fontFace.src );\r\n\t\t// If the font is already loaded, don't load it again.\r\n\t\tif ( ! src || loadedFontUrls.has( src ) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Load the font in the browser.\r\n\t\tloadFontFaceInBrowser( fontFace, src, 'document' );\r\n\t\t// Add the font to the loaded fonts list.\r\n\t\tloadedFontUrls.add( src );\r\n\t};\r\n\r\n\t// Font Collections\r\n\tconst [ collections, setFontCollections ] = useState( [] );\r\n\tconst getFontCollections = async () => {\r\n\t\tconst response = await fetchFontCollections();\r\n\t\tsetFontCollections( response );\r\n\t};\r\n\tconst getFontCollection = async ( slug ) => {\r\n\t\ttry {\r\n\t\t\tconst hasData = !! collections.find(\r\n\t\t\t\t( collection ) => collection.slug === slug\r\n\t\t\t)?.font_families;\r\n\t\t\tif ( hasData ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconst response = await fetchFontCollection( slug );\r\n\t\t\tconst updatedCollections = collections.map( ( collection ) =>\r\n\t\t\t\tcollection.slug === slug\r\n\t\t\t\t\t? { ...collection, ...response }\r\n\t\t\t\t\t: collection\r\n\t\t\t);\r\n\t\t\tsetFontCollections( updatedCollections );\r\n\t\t} catch ( e ) {\r\n\t\t\t// eslint-disable-next-line no-console\r\n\t\t\tconsole.error( e );\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect( () => {\r\n\t\tgetFontCollections();\r\n\t}, [] );\r\n\r\n\treturn (\r\n\t\t<FontLibraryContext.Provider\r\n\t\t\tvalue={ {\r\n\t\t\t\tlibraryFontSelected,\r\n\t\t\t\thandleSetLibraryFontSelected,\r\n\t\t\t\tfontFamilies,\r\n\t\t\t\tbaseCustomFonts,\r\n\t\t\t\tisFontActivated,\r\n\t\t\t\tgetFontFacesActivated,\r\n\t\t\t\tloadFontFaceAsset,\r\n\t\t\t\tinstallFonts,\r\n\t\t\t\tuninstallFontFamily,\r\n\t\t\t\ttoggleActivateFont,\r\n\t\t\t\tgetAvailableFontsOutline,\r\n\t\t\t\tmodalTabOpen,\r\n\t\t\t\tsetModalTabOpen,\r\n\t\t\t\trefreshLibrary,\r\n\t\t\t\tsaveFontFamilies,\r\n\t\t\t\tisResolvingLibrary,\r\n\t\t\t\tisInstalling,\r\n\t\t\t\tcollections,\r\n\t\t\t\tgetFontCollection,\r\n\t\t\t} }\r\n\t\t>\r\n\t\t\t{ children }\r\n\t\t</FontLibraryContext.Provider>\r\n\t);\r\n}\r\n\r\nexport default FontLibraryProvider;\r\n"],"mappings":"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","ignoreList":[]}