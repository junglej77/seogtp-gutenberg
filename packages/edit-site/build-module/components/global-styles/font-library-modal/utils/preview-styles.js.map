{"version":3,"names":["findNearest","input","numbers","length","sort","a","b","Math","abs","extractFontWeights","fontFaces","result","forEach","face","weights","String","fontWeight","split","start","parseInt","end","i","push","formatFontFamily","regex","output","trim","formatItem","item","match","replace","includes","map","filter","join","formatFontFaceName","find","window","navigator","userAgent","toLowerCase","getFamilyPreviewStyle","family","style","fontFamily","Array","isArray","fontFace","fontStyle","normalFaces","normalWeights","nearestWeight","getFacePreviewStyle"],"sources":["@wordpress/edit-site/src/components/global-styles/font-library-modal/utils/preview-styles.js"],"sourcesContent":["function findNearest( input, numbers ) {\r\n\t// If the numbers array is empty, return null\r\n\tif ( numbers.length === 0 ) {\r\n\t\treturn null;\r\n\t}\r\n\t// Sort the array based on the absolute difference with the input\r\n\tnumbers.sort( ( a, b ) => Math.abs( input - a ) - Math.abs( input - b ) );\r\n\t// Return the first element (which will be the nearest) from the sorted array\r\n\treturn numbers[ 0 ];\r\n}\r\n\r\nfunction extractFontWeights( fontFaces ) {\r\n\tconst result = [];\r\n\r\n\tfontFaces.forEach( ( face ) => {\r\n\t\tconst weights = String( face.fontWeight ).split( ' ' );\r\n\r\n\t\tif ( weights.length === 2 ) {\r\n\t\t\tconst start = parseInt( weights[ 0 ] );\r\n\t\t\tconst end = parseInt( weights[ 1 ] );\r\n\r\n\t\t\tfor ( let i = start; i <= end; i += 100 ) {\r\n\t\t\t\tresult.push( i );\r\n\t\t\t}\r\n\t\t} else if ( weights.length === 1 ) {\r\n\t\t\tresult.push( parseInt( weights[ 0 ] ) );\r\n\t\t}\r\n\t} );\r\n\r\n\treturn result;\r\n}\r\n\r\n/*\r\n * Format the font family to use in the CSS font-family property of a CSS rule.\r\n *\r\n * The input can be a string with the font family name or a string with multiple font family names separated by commas.\r\n * It follows the recommendations from the CSS Fonts Module Level 4.\r\n * https://www.w3.org/TR/css-fonts-4/#font-family-prop\r\n *\r\n * @param {string} input - The font family.\r\n * @return {string} The formatted font family.\r\n *\r\n * Example:\r\n * formatFontFamily( \"Open Sans, Font+Name, sans-serif\" ) => '\"Open Sans\", \"Font+Name\", sans-serif'\r\n * formatFontFamily( \"'Open Sans', generic(kai), sans-serif\" ) => '\"Open Sans\", sans-serif'\r\n * formatFontFamily( \"DotGothic16, Slabo 27px, serif\" ) => '\"DotGothic16\",\"Slabo 27px\",serif'\r\n * formatFontFamily( \"Mine's, Moe's Typography\" ) => `\"mine's\",\"Moe's Typography\"`\r\n */\r\nexport function formatFontFamily( input ) {\r\n\t// Matches strings that are not exclusively alphabetic characters or hyphens, and do not exactly follow the pattern generic(alphabetic characters or hyphens).\r\n\tconst regex = /^(?!generic\\([ a-zA-Z\\-]+\\)$)(?!^[a-zA-Z\\-]+$).+/;\r\n\tconst output = input.trim();\r\n\r\n\tconst formatItem = ( item ) => {\r\n\t\titem = item.trim();\r\n\t\tif ( item.match( regex ) ) {\r\n\t\t\t// removes leading and trailing quotes.\r\n\t\t\titem = item.replace( /^[\"']|[\"']$/g, '' );\r\n\t\t\treturn `\"${ item }\"`;\r\n\t\t}\r\n\t\treturn item;\r\n\t};\r\n\r\n\tif ( output.includes( ',' ) ) {\r\n\t\treturn output\r\n\t\t\t.split( ',' )\r\n\t\t\t.map( formatItem )\r\n\t\t\t.filter( ( item ) => item !== '' )\r\n\t\t\t.join( ', ' );\r\n\t}\r\n\r\n\treturn formatItem( output );\r\n}\r\n\r\n/*\r\n * Format the font face name to use in the font-family property of a font face.\r\n *\r\n * The input can be a string with the font face name or a string with multiple font face names separated by commas.\r\n * It removes the leading and trailing quotes from the font face name.\r\n *\r\n * @param {string} input - The font face name.\r\n * @return {string} The formatted font face name.\r\n *\r\n * Example:\r\n * formatFontFaceName(\"Open Sans\") => \"Open Sans\"\r\n * formatFontFaceName(\"'Open Sans', sans-serif\") => \"Open Sans\"\r\n * formatFontFaceName(\", 'Open Sans', 'Helvetica Neue', sans-serif\") => \"Open Sans\"\r\n */\r\nexport function formatFontFaceName( input ) {\r\n\tif ( ! input ) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\tlet output = input.trim();\r\n\tif ( output.includes( ',' ) ) {\r\n\t\toutput = output\r\n\t\t\t.split( ',' )\r\n\t\t\t// finds the first item that is not an empty string.\r\n\t\t\t.find( ( item ) => item.trim() !== '' )\r\n\t\t\t.trim();\r\n\t}\r\n\t// removes leading and trailing quotes.\r\n\toutput = output.replace( /^[\"']|[\"']$/g, '' );\r\n\r\n\t// Firefox needs the font name to be wrapped in double quotes meanwhile other browsers don't.\r\n\tif ( window.navigator.userAgent.toLowerCase().includes( 'firefox' ) ) {\r\n\t\toutput = `\"${ output }\"`;\r\n\t}\r\n\treturn output;\r\n}\r\n\r\nexport function getFamilyPreviewStyle( family ) {\r\n\tconst style = { fontFamily: formatFontFamily( family.fontFamily ) };\r\n\r\n\tif ( ! Array.isArray( family.fontFace ) ) {\r\n\t\tstyle.fontWeight = '400';\r\n\t\tstyle.fontStyle = 'normal';\r\n\t\treturn style;\r\n\t}\r\n\r\n\tif ( family.fontFace ) {\r\n\t\t//get all the font faces with normal style\r\n\t\tconst normalFaces = family.fontFace.filter(\r\n\t\t\t( face ) =>\r\n\t\t\t\tface?.fontStyle && face.fontStyle.toLowerCase() === 'normal'\r\n\t\t);\r\n\t\tif ( normalFaces.length > 0 ) {\r\n\t\t\tstyle.fontStyle = 'normal';\r\n\t\t\tconst normalWeights = extractFontWeights( normalFaces );\r\n\t\t\tconst nearestWeight = findNearest( 400, normalWeights );\r\n\t\t\tstyle.fontWeight = String( nearestWeight ) || '400';\r\n\t\t} else {\r\n\t\t\tstyle.fontStyle =\r\n\t\t\t\t( family.fontFace.length && family.fontFace[ 0 ].fontStyle ) ||\r\n\t\t\t\t'normal';\r\n\t\t\tstyle.fontWeight =\r\n\t\t\t\t( family.fontFace.length &&\r\n\t\t\t\t\tString( family.fontFace[ 0 ].fontWeight ) ) ||\r\n\t\t\t\t'400';\r\n\t\t}\r\n\t}\r\n\r\n\treturn style;\r\n}\r\n\r\nexport function getFacePreviewStyle( face ) {\r\n\treturn {\r\n\t\tfontFamily: formatFontFamily( face.fontFamily ),\r\n\t\tfontStyle: face.fontStyle || 'normal',\r\n\t\tfontWeight: face.fontWeight || '400',\r\n\t};\r\n}\r\n"],"mappings":"AAAA,SAASA,WAAWA,CAAEC,KAAK,EAAEC,OAAO,EAAG;EACtC;EACA,IAAKA,OAAO,CAACC,MAAM,KAAK,CAAC,EAAG;IAC3B,OAAO,IAAI;EACZ;EACA;EACAD,OAAO,CAACE,IAAI,CAAE,CAAEC,CAAC,EAAEC,CAAC,KAAMC,IAAI,CAACC,GAAG,CAAEP,KAAK,GAAGI,CAAE,CAAC,GAAGE,IAAI,CAACC,GAAG,CAAEP,KAAK,GAAGK,CAAE,CAAE,CAAC;EACzE;EACA,OAAOJ,OAAO,CAAE,CAAC,CAAE;AACpB;AAEA,SAASO,kBAAkBA,CAAEC,SAAS,EAAG;EACxC,MAAMC,MAAM,GAAG,EAAE;EAEjBD,SAAS,CAACE,OAAO,CAAIC,IAAI,IAAM;IAC9B,MAAMC,OAAO,GAAGC,MAAM,CAAEF,IAAI,CAACG,UAAW,CAAC,CAACC,KAAK,CAAE,GAAI,CAAC;IAEtD,IAAKH,OAAO,CAACX,MAAM,KAAK,CAAC,EAAG;MAC3B,MAAMe,KAAK,GAAGC,QAAQ,CAAEL,OAAO,CAAE,CAAC,CAAG,CAAC;MACtC,MAAMM,GAAG,GAAGD,QAAQ,CAAEL,OAAO,CAAE,CAAC,CAAG,CAAC;MAEpC,KAAM,IAAIO,CAAC,GAAGH,KAAK,EAAEG,CAAC,IAAID,GAAG,EAAEC,CAAC,IAAI,GAAG,EAAG;QACzCV,MAAM,CAACW,IAAI,CAAED,CAAE,CAAC;MACjB;IACD,CAAC,MAAM,IAAKP,OAAO,CAACX,MAAM,KAAK,CAAC,EAAG;MAClCQ,MAAM,CAACW,IAAI,CAAEH,QAAQ,CAAEL,OAAO,CAAE,CAAC,CAAG,CAAE,CAAC;IACxC;EACD,CAAE,CAAC;EAEH,OAAOH,MAAM;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,gBAAgBA,CAAEtB,KAAK,EAAG;EACzC;EACA,MAAMuB,KAAK,GAAG,kDAAkD;EAChE,MAAMC,MAAM,GAAGxB,KAAK,CAACyB,IAAI,CAAC,CAAC;EAE3B,MAAMC,UAAU,GAAKC,IAAI,IAAM;IAC9BA,IAAI,GAAGA,IAAI,CAACF,IAAI,CAAC,CAAC;IAClB,IAAKE,IAAI,CAACC,KAAK,CAAEL,KAAM,CAAC,EAAG;MAC1B;MACAI,IAAI,GAAGA,IAAI,CAACE,OAAO,CAAE,cAAc,EAAE,EAAG,CAAC;MACzC,OAAQ,IAAIF,IAAM,GAAE;IACrB;IACA,OAAOA,IAAI;EACZ,CAAC;EAED,IAAKH,MAAM,CAACM,QAAQ,CAAE,GAAI,CAAC,EAAG;IAC7B,OAAON,MAAM,CACXR,KAAK,CAAE,GAAI,CAAC,CACZe,GAAG,CAAEL,UAAW,CAAC,CACjBM,MAAM,CAAIL,IAAI,IAAMA,IAAI,KAAK,EAAG,CAAC,CACjCM,IAAI,CAAE,IAAK,CAAC;EACf;EAEA,OAAOP,UAAU,CAAEF,MAAO,CAAC;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,kBAAkBA,CAAElC,KAAK,EAAG;EAC3C,IAAK,CAAEA,KAAK,EAAG;IACd,OAAO,EAAE;EACV;EAEA,IAAIwB,MAAM,GAAGxB,KAAK,CAACyB,IAAI,CAAC,CAAC;EACzB,IAAKD,MAAM,CAACM,QAAQ,CAAE,GAAI,CAAC,EAAG;IAC7BN,MAAM,GAAGA,MAAM,CACbR,KAAK,CAAE,GAAI;IACZ;IAAA,CACCmB,IAAI,CAAIR,IAAI,IAAMA,IAAI,CAACF,IAAI,CAAC,CAAC,KAAK,EAAG,CAAC,CACtCA,IAAI,CAAC,CAAC;EACT;EACA;EACAD,MAAM,GAAGA,MAAM,CAACK,OAAO,CAAE,cAAc,EAAE,EAAG,CAAC;;EAE7C;EACA,IAAKO,MAAM,CAACC,SAAS,CAACC,SAAS,CAACC,WAAW,CAAC,CAAC,CAACT,QAAQ,CAAE,SAAU,CAAC,EAAG;IACrEN,MAAM,GAAI,IAAIA,MAAQ,GAAE;EACzB;EACA,OAAOA,MAAM;AACd;AAEA,OAAO,SAASgB,qBAAqBA,CAAEC,MAAM,EAAG;EAC/C,MAAMC,KAAK,GAAG;IAAEC,UAAU,EAAErB,gBAAgB,CAAEmB,MAAM,CAACE,UAAW;EAAE,CAAC;EAEnE,IAAK,CAAEC,KAAK,CAACC,OAAO,CAAEJ,MAAM,CAACK,QAAS,CAAC,EAAG;IACzCJ,KAAK,CAAC3B,UAAU,GAAG,KAAK;IACxB2B,KAAK,CAACK,SAAS,GAAG,QAAQ;IAC1B,OAAOL,KAAK;EACb;EAEA,IAAKD,MAAM,CAACK,QAAQ,EAAG;IACtB;IACA,MAAME,WAAW,GAAGP,MAAM,CAACK,QAAQ,CAACd,MAAM,CACvCpB,IAAI,IACLA,IAAI,EAAEmC,SAAS,IAAInC,IAAI,CAACmC,SAAS,CAACR,WAAW,CAAC,CAAC,KAAK,QACtD,CAAC;IACD,IAAKS,WAAW,CAAC9C,MAAM,GAAG,CAAC,EAAG;MAC7BwC,KAAK,CAACK,SAAS,GAAG,QAAQ;MAC1B,MAAME,aAAa,GAAGzC,kBAAkB,CAAEwC,WAAY,CAAC;MACvD,MAAME,aAAa,GAAGnD,WAAW,CAAE,GAAG,EAAEkD,aAAc,CAAC;MACvDP,KAAK,CAAC3B,UAAU,GAAGD,MAAM,CAAEoC,aAAc,CAAC,IAAI,KAAK;IACpD,CAAC,MAAM;MACNR,KAAK,CAACK,SAAS,GACZN,MAAM,CAACK,QAAQ,CAAC5C,MAAM,IAAIuC,MAAM,CAACK,QAAQ,CAAE,CAAC,CAAE,CAACC,SAAS,IAC1D,QAAQ;MACTL,KAAK,CAAC3B,UAAU,GACb0B,MAAM,CAACK,QAAQ,CAAC5C,MAAM,IACvBY,MAAM,CAAE2B,MAAM,CAACK,QAAQ,CAAE,CAAC,CAAE,CAAC/B,UAAW,CAAC,IAC1C,KAAK;IACP;EACD;EAEA,OAAO2B,KAAK;AACb;AAEA,OAAO,SAASS,mBAAmBA,CAAEvC,IAAI,EAAG;EAC3C,OAAO;IACN+B,UAAU,EAAErB,gBAAgB,CAAEV,IAAI,CAAC+B,UAAW,CAAC;IAC/CI,SAAS,EAAEnC,IAAI,CAACmC,SAAS,IAAI,QAAQ;IACrChC,UAAU,EAAEH,IAAI,CAACG,UAAU,IAAI;EAChC,CAAC;AACF","ignoreList":[]}