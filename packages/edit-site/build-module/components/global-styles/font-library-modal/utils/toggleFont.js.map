{"version":3,"names":["toggleFont","font","face","initialfonts","isFontActivated","f","slug","getActivatedFont","fonts","find","toggleEntireFontFamily","activatedFont","filter","toggleFontVariant","isFaceActivated","fontWeight","fontStyle","fontFace","newFontFaces","length","map"],"sources":["@wordpress/edit-site/src/components/global-styles/font-library-modal/utils/toggleFont.js"],"sourcesContent":["/**\r\n * Toggles the activation of a given font or font variant within a list of custom fonts.\r\n *\r\n * - If only the font is provided (without face), the entire font family's activation is toggled.\r\n * - If both font and face are provided, the activation of the specific font variant is toggled.\r\n *\r\n * @param {Object} font            - The font to be toggled.\r\n * @param {string} font.slug       - The unique identifier for the font.\r\n * @param {Array}  [font.fontFace] - The list of font variants (faces) associated with the font.\r\n *\r\n * @param {Object} [face]          - The specific font variant to be toggled.\r\n * @param {string} face.fontWeight - The weight of the font variant.\r\n * @param {string} face.fontStyle  - The style of the font variant.\r\n *\r\n * @param {Array}  initialfonts    - The initial list of custom fonts.\r\n *\r\n * @return {Array} - The updated list of custom fonts with the font/font variant toggled.\r\n *\r\n * @example\r\n * const customFonts = [\r\n *     { slug: 'roboto', fontFace: [{ fontWeight: '400', fontStyle: 'normal' }] }\r\n * ];\r\n *\r\n * toggleFont({ slug: 'roboto' }, null, customFonts);\r\n * // This will remove 'roboto' from customFonts\r\n *\r\n * toggleFont({ slug: 'roboto' }, { fontWeight: '400', fontStyle: 'normal' }, customFonts);\r\n * // This will remove the specified face from 'roboto' in customFonts\r\n *\r\n * toggleFont({ slug: 'roboto' }, { fontWeight: '500', fontStyle: 'normal' }, customFonts);\r\n * // This will add the specified face to 'roboto' in customFonts\r\n */\r\nexport function toggleFont( font, face, initialfonts ) {\r\n\t// Helper to check if a font is activated based on its slug\r\n\tconst isFontActivated = ( f ) => f.slug === font.slug;\r\n\r\n\t// Helper to get the activated font from a list of fonts\r\n\tconst getActivatedFont = ( fonts ) => fonts.find( isFontActivated );\r\n\r\n\t// Toggle the activation status of an entire font family\r\n\tconst toggleEntireFontFamily = ( activatedFont ) => {\r\n\t\tif ( ! activatedFont ) {\r\n\t\t\t// If the font is not active, activate the entire font family\r\n\t\t\treturn [ ...initialfonts, font ];\r\n\t\t}\r\n\t\t// If the font is already active, deactivate the entire font family\r\n\t\treturn initialfonts.filter( ( f ) => ! isFontActivated( f ) );\r\n\t};\r\n\r\n\t// Toggle the activation status of a specific font variant\r\n\tconst toggleFontVariant = ( activatedFont ) => {\r\n\t\tconst isFaceActivated = ( f ) =>\r\n\t\t\tf.fontWeight === face.fontWeight && f.fontStyle === face.fontStyle;\r\n\r\n\t\tif ( ! activatedFont ) {\r\n\t\t\t// If the font family is not active, activate the font family with the font variant\r\n\t\t\treturn [ ...initialfonts, { ...font, fontFace: [ face ] } ];\r\n\t\t}\r\n\r\n\t\tlet newFontFaces = activatedFont.fontFace || [];\r\n\r\n\t\tif ( newFontFaces.find( isFaceActivated ) ) {\r\n\t\t\t// If the font variant is active, deactivate it\r\n\t\t\tnewFontFaces = newFontFaces.filter(\r\n\t\t\t\t( f ) => ! isFaceActivated( f )\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t// If the font variant is not active, activate it\r\n\t\t\tnewFontFaces = [ ...newFontFaces, face ];\r\n\t\t}\r\n\r\n\t\t// If there are no more font faces, deactivate the font family\r\n\t\tif ( newFontFaces.length === 0 ) {\r\n\t\t\treturn initialfonts.filter( ( f ) => ! isFontActivated( f ) );\r\n\t\t}\r\n\r\n\t\t// Return updated fonts list with toggled font variant\r\n\t\treturn initialfonts.map( ( f ) =>\r\n\t\t\tisFontActivated( f ) ? { ...f, fontFace: newFontFaces } : f\r\n\t\t);\r\n\t};\r\n\r\n\tconst activatedFont = getActivatedFont( initialfonts );\r\n\r\n\tif ( ! face ) {\r\n\t\treturn toggleEntireFontFamily( activatedFont );\r\n\t}\r\n\r\n\treturn toggleFontVariant( activatedFont );\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAUA,CAAEC,IAAI,EAAEC,IAAI,EAAEC,YAAY,EAAG;EACtD;EACA,MAAMC,eAAe,GAAKC,CAAC,IAAMA,CAAC,CAACC,IAAI,KAAKL,IAAI,CAACK,IAAI;;EAErD;EACA,MAAMC,gBAAgB,GAAKC,KAAK,IAAMA,KAAK,CAACC,IAAI,CAAEL,eAAgB,CAAC;;EAEnE;EACA,MAAMM,sBAAsB,GAAKC,aAAa,IAAM;IACnD,IAAK,CAAEA,aAAa,EAAG;MACtB;MACA,OAAO,CAAE,GAAGR,YAAY,EAAEF,IAAI,CAAE;IACjC;IACA;IACA,OAAOE,YAAY,CAACS,MAAM,CAAIP,CAAC,IAAM,CAAED,eAAe,CAAEC,CAAE,CAAE,CAAC;EAC9D,CAAC;;EAED;EACA,MAAMQ,iBAAiB,GAAKF,aAAa,IAAM;IAC9C,MAAMG,eAAe,GAAKT,CAAC,IAC1BA,CAAC,CAACU,UAAU,KAAKb,IAAI,CAACa,UAAU,IAAIV,CAAC,CAACW,SAAS,KAAKd,IAAI,CAACc,SAAS;IAEnE,IAAK,CAAEL,aAAa,EAAG;MACtB;MACA,OAAO,CAAE,GAAGR,YAAY,EAAE;QAAE,GAAGF,IAAI;QAAEgB,QAAQ,EAAE,CAAEf,IAAI;MAAG,CAAC,CAAE;IAC5D;IAEA,IAAIgB,YAAY,GAAGP,aAAa,CAACM,QAAQ,IAAI,EAAE;IAE/C,IAAKC,YAAY,CAACT,IAAI,CAAEK,eAAgB,CAAC,EAAG;MAC3C;MACAI,YAAY,GAAGA,YAAY,CAACN,MAAM,CAC/BP,CAAC,IAAM,CAAES,eAAe,CAAET,CAAE,CAC/B,CAAC;IACF,CAAC,MAAM;MACN;MACAa,YAAY,GAAG,CAAE,GAAGA,YAAY,EAAEhB,IAAI,CAAE;IACzC;;IAEA;IACA,IAAKgB,YAAY,CAACC,MAAM,KAAK,CAAC,EAAG;MAChC,OAAOhB,YAAY,CAACS,MAAM,CAAIP,CAAC,IAAM,CAAED,eAAe,CAAEC,CAAE,CAAE,CAAC;IAC9D;;IAEA;IACA,OAAOF,YAAY,CAACiB,GAAG,CAAIf,CAAC,IAC3BD,eAAe,CAAEC,CAAE,CAAC,GAAG;MAAE,GAAGA,CAAC;MAAEY,QAAQ,EAAEC;IAAa,CAAC,GAAGb,CAC3D,CAAC;EACF,CAAC;EAED,MAAMM,aAAa,GAAGJ,gBAAgB,CAAEJ,YAAa,CAAC;EAEtD,IAAK,CAAED,IAAI,EAAG;IACb,OAAOQ,sBAAsB,CAAEC,aAAc,CAAC;EAC/C;EAEA,OAAOE,iBAAiB,CAAEF,aAAc,CAAC;AAC1C","ignoreList":[]}