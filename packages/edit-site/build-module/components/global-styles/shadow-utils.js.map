{"version":3,"names":["CUSTOM_VALUE_SETTINGS","px","max","step","vw","vh","em","rm","svw","lvw","dvw","svh","lvh","dvh","vi","svi","lvi","dvi","vb","svb","lvb","dvb","vmin","svmin","lvmin","dvmin","vmax","svmax","lvmax","dvmax","getShadowParts","shadow","shadowValues","match","map","value","trim","shadowStringToObject","shadowValue","defaultShadow","x","y","blur","spread","color","inset","includes","lengthsRegex","matches","length","lengths","split","filter","insets","hasInset","colorString","replace","colorRegex","colorMatches","shadowObjectToString","shadowObj","shadowString"],"sources":["@wordpress/edit-site/src/components/global-styles/shadow-utils.js"],"sourcesContent":["export const CUSTOM_VALUE_SETTINGS = {\r\n\tpx: { max: 20, step: 1 },\r\n\t'%': { max: 100, step: 1 },\r\n\tvw: { max: 100, step: 1 },\r\n\tvh: { max: 100, step: 1 },\r\n\tem: { max: 10, step: 0.1 },\r\n\trm: { max: 10, step: 0.1 },\r\n\tsvw: { max: 100, step: 1 },\r\n\tlvw: { max: 100, step: 1 },\r\n\tdvw: { max: 100, step: 1 },\r\n\tsvh: { max: 100, step: 1 },\r\n\tlvh: { max: 100, step: 1 },\r\n\tdvh: { max: 100, step: 1 },\r\n\tvi: { max: 100, step: 1 },\r\n\tsvi: { max: 100, step: 1 },\r\n\tlvi: { max: 100, step: 1 },\r\n\tdvi: { max: 100, step: 1 },\r\n\tvb: { max: 100, step: 1 },\r\n\tsvb: { max: 100, step: 1 },\r\n\tlvb: { max: 100, step: 1 },\r\n\tdvb: { max: 100, step: 1 },\r\n\tvmin: { max: 100, step: 1 },\r\n\tsvmin: { max: 100, step: 1 },\r\n\tlvmin: { max: 100, step: 1 },\r\n\tdvmin: { max: 100, step: 1 },\r\n\tvmax: { max: 100, step: 1 },\r\n\tsvmax: { max: 100, step: 1 },\r\n\tlvmax: { max: 100, step: 1 },\r\n\tdvmax: { max: 100, step: 1 },\r\n};\r\n\r\nexport function getShadowParts( shadow ) {\r\n\tconst shadowValues = shadow.match( /(?:[^,(]|\\([^)]*\\))+/g ) || [];\r\n\treturn shadowValues.map( ( value ) => value.trim() );\r\n}\r\n\r\nexport function shadowStringToObject( shadowValue ) {\r\n\t/*\r\n\t * Shadow spec: https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow\r\n\t * Shadow string format: <offset-x> <offset-y> <blur-radius> <spread-radius> <color> [inset]\r\n\t *\r\n\t * A shadow to be valid it must satisfy the following.\r\n\t *\r\n\t * 1. Should not contain \"none\" keyword.\r\n\t * 2. Values x, y, blur, spread should be in the order. Color and inset can be anywhere in the string except in between x, y, blur, spread values.\r\n\t * 3. Should not contain more than one set of x, y, blur, spread values.\r\n\t * 4. Should contain at least x and y values. Others are optional.\r\n\t * 5. Should not contain more than one \"inset\" (case insensitive) keyword.\r\n\t * 6. Should not contain more than one color value.\r\n\t */\r\n\r\n\tconst defaultShadow = {\r\n\t\tx: '0',\r\n\t\ty: '0',\r\n\t\tblur: '0',\r\n\t\tspread: '0',\r\n\t\tcolor: '#000',\r\n\t\tinset: false,\r\n\t};\r\n\r\n\tif ( ! shadowValue ) {\r\n\t\treturn defaultShadow;\r\n\t}\r\n\r\n\t// Rule 1: Should not contain \"none\" keyword.\r\n\t// if the shadow has \"none\" keyword, it is not a valid shadow string\r\n\tif ( shadowValue.includes( 'none' ) ) {\r\n\t\treturn defaultShadow;\r\n\t}\r\n\r\n\t// Rule 2: Values x, y, blur, spread should be in the order.\r\n\t//\t\t   Color and inset can be anywhere in the string except in between x, y, blur, spread values.\r\n\t// Extract length values (x, y, blur, spread) from shadow string\r\n\t// Regex match groups of 1 to 4 length values.\r\n\tconst lengthsRegex =\r\n\t\t/((?:^|\\s+)(-?\\d*\\.?\\d+(?:px|%|in|cm|mm|em|rem|ex|pt|pc|vh|vw|vmin|vmax|ch|lh)?)(?=\\s|$)(?![^(]*\\))){1,4}/g;\r\n\tconst matches = shadowValue.match( lengthsRegex ) || [];\r\n\r\n\t// Rule 3: Should not contain more than one set of x, y, blur, spread values.\r\n\t// if the string doesn't contain exactly 1 set of x, y, blur, spread values,\r\n\t// it is not a valid shadow string\r\n\tif ( matches.length !== 1 ) {\r\n\t\treturn defaultShadow;\r\n\t}\r\n\r\n\t// Extract length values (x, y, blur, spread) from shadow string\r\n\tconst lengths = matches[ 0 ]\r\n\t\t.split( ' ' )\r\n\t\t.map( ( value ) => value.trim() )\r\n\t\t.filter( ( value ) => value );\r\n\r\n\t// Rule 4: Should contain at least x and y values. Others are optional.\r\n\tif ( lengths.length < 2 ) {\r\n\t\treturn defaultShadow;\r\n\t}\r\n\r\n\t// Rule 5: Should not contain more than one \"inset\" (case insensitive) keyword.\r\n\t// check if the shadow string contains \"inset\" keyword\r\n\tconst insets = shadowValue.match( /inset/gi ) || [];\r\n\tif ( insets.length > 1 ) {\r\n\t\treturn defaultShadow;\r\n\t}\r\n\r\n\t// Strip lengths and inset from shadow string, leaving just color.\r\n\tconst hasInset = insets.length === 1;\r\n\tlet colorString = shadowValue.replace( lengthsRegex, '' ).trim();\r\n\tif ( hasInset ) {\r\n\t\tcolorString = colorString\r\n\t\t\t.replace( 'inset', '' )\r\n\t\t\t.replace( 'INSET', '' )\r\n\t\t\t.trim();\r\n\t}\r\n\r\n\t// Rule 6: Should not contain more than one color value.\r\n\t// validate color string with regular expression\r\n\t// check if color has matching hex, rgb or hsl values\r\n\tconst colorRegex =\r\n\t\t/^#([0-9a-f]{3}){1,2}$|^#([0-9a-f]{4}){1,2}$|^(?:rgb|hsl)a?\\(?[\\d*\\.?\\d+%?,?\\/?\\s]*\\)$/gi;\r\n\tlet colorMatches = ( colorString.match( colorRegex ) || [] )\r\n\t\t.map( ( value ) => value?.trim() )\r\n\t\t.filter( ( value ) => value );\r\n\r\n\t// If color string has more than one color values, it is not a valid\r\n\tif ( colorMatches.length > 1 ) {\r\n\t\treturn defaultShadow;\r\n\t} else if ( colorMatches.length === 0 ) {\r\n\t\t// check if color string has multiple named color values separated by space\r\n\t\tcolorMatches = colorString\r\n\t\t\t.trim()\r\n\t\t\t.split( ' ' )\r\n\t\t\t.filter( ( value ) => value );\r\n\t\t// If color string has more than one color values, it is not a valid\r\n\t\tif ( colorMatches.length > 1 ) {\r\n\t\t\treturn defaultShadow;\r\n\t\t}\r\n\t}\r\n\r\n\t// Return parsed shadow object.\r\n\tconst [ x, y, blur, spread ] = lengths;\r\n\treturn {\r\n\t\tx,\r\n\t\ty,\r\n\t\tblur: blur || defaultShadow.blur,\r\n\t\tspread: spread || defaultShadow.spread,\r\n\t\tinset: hasInset,\r\n\t\tcolor: colorString || defaultShadow.color,\r\n\t};\r\n}\r\n\r\nexport function shadowObjectToString( shadowObj ) {\r\n\tconst shadowString = `${ shadowObj.x || '0px' } ${ shadowObj.y || '0px' } ${\r\n\t\tshadowObj.blur || '0px'\r\n\t} ${ shadowObj.spread || '0px' }`;\r\n\r\n\treturn `${ shadowObj.inset ? 'inset' : '' } ${ shadowString } ${\r\n\t\tshadowObj.color || ''\r\n\t}`.trim();\r\n}\r\n"],"mappings":"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","ignoreList":[]}