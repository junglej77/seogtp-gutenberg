{"version":3,"names":["useSelect","store","blockEditorStore","coreStore","widgetsEditorStore","buildWidgetAreasPostId","KIND","POST_TYPE","useLastSelectedWidgetArea","select","getBlockSelectionEnd","getBlockName","selectionEndClientId","getParentWidgetAreaBlock","widgetAreaBlock","widgetAreaBlockClientId","clientId","getEntityRecord","widgetAreasPost","blocks"],"sources":["@wordpress/edit-widgets/src/hooks/use-last-selected-widget-area.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useSelect } from '@wordpress/data';\r\nimport { store as blockEditorStore } from '@wordpress/block-editor';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store as widgetsEditorStore } from '../store';\r\nimport { buildWidgetAreasPostId, KIND, POST_TYPE } from '../store/utils';\r\n\r\n/**\r\n * A react hook that returns the client id of the last widget area to have\r\n * been selected, or to have a selected block within it.\r\n *\r\n * @return {string} clientId of the widget area last selected.\r\n */\r\nconst useLastSelectedWidgetArea = () =>\r\n\tuseSelect( ( select ) => {\r\n\t\tconst { getBlockSelectionEnd, getBlockName } =\r\n\t\t\tselect( blockEditorStore );\r\n\t\tconst selectionEndClientId = getBlockSelectionEnd();\r\n\r\n\t\t// If the selected block is a widget area, return its clientId.\r\n\t\tif ( getBlockName( selectionEndClientId ) === 'core/widget-area' ) {\r\n\t\t\treturn selectionEndClientId;\r\n\t\t}\r\n\r\n\t\tconst { getParentWidgetAreaBlock } = select( widgetsEditorStore );\r\n\t\tconst widgetAreaBlock =\r\n\t\t\tgetParentWidgetAreaBlock( selectionEndClientId );\r\n\t\tconst widgetAreaBlockClientId = widgetAreaBlock?.clientId;\r\n\r\n\t\tif ( widgetAreaBlockClientId ) {\r\n\t\t\treturn widgetAreaBlockClientId;\r\n\t\t}\r\n\r\n\t\t// If no widget area has been selected, return the clientId of the first\r\n\t\t// area.\r\n\t\tconst { getEntityRecord } = select( coreStore );\r\n\t\tconst widgetAreasPost = getEntityRecord(\r\n\t\t\tKIND,\r\n\t\t\tPOST_TYPE,\r\n\t\t\tbuildWidgetAreasPostId()\r\n\t\t);\r\n\t\treturn widgetAreasPost?.blocks[ 0 ]?.clientId;\r\n\t}, [] );\r\n\r\nexport default useLastSelectedWidgetArea;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,KAAK,IAAIC,gBAAgB,QAAQ,yBAAyB;AACnE,SAASD,KAAK,IAAIE,SAAS,QAAQ,sBAAsB;;AAEzD;AACA;AACA;AACA,SAASF,KAAK,IAAIG,kBAAkB,QAAQ,UAAU;AACtD,SAASC,sBAAsB,EAAEC,IAAI,EAAEC,SAAS,QAAQ,gBAAgB;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,yBAAyB,GAAGA,CAAA,KACjCR,SAAS,CAAIS,MAAM,IAAM;EACxB,MAAM;IAAEC,oBAAoB;IAAEC;EAAa,CAAC,GAC3CF,MAAM,CAAEP,gBAAiB,CAAC;EAC3B,MAAMU,oBAAoB,GAAGF,oBAAoB,CAAC,CAAC;;EAEnD;EACA,IAAKC,YAAY,CAAEC,oBAAqB,CAAC,KAAK,kBAAkB,EAAG;IAClE,OAAOA,oBAAoB;EAC5B;EAEA,MAAM;IAAEC;EAAyB,CAAC,GAAGJ,MAAM,CAAEL,kBAAmB,CAAC;EACjE,MAAMU,eAAe,GACpBD,wBAAwB,CAAED,oBAAqB,CAAC;EACjD,MAAMG,uBAAuB,GAAGD,eAAe,EAAEE,QAAQ;EAEzD,IAAKD,uBAAuB,EAAG;IAC9B,OAAOA,uBAAuB;EAC/B;;EAEA;EACA;EACA,MAAM;IAAEE;EAAgB,CAAC,GAAGR,MAAM,CAAEN,SAAU,CAAC;EAC/C,MAAMe,eAAe,GAAGD,eAAe,CACtCX,IAAI,EACJC,SAAS,EACTF,sBAAsB,CAAC,CACxB,CAAC;EACD,OAAOa,eAAe,EAAEC,MAAM,CAAE,CAAC,CAAE,EAAEH,QAAQ;AAC9C,CAAC,EAAE,EAAG,CAAC;AAER,eAAeR,yBAAyB","ignoreList":[]}