{"version":3,"names":["__","sprintf","store","noticesStore","interfaceStore","getWidgetIdFromBlock","coreStore","blockEditorStore","transformBlockToWidget","buildWidgetAreaPostId","buildWidgetAreasQuery","createStubPost","KIND","POST_TYPE","WIDGET_AREA_ENTITY_TYPE","STORE_NAME","editWidgetsStoreName","persistStubPost","id","blocks","registry","stubPost","dispatch","receiveEntityRecords","saveEditedWidgetAreas","select","editedWidgetAreas","getEditedWidgetAreas","length","saveWidgetAreas","createSuccessNotice","type","e","createErrorNotice","message","widgetAreas","widgetArea","saveWidgetArea","finishResolution","widgetAreaId","widgets","getWidgets","post","getEditedEntityRecord","areaWidgets","Object","values","filter","sidebar","usedReferenceWidgets","widgetsBlocks","block","attributes","name","includes","push","deletedWidgets","widget","widgetsNewArea","getWidgetAreaForWidgetId","batchMeta","batchTasks","sidebarWidgetsIds","i","widgetId","oldWidget","editEntityRecord","undoIgnore","hasEdits","hasEditsForEntityRecord","saveEditedEntityRecord","saveEntityRecord","position","clientId","deleteEntityRecord","force","records","__experimentalBatch","preservedRecords","record","hasOwnProperty","failedWidgetNames","__internalWidgetId","error","getLastEntitySaveError","Error","join","trySaveWidgetArea","undefined","throwOnError","setWidgetIdForClientId","setWidgetAreasOpenState","widgetAreasOpenState","setIsWidgetAreaOpen","isOpen","setIsInserterOpened","value","setIsListViewOpened","closeGeneralSidebar","disableComplementaryArea","moveBlockToWidgetArea","sourceRootClientId","getBlockRootClientId","getBlocks","destinationWidgetAreaBlock","find","destinationRootClientId","destinationInnerBlocksClientIds","getBlockOrder","destinationIndex","isDestinationWidgetAreaOpen","getIsWidgetAreaOpen","moveBlocksToPosition"],"sources":["@wordpress/edit-widgets/src/store/actions.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { __, sprintf } from '@wordpress/i18n';\r\nimport { store as noticesStore } from '@wordpress/notices';\r\nimport { store as interfaceStore } from '@wordpress/interface';\r\nimport { getWidgetIdFromBlock } from '@wordpress/widgets';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\nimport { store as blockEditorStore } from '@wordpress/block-editor';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { transformBlockToWidget } from './transformers';\r\nimport {\r\n\tbuildWidgetAreaPostId,\r\n\tbuildWidgetAreasQuery,\r\n\tcreateStubPost,\r\n\tKIND,\r\n\tPOST_TYPE,\r\n\tWIDGET_AREA_ENTITY_TYPE,\r\n} from './utils';\r\nimport { STORE_NAME as editWidgetsStoreName } from './constants';\r\n\r\n/**\r\n * Persists a stub post with given ID to core data store. The post is meant to be in-memory only and\r\n * shouldn't be saved via the API.\r\n *\r\n * @param {string} id     Post ID.\r\n * @param {Array}  blocks Blocks the post should consist of.\r\n * @return {Object} The post object.\r\n */\r\nexport const persistStubPost =\r\n\t( id, blocks ) =>\r\n\t( { registry } ) => {\r\n\t\tconst stubPost = createStubPost( id, blocks );\r\n\t\tregistry\r\n\t\t\t.dispatch( coreStore )\r\n\t\t\t.receiveEntityRecords(\r\n\t\t\t\tKIND,\r\n\t\t\t\tPOST_TYPE,\r\n\t\t\t\tstubPost,\r\n\t\t\t\t{ id: stubPost.id },\r\n\t\t\t\tfalse\r\n\t\t\t);\r\n\t\treturn stubPost;\r\n\t};\r\n\r\n/**\r\n * Converts all the blocks from edited widget areas into widgets,\r\n * and submits a batch request to save everything at once.\r\n *\r\n * Creates a snackbar notice on either success or error.\r\n *\r\n * @return {Function} An action creator.\r\n */\r\nexport const saveEditedWidgetAreas =\r\n\t() =>\r\n\tasync ( { select, dispatch, registry } ) => {\r\n\t\tconst editedWidgetAreas = select.getEditedWidgetAreas();\r\n\t\tif ( ! editedWidgetAreas?.length ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tawait dispatch.saveWidgetAreas( editedWidgetAreas );\r\n\t\t\tregistry\r\n\t\t\t\t.dispatch( noticesStore )\r\n\t\t\t\t.createSuccessNotice( __( 'Widgets saved.' ), {\r\n\t\t\t\t\ttype: 'snackbar',\r\n\t\t\t\t} );\r\n\t\t} catch ( e ) {\r\n\t\t\tregistry.dispatch( noticesStore ).createErrorNotice(\r\n\t\t\t\t/* translators: %s: The error message. */\r\n\t\t\t\tsprintf( __( 'There was an error. %s' ), e.message ),\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: 'snackbar',\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n/**\r\n * Converts all the blocks from specified widget areas into widgets,\r\n * and submits a batch request to save everything at once.\r\n *\r\n * @param {Object[]} widgetAreas Widget areas to save.\r\n * @return {Function} An action creator.\r\n */\r\nexport const saveWidgetAreas =\r\n\t( widgetAreas ) =>\r\n\tasync ( { dispatch, registry } ) => {\r\n\t\ttry {\r\n\t\t\tfor ( const widgetArea of widgetAreas ) {\r\n\t\t\t\tawait dispatch.saveWidgetArea( widgetArea.id );\r\n\t\t\t}\r\n\t\t} finally {\r\n\t\t\t// saveEditedEntityRecord resets the resolution status, let's fix it manually.\r\n\t\t\tawait registry\r\n\t\t\t\t.dispatch( coreStore )\r\n\t\t\t\t.finishResolution(\r\n\t\t\t\t\t'getEntityRecord',\r\n\t\t\t\t\tKIND,\r\n\t\t\t\t\tWIDGET_AREA_ENTITY_TYPE,\r\n\t\t\t\t\tbuildWidgetAreasQuery()\r\n\t\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n/**\r\n * Converts all the blocks from a widget area specified by ID into widgets,\r\n * and submits a batch request to save everything at once.\r\n *\r\n * @param {string} widgetAreaId ID of the widget area to process.\r\n * @return {Function} An action creator.\r\n */\r\nexport const saveWidgetArea =\r\n\t( widgetAreaId ) =>\r\n\tasync ( { dispatch, select, registry } ) => {\r\n\t\tconst widgets = select.getWidgets();\r\n\r\n\t\tconst post = registry\r\n\t\t\t.select( coreStore )\r\n\t\t\t.getEditedEntityRecord(\r\n\t\t\t\tKIND,\r\n\t\t\t\tPOST_TYPE,\r\n\t\t\t\tbuildWidgetAreaPostId( widgetAreaId )\r\n\t\t\t);\r\n\r\n\t\t// Get all widgets from this area\r\n\t\tconst areaWidgets = Object.values( widgets ).filter(\r\n\t\t\t( { sidebar } ) => sidebar === widgetAreaId\r\n\t\t);\r\n\r\n\t\t// Remove all duplicate reference widget instances for legacy widgets.\r\n\t\t// Why? We filter out the widgets with duplicate IDs to prevent adding more than one instance of a widget\r\n\t\t// implemented using a function. WordPress doesn't support having more than one instance of these, if you try to\r\n\t\t// save multiple instances of these in different sidebars you will run into undefined behaviors.\r\n\t\tconst usedReferenceWidgets = [];\r\n\t\tconst widgetsBlocks = post.blocks.filter( ( block ) => {\r\n\t\t\tconst { id } = block.attributes;\r\n\r\n\t\t\tif ( block.name === 'core/legacy-widget' && id ) {\r\n\t\t\t\tif ( usedReferenceWidgets.includes( id ) ) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tusedReferenceWidgets.push( id );\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} );\r\n\r\n\t\t// Determine which widgets have been deleted. We can tell if a widget is\r\n\t\t// deleted and not just moved to a different area by looking to see if\r\n\t\t// getWidgetAreaForWidgetId() finds something.\r\n\t\tconst deletedWidgets = [];\r\n\t\tfor ( const widget of areaWidgets ) {\r\n\t\t\tconst widgetsNewArea = select.getWidgetAreaForWidgetId( widget.id );\r\n\t\t\tif ( ! widgetsNewArea ) {\r\n\t\t\t\tdeletedWidgets.push( widget );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst batchMeta = [];\r\n\t\tconst batchTasks = [];\r\n\t\tconst sidebarWidgetsIds = [];\r\n\t\tfor ( let i = 0; i < widgetsBlocks.length; i++ ) {\r\n\t\t\tconst block = widgetsBlocks[ i ];\r\n\t\t\tconst widgetId = getWidgetIdFromBlock( block );\r\n\t\t\tconst oldWidget = widgets[ widgetId ];\r\n\t\t\tconst widget = transformBlockToWidget( block, oldWidget );\r\n\r\n\t\t\t// We'll replace the null widgetId after save, but we track it here\r\n\t\t\t// since order is important.\r\n\t\t\tsidebarWidgetsIds.push( widgetId );\r\n\r\n\t\t\t// Check oldWidget as widgetId might refer to an ID which has been\r\n\t\t\t// deleted, e.g. if a deleted block is restored via undo after saving.\r\n\t\t\tif ( oldWidget ) {\r\n\t\t\t\t// Update an existing widget.\r\n\t\t\t\tregistry.dispatch( coreStore ).editEntityRecord(\r\n\t\t\t\t\t'root',\r\n\t\t\t\t\t'widget',\r\n\t\t\t\t\twidgetId,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t...widget,\r\n\t\t\t\t\t\tsidebar: widgetAreaId,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{ undoIgnore: true }\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst hasEdits = registry\r\n\t\t\t\t\t.select( coreStore )\r\n\t\t\t\t\t.hasEditsForEntityRecord( 'root', 'widget', widgetId );\r\n\r\n\t\t\t\tif ( ! hasEdits ) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbatchTasks.push( ( { saveEditedEntityRecord } ) =>\r\n\t\t\t\t\tsaveEditedEntityRecord( 'root', 'widget', widgetId )\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\t// Create a new widget.\r\n\t\t\t\tbatchTasks.push( ( { saveEntityRecord } ) =>\r\n\t\t\t\t\tsaveEntityRecord( 'root', 'widget', {\r\n\t\t\t\t\t\t...widget,\r\n\t\t\t\t\t\tsidebar: widgetAreaId,\r\n\t\t\t\t\t} )\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tbatchMeta.push( {\r\n\t\t\t\tblock,\r\n\t\t\t\tposition: i,\r\n\t\t\t\tclientId: block.clientId,\r\n\t\t\t} );\r\n\t\t}\r\n\t\tfor ( const widget of deletedWidgets ) {\r\n\t\t\tbatchTasks.push( ( { deleteEntityRecord } ) =>\r\n\t\t\t\tdeleteEntityRecord( 'root', 'widget', widget.id, {\r\n\t\t\t\t\tforce: true,\r\n\t\t\t\t} )\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tconst records = await registry\r\n\t\t\t.dispatch( coreStore )\r\n\t\t\t.__experimentalBatch( batchTasks );\r\n\t\tconst preservedRecords = records.filter(\r\n\t\t\t( record ) => ! record.hasOwnProperty( 'deleted' )\r\n\t\t);\r\n\r\n\t\tconst failedWidgetNames = [];\r\n\r\n\t\tfor ( let i = 0; i < preservedRecords.length; i++ ) {\r\n\t\t\tconst widget = preservedRecords[ i ];\r\n\t\t\tconst { block, position } = batchMeta[ i ];\r\n\r\n\t\t\t// Set __internalWidgetId on the block. This will be persisted to the\r\n\t\t\t// store when we dispatch receiveEntityRecords( post ) below.\r\n\t\t\tpost.blocks[ position ].attributes.__internalWidgetId = widget.id;\r\n\r\n\t\t\tconst error = registry\r\n\t\t\t\t.select( coreStore )\r\n\t\t\t\t.getLastEntitySaveError( 'root', 'widget', widget.id );\r\n\t\t\tif ( error ) {\r\n\t\t\t\tfailedWidgetNames.push( block.attributes?.name || block?.name );\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! sidebarWidgetsIds[ position ] ) {\r\n\t\t\t\tsidebarWidgetsIds[ position ] = widget.id;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( failedWidgetNames.length ) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\tsprintf(\r\n\t\t\t\t\t/* translators: %s: List of widget names */\r\n\t\t\t\t\t__( 'Could not save the following widgets: %s.' ),\r\n\t\t\t\t\tfailedWidgetNames.join( ', ' )\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tregistry.dispatch( coreStore ).editEntityRecord(\r\n\t\t\tKIND,\r\n\t\t\tWIDGET_AREA_ENTITY_TYPE,\r\n\t\t\twidgetAreaId,\r\n\t\t\t{\r\n\t\t\t\twidgets: sidebarWidgetsIds,\r\n\t\t\t},\r\n\t\t\t{ undoIgnore: true }\r\n\t\t);\r\n\r\n\t\tdispatch( trySaveWidgetArea( widgetAreaId ) );\r\n\r\n\t\tregistry\r\n\t\t\t.dispatch( coreStore )\r\n\t\t\t.receiveEntityRecords( KIND, POST_TYPE, post, undefined );\r\n\t};\r\n\r\nconst trySaveWidgetArea =\r\n\t( widgetAreaId ) =>\r\n\t( { registry } ) => {\r\n\t\tregistry\r\n\t\t\t.dispatch( coreStore )\r\n\t\t\t.saveEditedEntityRecord(\r\n\t\t\t\tKIND,\r\n\t\t\t\tWIDGET_AREA_ENTITY_TYPE,\r\n\t\t\t\twidgetAreaId,\r\n\t\t\t\t{\r\n\t\t\t\t\tthrowOnError: true,\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t};\r\n\r\n/**\r\n * Sets the clientId stored for a particular widgetId.\r\n *\r\n * @param {number} clientId Client id.\r\n * @param {number} widgetId Widget id.\r\n *\r\n * @return {Object} Action.\r\n */\r\nexport function setWidgetIdForClientId( clientId, widgetId ) {\r\n\treturn {\r\n\t\ttype: 'SET_WIDGET_ID_FOR_CLIENT_ID',\r\n\t\tclientId,\r\n\t\twidgetId,\r\n\t};\r\n}\r\n\r\n/**\r\n * Sets the open state of all the widget areas.\r\n *\r\n * @param {Object} widgetAreasOpenState The open states of all the widget areas.\r\n *\r\n * @return {Object} Action.\r\n */\r\nexport function setWidgetAreasOpenState( widgetAreasOpenState ) {\r\n\treturn {\r\n\t\ttype: 'SET_WIDGET_AREAS_OPEN_STATE',\r\n\t\twidgetAreasOpenState,\r\n\t};\r\n}\r\n\r\n/**\r\n * Sets the open state of the widget area.\r\n *\r\n * @param {string}  clientId The clientId of the widget area.\r\n * @param {boolean} isOpen   Whether the widget area should be opened.\r\n *\r\n * @return {Object} Action.\r\n */\r\nexport function setIsWidgetAreaOpen( clientId, isOpen ) {\r\n\treturn {\r\n\t\ttype: 'SET_IS_WIDGET_AREA_OPEN',\r\n\t\tclientId,\r\n\t\tisOpen,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used to open/close the inserter.\r\n *\r\n * @param {boolean|Object} value                Whether the inserter should be\r\n *                                              opened (true) or closed (false).\r\n *                                              To specify an insertion point,\r\n *                                              use an object.\r\n * @param {string}         value.rootClientId   The root client ID to insert at.\r\n * @param {number}         value.insertionIndex The index to insert at.\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function setIsInserterOpened( value ) {\r\n\treturn {\r\n\t\ttype: 'SET_IS_INSERTER_OPENED',\r\n\t\tvalue,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used to open/close the list view.\r\n *\r\n * @param {boolean} isOpen A boolean representing whether the list view should be opened or closed.\r\n * @return {Object} Action object.\r\n */\r\nexport function setIsListViewOpened( isOpen ) {\r\n\treturn {\r\n\t\ttype: 'SET_IS_LIST_VIEW_OPENED',\r\n\t\tisOpen,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object signalling that the user closed the sidebar.\r\n *\r\n * @return {Object} Action creator.\r\n */\r\nexport const closeGeneralSidebar =\r\n\t() =>\r\n\t( { registry } ) => {\r\n\t\tregistry\r\n\t\t\t.dispatch( interfaceStore )\r\n\t\t\t.disableComplementaryArea( editWidgetsStoreName );\r\n\t};\r\n\r\n/**\r\n * Action that handles moving a block between widget areas\r\n *\r\n * @param {string} clientId     The clientId of the block to move.\r\n * @param {string} widgetAreaId The id of the widget area to move the block to.\r\n */\r\nexport const moveBlockToWidgetArea =\r\n\t( clientId, widgetAreaId ) =>\r\n\tasync ( { dispatch, select, registry } ) => {\r\n\t\tconst sourceRootClientId = registry\r\n\t\t\t.select( blockEditorStore )\r\n\t\t\t.getBlockRootClientId( clientId );\r\n\r\n\t\t// Search the top level blocks (widget areas) for the one with the matching\r\n\t\t// id attribute. Makes the assumption that all top-level blocks are widget\r\n\t\t// areas.\r\n\t\tconst widgetAreas = registry.select( blockEditorStore ).getBlocks();\r\n\t\tconst destinationWidgetAreaBlock = widgetAreas.find(\r\n\t\t\t( { attributes } ) => attributes.id === widgetAreaId\r\n\t\t);\r\n\t\tconst destinationRootClientId = destinationWidgetAreaBlock.clientId;\r\n\r\n\t\t// Get the index for moving to the end of the destination widget area.\r\n\t\tconst destinationInnerBlocksClientIds = registry\r\n\t\t\t.select( blockEditorStore )\r\n\t\t\t.getBlockOrder( destinationRootClientId );\r\n\t\tconst destinationIndex = destinationInnerBlocksClientIds.length;\r\n\r\n\t\t// Reveal the widget area, if it's not open.\r\n\t\tconst isDestinationWidgetAreaOpen = select.getIsWidgetAreaOpen(\r\n\t\t\tdestinationRootClientId\r\n\t\t);\r\n\r\n\t\tif ( ! isDestinationWidgetAreaOpen ) {\r\n\t\t\tdispatch.setIsWidgetAreaOpen( destinationRootClientId, true );\r\n\t\t}\r\n\r\n\t\t// Move the block.\r\n\t\tregistry\r\n\t\t\t.dispatch( blockEditorStore )\r\n\t\t\t.moveBlocksToPosition(\r\n\t\t\t\t[ clientId ],\r\n\t\t\t\tsourceRootClientId,\r\n\t\t\t\tdestinationRootClientId,\r\n\t\t\t\tdestinationIndex\r\n\t\t\t);\r\n\t};\r\n"],"mappings":"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","ignoreList":[]}