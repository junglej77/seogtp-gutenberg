{"version":3,"names":["createSelector","createRegistrySelector","getWidgetIdFromBlock","store","coreStore","blockEditorStore","buildWidgetsQuery","buildWidgetAreasQuery","buildWidgetAreaPostId","KIND","POST_TYPE","WIDGET_AREA_ENTITY_TYPE","STORE_NAME","editWidgetsStoreName","EMPTY_INSERTION_POINT","rootClientId","undefined","insertionIndex","getWidgets","select","_widgets$reduce","widgets","getEntityRecords","reduce","allWidgets","widget","id","getWidget","state","getWidgetAreas","query","getWidgetAreaForWidgetId","widgetId","widgetAreas","find","widgetArea","post","getEditedEntityRecord","blockWidgetIds","blocks","map","block","includes","getParentWidgetAreaBlock","clientId","getBlock","getBlockName","getBlockParents","blockParents","widgetAreaClientId","parentClientId","getEditedWidgetAreas","ids","filter","hasEditsForEntityRecord","getReferenceWidgetBlocks","referenceWidgetName","results","_widgetArea","name","attributes","push","isSavingWidgetAreas","widgetAreasIds","isSaving","isSavingEntityRecord","widgetIds","Object","keys","getIsWidgetAreaOpen","widgetAreasOpenState","isInserterOpened","blockInserterPanel","__experimentalGetInsertionPoint","canInsertBlockInWidgetArea","blockName","getBlocks","firstWidgetArea","canInsertBlockType","isListViewOpened","listViewPanel"],"sources":["@wordpress/edit-widgets/src/store/selectors.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { createSelector, createRegistrySelector } from '@wordpress/data';\r\nimport { getWidgetIdFromBlock } from '@wordpress/widgets';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\nimport { store as blockEditorStore } from '@wordpress/block-editor';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport {\r\n\tbuildWidgetsQuery,\r\n\tbuildWidgetAreasQuery,\r\n\tbuildWidgetAreaPostId,\r\n\tKIND,\r\n\tPOST_TYPE,\r\n\tWIDGET_AREA_ENTITY_TYPE,\r\n} from './utils';\r\nimport { STORE_NAME as editWidgetsStoreName } from './constants';\r\n\r\nconst EMPTY_INSERTION_POINT = {\r\n\trootClientId: undefined,\r\n\tinsertionIndex: undefined,\r\n};\r\n\r\n/**\r\n * Returns all API widgets.\r\n *\r\n * @return {Object[]} API List of widgets.\r\n */\r\nexport const getWidgets = createRegistrySelector( ( select ) =>\r\n\tcreateSelector(\r\n\t\t() => {\r\n\t\t\tconst widgets = select( coreStore ).getEntityRecords(\r\n\t\t\t\t'root',\r\n\t\t\t\t'widget',\r\n\t\t\t\tbuildWidgetsQuery()\r\n\t\t\t);\r\n\r\n\t\t\treturn (\r\n\t\t\t\t// Key widgets by their ID.\r\n\t\t\t\twidgets?.reduce(\r\n\t\t\t\t\t( allWidgets, widget ) => ( {\r\n\t\t\t\t\t\t...allWidgets,\r\n\t\t\t\t\t\t[ widget.id ]: widget,\r\n\t\t\t\t\t} ),\r\n\t\t\t\t\t{}\r\n\t\t\t\t) ?? {}\r\n\t\t\t);\r\n\t\t},\r\n\t\t() => [\r\n\t\t\tselect( coreStore ).getEntityRecords(\r\n\t\t\t\t'root',\r\n\t\t\t\t'widget',\r\n\t\t\t\tbuildWidgetsQuery()\r\n\t\t\t),\r\n\t\t]\r\n\t)\r\n);\r\n\r\n/**\r\n * Returns API widget data for a particular widget ID.\r\n *\r\n * @param {number} id Widget ID.\r\n *\r\n * @return {Object} API widget data for a particular widget ID.\r\n */\r\nexport const getWidget = createRegistrySelector(\r\n\t( select ) => ( state, id ) => {\r\n\t\tconst widgets = select( editWidgetsStoreName ).getWidgets();\r\n\t\treturn widgets[ id ];\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns all API widget areas.\r\n *\r\n * @return {Object[]} API List of widget areas.\r\n */\r\nexport const getWidgetAreas = createRegistrySelector( ( select ) => () => {\r\n\tconst query = buildWidgetAreasQuery();\r\n\treturn select( coreStore ).getEntityRecords(\r\n\t\tKIND,\r\n\t\tWIDGET_AREA_ENTITY_TYPE,\r\n\t\tquery\r\n\t);\r\n} );\r\n\r\n/**\r\n * Returns widgetArea containing a block identify by given widgetId\r\n *\r\n * @param {string} widgetId The ID of the widget.\r\n * @return {Object} Containing widget area.\r\n */\r\nexport const getWidgetAreaForWidgetId = createRegistrySelector(\r\n\t( select ) => ( state, widgetId ) => {\r\n\t\tconst widgetAreas = select( editWidgetsStoreName ).getWidgetAreas();\r\n\t\treturn widgetAreas.find( ( widgetArea ) => {\r\n\t\t\tconst post = select( coreStore ).getEditedEntityRecord(\r\n\t\t\t\tKIND,\r\n\t\t\t\tPOST_TYPE,\r\n\t\t\t\tbuildWidgetAreaPostId( widgetArea.id )\r\n\t\t\t);\r\n\t\t\tconst blockWidgetIds = post.blocks.map( ( block ) =>\r\n\t\t\t\tgetWidgetIdFromBlock( block )\r\n\t\t\t);\r\n\t\t\treturn blockWidgetIds.includes( widgetId );\r\n\t\t} );\r\n\t}\r\n);\r\n\r\n/**\r\n * Given a child client id, returns the parent widget area block.\r\n *\r\n * @param {string} clientId The client id of a block in a widget area.\r\n *\r\n * @return {WPBlock} The widget area block.\r\n */\r\nexport const getParentWidgetAreaBlock = createRegistrySelector(\r\n\t( select ) => ( state, clientId ) => {\r\n\t\tconst { getBlock, getBlockName, getBlockParents } =\r\n\t\t\tselect( blockEditorStore );\r\n\t\tconst blockParents = getBlockParents( clientId );\r\n\t\tconst widgetAreaClientId = blockParents.find(\r\n\t\t\t( parentClientId ) =>\r\n\t\t\t\tgetBlockName( parentClientId ) === 'core/widget-area'\r\n\t\t);\r\n\t\treturn getBlock( widgetAreaClientId );\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns all edited widget area entity records.\r\n *\r\n * @return {Object[]} List of edited widget area entity records.\r\n */\r\nexport const getEditedWidgetAreas = createRegistrySelector(\r\n\t( select ) => ( state, ids ) => {\r\n\t\tlet widgetAreas = select( editWidgetsStoreName ).getWidgetAreas();\r\n\t\tif ( ! widgetAreas ) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\tif ( ids ) {\r\n\t\t\twidgetAreas = widgetAreas.filter( ( { id } ) =>\r\n\t\t\t\tids.includes( id )\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn widgetAreas\r\n\t\t\t.filter( ( { id } ) =>\r\n\t\t\t\tselect( coreStore ).hasEditsForEntityRecord(\r\n\t\t\t\t\tKIND,\r\n\t\t\t\t\tPOST_TYPE,\r\n\t\t\t\t\tbuildWidgetAreaPostId( id )\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t\t.map( ( { id } ) =>\r\n\t\t\t\tselect( coreStore ).getEditedEntityRecord(\r\n\t\t\t\t\tKIND,\r\n\t\t\t\t\tWIDGET_AREA_ENTITY_TYPE,\r\n\t\t\t\t\tid\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns all blocks representing reference widgets.\r\n *\r\n * @param {string} referenceWidgetName Optional. If given, only reference widgets with this name will be returned.\r\n * @return {Array}  List of all blocks representing reference widgets\r\n */\r\nexport const getReferenceWidgetBlocks = createRegistrySelector(\r\n\t( select ) =>\r\n\t\t( state, referenceWidgetName = null ) => {\r\n\t\t\tconst results = [];\r\n\t\t\tconst widgetAreas = select( editWidgetsStoreName ).getWidgetAreas();\r\n\t\t\tfor ( const _widgetArea of widgetAreas ) {\r\n\t\t\t\tconst post = select( coreStore ).getEditedEntityRecord(\r\n\t\t\t\t\tKIND,\r\n\t\t\t\t\tPOST_TYPE,\r\n\t\t\t\t\tbuildWidgetAreaPostId( _widgetArea.id )\r\n\t\t\t\t);\r\n\t\t\t\tfor ( const block of post.blocks ) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tblock.name === 'core/legacy-widget' &&\r\n\t\t\t\t\t\t( ! referenceWidgetName ||\r\n\t\t\t\t\t\t\tblock.attributes?.referenceWidgetName ===\r\n\t\t\t\t\t\t\t\treferenceWidgetName )\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tresults.push( block );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn results;\r\n\t\t}\r\n);\r\n\r\n/**\r\n * Returns true if any widget area is currently being saved.\r\n *\r\n * @return {boolean} True if any widget area is currently being saved. False otherwise.\r\n */\r\nexport const isSavingWidgetAreas = createRegistrySelector( ( select ) => () => {\r\n\tconst widgetAreasIds = select( editWidgetsStoreName )\r\n\t\t.getWidgetAreas()\r\n\t\t?.map( ( { id } ) => id );\r\n\tif ( ! widgetAreasIds ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfor ( const id of widgetAreasIds ) {\r\n\t\tconst isSaving = select( coreStore ).isSavingEntityRecord(\r\n\t\t\tKIND,\r\n\t\t\tWIDGET_AREA_ENTITY_TYPE,\r\n\t\t\tid\r\n\t\t);\r\n\t\tif ( isSaving ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\tconst widgetIds = [\r\n\t\t...Object.keys( select( editWidgetsStoreName ).getWidgets() ),\r\n\t\tundefined, // account for new widgets without an ID\r\n\t];\r\n\tfor ( const id of widgetIds ) {\r\n\t\tconst isSaving = select( coreStore ).isSavingEntityRecord(\r\n\t\t\t'root',\r\n\t\t\t'widget',\r\n\t\t\tid\r\n\t\t);\r\n\t\tif ( isSaving ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\treturn false;\r\n} );\r\n\r\n/**\r\n * Gets whether the widget area is opened.\r\n *\r\n * @param {Array}  state    The open state of the widget areas.\r\n * @param {string} clientId The clientId of the widget area.\r\n *\r\n * @return {boolean} True if the widget area is open.\r\n */\r\nexport const getIsWidgetAreaOpen = ( state, clientId ) => {\r\n\tconst { widgetAreasOpenState } = state;\r\n\treturn !! widgetAreasOpenState[ clientId ];\r\n};\r\n\r\n/**\r\n * Returns true if the inserter is opened.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the inserter is opened.\r\n */\r\nexport function isInserterOpened( state ) {\r\n\treturn !! state.blockInserterPanel;\r\n}\r\n\r\n/**\r\n * Get the insertion point for the inserter.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Object} The root client ID and index to insert at.\r\n */\r\nexport function __experimentalGetInsertionPoint( state ) {\r\n\tif ( typeof state.blockInserterPanel === 'boolean' ) {\r\n\t\treturn EMPTY_INSERTION_POINT;\r\n\t}\r\n\r\n\treturn state.blockInserterPanel;\r\n}\r\n\r\n/**\r\n * Returns true if a block can be inserted into a widget area.\r\n *\r\n * @param {Array}  state     The open state of the widget areas.\r\n * @param {string} blockName The name of the block being inserted.\r\n *\r\n * @return {boolean} True if the block can be inserted in a widget area.\r\n */\r\nexport const canInsertBlockInWidgetArea = createRegistrySelector(\r\n\t( select ) => ( state, blockName ) => {\r\n\t\t// Widget areas are always top-level blocks, which getBlocks will return.\r\n\t\tconst widgetAreas = select( blockEditorStore ).getBlocks();\r\n\r\n\t\t// Makes an assumption that a block that can be inserted into one\r\n\t\t// widget area can be inserted into any widget area. Uses the first\r\n\t\t// widget area for testing whether the block can be inserted.\r\n\t\tconst [ firstWidgetArea ] = widgetAreas;\r\n\t\treturn select( blockEditorStore ).canInsertBlockType(\r\n\t\t\tblockName,\r\n\t\t\tfirstWidgetArea.clientId\r\n\t\t);\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if the list view is opened.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the list view is opened.\r\n */\r\nexport function isListViewOpened( state ) {\r\n\treturn state.listViewPanel;\r\n}\r\n"],"mappings":"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","ignoreList":[]}