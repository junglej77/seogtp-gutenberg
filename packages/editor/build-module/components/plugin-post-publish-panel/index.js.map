{"version":3,"names":["usePluginContext","createSlotFill","PanelBody","jsx","_jsx","Fill","Slot","PluginPostPublishPanel","children","className","title","initialOpen","icon","pluginIcon"],"sources":["@wordpress/editor/src/components/plugin-post-publish-panel/index.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { usePluginContext } from '@wordpress/plugins';\r\nimport { createSlotFill, PanelBody } from '@wordpress/components';\r\n\r\nconst { Fill, Slot } = createSlotFill( 'PluginPostPublishPanel' );\r\n\r\n/**\r\n * Renders provided content to the post-publish panel in the publish flow\r\n * (side panel that opens after a user publishes the post).\r\n *\r\n * @param {Object}                props                                 Component properties.\r\n * @param {string}                [props.className]                     An optional class name added to the panel.\r\n * @param {string}                [props.title]                         Title displayed at the top of the panel.\r\n * @param {boolean}               [props.initialOpen=false]             Whether to have the panel initially opened. When no title is provided it is always opened.\r\n * @param {WPBlockTypeIconRender} [props.icon=inherits from the plugin] The [Dashicon](https://developer.wordpress.org/resource/dashicons/) icon slug string, or an SVG WP element, to be rendered when the sidebar is pinned to toolbar.\r\n * @param {Element}               props.children                        Children to be rendered\r\n *\r\n * @example\r\n * ```jsx\r\n * // Using ESNext syntax\r\n * import { __ } from '@wordpress/i18n';\r\n * import { PluginPostPublishPanel } from '@wordpress/editor';\r\n *\r\n * const MyPluginPostPublishPanel = () => (\r\n * \t<PluginPostPublishPanel\r\n * \t\tclassName=\"my-plugin-post-publish-panel\"\r\n * \t\ttitle={ __( 'My panel title' ) }\r\n * \t\tinitialOpen={ true }\r\n * \t>\r\n *         { __( 'My panel content' ) }\r\n * \t</PluginPostPublishPanel>\r\n * );\r\n * ```\r\n *\r\n * @return {Component} The component to be rendered.\r\n */\r\nconst PluginPostPublishPanel = ( {\r\n\tchildren,\r\n\tclassName,\r\n\ttitle,\r\n\tinitialOpen = false,\r\n\ticon,\r\n} ) => {\r\n\tconst { icon: pluginIcon } = usePluginContext();\r\n\r\n\treturn (\r\n\t\t<Fill>\r\n\t\t\t<PanelBody\r\n\t\t\t\tclassName={ className }\r\n\t\t\t\tinitialOpen={ initialOpen || ! title }\r\n\t\t\t\ttitle={ title }\r\n\t\t\t\ticon={ icon ?? pluginIcon }\r\n\t\t\t>\r\n\t\t\t\t{ children }\r\n\t\t\t</PanelBody>\r\n\t\t</Fill>\r\n\t);\r\n};\r\n\r\nPluginPostPublishPanel.Slot = Slot;\r\n\r\nexport default PluginPostPublishPanel;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,cAAc,EAAEC,SAAS,QAAQ,uBAAuB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAElE,MAAM;EAAEC,IAAI;EAAEC;AAAK,CAAC,GAAGL,cAAc,CAAE,wBAAyB,CAAC;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMM,sBAAsB,GAAGA,CAAE;EAChCC,QAAQ;EACRC,SAAS;EACTC,KAAK;EACLC,WAAW,GAAG,KAAK;EACnBC;AACD,CAAC,KAAM;EACN,MAAM;IAAEA,IAAI,EAAEC;EAAW,CAAC,GAAGb,gBAAgB,CAAC,CAAC;EAE/C,oBACCI,IAAA,CAACC,IAAI;IAAAG,QAAA,eACJJ,IAAA,CAACF,SAAS;MACTO,SAAS,EAAGA,SAAW;MACvBE,WAAW,EAAGA,WAAW,IAAI,CAAED,KAAO;MACtCA,KAAK,EAAGA,KAAO;MACfE,IAAI,EAAGA,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAIC,UAAY;MAAAL,QAAA,EAEzBA;IAAQ,CACA;EAAC,CACP,CAAC;AAET,CAAC;AAEDD,sBAAsB,CAACD,IAAI,GAAGA,IAAI;AAElC,eAAeC,sBAAsB","ignoreList":[]}