{"version":3,"names":["__experimentalText","Text","useSelect","__","_x","_n","sprintf","count","wordCount","useMemo","store","coreStore","editorStore","TEMPLATE_POST_TYPE","TEMPLATE_PART_POST_TYPE","jsx","_jsx","AVERAGE_READING_RATE","PostContentInformation","postContent","select","getEditedPostAttribute","getCurrentPostType","getCurrentPostId","canUser","getEntityRecord","siteSettings","kind","name","undefined","postType","_id","isPostsPage","page_for_posts","showPostContentInfo","includes","wordCountType","wordsCounted","readingTime","Math","round","wordsCountText","toLocaleString","minutesText","className","children"],"sources":["@wordpress/editor/src/components/post-content-information/index.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { __experimentalText as Text } from '@wordpress/components';\r\nimport { useSelect } from '@wordpress/data';\r\nimport { __, _x, _n, sprintf } from '@wordpress/i18n';\r\nimport { count as wordCount } from '@wordpress/wordcount';\r\nimport { useMemo } from '@wordpress/element';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store as editorStore } from '../../store';\r\nimport {\r\n\tTEMPLATE_POST_TYPE,\r\n\tTEMPLATE_PART_POST_TYPE,\r\n} from '../../store/constants';\r\n\r\n// Taken from packages/editor/src/components/time-to-read/index.js.\r\nconst AVERAGE_READING_RATE = 189;\r\n\r\n// This component renders the wordcount and reading time for the post.\r\nexport default function PostContentInformation() {\r\n\tconst { postContent } = useSelect( ( select ) => {\r\n\t\tconst { getEditedPostAttribute, getCurrentPostType, getCurrentPostId } =\r\n\t\t\tselect( editorStore );\r\n\t\tconst { canUser } = select( coreStore );\r\n\t\tconst { getEntityRecord } = select( coreStore );\r\n\t\tconst siteSettings = canUser( 'read', {\r\n\t\t\tkind: 'root',\r\n\t\t\tname: 'site',\r\n\t\t} )\r\n\t\t\t? getEntityRecord( 'root', 'site' )\r\n\t\t\t: undefined;\r\n\t\tconst postType = getCurrentPostType();\r\n\t\tconst _id = getCurrentPostId();\r\n\t\tconst isPostsPage = +_id === siteSettings?.page_for_posts;\r\n\t\tconst showPostContentInfo =\r\n\t\t\t! isPostsPage &&\r\n\t\t\t! [ TEMPLATE_POST_TYPE, TEMPLATE_PART_POST_TYPE ].includes(\r\n\t\t\t\tpostType\r\n\t\t\t);\r\n\t\treturn {\r\n\t\t\tpostContent:\r\n\t\t\t\tshowPostContentInfo && getEditedPostAttribute( 'content' ),\r\n\t\t};\r\n\t}, [] );\r\n\r\n\t/*\r\n\t * translators: If your word count is based on single characters (e.g. East Asian characters),\r\n\t * enter 'characters_excluding_spaces' or 'characters_including_spaces'. Otherwise, enter 'words'.\r\n\t * Do not translate into your own language.\r\n\t */\r\n\tconst wordCountType = _x( 'words', 'Word count type. Do not translate!' );\r\n\tconst wordsCounted = useMemo(\r\n\t\t() => ( postContent ? wordCount( postContent, wordCountType ) : 0 ),\r\n\t\t[ postContent, wordCountType ]\r\n\t);\r\n\tif ( ! wordsCounted ) {\r\n\t\treturn null;\r\n\t}\r\n\tconst readingTime = Math.round( wordsCounted / AVERAGE_READING_RATE );\r\n\tconst wordsCountText = sprintf(\r\n\t\t// translators: %s: the number of words in the post.\r\n\t\t_n( '%s word', '%s words', wordsCounted ),\r\n\t\twordsCounted.toLocaleString()\r\n\t);\r\n\tconst minutesText =\r\n\t\treadingTime <= 1\r\n\t\t\t? __( '1 minute' )\r\n\t\t\t: sprintf(\r\n\t\t\t\t\t// translators: %s: the number of minutes to read the post.\r\n\t\t\t\t\t_n( '%s minute', '%s minutes', readingTime ),\r\n\t\t\t\t\treadingTime.toLocaleString()\r\n\t\t\t  );\r\n\treturn (\r\n\t\t<div className=\"editor-post-content-information\">\r\n\t\t\t<Text>\r\n\t\t\t\t{ sprintf(\r\n\t\t\t\t\t/* translators: 1: How many words a post has. 2: the number of minutes to read the post (e.g. 130 words, 2 minutes read time.) */\r\n\t\t\t\t\t__( '%1$s, %2$s read time.' ),\r\n\t\t\t\t\twordsCountText,\r\n\t\t\t\t\tminutesText\r\n\t\t\t\t) }\r\n\t\t\t</Text>\r\n\t\t</div>\r\n\t);\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,kBAAkB,IAAIC,IAAI,QAAQ,uBAAuB;AAClE,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,OAAO,QAAQ,iBAAiB;AACrD,SAASC,KAAK,IAAIC,SAAS,QAAQ,sBAAsB;AACzD,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,KAAK,IAAIC,SAAS,QAAQ,sBAAsB;;AAEzD;AACA;AACA;AACA,SAASD,KAAK,IAAIE,WAAW,QAAQ,aAAa;AAClD,SACCC,kBAAkB,EAClBC,uBAAuB,QACjB,uBAAuB;;AAE9B;AAAA,SAAAC,GAAA,IAAAC,IAAA;AACA,MAAMC,oBAAoB,GAAG,GAAG;;AAEhC;AACA,eAAe,SAASC,sBAAsBA,CAAA,EAAG;EAChD,MAAM;IAAEC;EAAY,CAAC,GAAGjB,SAAS,CAAIkB,MAAM,IAAM;IAChD,MAAM;MAAEC,sBAAsB;MAAEC,kBAAkB;MAAEC;IAAiB,CAAC,GACrEH,MAAM,CAAER,WAAY,CAAC;IACtB,MAAM;MAAEY;IAAQ,CAAC,GAAGJ,MAAM,CAAET,SAAU,CAAC;IACvC,MAAM;MAAEc;IAAgB,CAAC,GAAGL,MAAM,CAAET,SAAU,CAAC;IAC/C,MAAMe,YAAY,GAAGF,OAAO,CAAE,MAAM,EAAE;MACrCG,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE;IACP,CAAE,CAAC,GACAH,eAAe,CAAE,MAAM,EAAE,MAAO,CAAC,GACjCI,SAAS;IACZ,MAAMC,QAAQ,GAAGR,kBAAkB,CAAC,CAAC;IACrC,MAAMS,GAAG,GAAGR,gBAAgB,CAAC,CAAC;IAC9B,MAAMS,WAAW,GAAG,CAACD,GAAG,KAAKL,YAAY,EAAEO,cAAc;IACzD,MAAMC,mBAAmB,GACxB,CAAEF,WAAW,IACb,CAAE,CAAEnB,kBAAkB,EAAEC,uBAAuB,CAAE,CAACqB,QAAQ,CACzDL,QACD,CAAC;IACF,OAAO;MACNX,WAAW,EACVe,mBAAmB,IAAIb,sBAAsB,CAAE,SAAU;IAC3D,CAAC;EACF,CAAC,EAAE,EAAG,CAAC;;EAEP;AACD;AACA;AACA;AACA;EACC,MAAMe,aAAa,GAAGhC,EAAE,CAAE,OAAO,EAAE,oCAAqC,CAAC;EACzE,MAAMiC,YAAY,GAAG5B,OAAO,CAC3B,MAAQU,WAAW,GAAGX,SAAS,CAAEW,WAAW,EAAEiB,aAAc,CAAC,GAAG,CAAG,EACnE,CAAEjB,WAAW,EAAEiB,aAAa,CAC7B,CAAC;EACD,IAAK,CAAEC,YAAY,EAAG;IACrB,OAAO,IAAI;EACZ;EACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAAEH,YAAY,GAAGpB,oBAAqB,CAAC;EACrE,MAAMwB,cAAc,GAAGnC,OAAO;EAC7B;EACAD,EAAE,CAAE,SAAS,EAAE,UAAU,EAAEgC,YAAa,CAAC,EACzCA,YAAY,CAACK,cAAc,CAAC,CAC7B,CAAC;EACD,MAAMC,WAAW,GAChBL,WAAW,IAAI,CAAC,GACbnC,EAAE,CAAE,UAAW,CAAC,GAChBG,OAAO;EACP;EACAD,EAAE,CAAE,WAAW,EAAE,YAAY,EAAEiC,WAAY,CAAC,EAC5CA,WAAW,CAACI,cAAc,CAAC,CAC3B,CAAC;EACL,oBACC1B,IAAA;IAAK4B,SAAS,EAAC,iCAAiC;IAAAC,QAAA,eAC/C7B,IAAA,CAACf,IAAI;MAAA4C,QAAA,EACFvC,OAAO,EACR;MACAH,EAAE,CAAE,uBAAwB,CAAC,EAC7BsC,cAAc,EACdE,WACD;IAAC,CACI;EAAC,CACH,CAAC;AAER","ignoreList":[]}