{"version":3,"names":["__","ExternalLink","TextareaControl","useDispatch","useSelect","useState","decodeEntities","store","editorStore","jsx","_jsx","PostExcerpt","hideLabelFromVision","updateOnBlur","excerpt","shouldUseDescriptionLabel","usedAttribute","select","getCurrentPostType","getEditedPostAttribute","postType","_usedAttribute","includes","editPost","localExcerpt","setLocalExcerpt","updatePost","value","label","className","children","__nextHasNoMarginBottom","onChange","onBlur","undefined","help","href"],"sources":["@wordpress/editor/src/components/post-excerpt/index.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { __ } from '@wordpress/i18n';\r\nimport { ExternalLink, TextareaControl } from '@wordpress/components';\r\nimport { useDispatch, useSelect } from '@wordpress/data';\r\nimport { useState } from '@wordpress/element';\r\nimport { decodeEntities } from '@wordpress/html-entities';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store as editorStore } from '../../store';\r\n\r\n/**\r\n * Renders an editable textarea for the post excerpt.\r\n * Templates, template parts and patterns use the `excerpt` field as a description semantically.\r\n * Additionally templates and template parts override the `excerpt` field as `description` in\r\n * REST API. So this component handles proper labeling and updating the edited entity.\r\n *\r\n * @param {Object}  props                             - Component props.\r\n * @param {boolean} [props.hideLabelFromVision=false] - Whether to visually hide the textarea's label.\r\n * @param {boolean} [props.updateOnBlur=false]        - Whether to update the post on change or use local state and update on blur.\r\n */\r\nexport default function PostExcerpt( {\r\n\thideLabelFromVision = false,\r\n\tupdateOnBlur = false,\r\n} ) {\r\n\tconst { excerpt, shouldUseDescriptionLabel, usedAttribute } = useSelect(\r\n\t\t( select ) => {\r\n\t\t\tconst { getCurrentPostType, getEditedPostAttribute } =\r\n\t\t\t\tselect( editorStore );\r\n\t\t\tconst postType = getCurrentPostType();\r\n\t\t\t// This special case is unfortunate, but the REST API of wp_template and wp_template_part\r\n\t\t\t// support the excerpt field throught the \"description\" field rather than \"excerpt\".\r\n\t\t\tconst _usedAttribute = [\r\n\t\t\t\t'wp_template',\r\n\t\t\t\t'wp_template_part',\r\n\t\t\t].includes( postType )\r\n\t\t\t\t? 'description'\r\n\t\t\t\t: 'excerpt';\r\n\t\t\treturn {\r\n\t\t\t\texcerpt: getEditedPostAttribute( _usedAttribute ),\r\n\t\t\t\t// There are special cases where we want to label the excerpt as a description.\r\n\t\t\t\tshouldUseDescriptionLabel: [\r\n\t\t\t\t\t'wp_template',\r\n\t\t\t\t\t'wp_template_part',\r\n\t\t\t\t\t'wp_block',\r\n\t\t\t\t].includes( postType ),\r\n\t\t\t\tusedAttribute: _usedAttribute,\r\n\t\t\t};\r\n\t\t},\r\n\t\t[]\r\n\t);\r\n\tconst { editPost } = useDispatch( editorStore );\r\n\tconst [ localExcerpt, setLocalExcerpt ] = useState(\r\n\t\tdecodeEntities( excerpt )\r\n\t);\r\n\tconst updatePost = ( value ) => {\r\n\t\teditPost( { [ usedAttribute ]: value } );\r\n\t};\r\n\tconst label = shouldUseDescriptionLabel\r\n\t\t? __( 'Write a description (optional)' )\r\n\t\t: __( 'Write an excerpt (optional)' );\r\n\r\n\treturn (\r\n\t\t<div className=\"editor-post-excerpt\">\r\n\t\t\t<TextareaControl\r\n\t\t\t\t__nextHasNoMarginBottom\r\n\t\t\t\tlabel={ label }\r\n\t\t\t\thideLabelFromVision={ hideLabelFromVision }\r\n\t\t\t\tclassName=\"editor-post-excerpt__textarea\"\r\n\t\t\t\tonChange={ updateOnBlur ? setLocalExcerpt : updatePost }\r\n\t\t\t\tonBlur={\r\n\t\t\t\t\tupdateOnBlur ? () => updatePost( localExcerpt ) : undefined\r\n\t\t\t\t}\r\n\t\t\t\tvalue={ updateOnBlur ? localExcerpt : excerpt }\r\n\t\t\t\thelp={\r\n\t\t\t\t\t! shouldUseDescriptionLabel ? (\r\n\t\t\t\t\t\t<ExternalLink\r\n\t\t\t\t\t\t\thref={ __(\r\n\t\t\t\t\t\t\t\t'https://wordpress.org/documentation/article/page-post-settings-sidebar/#excerpt'\r\n\t\t\t\t\t\t\t) }\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{ __( 'Learn more about manual excerpts' ) }\r\n\t\t\t\t\t\t</ExternalLink>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t__( 'Write a description' )\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,EAAE,QAAQ,iBAAiB;AACpC,SAASC,YAAY,EAAEC,eAAe,QAAQ,uBAAuB;AACrE,SAASC,WAAW,EAAEC,SAAS,QAAQ,iBAAiB;AACxD,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,cAAc,QAAQ,0BAA0B;;AAEzD;AACA;AACA;AACA,SAASC,KAAK,IAAIC,WAAW,QAAQ,aAAa;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA,SAAAC,GAAA,IAAAC,IAAA;AAUA,eAAe,SAASC,WAAWA,CAAE;EACpCC,mBAAmB,GAAG,KAAK;EAC3BC,YAAY,GAAG;AAChB,CAAC,EAAG;EACH,MAAM;IAAEC,OAAO;IAAEC,yBAAyB;IAAEC;EAAc,CAAC,GAAGZ,SAAS,CACpEa,MAAM,IAAM;IACb,MAAM;MAAEC,kBAAkB;MAAEC;IAAuB,CAAC,GACnDF,MAAM,CAAET,WAAY,CAAC;IACtB,MAAMY,QAAQ,GAAGF,kBAAkB,CAAC,CAAC;IACrC;IACA;IACA,MAAMG,cAAc,GAAG,CACtB,aAAa,EACb,kBAAkB,CAClB,CAACC,QAAQ,CAAEF,QAAS,CAAC,GACnB,aAAa,GACb,SAAS;IACZ,OAAO;MACNN,OAAO,EAAEK,sBAAsB,CAAEE,cAAe,CAAC;MACjD;MACAN,yBAAyB,EAAE,CAC1B,aAAa,EACb,kBAAkB,EAClB,UAAU,CACV,CAACO,QAAQ,CAAEF,QAAS,CAAC;MACtBJ,aAAa,EAAEK;IAChB,CAAC;EACF,CAAC,EACD,EACD,CAAC;EACD,MAAM;IAAEE;EAAS,CAAC,GAAGpB,WAAW,CAAEK,WAAY,CAAC;EAC/C,MAAM,CAAEgB,YAAY,EAAEC,eAAe,CAAE,GAAGpB,QAAQ,CACjDC,cAAc,CAAEQ,OAAQ,CACzB,CAAC;EACD,MAAMY,UAAU,GAAKC,KAAK,IAAM;IAC/BJ,QAAQ,CAAE;MAAE,CAAEP,aAAa,GAAIW;IAAM,CAAE,CAAC;EACzC,CAAC;EACD,MAAMC,KAAK,GAAGb,yBAAyB,GACpCf,EAAE,CAAE,gCAAiC,CAAC,GACtCA,EAAE,CAAE,6BAA8B,CAAC;EAEtC,oBACCU,IAAA;IAAKmB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,eACnCpB,IAAA,CAACR,eAAe;MACf6B,uBAAuB;MACvBH,KAAK,EAAGA,KAAO;MACfhB,mBAAmB,EAAGA,mBAAqB;MAC3CiB,SAAS,EAAC,+BAA+B;MACzCG,QAAQ,EAAGnB,YAAY,GAAGY,eAAe,GAAGC,UAAY;MACxDO,MAAM,EACLpB,YAAY,GAAG,MAAMa,UAAU,CAAEF,YAAa,CAAC,GAAGU,SAClD;MACDP,KAAK,EAAGd,YAAY,GAAGW,YAAY,GAAGV,OAAS;MAC/CqB,IAAI,EACH,CAAEpB,yBAAyB,gBAC1BL,IAAA,CAACT,YAAY;QACZmC,IAAI,EAAGpC,EAAE,CACR,iFACD,CAAG;QAAA8B,QAAA,EAED9B,EAAE,CAAE,kCAAmC;MAAC,CAC7B,CAAC,GAEfA,EAAE,CAAE,qBAAsB;IAE3B,CACD;EAAC,CACE,CAAC;AAER","ignoreList":[]}