{"version":3,"names":["__","_n","_x","sprintf","useMemo","useState","store","noticesStore","Button","CheckboxControl","TextControl","TreeSelect","withFilters","Flex","FlexItem","SearchControl","useDispatch","useSelect","useDebounce","coreStore","speak","decodeEntities","buildTermsTree","editorStore","jsx","_jsx","jsxs","_jsxs","DEFAULT_QUERY","per_page","orderby","order","_fields","context","MIN_TERMS_COUNT_FOR_FILTER","EMPTY_ARRAY","sortBySelected","termsTree","terms","treeHasSelection","termTree","indexOf","id","undefined","children","map","filter","child","length","termOrChildIsSelected","termA","termB","termASelected","termBSelected","newTermTree","sort","findTerm","parent","name","find","term","parseInt","toLowerCase","getFilterMatcher","filterValue","matchTermsForFilter","originalTerm","HierarchicalTermSelector","slug","_taxonomy$labels$sear","_taxonomy$name","adding","setAdding","formName","setFormName","formParent","setFormParent","showForm","setShowForm","setFilterValue","filteredTermsTree","setFilteredTermsTree","debouncedSpeak","hasCreateAction","hasAssignAction","loading","availableTerms","taxonomy","select","_post$_links","_post$_links2","getCurrentPost","getEditedPostAttribute","getTaxonomy","getEntityRecords","isResolving","_taxonomy","post","_links","rest_base","editPost","saveEntityRecord","availableTermsTree","createErrorNotice","addTerm","throwOnError","onUpdateTerms","termIds","onChange","termId","hasTerm","includes","newTerms","onChangeFormName","value","onChangeFormParent","parentId","onToggleForm","onAddTerm","event","_taxonomy$labels$sing","preventDefault","existingTerm","some","newTerm","error","message","type","defaultName","termAddedMessage","labels","singular_name","setFilter","newFilteredTermsTree","getResultCount","count","i","resultCount","resultsFoundMessage","renderTerms","renderedTerms","className","__nextHasNoMarginBottom","checked","label","labelWithFallback","labelProperty","fallbackIsCategory","fallbackIsNotCategory","_taxonomy$labels$labe","newTermButtonLabel","newTermLabel","parentSelectLabel","noParentOption","newTermSubmitLabel","filterLabel","search_items","groupLabel","showFilter","direction","gap","__next40pxDefaultSize","tabIndex","role","onClick","variant","onSubmit","required","noOptionLabel","selectedId","tree"],"sources":["@wordpress/editor/src/components/post-taxonomies/hierarchical-term-selector.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { __, _n, _x, sprintf } from '@wordpress/i18n';\r\nimport { useMemo, useState } from '@wordpress/element';\r\nimport { store as noticesStore } from '@wordpress/notices';\r\nimport {\r\n\tButton,\r\n\tCheckboxControl,\r\n\tTextControl,\r\n\tTreeSelect,\r\n\twithFilters,\r\n\tFlex,\r\n\tFlexItem,\r\n\tSearchControl,\r\n} from '@wordpress/components';\r\nimport { useDispatch, useSelect } from '@wordpress/data';\r\nimport { useDebounce } from '@wordpress/compose';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\nimport { speak } from '@wordpress/a11y';\r\nimport { decodeEntities } from '@wordpress/html-entities';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { buildTermsTree } from '../../utils/terms';\r\nimport { store as editorStore } from '../../store';\r\n\r\n/**\r\n * Module Constants\r\n */\r\nconst DEFAULT_QUERY = {\r\n\tper_page: -1,\r\n\torderby: 'name',\r\n\torder: 'asc',\r\n\t_fields: 'id,name,parent',\r\n\tcontext: 'view',\r\n};\r\n\r\nconst MIN_TERMS_COUNT_FOR_FILTER = 8;\r\n\r\nconst EMPTY_ARRAY = [];\r\n\r\n/**\r\n * Sort Terms by Selected.\r\n *\r\n * @param {Object[]} termsTree Array of terms in tree format.\r\n * @param {number[]} terms     Selected terms.\r\n *\r\n * @return {Object[]} Sorted array of terms.\r\n */\r\nexport function sortBySelected( termsTree, terms ) {\r\n\tconst treeHasSelection = ( termTree ) => {\r\n\t\tif ( terms.indexOf( termTree.id ) !== -1 ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif ( undefined === termTree.children ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\ttermTree.children\r\n\t\t\t\t.map( treeHasSelection )\r\n\t\t\t\t.filter( ( child ) => child ).length > 0\r\n\t\t);\r\n\t};\r\n\tconst termOrChildIsSelected = ( termA, termB ) => {\r\n\t\tconst termASelected = treeHasSelection( termA );\r\n\t\tconst termBSelected = treeHasSelection( termB );\r\n\r\n\t\tif ( termASelected === termBSelected ) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tif ( termASelected && ! termBSelected ) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\tif ( ! termASelected && termBSelected ) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t};\r\n\tconst newTermTree = [ ...termsTree ];\r\n\tnewTermTree.sort( termOrChildIsSelected );\r\n\treturn newTermTree;\r\n}\r\n\r\n/**\r\n * Find term by parent id or name.\r\n *\r\n * @param {Object[]}      terms  Array of Terms.\r\n * @param {number|string} parent id.\r\n * @param {string}        name   Term name.\r\n * @return {Object} Term object.\r\n */\r\nexport function findTerm( terms, parent, name ) {\r\n\treturn terms.find( ( term ) => {\r\n\t\treturn (\r\n\t\t\t( ( ! term.parent && ! parent ) ||\r\n\t\t\t\tparseInt( term.parent ) === parseInt( parent ) ) &&\r\n\t\t\tterm.name.toLowerCase() === name.toLowerCase()\r\n\t\t);\r\n\t} );\r\n}\r\n\r\n/**\r\n * Get filter matcher function.\r\n *\r\n * @param {string} filterValue Filter value.\r\n * @return {(function(Object): (Object|boolean))} Matcher function.\r\n */\r\nexport function getFilterMatcher( filterValue ) {\r\n\tconst matchTermsForFilter = ( originalTerm ) => {\r\n\t\tif ( '' === filterValue ) {\r\n\t\t\treturn originalTerm;\r\n\t\t}\r\n\r\n\t\t// Shallow clone, because we'll be filtering the term's children and\r\n\t\t// don't want to modify the original term.\r\n\t\tconst term = { ...originalTerm };\r\n\r\n\t\t// Map and filter the children, recursive so we deal with grandchildren\r\n\t\t// and any deeper levels.\r\n\t\tif ( term.children.length > 0 ) {\r\n\t\t\tterm.children = term.children\r\n\t\t\t\t.map( matchTermsForFilter )\r\n\t\t\t\t.filter( ( child ) => child );\r\n\t\t}\r\n\r\n\t\t// If the term's name contains the filterValue, or it has children\r\n\t\t// (i.e. some child matched at some point in the tree) then return it.\r\n\t\tif (\r\n\t\t\t-1 !==\r\n\t\t\t\tterm.name.toLowerCase().indexOf( filterValue.toLowerCase() ) ||\r\n\t\t\tterm.children.length > 0\r\n\t\t) {\r\n\t\t\treturn term;\r\n\t\t}\r\n\r\n\t\t// Otherwise, return false. After mapping, the list of terms will need\r\n\t\t// to have false values filtered out.\r\n\t\treturn false;\r\n\t};\r\n\treturn matchTermsForFilter;\r\n}\r\n\r\n/**\r\n * Hierarchical term selector.\r\n *\r\n * @param {Object} props      Component props.\r\n * @param {string} props.slug Taxonomy slug.\r\n * @return {Element}        Hierarchical term selector component.\r\n */\r\nexport function HierarchicalTermSelector( { slug } ) {\r\n\tconst [ adding, setAdding ] = useState( false );\r\n\tconst [ formName, setFormName ] = useState( '' );\r\n\t/**\r\n\t * @type {[number|'', Function]}\r\n\t */\r\n\tconst [ formParent, setFormParent ] = useState( '' );\r\n\tconst [ showForm, setShowForm ] = useState( false );\r\n\tconst [ filterValue, setFilterValue ] = useState( '' );\r\n\tconst [ filteredTermsTree, setFilteredTermsTree ] = useState( [] );\r\n\tconst debouncedSpeak = useDebounce( speak, 500 );\r\n\r\n\tconst {\r\n\t\thasCreateAction,\r\n\t\thasAssignAction,\r\n\t\tterms,\r\n\t\tloading,\r\n\t\tavailableTerms,\r\n\t\ttaxonomy,\r\n\t} = useSelect(\r\n\t\t( select ) => {\r\n\t\t\tconst { getCurrentPost, getEditedPostAttribute } =\r\n\t\t\t\tselect( editorStore );\r\n\t\t\tconst { getTaxonomy, getEntityRecords, isResolving } =\r\n\t\t\t\tselect( coreStore );\r\n\t\t\tconst _taxonomy = getTaxonomy( slug );\r\n\t\t\tconst post = getCurrentPost();\r\n\r\n\t\t\treturn {\r\n\t\t\t\thasCreateAction: _taxonomy\r\n\t\t\t\t\t? post._links?.[\r\n\t\t\t\t\t\t\t'wp:action-create-' + _taxonomy.rest_base\r\n\t\t\t\t\t  ] ?? false\r\n\t\t\t\t\t: false,\r\n\t\t\t\thasAssignAction: _taxonomy\r\n\t\t\t\t\t? post._links?.[\r\n\t\t\t\t\t\t\t'wp:action-assign-' + _taxonomy.rest_base\r\n\t\t\t\t\t  ] ?? false\r\n\t\t\t\t\t: false,\r\n\t\t\t\tterms: _taxonomy\r\n\t\t\t\t\t? getEditedPostAttribute( _taxonomy.rest_base )\r\n\t\t\t\t\t: EMPTY_ARRAY,\r\n\t\t\t\tloading: isResolving( 'getEntityRecords', [\r\n\t\t\t\t\t'taxonomy',\r\n\t\t\t\t\tslug,\r\n\t\t\t\t\tDEFAULT_QUERY,\r\n\t\t\t\t] ),\r\n\t\t\t\tavailableTerms:\r\n\t\t\t\t\tgetEntityRecords( 'taxonomy', slug, DEFAULT_QUERY ) ||\r\n\t\t\t\t\tEMPTY_ARRAY,\r\n\t\t\t\ttaxonomy: _taxonomy,\r\n\t\t\t};\r\n\t\t},\r\n\t\t[ slug ]\r\n\t);\r\n\r\n\tconst { editPost } = useDispatch( editorStore );\r\n\tconst { saveEntityRecord } = useDispatch( coreStore );\r\n\r\n\tconst availableTermsTree = useMemo(\r\n\t\t() => sortBySelected( buildTermsTree( availableTerms ), terms ),\r\n\t\t// Remove `terms` from the dependency list to avoid reordering every time\r\n\t\t// checking or unchecking a term.\r\n\t\t[ availableTerms ]\r\n\t);\r\n\r\n\tconst { createErrorNotice } = useDispatch( noticesStore );\r\n\r\n\tif ( ! hasAssignAction ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Append new term.\r\n\t *\r\n\t * @param {Object} term Term object.\r\n\t * @return {Promise} A promise that resolves to save term object.\r\n\t */\r\n\tconst addTerm = ( term ) => {\r\n\t\treturn saveEntityRecord( 'taxonomy', slug, term, {\r\n\t\t\tthrowOnError: true,\r\n\t\t} );\r\n\t};\r\n\r\n\t/**\r\n\t * Update terms for post.\r\n\t *\r\n\t * @param {number[]} termIds Term ids.\r\n\t */\r\n\tconst onUpdateTerms = ( termIds ) => {\r\n\t\teditPost( { [ taxonomy.rest_base ]: termIds } );\r\n\t};\r\n\r\n\t/**\r\n\t * Handler for checking term.\r\n\t *\r\n\t * @param {number} termId\r\n\t */\r\n\tconst onChange = ( termId ) => {\r\n\t\tconst hasTerm = terms.includes( termId );\r\n\t\tconst newTerms = hasTerm\r\n\t\t\t? terms.filter( ( id ) => id !== termId )\r\n\t\t\t: [ ...terms, termId ];\r\n\t\tonUpdateTerms( newTerms );\r\n\t};\r\n\r\n\tconst onChangeFormName = ( value ) => {\r\n\t\tsetFormName( value );\r\n\t};\r\n\r\n\t/**\r\n\t * Handler for changing form parent.\r\n\t *\r\n\t * @param {number|''} parentId Parent post id.\r\n\t */\r\n\tconst onChangeFormParent = ( parentId ) => {\r\n\t\tsetFormParent( parentId );\r\n\t};\r\n\r\n\tconst onToggleForm = () => {\r\n\t\tsetShowForm( ! showForm );\r\n\t};\r\n\r\n\tconst onAddTerm = async ( event ) => {\r\n\t\tevent.preventDefault();\r\n\t\tif ( formName === '' || adding ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Check if the term we are adding already exists.\r\n\t\tconst existingTerm = findTerm( availableTerms, formParent, formName );\r\n\t\tif ( existingTerm ) {\r\n\t\t\t// If the term we are adding exists but is not selected select it.\r\n\t\t\tif ( ! terms.some( ( term ) => term === existingTerm.id ) ) {\r\n\t\t\t\tonUpdateTerms( [ ...terms, existingTerm.id ] );\r\n\t\t\t}\r\n\r\n\t\t\tsetFormName( '' );\r\n\t\t\tsetFormParent( '' );\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetAdding( true );\r\n\t\tlet newTerm;\r\n\t\ttry {\r\n\t\t\tnewTerm = await addTerm( {\r\n\t\t\t\tname: formName,\r\n\t\t\t\tparent: formParent ? formParent : undefined,\r\n\t\t\t} );\r\n\t\t} catch ( error ) {\r\n\t\t\tcreateErrorNotice( error.message, {\r\n\t\t\t\ttype: 'snackbar',\r\n\t\t\t} );\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst defaultName =\r\n\t\t\tslug === 'category' ? __( 'Category' ) : __( 'Term' );\r\n\t\tconst termAddedMessage = sprintf(\r\n\t\t\t/* translators: %s: taxonomy name */\r\n\t\t\t_x( '%s added', 'term' ),\r\n\t\t\ttaxonomy?.labels?.singular_name ?? defaultName\r\n\t\t);\r\n\t\tspeak( termAddedMessage, 'assertive' );\r\n\t\tsetAdding( false );\r\n\t\tsetFormName( '' );\r\n\t\tsetFormParent( '' );\r\n\t\tonUpdateTerms( [ ...terms, newTerm.id ] );\r\n\t};\r\n\r\n\tconst setFilter = ( value ) => {\r\n\t\tconst newFilteredTermsTree = availableTermsTree\r\n\t\t\t.map( getFilterMatcher( value ) )\r\n\t\t\t.filter( ( term ) => term );\r\n\t\tconst getResultCount = ( termsTree ) => {\r\n\t\t\tlet count = 0;\r\n\t\t\tfor ( let i = 0; i < termsTree.length; i++ ) {\r\n\t\t\t\tcount++;\r\n\t\t\t\tif ( undefined !== termsTree[ i ].children ) {\r\n\t\t\t\t\tcount += getResultCount( termsTree[ i ].children );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn count;\r\n\t\t};\r\n\r\n\t\tsetFilterValue( value );\r\n\t\tsetFilteredTermsTree( newFilteredTermsTree );\r\n\r\n\t\tconst resultCount = getResultCount( newFilteredTermsTree );\r\n\t\tconst resultsFoundMessage = sprintf(\r\n\t\t\t/* translators: %d: number of results */\r\n\t\t\t_n( '%d result found.', '%d results found.', resultCount ),\r\n\t\t\tresultCount\r\n\t\t);\r\n\r\n\t\tdebouncedSpeak( resultsFoundMessage, 'assertive' );\r\n\t};\r\n\r\n\tconst renderTerms = ( renderedTerms ) => {\r\n\t\treturn renderedTerms.map( ( term ) => {\r\n\t\t\treturn (\r\n\t\t\t\t<div\r\n\t\t\t\t\tkey={ term.id }\r\n\t\t\t\t\tclassName=\"editor-post-taxonomies__hierarchical-terms-choice\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<CheckboxControl\r\n\t\t\t\t\t\t__nextHasNoMarginBottom\r\n\t\t\t\t\t\tchecked={ terms.indexOf( term.id ) !== -1 }\r\n\t\t\t\t\t\tonChange={ () => {\r\n\t\t\t\t\t\t\tconst termId = parseInt( term.id, 10 );\r\n\t\t\t\t\t\t\tonChange( termId );\r\n\t\t\t\t\t\t} }\r\n\t\t\t\t\t\tlabel={ decodeEntities( term.name ) }\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{ !! term.children.length && (\r\n\t\t\t\t\t\t<div className=\"editor-post-taxonomies__hierarchical-terms-subchoices\">\r\n\t\t\t\t\t\t\t{ renderTerms( term.children ) }\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t) }\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} );\r\n\t};\r\n\r\n\tconst labelWithFallback = (\r\n\t\tlabelProperty,\r\n\t\tfallbackIsCategory,\r\n\t\tfallbackIsNotCategory\r\n\t) =>\r\n\t\ttaxonomy?.labels?.[ labelProperty ] ??\r\n\t\t( slug === 'category' ? fallbackIsCategory : fallbackIsNotCategory );\r\n\r\n\tconst newTermButtonLabel = labelWithFallback(\r\n\t\t'add_new_item',\r\n\t\t__( 'Add new category' ),\r\n\t\t__( 'Add new term' )\r\n\t);\r\n\tconst newTermLabel = labelWithFallback(\r\n\t\t'new_item_name',\r\n\t\t__( 'Add new category' ),\r\n\t\t__( 'Add new term' )\r\n\t);\r\n\tconst parentSelectLabel = labelWithFallback(\r\n\t\t'parent_item',\r\n\t\t__( 'Parent Category' ),\r\n\t\t__( 'Parent Term' )\r\n\t);\r\n\tconst noParentOption = `— ${ parentSelectLabel } —`;\r\n\tconst newTermSubmitLabel = newTermButtonLabel;\r\n\tconst filterLabel = taxonomy?.labels?.search_items ?? __( 'Search Terms' );\r\n\tconst groupLabel = taxonomy?.name ?? __( 'Terms' );\r\n\tconst showFilter = availableTerms.length >= MIN_TERMS_COUNT_FOR_FILTER;\r\n\r\n\treturn (\r\n\t\t<Flex direction=\"column\" gap=\"4\">\r\n\t\t\t{ showFilter && (\r\n\t\t\t\t<SearchControl\r\n\t\t\t\t\t__next40pxDefaultSize\r\n\t\t\t\t\t__nextHasNoMarginBottom\r\n\t\t\t\t\tlabel={ filterLabel }\r\n\t\t\t\t\tvalue={ filterValue }\r\n\t\t\t\t\tonChange={ setFilter }\r\n\t\t\t\t/>\r\n\t\t\t) }\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"editor-post-taxonomies__hierarchical-terms-list\"\r\n\t\t\t\ttabIndex=\"0\"\r\n\t\t\t\trole=\"group\"\r\n\t\t\t\taria-label={ groupLabel }\r\n\t\t\t>\r\n\t\t\t\t{ renderTerms(\r\n\t\t\t\t\t'' !== filterValue ? filteredTermsTree : availableTermsTree\r\n\t\t\t\t) }\r\n\t\t\t</div>\r\n\t\t\t{ ! loading && hasCreateAction && (\r\n\t\t\t\t<FlexItem>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\t// TODO: Switch to `true` (40px size) if possible\r\n\t\t\t\t\t\t__next40pxDefaultSize={ false }\r\n\t\t\t\t\t\tonClick={ onToggleForm }\r\n\t\t\t\t\t\tclassName=\"editor-post-taxonomies__hierarchical-terms-add\"\r\n\t\t\t\t\t\taria-expanded={ showForm }\r\n\t\t\t\t\t\tvariant=\"link\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{ newTermButtonLabel }\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</FlexItem>\r\n\t\t\t) }\r\n\t\t\t{ showForm && (\r\n\t\t\t\t<form onSubmit={ onAddTerm }>\r\n\t\t\t\t\t<Flex direction=\"column\" gap=\"4\">\r\n\t\t\t\t\t\t<TextControl\r\n\t\t\t\t\t\t\t__next40pxDefaultSize\r\n\t\t\t\t\t\t\t__nextHasNoMarginBottom\r\n\t\t\t\t\t\t\tclassName=\"editor-post-taxonomies__hierarchical-terms-input\"\r\n\t\t\t\t\t\t\tlabel={ newTermLabel }\r\n\t\t\t\t\t\t\tvalue={ formName }\r\n\t\t\t\t\t\t\tonChange={ onChangeFormName }\r\n\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{ !! availableTerms.length && (\r\n\t\t\t\t\t\t\t<TreeSelect\r\n\t\t\t\t\t\t\t\t__next40pxDefaultSize\r\n\t\t\t\t\t\t\t\t__nextHasNoMarginBottom\r\n\t\t\t\t\t\t\t\tlabel={ parentSelectLabel }\r\n\t\t\t\t\t\t\t\tnoOptionLabel={ noParentOption }\r\n\t\t\t\t\t\t\t\tonChange={ onChangeFormParent }\r\n\t\t\t\t\t\t\t\tselectedId={ formParent }\r\n\t\t\t\t\t\t\t\ttree={ availableTermsTree }\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t) }\r\n\t\t\t\t\t\t<FlexItem>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t__next40pxDefaultSize\r\n\t\t\t\t\t\t\t\tvariant=\"secondary\"\r\n\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\tclassName=\"editor-post-taxonomies__hierarchical-terms-submit\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{ newTermSubmitLabel }\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</FlexItem>\r\n\t\t\t\t\t</Flex>\r\n\t\t\t\t</form>\r\n\t\t\t) }\r\n\t\t</Flex>\r\n\t);\r\n}\r\n\r\nexport default withFilters( 'editor.PostTaxonomyType' )(\r\n\tHierarchicalTermSelector\r\n);\r\n"],"mappings":"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","ignoreList":[]}