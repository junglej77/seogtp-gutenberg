{"version":3,"names":["Fragment","useSelect","store","coreStore","HierarchicalTermSelector","FlatTermSelector","editorStore","jsx","_jsx","identity","x","PostTaxonomies","taxonomyWrapper","postType","taxonomies","select","getCurrentPostType","getTaxonomies","per_page","visibleTaxonomies","filter","taxonomy","types","includes","visibility","show_ui","map","TaxonomyComponent","hierarchical","taxonomyComponentProps","slug","__nextHasNoMarginBottom","children"],"sources":["@wordpress/editor/src/components/post-taxonomies/index.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { Fragment } from '@wordpress/element';\r\nimport { useSelect } from '@wordpress/data';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport HierarchicalTermSelector from './hierarchical-term-selector';\r\nimport FlatTermSelector from './flat-term-selector';\r\nimport { store as editorStore } from '../../store';\r\n\r\nconst identity = ( x ) => x;\r\n\r\nexport function PostTaxonomies( { taxonomyWrapper = identity } ) {\r\n\tconst { postType, taxonomies } = useSelect( ( select ) => {\r\n\t\treturn {\r\n\t\t\tpostType: select( editorStore ).getCurrentPostType(),\r\n\t\t\ttaxonomies: select( coreStore ).getTaxonomies( { per_page: -1 } ),\r\n\t\t};\r\n\t}, [] );\r\n\tconst visibleTaxonomies = ( taxonomies ?? [] ).filter(\r\n\t\t( taxonomy ) =>\r\n\t\t\t// In some circumstances .visibility can end up as undefined so optional chaining operator required.\r\n\t\t\t// https://github.com/WordPress/gutenberg/issues/40326\r\n\t\t\ttaxonomy.types.includes( postType ) && taxonomy.visibility?.show_ui\r\n\t);\r\n\r\n\treturn visibleTaxonomies.map( ( taxonomy ) => {\r\n\t\tconst TaxonomyComponent = taxonomy.hierarchical\r\n\t\t\t? HierarchicalTermSelector\r\n\t\t\t: FlatTermSelector;\r\n\t\tconst taxonomyComponentProps = {\r\n\t\t\tslug: taxonomy.slug,\r\n\t\t\t...( taxonomy.hierarchical\r\n\t\t\t\t? {}\r\n\t\t\t\t: { __nextHasNoMarginBottom: true } ),\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<Fragment key={ `taxonomy-${ taxonomy.slug }` }>\r\n\t\t\t\t{ taxonomyWrapper(\r\n\t\t\t\t\t<TaxonomyComponent { ...taxonomyComponentProps } />,\r\n\t\t\t\t\ttaxonomy\r\n\t\t\t\t) }\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t} );\r\n}\r\n\r\n/**\r\n * Renders the taxonomies associated with a post.\r\n *\r\n * @param {Object}   props                 The component props.\r\n * @param {Function} props.taxonomyWrapper The wrapper function for each taxonomy component.\r\n *\r\n * @return {Array} An array of JSX elements representing the visible taxonomies.\r\n */\r\nexport default PostTaxonomies;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,KAAK,IAAIC,SAAS,QAAQ,sBAAsB;;AAEzD;AACA;AACA;AACA,OAAOC,wBAAwB,MAAM,8BAA8B;AACnE,OAAOC,gBAAgB,MAAM,sBAAsB;AACnD,SAASH,KAAK,IAAII,WAAW,QAAQ,aAAa;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAEnD,MAAMC,QAAQ,GAAKC,CAAC,IAAMA,CAAC;AAE3B,OAAO,SAASC,cAAcA,CAAE;EAAEC,eAAe,GAAGH;AAAS,CAAC,EAAG;EAChE,MAAM;IAAEI,QAAQ;IAAEC;EAAW,CAAC,GAAGb,SAAS,CAAIc,MAAM,IAAM;IACzD,OAAO;MACNF,QAAQ,EAAEE,MAAM,CAAET,WAAY,CAAC,CAACU,kBAAkB,CAAC,CAAC;MACpDF,UAAU,EAAEC,MAAM,CAAEZ,SAAU,CAAC,CAACc,aAAa,CAAE;QAAEC,QAAQ,EAAE,CAAC;MAAE,CAAE;IACjE,CAAC;EACF,CAAC,EAAE,EAAG,CAAC;EACP,MAAMC,iBAAiB,GAAG,CAAEL,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAI,EAAE,EAAGM,MAAM,CAClDC,QAAQ;EACT;EACA;EACAA,QAAQ,CAACC,KAAK,CAACC,QAAQ,CAAEV,QAAS,CAAC,IAAIQ,QAAQ,CAACG,UAAU,EAAEC,OAC9D,CAAC;EAED,OAAON,iBAAiB,CAACO,GAAG,CAAIL,QAAQ,IAAM;IAC7C,MAAMM,iBAAiB,GAAGN,QAAQ,CAACO,YAAY,GAC5CxB,wBAAwB,GACxBC,gBAAgB;IACnB,MAAMwB,sBAAsB,GAAG;MAC9BC,IAAI,EAAET,QAAQ,CAACS,IAAI;MACnB,IAAKT,QAAQ,CAACO,YAAY,GACvB,CAAC,CAAC,GACF;QAAEG,uBAAuB,EAAE;MAAK,CAAC;IACrC,CAAC;IAED,oBACCvB,IAAA,CAACR,QAAQ;MAAAgC,QAAA,EACNpB,eAAe,eAChBJ,IAAA,CAACmB,iBAAiB;QAAA,GAAME;MAAsB,CAAI,CAAC,EACnDR,QACD;IAAC,GAJe,YAAYA,QAAQ,CAACS,IAAM,EAKlC,CAAC;EAEb,CAAE,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAenB,cAAc","ignoreList":[]}