{"version":3,"names":["Textarea","__","store","coreStore","useMemo","__unstableSerializeAndClean","useDispatch","useSelect","useInstanceId","VisuallyHidden","editorStore","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","PostTextEditor","instanceId","content","blocks","type","id","select","getEditedEntityRecord","getCurrentPostType","getCurrentPostId","_type","_id","editedRecord","editEntityRecord","value","Function","children","as","htmlFor","autoComplete","dir","onChange","event","target","undefined","selection","className","placeholder"],"sources":["@wordpress/editor/src/components/post-text-editor/index.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport Textarea from 'react-autosize-textarea';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { __ } from '@wordpress/i18n';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\nimport { useMemo } from '@wordpress/element';\r\nimport { __unstableSerializeAndClean } from '@wordpress/blocks';\r\nimport { useDispatch, useSelect } from '@wordpress/data';\r\nimport { useInstanceId } from '@wordpress/compose';\r\nimport { VisuallyHidden } from '@wordpress/components';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store as editorStore } from '../../store';\r\n\r\n/**\r\n * Displays the Post Text Editor along with content in Visual and Text mode.\r\n *\r\n * @return {JSX.Element|null} The rendered PostTextEditor component.\r\n */\r\nexport default function PostTextEditor() {\r\n\tconst instanceId = useInstanceId( PostTextEditor );\r\n\tconst { content, blocks, type, id } = useSelect( ( select ) => {\r\n\t\tconst { getEditedEntityRecord } = select( coreStore );\r\n\t\tconst { getCurrentPostType, getCurrentPostId } = select( editorStore );\r\n\t\tconst _type = getCurrentPostType();\r\n\t\tconst _id = getCurrentPostId();\r\n\t\tconst editedRecord = getEditedEntityRecord( 'postType', _type, _id );\r\n\r\n\t\treturn {\r\n\t\t\tcontent: editedRecord?.content,\r\n\t\t\tblocks: editedRecord?.blocks,\r\n\t\t\ttype: _type,\r\n\t\t\tid: _id,\r\n\t\t};\r\n\t}, [] );\r\n\tconst { editEntityRecord } = useDispatch( coreStore );\r\n\t// Replicates the logic found in getEditedPostContent().\r\n\tconst value = useMemo( () => {\r\n\t\tif ( content instanceof Function ) {\r\n\t\t\treturn content( { blocks } );\r\n\t\t} else if ( blocks ) {\r\n\t\t\t// If we have parsed blocks already, they should be our source of truth.\r\n\t\t\t// Parsing applies block deprecations and legacy block conversions that\r\n\t\t\t// unparsed content will not have.\r\n\t\t\treturn __unstableSerializeAndClean( blocks );\r\n\t\t}\r\n\t\treturn content;\r\n\t}, [ content, blocks ] );\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<VisuallyHidden\r\n\t\t\t\tas=\"label\"\r\n\t\t\t\thtmlFor={ `post-content-${ instanceId }` }\r\n\t\t\t>\r\n\t\t\t\t{ __( 'Type text or HTML' ) }\r\n\t\t\t</VisuallyHidden>\r\n\t\t\t<Textarea\r\n\t\t\t\tautoComplete=\"off\"\r\n\t\t\t\tdir=\"auto\"\r\n\t\t\t\tvalue={ value }\r\n\t\t\t\tonChange={ ( event ) => {\r\n\t\t\t\t\teditEntityRecord( 'postType', type, id, {\r\n\t\t\t\t\t\tcontent: event.target.value,\r\n\t\t\t\t\t\tblocks: undefined,\r\n\t\t\t\t\t\tselection: undefined,\r\n\t\t\t\t\t} );\r\n\t\t\t\t} }\r\n\t\t\t\tclassName=\"editor-post-text-editor\"\r\n\t\t\t\tid={ `post-content-${ instanceId }` }\r\n\t\t\t\tplaceholder={ __( 'Start writing with text or HTML' ) }\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,QAAQ,MAAM,yBAAyB;;AAE9C;AACA;AACA;AACA,SAASC,EAAE,QAAQ,iBAAiB;AACpC,SAASC,KAAK,IAAIC,SAAS,QAAQ,sBAAsB;AACzD,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,2BAA2B,QAAQ,mBAAmB;AAC/D,SAASC,WAAW,EAAEC,SAAS,QAAQ,iBAAiB;AACxD,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,cAAc,QAAQ,uBAAuB;;AAEtD;AACA;AACA;AACA,SAASP,KAAK,IAAIQ,WAAW,QAAQ,aAAa;;AAElD;AACA;AACA;AACA;AACA;AAJA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAKA,eAAe,SAASC,cAAcA,CAAA,EAAG;EACxC,MAAMC,UAAU,GAAGV,aAAa,CAAES,cAAe,CAAC;EAClD,MAAM;IAAEE,OAAO;IAAEC,MAAM;IAAEC,IAAI;IAAEC;EAAG,CAAC,GAAGf,SAAS,CAAIgB,MAAM,IAAM;IAC9D,MAAM;MAAEC;IAAsB,CAAC,GAAGD,MAAM,CAAEpB,SAAU,CAAC;IACrD,MAAM;MAAEsB,kBAAkB;MAAEC;IAAiB,CAAC,GAAGH,MAAM,CAAEb,WAAY,CAAC;IACtE,MAAMiB,KAAK,GAAGF,kBAAkB,CAAC,CAAC;IAClC,MAAMG,GAAG,GAAGF,gBAAgB,CAAC,CAAC;IAC9B,MAAMG,YAAY,GAAGL,qBAAqB,CAAE,UAAU,EAAEG,KAAK,EAAEC,GAAI,CAAC;IAEpE,OAAO;MACNT,OAAO,EAAEU,YAAY,EAAEV,OAAO;MAC9BC,MAAM,EAAES,YAAY,EAAET,MAAM;MAC5BC,IAAI,EAAEM,KAAK;MACXL,EAAE,EAAEM;IACL,CAAC;EACF,CAAC,EAAE,EAAG,CAAC;EACP,MAAM;IAAEE;EAAiB,CAAC,GAAGxB,WAAW,CAAEH,SAAU,CAAC;EACrD;EACA,MAAM4B,KAAK,GAAG3B,OAAO,CAAE,MAAM;IAC5B,IAAKe,OAAO,YAAYa,QAAQ,EAAG;MAClC,OAAOb,OAAO,CAAE;QAAEC;MAAO,CAAE,CAAC;IAC7B,CAAC,MAAM,IAAKA,MAAM,EAAG;MACpB;MACA;MACA;MACA,OAAOf,2BAA2B,CAAEe,MAAO,CAAC;IAC7C;IACA,OAAOD,OAAO;EACf,CAAC,EAAE,CAAEA,OAAO,EAAEC,MAAM,CAAG,CAAC;EAExB,oBACCJ,KAAA,CAAAF,SAAA;IAAAmB,QAAA,gBACCrB,IAAA,CAACH,cAAc;MACdyB,EAAE,EAAC,OAAO;MACVC,OAAO,EAAI,gBAAgBjB,UAAY,EAAG;MAAAe,QAAA,EAExChC,EAAE,CAAE,mBAAoB;IAAC,CACZ,CAAC,eACjBW,IAAA,CAACZ,QAAQ;MACRoC,YAAY,EAAC,KAAK;MAClBC,GAAG,EAAC,MAAM;MACVN,KAAK,EAAGA,KAAO;MACfO,QAAQ,EAAKC,KAAK,IAAM;QACvBT,gBAAgB,CAAE,UAAU,EAAET,IAAI,EAAEC,EAAE,EAAE;UACvCH,OAAO,EAAEoB,KAAK,CAACC,MAAM,CAACT,KAAK;UAC3BX,MAAM,EAAEqB,SAAS;UACjBC,SAAS,EAAED;QACZ,CAAE,CAAC;MACJ,CAAG;MACHE,SAAS,EAAC,yBAAyB;MACnCrB,EAAE,EAAI,gBAAgBJ,UAAY,EAAG;MACrC0B,WAAW,EAAG3C,EAAE,CAAE,iCAAkC;IAAG,CACvD,CAAC;EAAA,CACD,CAAC;AAEL","ignoreList":[]}