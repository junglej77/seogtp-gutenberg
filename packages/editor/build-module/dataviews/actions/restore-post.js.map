{"version":3,"names":["backup","store","coreStore","__","sprintf","noticesStore","getItemTitle","isTemplateOrTemplatePart","restorePost","id","label","isPrimary","icon","supportsBulk","isEligible","item","type","status","permissions","update","callback","posts","registry","onActionPerformed","createSuccessNotice","createErrorNotice","dispatch","editEntityRecord","saveEditedEntityRecord","Promise","allSettled","map","post","promiseResult","throwOnError","every","successMessage","length","errorMessage","typedError","reason","message","errorMessages","Set","failedPromises","filter","failedPromise","add","size","join"],"sources":["@wordpress/editor/src/dataviews/actions/restore-post.tsx"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { backup } from '@wordpress/icons';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\nimport { __, sprintf } from '@wordpress/i18n';\r\nimport { store as noticesStore } from '@wordpress/notices';\r\nimport type { Action } from '@wordpress/dataviews';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { getItemTitle, isTemplateOrTemplatePart } from './utils';\r\nimport type { CoreDataError, PostWithPermissions } from '../types';\r\n\r\nconst restorePost: Action< PostWithPermissions > = {\r\n\tid: 'restore',\r\n\tlabel: __( 'Restore' ),\r\n\tisPrimary: true,\r\n\ticon: backup,\r\n\tsupportsBulk: true,\r\n\tisEligible( item ) {\r\n\t\treturn (\r\n\t\t\t! isTemplateOrTemplatePart( item ) &&\r\n\t\t\titem.type !== 'wp_block' &&\r\n\t\t\titem.status === 'trash' &&\r\n\t\t\titem.permissions?.update\r\n\t\t);\r\n\t},\r\n\tasync callback( posts, { registry, onActionPerformed } ) {\r\n\t\tconst { createSuccessNotice, createErrorNotice } =\r\n\t\t\tregistry.dispatch( noticesStore );\r\n\t\tconst { editEntityRecord, saveEditedEntityRecord } =\r\n\t\t\tregistry.dispatch( coreStore );\r\n\t\tawait Promise.allSettled(\r\n\t\t\tposts.map( ( post ) => {\r\n\t\t\t\treturn editEntityRecord( 'postType', post.type, post.id, {\r\n\t\t\t\t\tstatus: 'draft',\r\n\t\t\t\t} );\r\n\t\t\t} )\r\n\t\t);\r\n\t\tconst promiseResult = await Promise.allSettled(\r\n\t\t\tposts.map( ( post ) => {\r\n\t\t\t\treturn saveEditedEntityRecord( 'postType', post.type, post.id, {\r\n\t\t\t\t\tthrowOnError: true,\r\n\t\t\t\t} );\r\n\t\t\t} )\r\n\t\t);\r\n\r\n\t\tif ( promiseResult.every( ( { status } ) => status === 'fulfilled' ) ) {\r\n\t\t\tlet successMessage;\r\n\t\t\tif ( posts.length === 1 ) {\r\n\t\t\t\tsuccessMessage = sprintf(\r\n\t\t\t\t\t/* translators: The number of posts. */\r\n\t\t\t\t\t__( '\"%s\" has been restored.' ),\r\n\t\t\t\t\tgetItemTitle( posts[ 0 ] )\r\n\t\t\t\t);\r\n\t\t\t} else if ( posts[ 0 ].type === 'page' ) {\r\n\t\t\t\tsuccessMessage = sprintf(\r\n\t\t\t\t\t/* translators: The number of posts. */\r\n\t\t\t\t\t__( '%d pages have been restored.' ),\r\n\t\t\t\t\tposts.length\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tsuccessMessage = sprintf(\r\n\t\t\t\t\t/* translators: The number of posts. */\r\n\t\t\t\t\t__( '%d posts have been restored.' ),\r\n\t\t\t\t\tposts.length\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tcreateSuccessNotice( successMessage, {\r\n\t\t\t\ttype: 'snackbar',\r\n\t\t\t\tid: 'restore-post-action',\r\n\t\t\t} );\r\n\t\t\tif ( onActionPerformed ) {\r\n\t\t\t\tonActionPerformed( posts );\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// If there was at lease one failure.\r\n\t\t\tlet errorMessage;\r\n\t\t\t// If we were trying to move a single post to the trash.\r\n\t\t\tif ( promiseResult.length === 1 ) {\r\n\t\t\t\tconst typedError = promiseResult[ 0 ] as {\r\n\t\t\t\t\treason?: CoreDataError;\r\n\t\t\t\t};\r\n\t\t\t\tif ( typedError.reason?.message ) {\r\n\t\t\t\t\terrorMessage = typedError.reason.message;\r\n\t\t\t\t} else {\r\n\t\t\t\t\terrorMessage = __(\r\n\t\t\t\t\t\t'An error occurred while restoring the post.'\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\t// If we were trying to move multiple posts to the trash\r\n\t\t\t} else {\r\n\t\t\t\tconst errorMessages = new Set();\r\n\t\t\t\tconst failedPromises = promiseResult.filter(\r\n\t\t\t\t\t( { status } ) => status === 'rejected'\r\n\t\t\t\t);\r\n\t\t\t\tfor ( const failedPromise of failedPromises ) {\r\n\t\t\t\t\tconst typedError = failedPromise as {\r\n\t\t\t\t\t\treason?: CoreDataError;\r\n\t\t\t\t\t};\r\n\t\t\t\t\tif ( typedError.reason?.message ) {\r\n\t\t\t\t\t\terrorMessages.add( typedError.reason.message );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif ( errorMessages.size === 0 ) {\r\n\t\t\t\t\terrorMessage = __(\r\n\t\t\t\t\t\t'An error occurred while restoring the posts.'\r\n\t\t\t\t\t);\r\n\t\t\t\t} else if ( errorMessages.size === 1 ) {\r\n\t\t\t\t\terrorMessage = sprintf(\r\n\t\t\t\t\t\t/* translators: %s: an error message */\r\n\t\t\t\t\t\t__( 'An error occurred while restoring the posts: %s' ),\r\n\t\t\t\t\t\t[ ...errorMessages ][ 0 ]\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\terrorMessage = sprintf(\r\n\t\t\t\t\t\t/* translators: %s: a list of comma separated error messages */\r\n\t\t\t\t\t\t__(\r\n\t\t\t\t\t\t\t'Some errors occurred while restoring the posts: %s'\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\t[ ...errorMessages ].join( ',' )\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcreateErrorNotice( errorMessage, {\r\n\t\t\t\ttype: 'snackbar',\r\n\t\t\t} );\r\n\t\t}\r\n\t},\r\n};\r\n\r\nexport default restorePost;\r\n"],"mappings":"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","ignoreList":[]}