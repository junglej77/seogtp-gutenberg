{"version":3,"names":["decodeEntities","TEMPLATE_ORIGINS","TEMPLATE_PART_POST_TYPE","TEMPLATE_POST_TYPE","isTemplate","post","type","isTemplatePart","isTemplateOrTemplatePart","p","getItemTitle","item","title","rendered","raw","isTemplateRemovable","template","source","includes","custom","Boolean","plugin","has_theme_file"],"sources":["@wordpress/editor/src/dataviews/actions/utils.ts"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { decodeEntities } from '@wordpress/html-entities';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport {\r\n\tTEMPLATE_ORIGINS,\r\n\tTEMPLATE_PART_POST_TYPE,\r\n\tTEMPLATE_POST_TYPE,\r\n} from '../../store/constants';\r\n\r\nimport type { Post, TemplatePart, Template } from '../types';\r\n\r\nexport function isTemplate( post: Post ): post is Template {\r\n\treturn post.type === TEMPLATE_POST_TYPE;\r\n}\r\n\r\nexport function isTemplatePart( post: Post ): post is TemplatePart {\r\n\treturn post.type === TEMPLATE_PART_POST_TYPE;\r\n}\r\n\r\nexport function isTemplateOrTemplatePart(\r\n\tp: Post\r\n): p is Template | TemplatePart {\r\n\treturn p.type === TEMPLATE_POST_TYPE || p.type === TEMPLATE_PART_POST_TYPE;\r\n}\r\n\r\nexport function getItemTitle( item: Post ) {\r\n\tif ( typeof item.title === 'string' ) {\r\n\t\treturn decodeEntities( item.title );\r\n\t}\r\n\tif ( 'rendered' in item.title ) {\r\n\t\treturn decodeEntities( item.title.rendered );\r\n\t}\r\n\tif ( 'raw' in item.title ) {\r\n\t\treturn decodeEntities( item.title.raw );\r\n\t}\r\n\treturn '';\r\n}\r\n\r\n/**\r\n * Check if a template is removable.\r\n *\r\n * @param template The template entity to check.\r\n * @return Whether the template is removable.\r\n */\r\nexport function isTemplateRemovable( template: Template | TemplatePart ) {\r\n\tif ( ! template ) {\r\n\t\treturn false;\r\n\t}\r\n\t// In patterns list page we map the templates parts to a different object\r\n\t// than the one returned from the endpoint. This is why we need to check for\r\n\t// two props whether is custom or has a theme file.\r\n\treturn (\r\n\t\t[ template.source, template.source ].includes(\r\n\t\t\tTEMPLATE_ORIGINS.custom\r\n\t\t) &&\r\n\t\t! Boolean( template.type === 'wp_template' && template?.plugin ) &&\r\n\t\t! template.has_theme_file\r\n\t);\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,cAAc,QAAQ,0BAA0B;;AAEzD;AACA;AACA;AACA,SACCC,gBAAgB,EAChBC,uBAAuB,EACvBC,kBAAkB,QACZ,uBAAuB;AAI9B,OAAO,SAASC,UAAUA,CAAEC,IAAU,EAAqB;EAC1D,OAAOA,IAAI,CAACC,IAAI,KAAKH,kBAAkB;AACxC;AAEA,OAAO,SAASI,cAAcA,CAAEF,IAAU,EAAyB;EAClE,OAAOA,IAAI,CAACC,IAAI,KAAKJ,uBAAuB;AAC7C;AAEA,OAAO,SAASM,wBAAwBA,CACvCC,CAAO,EACwB;EAC/B,OAAOA,CAAC,CAACH,IAAI,KAAKH,kBAAkB,IAAIM,CAAC,CAACH,IAAI,KAAKJ,uBAAuB;AAC3E;AAEA,OAAO,SAASQ,YAAYA,CAAEC,IAAU,EAAG;EAC1C,IAAK,OAAOA,IAAI,CAACC,KAAK,KAAK,QAAQ,EAAG;IACrC,OAAOZ,cAAc,CAAEW,IAAI,CAACC,KAAM,CAAC;EACpC;EACA,IAAK,UAAU,IAAID,IAAI,CAACC,KAAK,EAAG;IAC/B,OAAOZ,cAAc,CAAEW,IAAI,CAACC,KAAK,CAACC,QAAS,CAAC;EAC7C;EACA,IAAK,KAAK,IAAIF,IAAI,CAACC,KAAK,EAAG;IAC1B,OAAOZ,cAAc,CAAEW,IAAI,CAACC,KAAK,CAACE,GAAI,CAAC;EACxC;EACA,OAAO,EAAE;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAAEC,QAAiC,EAAG;EACxE,IAAK,CAAEA,QAAQ,EAAG;IACjB,OAAO,KAAK;EACb;EACA;EACA;EACA;EACA,OACC,CAAEA,QAAQ,CAACC,MAAM,EAAED,QAAQ,CAACC,MAAM,CAAE,CAACC,QAAQ,CAC5CjB,gBAAgB,CAACkB,MAClB,CAAC,IACD,CAAEC,OAAO,CAAEJ,QAAQ,CAACV,IAAI,KAAK,aAAa,IAAIU,QAAQ,EAAEK,MAAO,CAAC,IAChE,CAAEL,QAAQ,CAACM,cAAc;AAE3B","ignoreList":[]}