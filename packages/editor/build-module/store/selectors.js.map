{"version":3,"names":["getFreeformContentHandlerName","getDefaultBlockName","__unstableSerializeAndClean","parse","isInTheFuture","getDate","addQueryArgs","cleanForSlug","createSelector","createRegistrySelector","deprecated","Platform","layout","store","blockEditorStore","coreStore","preferencesStore","EDIT_MERGE_PROPERTIES","PERMALINK_POSTNAME_REGEX","ONE_MINUTE_IN_MS","AUTOSAVE_PROPERTIES","getPostRawValue","getTemplatePartIcon","EMPTY_OBJECT","hasEditorUndo","select","hasUndo","hasEditorRedo","hasRedo","isEditedPostNew","state","getCurrentPost","status","hasChangedContent","edits","getPostEdits","isEditedPostDirty","postType","getCurrentPostType","postId","getCurrentPostId","hasEditsForEntityRecord","hasNonPostEntityChanges","dirtyEntityRecords","__experimentalGetDirtyEntityRecords","type","id","some","entityRecord","kind","name","key","isCleanNewPost","post","getRawEntityRecord","getCurrentTemplateId","templateId","getCurrentPostRevisionsCount","_getCurrentPost$_link","_links","count","getCurrentPostLastRevisionId","_getCurrentPost$_link2","getEntityRecordEdits","getCurrentPostAttribute","attributeName","hasOwnProperty","getNestedEditedPostProperty","getEditedPostAttribute","getEditedPostContent","has","getAutosaveAttribute","includes","currentUserId","getCurrentUser","autosave","getAutosave","getEditedPostVisibility","password","isCurrentPostPending","isCurrentPostPublished","currentPost","indexOf","Date","Number","date","isCurrentPostScheduled","isEditedPostPublishable","isEditedPostSaveable","isSavingPost","isEditedPostEmpty","OS","record","getEditedEntityRecord","content","blocks","length","blockName","isEditedPostAutosaveable","isPostAutosavingLocked","hasFetchedAutosave","hasFetchedAutosaves","field","isEditedPostBeingScheduled","checkedDate","isEditedPostDateFloating","modified","isDeletingPost","deleting","pending","saving","isSavingNonPostEntityChanges","entitiesBeingSaved","__experimentalGetEntitiesBeingSaved","didPostSaveRequestSucceed","getLastEntitySaveError","didPostSaveRequestFail","isAutosavingPost","Boolean","options","isAutosave","isPreviewingPost","isPreview","getEditedPostPreviewLink","previewLink","preview","featuredImageId","_thumbnail_id","getSuggestedPostFormat","getBlocks","provider","attributes","providerNameSlug","isPublishingPost","isPermalinkEditable","permalinkTemplate","test","getPermalink","permalinkParts","getPermalinkParts","prefix","postName","suffix","getEditedPostSlug","split","isPostLocked","postLock","isLocked","isPostSavingLocked","Object","keys","postSavingLock","postAutosavingLock","isPostLockTakeover","isTakeover","getPostLockUser","user","getActivePostLock","activePostLock","canUserUseUnfilteredHTML","isPublishSidebarEnabled","get","getEditorBlocks","isEditorPanelRemoved","panelName","removedPanels","isEditorPanelEnabled","inactivePanels","isEditorPanelOpened","openPanels","getEditorSelectionStart","since","alternative","selectionStart","getEditorSelectionEnd","selectionEnd","getEditorSelection","__unstableIsEditorReady","getEditorSettings","editorSettings","getRenderingMode","renderingMode","getDeviceType","editorMode","__unstableGetEditorMode","deviceType","isListViewOpened","listViewPanel","isInserterOpened","blockInserterPanel","getEditorMode","_select$get","getStateBeforeOptimisticTransaction","hint","inSomeHistory","getBlockEditorSelector","args","version","getBlockName","isBlockValid","getBlockAttributes","getBlock","getClientIdsOfDescendants","getClientIdsWithDescendants","getGlobalBlockCount","getBlocksByClientId","getBlockCount","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","getBlockHierarchyRootClientId","getAdjacentBlockClientId","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","getMultiSelectedBlockClientIds","getMultiSelectedBlocks","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","getBlockOrder","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","isTyping","isCaretWithinFormattedText","getBlockInsertionPoint","isBlockInsertionPointVisible","isValidTemplate","getTemplate","getTemplateLock","canInsertBlockType","getInserterItems","hasInserterItems","getBlockListSettings","__experimentalGetDefaultTemplateTypes","defaultTemplateTypes","__experimentalGetDefaultTemplatePartAreas","_getEditorSettings$de","areas","defaultTemplatePartAreas","map","item","icon","__experimentalGetDefaultTemplateType","slug","_Object$values$find","templateTypes","values","find","__experimentalGetTemplateInfo","template","description","title","area","defaultTitle","defaultDescription","templateTitle","rendered","templateDescription","raw","templateIcon","getPostTypeLabel","currentPostType","getPostType","labels","singular_name","isPublishSidebarOpened","publishSidebarActive"],"sources":["@wordpress/editor/src/store/selectors.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport {\r\n\tgetFreeformContentHandlerName,\r\n\tgetDefaultBlockName,\r\n\t__unstableSerializeAndClean,\r\n\tparse,\r\n} from '@wordpress/blocks';\r\nimport { isInTheFuture, getDate } from '@wordpress/date';\r\nimport { addQueryArgs, cleanForSlug } from '@wordpress/url';\r\nimport { createSelector, createRegistrySelector } from '@wordpress/data';\r\nimport deprecated from '@wordpress/deprecated';\r\nimport { Platform } from '@wordpress/element';\r\nimport { layout } from '@wordpress/icons';\r\nimport { store as blockEditorStore } from '@wordpress/block-editor';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\nimport { store as preferencesStore } from '@wordpress/preferences';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport {\r\n\tEDIT_MERGE_PROPERTIES,\r\n\tPERMALINK_POSTNAME_REGEX,\r\n\tONE_MINUTE_IN_MS,\r\n\tAUTOSAVE_PROPERTIES,\r\n} from './constants';\r\nimport { getPostRawValue } from './reducer';\r\nimport { getTemplatePartIcon } from '../utils/get-template-part-icon';\r\n\r\n/**\r\n * Shared reference to an empty object for cases where it is important to avoid\r\n * returning a new object reference on every invocation, as in a connected or\r\n * other pure component which performs `shouldComponentUpdate` check on props.\r\n * This should be used as a last resort, since the normalized data should be\r\n * maintained by the reducer result in state.\r\n */\r\nconst EMPTY_OBJECT = {};\r\n\r\n/**\r\n * Returns true if any past editor history snapshots exist, or false otherwise.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether undo history exists.\r\n */\r\nexport const hasEditorUndo = createRegistrySelector( ( select ) => () => {\r\n\treturn select( coreStore ).hasUndo();\r\n} );\r\n\r\n/**\r\n * Returns true if any future editor history snapshots exist, or false\r\n * otherwise.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether redo history exists.\r\n */\r\nexport const hasEditorRedo = createRegistrySelector( ( select ) => () => {\r\n\treturn select( coreStore ).hasRedo();\r\n} );\r\n\r\n/**\r\n * Returns true if the currently edited post is yet to be saved, or false if\r\n * the post has been saved.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the post is new.\r\n */\r\nexport function isEditedPostNew( state ) {\r\n\treturn getCurrentPost( state ).status === 'auto-draft';\r\n}\r\n\r\n/**\r\n * Returns true if content includes unsaved changes, or false otherwise.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {boolean} Whether content includes unsaved changes.\r\n */\r\nexport function hasChangedContent( state ) {\r\n\tconst edits = getPostEdits( state );\r\n\treturn 'content' in edits;\r\n}\r\n\r\n/**\r\n * Returns true if there are unsaved values for the current edit session, or\r\n * false if the editing state matches the saved or new post.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether unsaved values exist.\r\n */\r\nexport const isEditedPostDirty = createRegistrySelector(\r\n\t( select ) => ( state ) => {\r\n\t\t// Edits should contain only fields which differ from the saved post (reset\r\n\t\t// at initial load and save complete). Thus, a non-empty edits state can be\r\n\t\t// inferred to contain unsaved values.\r\n\t\tconst postType = getCurrentPostType( state );\r\n\t\tconst postId = getCurrentPostId( state );\r\n\t\treturn select( coreStore ).hasEditsForEntityRecord(\r\n\t\t\t'postType',\r\n\t\t\tpostType,\r\n\t\t\tpostId\r\n\t\t);\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if there are unsaved edits for entities other than\r\n * the editor's post, and false otherwise.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether there are edits or not.\r\n */\r\nexport const hasNonPostEntityChanges = createRegistrySelector(\r\n\t( select ) => ( state ) => {\r\n\t\tconst dirtyEntityRecords =\r\n\t\t\tselect( coreStore ).__experimentalGetDirtyEntityRecords();\r\n\t\tconst { type, id } = getCurrentPost( state );\r\n\t\treturn dirtyEntityRecords.some(\r\n\t\t\t( entityRecord ) =>\r\n\t\t\t\tentityRecord.kind !== 'postType' ||\r\n\t\t\t\tentityRecord.name !== type ||\r\n\t\t\t\tentityRecord.key !== id\r\n\t\t);\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if there are no unsaved values for the current edit session and\r\n * if the currently edited post is new (has never been saved before).\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether new post and unsaved values exist.\r\n */\r\nexport function isCleanNewPost( state ) {\r\n\treturn ! isEditedPostDirty( state ) && isEditedPostNew( state );\r\n}\r\n\r\n/**\r\n * Returns the post currently being edited in its last known saved state, not\r\n * including unsaved edits. Returns an object containing relevant default post\r\n * values if the post has not yet been saved.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Object} Post object.\r\n */\r\nexport const getCurrentPost = createRegistrySelector(\r\n\t( select ) => ( state ) => {\r\n\t\tconst postId = getCurrentPostId( state );\r\n\t\tconst postType = getCurrentPostType( state );\r\n\r\n\t\tconst post = select( coreStore ).getRawEntityRecord(\r\n\t\t\t'postType',\r\n\t\t\tpostType,\r\n\t\t\tpostId\r\n\t\t);\r\n\t\tif ( post ) {\r\n\t\t\treturn post;\r\n\t\t}\r\n\r\n\t\t// This exists for compatibility with the previous selector behavior\r\n\t\t// which would guarantee an object return based on the editor reducer's\r\n\t\t// default empty object state.\r\n\t\treturn EMPTY_OBJECT;\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns the post type of the post currently being edited.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {string} Post type.\r\n */\r\nexport function getCurrentPostType( state ) {\r\n\treturn state.postType;\r\n}\r\n\r\n/**\r\n * Returns the ID of the post currently being edited, or null if the post has\r\n * not yet been saved.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {?number} ID of current post.\r\n */\r\nexport function getCurrentPostId( state ) {\r\n\treturn state.postId;\r\n}\r\n\r\n/**\r\n * Returns the template ID currently being rendered/edited\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {string?} Template ID.\r\n */\r\nexport function getCurrentTemplateId( state ) {\r\n\treturn state.templateId;\r\n}\r\n\r\n/**\r\n * Returns the number of revisions of the post currently being edited.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {number} Number of revisions.\r\n */\r\nexport function getCurrentPostRevisionsCount( state ) {\r\n\treturn (\r\n\t\tgetCurrentPost( state )._links?.[ 'version-history' ]?.[ 0 ]?.count ?? 0\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns the last revision ID of the post currently being edited,\r\n * or null if the post has no revisions.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {?number} ID of the last revision.\r\n */\r\nexport function getCurrentPostLastRevisionId( state ) {\r\n\treturn (\r\n\t\tgetCurrentPost( state )._links?.[ 'predecessor-version' ]?.[ 0 ]?.id ??\r\n\t\tnull\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns any post values which have been changed in the editor but not yet\r\n * been saved.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Object} Object of key value pairs comprising unsaved edits.\r\n */\r\nexport const getPostEdits = createRegistrySelector( ( select ) => ( state ) => {\r\n\tconst postType = getCurrentPostType( state );\r\n\tconst postId = getCurrentPostId( state );\r\n\treturn (\r\n\t\tselect( coreStore ).getEntityRecordEdits(\r\n\t\t\t'postType',\r\n\t\t\tpostType,\r\n\t\t\tpostId\r\n\t\t) || EMPTY_OBJECT\r\n\t);\r\n} );\r\n\r\n/**\r\n * Returns an attribute value of the saved post.\r\n *\r\n * @param {Object} state         Global application state.\r\n * @param {string} attributeName Post attribute name.\r\n *\r\n * @return {*} Post attribute value.\r\n */\r\nexport function getCurrentPostAttribute( state, attributeName ) {\r\n\tswitch ( attributeName ) {\r\n\t\tcase 'type':\r\n\t\t\treturn getCurrentPostType( state );\r\n\r\n\t\tcase 'id':\r\n\t\t\treturn getCurrentPostId( state );\r\n\r\n\t\tdefault:\r\n\t\t\tconst post = getCurrentPost( state );\r\n\t\t\tif ( ! post.hasOwnProperty( attributeName ) ) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn getPostRawValue( post[ attributeName ] );\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns a single attribute of the post being edited, preferring the unsaved\r\n * edit if one exists, but merging with the attribute value for the last known\r\n * saved state of the post (this is needed for some nested attributes like meta).\r\n *\r\n * @param {Object} state         Global application state.\r\n * @param {string} attributeName Post attribute name.\r\n *\r\n * @return {*} Post attribute value.\r\n */\r\nconst getNestedEditedPostProperty = createSelector(\r\n\t( state, attributeName ) => {\r\n\t\tconst edits = getPostEdits( state );\r\n\t\tif ( ! edits.hasOwnProperty( attributeName ) ) {\r\n\t\t\treturn getCurrentPostAttribute( state, attributeName );\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\t...getCurrentPostAttribute( state, attributeName ),\r\n\t\t\t...edits[ attributeName ],\r\n\t\t};\r\n\t},\r\n\t( state, attributeName ) => [\r\n\t\tgetCurrentPostAttribute( state, attributeName ),\r\n\t\tgetPostEdits( state )[ attributeName ],\r\n\t]\r\n);\r\n\r\n/**\r\n * Returns a single attribute of the post being edited, preferring the unsaved\r\n * edit if one exists, but falling back to the attribute for the last known\r\n * saved state of the post.\r\n *\r\n * @param {Object} state         Global application state.\r\n * @param {string} attributeName Post attribute name.\r\n *\r\n * @return {*} Post attribute value.\r\n */\r\nexport function getEditedPostAttribute( state, attributeName ) {\r\n\t// Special cases.\r\n\tswitch ( attributeName ) {\r\n\t\tcase 'content':\r\n\t\t\treturn getEditedPostContent( state );\r\n\t}\r\n\r\n\t// Fall back to saved post value if not edited.\r\n\tconst edits = getPostEdits( state );\r\n\tif ( ! edits.hasOwnProperty( attributeName ) ) {\r\n\t\treturn getCurrentPostAttribute( state, attributeName );\r\n\t}\r\n\r\n\t// Merge properties are objects which contain only the patch edit in state,\r\n\t// and thus must be merged with the current post attribute.\r\n\tif ( EDIT_MERGE_PROPERTIES.has( attributeName ) ) {\r\n\t\treturn getNestedEditedPostProperty( state, attributeName );\r\n\t}\r\n\r\n\treturn edits[ attributeName ];\r\n}\r\n\r\n/**\r\n * Returns an attribute value of the current autosave revision for a post, or\r\n * null if there is no autosave for the post.\r\n *\r\n * @deprecated since 5.6. Callers should use the `getAutosave( postType, postId, userId )` selector\r\n * \t\t\t   from the '@wordpress/core-data' package and access properties on the returned\r\n * \t\t\t   autosave object using getPostRawValue.\r\n *\r\n * @param {Object} state         Global application state.\r\n * @param {string} attributeName Autosave attribute name.\r\n *\r\n * @return {*} Autosave attribute value.\r\n */\r\nexport const getAutosaveAttribute = createRegistrySelector(\r\n\t( select ) => ( state, attributeName ) => {\r\n\t\tif (\r\n\t\t\t! AUTOSAVE_PROPERTIES.includes( attributeName ) &&\r\n\t\t\tattributeName !== 'preview_link'\r\n\t\t) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst postType = getCurrentPostType( state );\r\n\r\n\t\t// Currently template autosaving is not supported.\r\n\t\tif ( postType === 'wp_template' ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst postId = getCurrentPostId( state );\r\n\t\tconst currentUserId = select( coreStore ).getCurrentUser()?.id;\r\n\t\tconst autosave = select( coreStore ).getAutosave(\r\n\t\t\tpostType,\r\n\t\t\tpostId,\r\n\t\t\tcurrentUserId\r\n\t\t);\r\n\r\n\t\tif ( autosave ) {\r\n\t\t\treturn getPostRawValue( autosave[ attributeName ] );\r\n\t\t}\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns the current visibility of the post being edited, preferring the\r\n * unsaved value if different than the saved post. The return value is one of\r\n * \"private\", \"password\", or \"public\".\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {string} Post visibility.\r\n */\r\nexport function getEditedPostVisibility( state ) {\r\n\tconst status = getEditedPostAttribute( state, 'status' );\r\n\tif ( status === 'private' ) {\r\n\t\treturn 'private';\r\n\t}\r\n\r\n\tconst password = getEditedPostAttribute( state, 'password' );\r\n\tif ( password ) {\r\n\t\treturn 'password';\r\n\t}\r\n\r\n\treturn 'public';\r\n}\r\n\r\n/**\r\n * Returns true if post is pending review.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether current post is pending review.\r\n */\r\nexport function isCurrentPostPending( state ) {\r\n\treturn getCurrentPost( state ).status === 'pending';\r\n}\r\n\r\n/**\r\n * Return true if the current post has already been published.\r\n *\r\n * @param {Object}  state       Global application state.\r\n * @param {Object?} currentPost Explicit current post for bypassing registry selector.\r\n *\r\n * @return {boolean} Whether the post has been published.\r\n */\r\nexport function isCurrentPostPublished( state, currentPost ) {\r\n\tconst post = currentPost || getCurrentPost( state );\r\n\r\n\treturn (\r\n\t\t[ 'publish', 'private' ].indexOf( post.status ) !== -1 ||\r\n\t\t( post.status === 'future' &&\r\n\t\t\t! isInTheFuture(\r\n\t\t\t\tnew Date( Number( getDate( post.date ) ) - ONE_MINUTE_IN_MS )\r\n\t\t\t) )\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns true if post is already scheduled.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether current post is scheduled to be posted.\r\n */\r\nexport function isCurrentPostScheduled( state ) {\r\n\treturn (\r\n\t\tgetCurrentPost( state ).status === 'future' &&\r\n\t\t! isCurrentPostPublished( state )\r\n\t);\r\n}\r\n\r\n/**\r\n * Return true if the post being edited can be published.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the post can been published.\r\n */\r\nexport function isEditedPostPublishable( state ) {\r\n\tconst post = getCurrentPost( state );\r\n\r\n\t// TODO: Post being publishable should be superset of condition of post\r\n\t// being saveable. Currently this restriction is imposed at UI.\r\n\t//\r\n\t//  See: <PostPublishButton /> (`isButtonEnabled` assigned by `isSaveable`).\r\n\r\n\treturn (\r\n\t\tisEditedPostDirty( state ) ||\r\n\t\t[ 'publish', 'private', 'future' ].indexOf( post.status ) === -1\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns true if the post can be saved, or false otherwise. A post must\r\n * contain a title, an excerpt, or non-empty content to be valid for save.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the post can be saved.\r\n */\r\nexport function isEditedPostSaveable( state ) {\r\n\tif ( isSavingPost( state ) ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// TODO: Post should not be saveable if not dirty. Cannot be added here at\r\n\t// this time since posts where meta boxes are present can be saved even if\r\n\t// the post is not dirty. Currently this restriction is imposed at UI, but\r\n\t// should be moved here.\r\n\t//\r\n\t//  See: `isEditedPostPublishable` (includes `isEditedPostDirty` condition)\r\n\t//  See: <PostSavedState /> (`forceIsDirty` prop)\r\n\t//  See: <PostPublishButton /> (`forceIsDirty` prop)\r\n\t//  See: https://github.com/WordPress/gutenberg/pull/4184.\r\n\r\n\treturn (\r\n\t\t!! getEditedPostAttribute( state, 'title' ) ||\r\n\t\t!! getEditedPostAttribute( state, 'excerpt' ) ||\r\n\t\t! isEditedPostEmpty( state ) ||\r\n\t\tPlatform.OS === 'native'\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns true if the edited post has content. A post has content if it has at\r\n * least one saveable block or otherwise has a non-empty content property\r\n * assigned.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether post has content.\r\n */\r\nexport const isEditedPostEmpty = createRegistrySelector(\r\n\t( select ) => ( state ) => {\r\n\t\t// While the condition of truthy content string is sufficient to determine\r\n\t\t// emptiness, testing saveable blocks length is a trivial operation. Since\r\n\t\t// this function can be called frequently, optimize for the fast case as a\r\n\t\t// condition of the mere existence of blocks. Note that the value of edited\r\n\t\t// content takes precedent over block content, and must fall through to the\r\n\t\t// default logic.\r\n\t\tconst postId = getCurrentPostId( state );\r\n\t\tconst postType = getCurrentPostType( state );\r\n\t\tconst record = select( coreStore ).getEditedEntityRecord(\r\n\t\t\t'postType',\r\n\t\t\tpostType,\r\n\t\t\tpostId\r\n\t\t);\r\n\t\tif ( typeof record.content !== 'function' ) {\r\n\t\t\treturn ! record.content;\r\n\t\t}\r\n\r\n\t\tconst blocks = getEditedPostAttribute( state, 'blocks' );\r\n\r\n\t\tif ( blocks.length === 0 ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Pierce the abstraction of the serializer in knowing that blocks are\r\n\t\t// joined with newlines such that even if every individual block\r\n\t\t// produces an empty save result, the serialized content is non-empty.\r\n\t\tif ( blocks.length > 1 ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// There are two conditions under which the optimization cannot be\r\n\t\t// assumed, and a fallthrough to getEditedPostContent must occur:\r\n\t\t//\r\n\t\t// 1. getBlocksForSerialization has special treatment in omitting a\r\n\t\t//    single unmodified default block.\r\n\t\t// 2. Comment delimiters are omitted for a freeform or unregistered\r\n\t\t//    block in its serialization. The freeform block specifically may\r\n\t\t//    produce an empty string in its saved output.\r\n\t\t//\r\n\t\t// For all other content, the single block is assumed to make a post\r\n\t\t// non-empty, if only by virtue of its own comment delimiters.\r\n\t\tconst blockName = blocks[ 0 ].name;\r\n\t\tif (\r\n\t\t\tblockName !== getDefaultBlockName() &&\r\n\t\t\tblockName !== getFreeformContentHandlerName()\r\n\t\t) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn ! getEditedPostContent( state );\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if the post can be autosaved, or false otherwise.\r\n *\r\n * @param {Object} state    Global application state.\r\n * @param {Object} autosave A raw autosave object from the REST API.\r\n *\r\n * @return {boolean} Whether the post can be autosaved.\r\n */\r\nexport const isEditedPostAutosaveable = createRegistrySelector(\r\n\t( select ) => ( state ) => {\r\n\t\t// A post must contain a title, an excerpt, or non-empty content to be valid for autosaving.\r\n\t\tif ( ! isEditedPostSaveable( state ) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// A post is not autosavable when there is a post autosave lock.\r\n\t\tif ( isPostAutosavingLocked( state ) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst postType = getCurrentPostType( state );\r\n\r\n\t\t// Currently template autosaving is not supported.\r\n\t\tif ( postType === 'wp_template' ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst postId = getCurrentPostId( state );\r\n\t\tconst hasFetchedAutosave = select( coreStore ).hasFetchedAutosaves(\r\n\t\t\tpostType,\r\n\t\t\tpostId\r\n\t\t);\r\n\t\tconst currentUserId = select( coreStore ).getCurrentUser()?.id;\r\n\r\n\t\t// Disable reason - this line causes the side-effect of fetching the autosave\r\n\t\t// via a resolver, moving below the return would result in the autosave never\r\n\t\t// being fetched.\r\n\t\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\r\n\t\tconst autosave = select( coreStore ).getAutosave(\r\n\t\t\tpostType,\r\n\t\t\tpostId,\r\n\t\t\tcurrentUserId\r\n\t\t);\r\n\r\n\t\t// If any existing autosaves have not yet been fetched, this function is\r\n\t\t// unable to determine if the post is autosaveable, so return false.\r\n\t\tif ( ! hasFetchedAutosave ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// If we don't already have an autosave, the post is autosaveable.\r\n\t\tif ( ! autosave ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// To avoid an expensive content serialization, use the content dirtiness\r\n\t\t// flag in place of content field comparison against the known autosave.\r\n\t\t// This is not strictly accurate, and relies on a tolerance toward autosave\r\n\t\t// request failures for unnecessary saves.\r\n\t\tif ( hasChangedContent( state ) ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// If title, excerpt, or meta have changed, the post is autosaveable.\r\n\t\treturn [ 'title', 'excerpt', 'meta' ].some(\r\n\t\t\t( field ) =>\r\n\t\t\t\tgetPostRawValue( autosave[ field ] ) !==\r\n\t\t\t\tgetEditedPostAttribute( state, field )\r\n\t\t);\r\n\t}\r\n);\r\n\r\n/**\r\n * Return true if the post being edited is being scheduled. Preferring the\r\n * unsaved status values.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the post has been published.\r\n */\r\nexport function isEditedPostBeingScheduled( state ) {\r\n\tconst date = getEditedPostAttribute( state, 'date' );\r\n\t// Offset the date by one minute (network latency).\r\n\tconst checkedDate = new Date(\r\n\t\tNumber( getDate( date ) ) - ONE_MINUTE_IN_MS\r\n\t);\r\n\r\n\treturn isInTheFuture( checkedDate );\r\n}\r\n\r\n/**\r\n * Returns whether the current post should be considered to have a \"floating\"\r\n * date (i.e. that it would publish \"Immediately\" rather than at a set time).\r\n *\r\n * Unlike in the PHP backend, the REST API returns a full date string for posts\r\n * where the 0000-00-00T00:00:00 placeholder is present in the database. To\r\n * infer that a post is set to publish \"Immediately\" we check whether the date\r\n * and modified date are the same.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {boolean} Whether the edited post has a floating date value.\r\n */\r\nexport function isEditedPostDateFloating( state ) {\r\n\tconst date = getEditedPostAttribute( state, 'date' );\r\n\tconst modified = getEditedPostAttribute( state, 'modified' );\r\n\r\n\t// This should be the status of the persisted post\r\n\t// It shouldn't use the \"edited\" status otherwise it breaks the\r\n\t// inferred post data floating status\r\n\t// See https://github.com/WordPress/gutenberg/issues/28083.\r\n\tconst status = getCurrentPost( state ).status;\r\n\tif (\r\n\t\tstatus === 'draft' ||\r\n\t\tstatus === 'auto-draft' ||\r\n\t\tstatus === 'pending'\r\n\t) {\r\n\t\treturn date === modified || date === null;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Returns true if the post is currently being deleted, or false otherwise.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {boolean} Whether post is being deleted.\r\n */\r\nexport function isDeletingPost( state ) {\r\n\treturn !! state.deleting.pending;\r\n}\r\n\r\n/**\r\n * Returns true if the post is currently being saved, or false otherwise.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether post is being saved.\r\n */\r\nexport function isSavingPost( state ) {\r\n\treturn !! state.saving.pending;\r\n}\r\n\r\n/**\r\n * Returns true if non-post entities are currently being saved, or false otherwise.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether non-post entities are being saved.\r\n */\r\nexport const isSavingNonPostEntityChanges = createRegistrySelector(\r\n\t( select ) => ( state ) => {\r\n\t\tconst entitiesBeingSaved =\r\n\t\t\tselect( coreStore ).__experimentalGetEntitiesBeingSaved();\r\n\t\tconst { type, id } = getCurrentPost( state );\r\n\t\treturn entitiesBeingSaved.some(\r\n\t\t\t( entityRecord ) =>\r\n\t\t\t\tentityRecord.kind !== 'postType' ||\r\n\t\t\t\tentityRecord.name !== type ||\r\n\t\t\t\tentityRecord.key !== id\r\n\t\t);\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if a previous post save was attempted successfully, or false\r\n * otherwise.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the post was saved successfully.\r\n */\r\nexport const didPostSaveRequestSucceed = createRegistrySelector(\r\n\t( select ) => ( state ) => {\r\n\t\tconst postType = getCurrentPostType( state );\r\n\t\tconst postId = getCurrentPostId( state );\r\n\t\treturn ! select( coreStore ).getLastEntitySaveError(\r\n\t\t\t'postType',\r\n\t\t\tpostType,\r\n\t\t\tpostId\r\n\t\t);\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if a previous post save was attempted but failed, or false\r\n * otherwise.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the post save failed.\r\n */\r\nexport const didPostSaveRequestFail = createRegistrySelector(\r\n\t( select ) => ( state ) => {\r\n\t\tconst postType = getCurrentPostType( state );\r\n\t\tconst postId = getCurrentPostId( state );\r\n\t\treturn !! select( coreStore ).getLastEntitySaveError(\r\n\t\t\t'postType',\r\n\t\t\tpostType,\r\n\t\t\tpostId\r\n\t\t);\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if the post is autosaving, or false otherwise.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the post is autosaving.\r\n */\r\nexport function isAutosavingPost( state ) {\r\n\treturn isSavingPost( state ) && Boolean( state.saving.options?.isAutosave );\r\n}\r\n\r\n/**\r\n * Returns true if the post is being previewed, or false otherwise.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the post is being previewed.\r\n */\r\nexport function isPreviewingPost( state ) {\r\n\treturn isSavingPost( state ) && Boolean( state.saving.options?.isPreview );\r\n}\r\n\r\n/**\r\n * Returns the post preview link\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {string | undefined} Preview Link.\r\n */\r\nexport function getEditedPostPreviewLink( state ) {\r\n\tif ( state.saving.pending || isSavingPost( state ) ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet previewLink = getAutosaveAttribute( state, 'preview_link' );\r\n\t// Fix for issue: https://github.com/WordPress/gutenberg/issues/33616\r\n\t// If the post is draft, ignore the preview link from the autosave record,\r\n\t// because the preview could be a stale autosave if the post was switched from\r\n\t// published to draft.\r\n\t// See: https://github.com/WordPress/gutenberg/pull/37952.\r\n\tif ( ! previewLink || 'draft' === getCurrentPost( state ).status ) {\r\n\t\tpreviewLink = getEditedPostAttribute( state, 'link' );\r\n\t\tif ( previewLink ) {\r\n\t\t\tpreviewLink = addQueryArgs( previewLink, { preview: true } );\r\n\t\t}\r\n\t}\r\n\tconst featuredImageId = getEditedPostAttribute( state, 'featured_media' );\r\n\r\n\tif ( previewLink && featuredImageId ) {\r\n\t\treturn addQueryArgs( previewLink, { _thumbnail_id: featuredImageId } );\r\n\t}\r\n\r\n\treturn previewLink;\r\n}\r\n\r\n/**\r\n * Returns a suggested post format for the current post, inferred only if there\r\n * is a single block within the post and it is of a type known to match a\r\n * default post format. Returns null if the format cannot be determined.\r\n *\r\n * @return {?string} Suggested post format.\r\n */\r\nexport const getSuggestedPostFormat = createRegistrySelector(\r\n\t( select ) => () => {\r\n\t\tconst blocks = select( blockEditorStore ).getBlocks();\r\n\r\n\t\tif ( blocks.length > 2 ) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet name;\r\n\t\t// If there is only one block in the content of the post grab its name\r\n\t\t// so we can derive a suitable post format from it.\r\n\t\tif ( blocks.length === 1 ) {\r\n\t\t\tname = blocks[ 0 ].name;\r\n\t\t\t// Check for core/embed `video` and `audio` eligible suggestions.\r\n\t\t\tif ( name === 'core/embed' ) {\r\n\t\t\t\tconst provider = blocks[ 0 ].attributes?.providerNameSlug;\r\n\t\t\t\tif ( [ 'youtube', 'vimeo' ].includes( provider ) ) {\r\n\t\t\t\t\tname = 'core/video';\r\n\t\t\t\t} else if ( [ 'spotify', 'soundcloud' ].includes( provider ) ) {\r\n\t\t\t\t\tname = 'core/audio';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If there are two blocks in the content and the last one is a text blocks\r\n\t\t// grab the name of the first one to also suggest a post format from it.\r\n\t\tif ( blocks.length === 2 && blocks[ 1 ].name === 'core/paragraph' ) {\r\n\t\t\tname = blocks[ 0 ].name;\r\n\t\t}\r\n\r\n\t\t// We only convert to default post formats in core.\r\n\t\tswitch ( name ) {\r\n\t\t\tcase 'core/image':\r\n\t\t\t\treturn 'image';\r\n\t\t\tcase 'core/quote':\r\n\t\t\tcase 'core/pullquote':\r\n\t\t\t\treturn 'quote';\r\n\t\t\tcase 'core/gallery':\r\n\t\t\t\treturn 'gallery';\r\n\t\t\tcase 'core/video':\r\n\t\t\t\treturn 'video';\r\n\t\t\tcase 'core/audio':\r\n\t\t\t\treturn 'audio';\r\n\t\t\tdefault:\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns the content of the post being edited.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {string} Post content.\r\n */\r\nexport const getEditedPostContent = createRegistrySelector(\r\n\t( select ) => ( state ) => {\r\n\t\tconst postId = getCurrentPostId( state );\r\n\t\tconst postType = getCurrentPostType( state );\r\n\t\tconst record = select( coreStore ).getEditedEntityRecord(\r\n\t\t\t'postType',\r\n\t\t\tpostType,\r\n\t\t\tpostId\r\n\t\t);\r\n\t\tif ( record ) {\r\n\t\t\tif ( typeof record.content === 'function' ) {\r\n\t\t\t\treturn record.content( record );\r\n\t\t\t} else if ( record.blocks ) {\r\n\t\t\t\treturn __unstableSerializeAndClean( record.blocks );\r\n\t\t\t} else if ( record.content ) {\r\n\t\t\t\treturn record.content;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if the post is being published, or false otherwise.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether post is being published.\r\n */\r\nexport function isPublishingPost( state ) {\r\n\treturn (\r\n\t\tisSavingPost( state ) &&\r\n\t\t! isCurrentPostPublished( state ) &&\r\n\t\tgetEditedPostAttribute( state, 'status' ) === 'publish'\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns whether the permalink is editable or not.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {boolean} Whether or not the permalink is editable.\r\n */\r\nexport function isPermalinkEditable( state ) {\r\n\tconst permalinkTemplate = getEditedPostAttribute(\r\n\t\tstate,\r\n\t\t'permalink_template'\r\n\t);\r\n\r\n\treturn PERMALINK_POSTNAME_REGEX.test( permalinkTemplate );\r\n}\r\n\r\n/**\r\n * Returns the permalink for the post.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {?string} The permalink, or null if the post is not viewable.\r\n */\r\nexport function getPermalink( state ) {\r\n\tconst permalinkParts = getPermalinkParts( state );\r\n\tif ( ! permalinkParts ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst { prefix, postName, suffix } = permalinkParts;\r\n\r\n\tif ( isPermalinkEditable( state ) ) {\r\n\t\treturn prefix + postName + suffix;\r\n\t}\r\n\r\n\treturn prefix;\r\n}\r\n\r\n/**\r\n * Returns the slug for the post being edited, preferring a manually edited\r\n * value if one exists, then a sanitized version of the current post title, and\r\n * finally the post ID.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {string} The current slug to be displayed in the editor\r\n */\r\nexport function getEditedPostSlug( state ) {\r\n\treturn (\r\n\t\tgetEditedPostAttribute( state, 'slug' ) ||\r\n\t\tcleanForSlug( getEditedPostAttribute( state, 'title' ) ) ||\r\n\t\tgetCurrentPostId( state )\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns the permalink for a post, split into its three parts: the prefix,\r\n * the postName, and the suffix.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {Object} An object containing the prefix, postName, and suffix for\r\n *                  the permalink, or null if the post is not viewable.\r\n */\r\nexport function getPermalinkParts( state ) {\r\n\tconst permalinkTemplate = getEditedPostAttribute(\r\n\t\tstate,\r\n\t\t'permalink_template'\r\n\t);\r\n\tif ( ! permalinkTemplate ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst postName =\r\n\t\tgetEditedPostAttribute( state, 'slug' ) ||\r\n\t\tgetEditedPostAttribute( state, 'generated_slug' );\r\n\r\n\tconst [ prefix, suffix ] = permalinkTemplate.split(\r\n\t\tPERMALINK_POSTNAME_REGEX\r\n\t);\r\n\r\n\treturn {\r\n\t\tprefix,\r\n\t\tpostName,\r\n\t\tsuffix,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns whether the post is locked.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Is locked.\r\n */\r\nexport function isPostLocked( state ) {\r\n\treturn state.postLock.isLocked;\r\n}\r\n\r\n/**\r\n * Returns whether post saving is locked.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Is locked.\r\n */\r\nexport function isPostSavingLocked( state ) {\r\n\treturn Object.keys( state.postSavingLock ).length > 0;\r\n}\r\n\r\n/**\r\n * Returns whether post autosaving is locked.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Is locked.\r\n */\r\nexport function isPostAutosavingLocked( state ) {\r\n\treturn Object.keys( state.postAutosavingLock ).length > 0;\r\n}\r\n\r\n/**\r\n * Returns whether the edition of the post has been taken over.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Is post lock takeover.\r\n */\r\nexport function isPostLockTakeover( state ) {\r\n\treturn state.postLock.isTakeover;\r\n}\r\n\r\n/**\r\n * Returns details about the post lock user.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Object} A user object.\r\n */\r\nexport function getPostLockUser( state ) {\r\n\treturn state.postLock.user;\r\n}\r\n\r\n/**\r\n * Returns the active post lock.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Object} The lock object.\r\n */\r\nexport function getActivePostLock( state ) {\r\n\treturn state.postLock.activePostLock;\r\n}\r\n\r\n/**\r\n * Returns whether or not the user has the unfiltered_html capability.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {boolean} Whether the user can or can't post unfiltered HTML.\r\n */\r\nexport function canUserUseUnfilteredHTML( state ) {\r\n\treturn Boolean(\r\n\t\tgetCurrentPost( state )._links?.hasOwnProperty(\r\n\t\t\t'wp:action-unfiltered-html'\r\n\t\t)\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns whether the pre-publish panel should be shown\r\n * or skipped when the user clicks the \"publish\" button.\r\n *\r\n * @return {boolean} Whether the pre-publish panel should be shown or not.\r\n */\r\nexport const isPublishSidebarEnabled = createRegistrySelector(\r\n\t( select ) => () =>\r\n\t\t!! select( preferencesStore ).get( 'core', 'isPublishSidebarEnabled' )\r\n);\r\n\r\n/**\r\n * Return the current block list.\r\n *\r\n * @param {Object} state\r\n * @return {Array} Block list.\r\n */\r\nexport const getEditorBlocks = createSelector(\r\n\t( state ) => {\r\n\t\treturn (\r\n\t\t\tgetEditedPostAttribute( state, 'blocks' ) ||\r\n\t\t\tparse( getEditedPostContent( state ) )\r\n\t\t);\r\n\t},\r\n\t( state ) => [\r\n\t\tgetEditedPostAttribute( state, 'blocks' ),\r\n\t\tgetEditedPostContent( state ),\r\n\t]\r\n);\r\n\r\n/**\r\n * Returns true if the given panel was programmatically removed, or false otherwise.\r\n * All panels are not removed by default.\r\n *\r\n * @param {Object} state     Global application state.\r\n * @param {string} panelName A string that identifies the panel.\r\n *\r\n * @return {boolean} Whether or not the panel is removed.\r\n */\r\nexport function isEditorPanelRemoved( state, panelName ) {\r\n\treturn state.removedPanels.includes( panelName );\r\n}\r\n\r\n/**\r\n * Returns true if the given panel is enabled, or false otherwise. Panels are\r\n * enabled by default.\r\n *\r\n * @param {Object} state     Global application state.\r\n * @param {string} panelName A string that identifies the panel.\r\n *\r\n * @return {boolean} Whether or not the panel is enabled.\r\n */\r\nexport const isEditorPanelEnabled = createRegistrySelector(\r\n\t( select ) => ( state, panelName ) => {\r\n\t\t// For backward compatibility, we check edit-post\r\n\t\t// even though now this is in \"editor\" package.\r\n\t\tconst inactivePanels = select( preferencesStore ).get(\r\n\t\t\t'core',\r\n\t\t\t'inactivePanels'\r\n\t\t);\r\n\t\treturn (\r\n\t\t\t! isEditorPanelRemoved( state, panelName ) &&\r\n\t\t\t! inactivePanels?.includes( panelName )\r\n\t\t);\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if the given panel is open, or false otherwise. Panels are\r\n * closed by default.\r\n *\r\n * @param {Object} state     Global application state.\r\n * @param {string} panelName A string that identifies the panel.\r\n *\r\n * @return {boolean} Whether or not the panel is open.\r\n */\r\nexport const isEditorPanelOpened = createRegistrySelector(\r\n\t( select ) => ( state, panelName ) => {\r\n\t\t// For backward compatibility, we check edit-post\r\n\t\t// even though now this is in \"editor\" package.\r\n\t\tconst openPanels = select( preferencesStore ).get(\r\n\t\t\t'core',\r\n\t\t\t'openPanels'\r\n\t\t);\r\n\t\treturn !! openPanels?.includes( panelName );\r\n\t}\r\n);\r\n\r\n/**\r\n * A block selection object.\r\n *\r\n * @typedef {Object} WPBlockSelection\r\n *\r\n * @property {string} clientId     A block client ID.\r\n * @property {string} attributeKey A block attribute key.\r\n * @property {number} offset       An attribute value offset, based on the rich\r\n *                                 text value. See `wp.richText.create`.\r\n */\r\n\r\n/**\r\n * Returns the current selection start.\r\n *\r\n * @param {Object} state\r\n * @return {WPBlockSelection} The selection start.\r\n *\r\n * @deprecated since Gutenberg 10.0.0.\r\n */\r\nexport function getEditorSelectionStart( state ) {\r\n\tdeprecated( \"select('core/editor').getEditorSelectionStart\", {\r\n\t\tsince: '5.8',\r\n\t\talternative: \"select('core/editor').getEditorSelection\",\r\n\t} );\r\n\treturn getEditedPostAttribute( state, 'selection' )?.selectionStart;\r\n}\r\n\r\n/**\r\n * Returns the current selection end.\r\n *\r\n * @param {Object} state\r\n * @return {WPBlockSelection} The selection end.\r\n *\r\n * @deprecated since Gutenberg 10.0.0.\r\n */\r\nexport function getEditorSelectionEnd( state ) {\r\n\tdeprecated( \"select('core/editor').getEditorSelectionStart\", {\r\n\t\tsince: '5.8',\r\n\t\talternative: \"select('core/editor').getEditorSelection\",\r\n\t} );\r\n\treturn getEditedPostAttribute( state, 'selection' )?.selectionEnd;\r\n}\r\n\r\n/**\r\n * Returns the current selection.\r\n *\r\n * @param {Object} state\r\n * @return {WPBlockSelection} The selection end.\r\n */\r\nexport function getEditorSelection( state ) {\r\n\treturn getEditedPostAttribute( state, 'selection' );\r\n}\r\n\r\n/**\r\n * Is the editor ready\r\n *\r\n * @param {Object} state\r\n * @return {boolean} is Ready.\r\n */\r\nexport function __unstableIsEditorReady( state ) {\r\n\treturn !! state.postId;\r\n}\r\n\r\n/**\r\n * Returns the post editor settings.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {Object} The editor settings object.\r\n */\r\nexport function getEditorSettings( state ) {\r\n\treturn state.editorSettings;\r\n}\r\n\r\n/**\r\n * Returns the post editor's rendering mode.\r\n *\r\n * @param {Object} state Editor state.\r\n *\r\n * @return {string} Rendering mode.\r\n */\r\nexport function getRenderingMode( state ) {\r\n\treturn state.renderingMode;\r\n}\r\n\r\n/**\r\n * Returns the current editing canvas device type.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {string} Device type.\r\n */\r\nexport const getDeviceType = createRegistrySelector(\r\n\t( select ) => ( state ) => {\r\n\t\tconst editorMode = select( blockEditorStore ).__unstableGetEditorMode();\r\n\t\tif ( editorMode === 'zoom-out' ) {\r\n\t\t\treturn 'Desktop';\r\n\t\t}\r\n\t\treturn state.deviceType;\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if the list view is opened.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the list view is opened.\r\n */\r\nexport function isListViewOpened( state ) {\r\n\treturn state.listViewPanel;\r\n}\r\n\r\n/**\r\n * Returns true if the inserter is opened.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether the inserter is opened.\r\n */\r\nexport function isInserterOpened( state ) {\r\n\treturn !! state.blockInserterPanel;\r\n}\r\n\r\n/**\r\n * Returns the current editing mode.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {string} Editing mode.\r\n */\r\nexport const getEditorMode = createRegistrySelector(\r\n\t( select ) => () =>\r\n\t\tselect( preferencesStore ).get( 'core', 'editorMode' ) ?? 'visual'\r\n);\r\n\r\n/*\r\n * Backward compatibility\r\n */\r\n\r\n/**\r\n * Returns state object prior to a specified optimist transaction ID, or `null`\r\n * if the transaction corresponding to the given ID cannot be found.\r\n *\r\n * @deprecated since Gutenberg 9.7.0.\r\n */\r\nexport function getStateBeforeOptimisticTransaction() {\r\n\tdeprecated( \"select('core/editor').getStateBeforeOptimisticTransaction\", {\r\n\t\tsince: '5.7',\r\n\t\thint: 'No state history is kept on this store anymore',\r\n\t} );\r\n\r\n\treturn null;\r\n}\r\n/**\r\n * Returns true if an optimistic transaction is pending commit, for which the\r\n * before state satisfies the given predicate function.\r\n *\r\n * @deprecated since Gutenberg 9.7.0.\r\n */\r\nexport function inSomeHistory() {\r\n\tdeprecated( \"select('core/editor').inSomeHistory\", {\r\n\t\tsince: '5.7',\r\n\t\thint: 'No state history is kept on this store anymore',\r\n\t} );\r\n\treturn false;\r\n}\r\n\r\nfunction getBlockEditorSelector( name ) {\r\n\treturn createRegistrySelector( ( select ) => ( state, ...args ) => {\r\n\t\tdeprecated( \"`wp.data.select( 'core/editor' ).\" + name + '`', {\r\n\t\t\tsince: '5.3',\r\n\t\t\talternative: \"`wp.data.select( 'core/block-editor' ).\" + name + '`',\r\n\t\t\tversion: '6.2',\r\n\t\t} );\r\n\r\n\t\treturn select( blockEditorStore )[ name ]( ...args );\r\n\t} );\r\n}\r\n\r\n/**\r\n * @see getBlockName in core/block-editor store.\r\n */\r\nexport const getBlockName = getBlockEditorSelector( 'getBlockName' );\r\n\r\n/**\r\n * @see isBlockValid in core/block-editor store.\r\n */\r\nexport const isBlockValid = getBlockEditorSelector( 'isBlockValid' );\r\n\r\n/**\r\n * @see getBlockAttributes in core/block-editor store.\r\n */\r\nexport const getBlockAttributes =\r\n\tgetBlockEditorSelector( 'getBlockAttributes' );\r\n\r\n/**\r\n * @see getBlock in core/block-editor store.\r\n */\r\nexport const getBlock = getBlockEditorSelector( 'getBlock' );\r\n\r\n/**\r\n * @see getBlocks in core/block-editor store.\r\n */\r\nexport const getBlocks = getBlockEditorSelector( 'getBlocks' );\r\n\r\n/**\r\n * @see getClientIdsOfDescendants in core/block-editor store.\r\n */\r\nexport const getClientIdsOfDescendants = getBlockEditorSelector(\r\n\t'getClientIdsOfDescendants'\r\n);\r\n\r\n/**\r\n * @see getClientIdsWithDescendants in core/block-editor store.\r\n */\r\nexport const getClientIdsWithDescendants = getBlockEditorSelector(\r\n\t'getClientIdsWithDescendants'\r\n);\r\n\r\n/**\r\n * @see getGlobalBlockCount in core/block-editor store.\r\n */\r\nexport const getGlobalBlockCount = getBlockEditorSelector(\r\n\t'getGlobalBlockCount'\r\n);\r\n\r\n/**\r\n * @see getBlocksByClientId in core/block-editor store.\r\n */\r\nexport const getBlocksByClientId = getBlockEditorSelector(\r\n\t'getBlocksByClientId'\r\n);\r\n\r\n/**\r\n * @see getBlockCount in core/block-editor store.\r\n */\r\nexport const getBlockCount = getBlockEditorSelector( 'getBlockCount' );\r\n\r\n/**\r\n * @see getBlockSelectionStart in core/block-editor store.\r\n */\r\nexport const getBlockSelectionStart = getBlockEditorSelector(\r\n\t'getBlockSelectionStart'\r\n);\r\n\r\n/**\r\n * @see getBlockSelectionEnd in core/block-editor store.\r\n */\r\nexport const getBlockSelectionEnd = getBlockEditorSelector(\r\n\t'getBlockSelectionEnd'\r\n);\r\n\r\n/**\r\n * @see getSelectedBlockCount in core/block-editor store.\r\n */\r\nexport const getSelectedBlockCount = getBlockEditorSelector(\r\n\t'getSelectedBlockCount'\r\n);\r\n\r\n/**\r\n * @see hasSelectedBlock in core/block-editor store.\r\n */\r\nexport const hasSelectedBlock = getBlockEditorSelector( 'hasSelectedBlock' );\r\n\r\n/**\r\n * @see getSelectedBlockClientId in core/block-editor store.\r\n */\r\nexport const getSelectedBlockClientId = getBlockEditorSelector(\r\n\t'getSelectedBlockClientId'\r\n);\r\n\r\n/**\r\n * @see getSelectedBlock in core/block-editor store.\r\n */\r\nexport const getSelectedBlock = getBlockEditorSelector( 'getSelectedBlock' );\r\n\r\n/**\r\n * @see getBlockRootClientId in core/block-editor store.\r\n */\r\nexport const getBlockRootClientId = getBlockEditorSelector(\r\n\t'getBlockRootClientId'\r\n);\r\n\r\n/**\r\n * @see getBlockHierarchyRootClientId in core/block-editor store.\r\n */\r\nexport const getBlockHierarchyRootClientId = getBlockEditorSelector(\r\n\t'getBlockHierarchyRootClientId'\r\n);\r\n\r\n/**\r\n * @see getAdjacentBlockClientId in core/block-editor store.\r\n */\r\nexport const getAdjacentBlockClientId = getBlockEditorSelector(\r\n\t'getAdjacentBlockClientId'\r\n);\r\n\r\n/**\r\n * @see getPreviousBlockClientId in core/block-editor store.\r\n */\r\nexport const getPreviousBlockClientId = getBlockEditorSelector(\r\n\t'getPreviousBlockClientId'\r\n);\r\n\r\n/**\r\n * @see getNextBlockClientId in core/block-editor store.\r\n */\r\nexport const getNextBlockClientId = getBlockEditorSelector(\r\n\t'getNextBlockClientId'\r\n);\r\n\r\n/**\r\n * @see getSelectedBlocksInitialCaretPosition in core/block-editor store.\r\n */\r\nexport const getSelectedBlocksInitialCaretPosition = getBlockEditorSelector(\r\n\t'getSelectedBlocksInitialCaretPosition'\r\n);\r\n\r\n/**\r\n * @see getMultiSelectedBlockClientIds in core/block-editor store.\r\n */\r\nexport const getMultiSelectedBlockClientIds = getBlockEditorSelector(\r\n\t'getMultiSelectedBlockClientIds'\r\n);\r\n\r\n/**\r\n * @see getMultiSelectedBlocks in core/block-editor store.\r\n */\r\nexport const getMultiSelectedBlocks = getBlockEditorSelector(\r\n\t'getMultiSelectedBlocks'\r\n);\r\n\r\n/**\r\n * @see getFirstMultiSelectedBlockClientId in core/block-editor store.\r\n */\r\nexport const getFirstMultiSelectedBlockClientId = getBlockEditorSelector(\r\n\t'getFirstMultiSelectedBlockClientId'\r\n);\r\n\r\n/**\r\n * @see getLastMultiSelectedBlockClientId in core/block-editor store.\r\n */\r\nexport const getLastMultiSelectedBlockClientId = getBlockEditorSelector(\r\n\t'getLastMultiSelectedBlockClientId'\r\n);\r\n\r\n/**\r\n * @see isFirstMultiSelectedBlock in core/block-editor store.\r\n */\r\nexport const isFirstMultiSelectedBlock = getBlockEditorSelector(\r\n\t'isFirstMultiSelectedBlock'\r\n);\r\n\r\n/**\r\n * @see isBlockMultiSelected in core/block-editor store.\r\n */\r\nexport const isBlockMultiSelected = getBlockEditorSelector(\r\n\t'isBlockMultiSelected'\r\n);\r\n\r\n/**\r\n * @see isAncestorMultiSelected in core/block-editor store.\r\n */\r\nexport const isAncestorMultiSelected = getBlockEditorSelector(\r\n\t'isAncestorMultiSelected'\r\n);\r\n\r\n/**\r\n * @see getMultiSelectedBlocksStartClientId in core/block-editor store.\r\n */\r\nexport const getMultiSelectedBlocksStartClientId = getBlockEditorSelector(\r\n\t'getMultiSelectedBlocksStartClientId'\r\n);\r\n\r\n/**\r\n * @see getMultiSelectedBlocksEndClientId in core/block-editor store.\r\n */\r\nexport const getMultiSelectedBlocksEndClientId = getBlockEditorSelector(\r\n\t'getMultiSelectedBlocksEndClientId'\r\n);\r\n\r\n/**\r\n * @see getBlockOrder in core/block-editor store.\r\n */\r\nexport const getBlockOrder = getBlockEditorSelector( 'getBlockOrder' );\r\n\r\n/**\r\n * @see getBlockIndex in core/block-editor store.\r\n */\r\nexport const getBlockIndex = getBlockEditorSelector( 'getBlockIndex' );\r\n\r\n/**\r\n * @see isBlockSelected in core/block-editor store.\r\n */\r\nexport const isBlockSelected = getBlockEditorSelector( 'isBlockSelected' );\r\n\r\n/**\r\n * @see hasSelectedInnerBlock in core/block-editor store.\r\n */\r\nexport const hasSelectedInnerBlock = getBlockEditorSelector(\r\n\t'hasSelectedInnerBlock'\r\n);\r\n\r\n/**\r\n * @see isBlockWithinSelection in core/block-editor store.\r\n */\r\nexport const isBlockWithinSelection = getBlockEditorSelector(\r\n\t'isBlockWithinSelection'\r\n);\r\n\r\n/**\r\n * @see hasMultiSelection in core/block-editor store.\r\n */\r\nexport const hasMultiSelection = getBlockEditorSelector( 'hasMultiSelection' );\r\n\r\n/**\r\n * @see isMultiSelecting in core/block-editor store.\r\n */\r\nexport const isMultiSelecting = getBlockEditorSelector( 'isMultiSelecting' );\r\n\r\n/**\r\n * @see isSelectionEnabled in core/block-editor store.\r\n */\r\nexport const isSelectionEnabled =\r\n\tgetBlockEditorSelector( 'isSelectionEnabled' );\r\n\r\n/**\r\n * @see getBlockMode in core/block-editor store.\r\n */\r\nexport const getBlockMode = getBlockEditorSelector( 'getBlockMode' );\r\n\r\n/**\r\n * @see isTyping in core/block-editor store.\r\n */\r\nexport const isTyping = getBlockEditorSelector( 'isTyping' );\r\n\r\n/**\r\n * @see isCaretWithinFormattedText in core/block-editor store.\r\n */\r\nexport const isCaretWithinFormattedText = getBlockEditorSelector(\r\n\t'isCaretWithinFormattedText'\r\n);\r\n\r\n/**\r\n * @see getBlockInsertionPoint in core/block-editor store.\r\n */\r\nexport const getBlockInsertionPoint = getBlockEditorSelector(\r\n\t'getBlockInsertionPoint'\r\n);\r\n\r\n/**\r\n * @see isBlockInsertionPointVisible in core/block-editor store.\r\n */\r\nexport const isBlockInsertionPointVisible = getBlockEditorSelector(\r\n\t'isBlockInsertionPointVisible'\r\n);\r\n\r\n/**\r\n * @see isValidTemplate in core/block-editor store.\r\n */\r\nexport const isValidTemplate = getBlockEditorSelector( 'isValidTemplate' );\r\n\r\n/**\r\n * @see getTemplate in core/block-editor store.\r\n */\r\nexport const getTemplate = getBlockEditorSelector( 'getTemplate' );\r\n\r\n/**\r\n * @see getTemplateLock in core/block-editor store.\r\n */\r\nexport const getTemplateLock = getBlockEditorSelector( 'getTemplateLock' );\r\n\r\n/**\r\n * @see canInsertBlockType in core/block-editor store.\r\n */\r\nexport const canInsertBlockType =\r\n\tgetBlockEditorSelector( 'canInsertBlockType' );\r\n\r\n/**\r\n * @see getInserterItems in core/block-editor store.\r\n */\r\nexport const getInserterItems = getBlockEditorSelector( 'getInserterItems' );\r\n\r\n/**\r\n * @see hasInserterItems in core/block-editor store.\r\n */\r\nexport const hasInserterItems = getBlockEditorSelector( 'hasInserterItems' );\r\n\r\n/**\r\n * @see getBlockListSettings in core/block-editor store.\r\n */\r\nexport const getBlockListSettings = getBlockEditorSelector(\r\n\t'getBlockListSettings'\r\n);\r\n\r\n/**\r\n * Returns the default template types.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Object} The template types.\r\n */\r\nexport function __experimentalGetDefaultTemplateTypes( state ) {\r\n\treturn getEditorSettings( state )?.defaultTemplateTypes;\r\n}\r\n\r\n/**\r\n * Returns the default template part areas.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {Array} The template part areas.\r\n */\r\nexport const __experimentalGetDefaultTemplatePartAreas = createSelector(\r\n\t( state ) => {\r\n\t\tconst areas =\r\n\t\t\tgetEditorSettings( state )?.defaultTemplatePartAreas ?? [];\r\n\t\treturn areas.map( ( item ) => {\r\n\t\t\treturn { ...item, icon: getTemplatePartIcon( item.icon ) };\r\n\t\t} );\r\n\t},\r\n\t( state ) => [ getEditorSettings( state )?.defaultTemplatePartAreas ]\r\n);\r\n\r\n/**\r\n * Returns a default template type searched by slug.\r\n *\r\n * @param {Object} state Global application state.\r\n * @param {string} slug  The template type slug.\r\n *\r\n * @return {Object} The template type.\r\n */\r\nexport const __experimentalGetDefaultTemplateType = createSelector(\r\n\t( state, slug ) => {\r\n\t\tconst templateTypes = __experimentalGetDefaultTemplateTypes( state );\r\n\t\tif ( ! templateTypes ) {\r\n\t\t\treturn EMPTY_OBJECT;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\tObject.values( templateTypes ).find(\r\n\t\t\t\t( type ) => type.slug === slug\r\n\t\t\t) ?? EMPTY_OBJECT\r\n\t\t);\r\n\t},\r\n\t( state ) => [ __experimentalGetDefaultTemplateTypes( state ) ]\r\n);\r\n\r\n/**\r\n * Given a template entity, return information about it which is ready to be\r\n * rendered, such as the title, description, and icon.\r\n *\r\n * @param {Object} state    Global application state.\r\n * @param {Object} template The template for which we need information.\r\n * @return {Object} Information about the template, including title, description, and icon.\r\n */\r\nexport const __experimentalGetTemplateInfo = createSelector(\r\n\t( state, template ) => {\r\n\t\tif ( ! template ) {\r\n\t\t\treturn EMPTY_OBJECT;\r\n\t\t}\r\n\r\n\t\tconst { description, slug, title, area } = template;\r\n\t\tconst { title: defaultTitle, description: defaultDescription } =\r\n\t\t\t__experimentalGetDefaultTemplateType( state, slug );\r\n\r\n\t\tconst templateTitle =\r\n\t\t\ttypeof title === 'string' ? title : title?.rendered;\r\n\t\tconst templateDescription =\r\n\t\t\ttypeof description === 'string' ? description : description?.raw;\r\n\t\tconst templateIcon =\r\n\t\t\t__experimentalGetDefaultTemplatePartAreas( state ).find(\r\n\t\t\t\t( item ) => area === item.area\r\n\t\t\t)?.icon || layout;\r\n\r\n\t\treturn {\r\n\t\t\ttitle:\r\n\t\t\t\ttemplateTitle && templateTitle !== slug\r\n\t\t\t\t\t? templateTitle\r\n\t\t\t\t\t: defaultTitle || slug,\r\n\t\t\tdescription: templateDescription || defaultDescription,\r\n\t\t\ticon: templateIcon,\r\n\t\t};\r\n\t},\r\n\t( state ) => [\r\n\t\t__experimentalGetDefaultTemplateTypes( state ),\r\n\t\t__experimentalGetDefaultTemplatePartAreas( state ),\r\n\t]\r\n);\r\n\r\n/**\r\n * Returns a post type label depending on the current post.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {string|undefined} The post type label if available, otherwise undefined.\r\n */\r\nexport const getPostTypeLabel = createRegistrySelector(\r\n\t( select ) => ( state ) => {\r\n\t\tconst currentPostType = getCurrentPostType( state );\r\n\t\tconst postType = select( coreStore ).getPostType( currentPostType );\r\n\t\t// Disable reason: Post type labels object is shaped like this.\r\n\t\t// eslint-disable-next-line camelcase\r\n\t\treturn postType?.labels?.singular_name;\r\n\t}\r\n);\r\n\r\n/**\r\n * Returns true if the publish sidebar is opened.\r\n *\r\n * @param {Object} state Global application state\r\n *\r\n * @return {boolean} Whether the publish sidebar is open.\r\n */\r\nexport function isPublishSidebarOpened( state ) {\r\n\treturn state.publishSidebarActive;\r\n}\r\n"],"mappings":"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","ignoreList":[]}