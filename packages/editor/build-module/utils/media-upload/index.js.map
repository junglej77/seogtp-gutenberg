{"version":3,"names":["v4","uuid","select","dispatch","uploadMedia","store","editorStore","noop","mediaUpload","additionalData","allowedTypes","filesList","maxUploadFileSize","onError","onFileChange","getCurrentPost","getEditorSettings","lockPostAutosaving","unlockPostAutosaving","lockPostSaving","unlockPostSaving","wpAllowedMimeTypes","allowedMimeTypes","lockKey","imageIsUploading","currentPost","currentPostId","id","wp_id","setSaveLock","postData","post","clearSaveLock","file","message"],"sources":["@wordpress/editor/src/utils/media-upload/index.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { select, dispatch } from '@wordpress/data';\r\nimport { uploadMedia } from '@wordpress/media-utils';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store as editorStore } from '../../store';\r\n\r\nconst noop = () => {};\r\n\r\n/**\r\n * Upload a media file when the file upload button is activated.\r\n * Wrapper around mediaUpload() that injects the current post ID.\r\n *\r\n * @param {Object}   $0                   Parameters object passed to the function.\r\n * @param {?Object}  $0.additionalData    Additional data to include in the request.\r\n * @param {string}   $0.allowedTypes      Array with the types of media that can be uploaded, if unset all types are allowed.\r\n * @param {Array}    $0.filesList         List of files.\r\n * @param {?number}  $0.maxUploadFileSize Maximum upload size in bytes allowed for the site.\r\n * @param {Function} $0.onError           Function called when an error happens.\r\n * @param {Function} $0.onFileChange      Function called each time a file or a temporary representation of the file is available.\r\n */\r\nexport default function mediaUpload( {\r\n\tadditionalData = {},\r\n\tallowedTypes,\r\n\tfilesList,\r\n\tmaxUploadFileSize,\r\n\tonError = noop,\r\n\tonFileChange,\r\n} ) {\r\n\tconst { getCurrentPost, getEditorSettings } = select( editorStore );\r\n\tconst {\r\n\t\tlockPostAutosaving,\r\n\t\tunlockPostAutosaving,\r\n\t\tlockPostSaving,\r\n\t\tunlockPostSaving,\r\n\t} = dispatch( editorStore );\r\n\r\n\tconst wpAllowedMimeTypes = getEditorSettings().allowedMimeTypes;\r\n\tconst lockKey = `image-upload-${ uuid() }`;\r\n\tlet imageIsUploading = false;\r\n\tmaxUploadFileSize =\r\n\t\tmaxUploadFileSize || getEditorSettings().maxUploadFileSize;\r\n\tconst currentPost = getCurrentPost();\r\n\t// Templates and template parts' numerical ID is stored in `wp_id`.\r\n\tconst currentPostId =\r\n\t\ttypeof currentPost?.id === 'number'\r\n\t\t\t? currentPost.id\r\n\t\t\t: currentPost?.wp_id;\r\n\tconst setSaveLock = () => {\r\n\t\tlockPostSaving( lockKey );\r\n\t\tlockPostAutosaving( lockKey );\r\n\t\timageIsUploading = true;\r\n\t};\r\n\r\n\tconst postData = currentPostId ? { post: currentPostId } : {};\r\n\tconst clearSaveLock = () => {\r\n\t\tunlockPostSaving( lockKey );\r\n\t\tunlockPostAutosaving( lockKey );\r\n\t\timageIsUploading = false;\r\n\t};\r\n\r\n\tuploadMedia( {\r\n\t\tallowedTypes,\r\n\t\tfilesList,\r\n\t\tonFileChange: ( file ) => {\r\n\t\t\tif ( ! imageIsUploading ) {\r\n\t\t\t\tsetSaveLock();\r\n\t\t\t} else {\r\n\t\t\t\tclearSaveLock();\r\n\t\t\t}\r\n\t\t\tonFileChange( file );\r\n\t\t},\r\n\t\tadditionalData: {\r\n\t\t\t...postData,\r\n\t\t\t...additionalData,\r\n\t\t},\r\n\t\tmaxUploadFileSize,\r\n\t\tonError: ( { message } ) => {\r\n\t\t\tclearSaveLock();\r\n\t\t\tonError( message );\r\n\t\t},\r\n\t\twpAllowedMimeTypes,\r\n\t} );\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,EAAE,IAAIC,IAAI,QAAQ,MAAM;;AAEjC;AACA;AACA;AACA,SAASC,MAAM,EAAEC,QAAQ,QAAQ,iBAAiB;AAClD,SAASC,WAAW,QAAQ,wBAAwB;;AAEpD;AACA;AACA;AACA,SAASC,KAAK,IAAIC,WAAW,QAAQ,aAAa;AAElD,MAAMC,IAAI,GAAGA,CAAA,KAAM,CAAC,CAAC;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,WAAWA,CAAE;EACpCC,cAAc,GAAG,CAAC,CAAC;EACnBC,YAAY;EACZC,SAAS;EACTC,iBAAiB;EACjBC,OAAO,GAAGN,IAAI;EACdO;AACD,CAAC,EAAG;EACH,MAAM;IAAEC,cAAc;IAAEC;EAAkB,CAAC,GAAGd,MAAM,CAAEI,WAAY,CAAC;EACnE,MAAM;IACLW,kBAAkB;IAClBC,oBAAoB;IACpBC,cAAc;IACdC;EACD,CAAC,GAAGjB,QAAQ,CAAEG,WAAY,CAAC;EAE3B,MAAMe,kBAAkB,GAAGL,iBAAiB,CAAC,CAAC,CAACM,gBAAgB;EAC/D,MAAMC,OAAO,GAAI,gBAAgBtB,IAAI,CAAC,CAAG,EAAC;EAC1C,IAAIuB,gBAAgB,GAAG,KAAK;EAC5BZ,iBAAiB,GAChBA,iBAAiB,IAAII,iBAAiB,CAAC,CAAC,CAACJ,iBAAiB;EAC3D,MAAMa,WAAW,GAAGV,cAAc,CAAC,CAAC;EACpC;EACA,MAAMW,aAAa,GAClB,OAAOD,WAAW,EAAEE,EAAE,KAAK,QAAQ,GAChCF,WAAW,CAACE,EAAE,GACdF,WAAW,EAAEG,KAAK;EACtB,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACzBV,cAAc,CAAEI,OAAQ,CAAC;IACzBN,kBAAkB,CAAEM,OAAQ,CAAC;IAC7BC,gBAAgB,GAAG,IAAI;EACxB,CAAC;EAED,MAAMM,QAAQ,GAAGJ,aAAa,GAAG;IAAEK,IAAI,EAAEL;EAAc,CAAC,GAAG,CAAC,CAAC;EAC7D,MAAMM,aAAa,GAAGA,CAAA,KAAM;IAC3BZ,gBAAgB,CAAEG,OAAQ,CAAC;IAC3BL,oBAAoB,CAAEK,OAAQ,CAAC;IAC/BC,gBAAgB,GAAG,KAAK;EACzB,CAAC;EAEDpB,WAAW,CAAE;IACZM,YAAY;IACZC,SAAS;IACTG,YAAY,EAAImB,IAAI,IAAM;MACzB,IAAK,CAAET,gBAAgB,EAAG;QACzBK,WAAW,CAAC,CAAC;MACd,CAAC,MAAM;QACNG,aAAa,CAAC,CAAC;MAChB;MACAlB,YAAY,CAAEmB,IAAK,CAAC;IACrB,CAAC;IACDxB,cAAc,EAAE;MACf,GAAGqB,QAAQ;MACX,GAAGrB;IACJ,CAAC;IACDG,iBAAiB;IACjBC,OAAO,EAAEA,CAAE;MAAEqB;IAAQ,CAAC,KAAM;MAC3BF,aAAa,CAAC,CAAC;MACfnB,OAAO,CAAEqB,OAAQ,CAAC;IACnB,CAAC;IACDb;EACD,CAAE,CAAC;AACJ","ignoreList":[]}