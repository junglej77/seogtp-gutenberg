{"version":3,"names":["decodeEntities","buildTermsTree","flatTerms","flatTermsWithParentAndChildren","map","term","children","parent","some","termsByParent","reduce","acc","push","fillWithChildren","terms","id","length","unescapeString","arg","unescapeTerm","name","unescapeTerms"],"sources":["@wordpress/editor/src/utils/terms.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { decodeEntities } from '@wordpress/html-entities';\r\n\r\n/**\r\n * Returns terms in a tree form.\r\n *\r\n * @param {Array} flatTerms Array of terms in flat format.\r\n *\r\n * @return {Array} Array of terms in tree format.\r\n */\r\nexport function buildTermsTree( flatTerms ) {\r\n\tconst flatTermsWithParentAndChildren = flatTerms.map( ( term ) => {\r\n\t\treturn {\r\n\t\t\tchildren: [],\r\n\t\t\tparent: null,\r\n\t\t\t...term,\r\n\t\t};\r\n\t} );\r\n\r\n\t// All terms should have a `parent` because we're about to index them by it.\r\n\tif (\r\n\t\tflatTermsWithParentAndChildren.some( ( { parent } ) => parent === null )\r\n\t) {\r\n\t\treturn flatTermsWithParentAndChildren;\r\n\t}\r\n\r\n\tconst termsByParent = flatTermsWithParentAndChildren.reduce(\r\n\t\t( acc, term ) => {\r\n\t\t\tconst { parent } = term;\r\n\t\t\tif ( ! acc[ parent ] ) {\r\n\t\t\t\tacc[ parent ] = [];\r\n\t\t\t}\r\n\t\t\tacc[ parent ].push( term );\r\n\t\t\treturn acc;\r\n\t\t},\r\n\t\t{}\r\n\t);\r\n\r\n\tconst fillWithChildren = ( terms ) => {\r\n\t\treturn terms.map( ( term ) => {\r\n\t\t\tconst children = termsByParent[ term.id ];\r\n\t\t\treturn {\r\n\t\t\t\t...term,\r\n\t\t\t\tchildren:\r\n\t\t\t\t\tchildren && children.length\r\n\t\t\t\t\t\t? fillWithChildren( children )\r\n\t\t\t\t\t\t: [],\r\n\t\t\t};\r\n\t\t} );\r\n\t};\r\n\r\n\treturn fillWithChildren( termsByParent[ '0' ] || [] );\r\n}\r\n\r\nexport const unescapeString = ( arg ) => {\r\n\treturn decodeEntities( arg );\r\n};\r\n\r\n/**\r\n * Returns a term object with name unescaped.\r\n *\r\n * @param {Object} term The term object to unescape.\r\n *\r\n * @return {Object} Term object with name property unescaped.\r\n */\r\nexport const unescapeTerm = ( term ) => {\r\n\treturn {\r\n\t\t...term,\r\n\t\tname: unescapeString( term.name ),\r\n\t};\r\n};\r\n\r\n/**\r\n * Returns an array of term objects with names unescaped.\r\n * The unescape of each term is performed using the unescapeTerm function.\r\n *\r\n * @param {Object[]} terms Array of term objects to unescape.\r\n *\r\n * @return {Object[]} Array of term objects unescaped.\r\n */\r\nexport const unescapeTerms = ( terms ) => {\r\n\treturn ( terms ?? [] ).map( unescapeTerm );\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,cAAc,QAAQ,0BAA0B;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAAEC,SAAS,EAAG;EAC3C,MAAMC,8BAA8B,GAAGD,SAAS,CAACE,GAAG,CAAIC,IAAI,IAAM;IACjE,OAAO;MACNC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE,IAAI;MACZ,GAAGF;IACJ,CAAC;EACF,CAAE,CAAC;;EAEH;EACA,IACCF,8BAA8B,CAACK,IAAI,CAAE,CAAE;IAAED;EAAO,CAAC,KAAMA,MAAM,KAAK,IAAK,CAAC,EACvE;IACD,OAAOJ,8BAA8B;EACtC;EAEA,MAAMM,aAAa,GAAGN,8BAA8B,CAACO,MAAM,CAC1D,CAAEC,GAAG,EAAEN,IAAI,KAAM;IAChB,MAAM;MAAEE;IAAO,CAAC,GAAGF,IAAI;IACvB,IAAK,CAAEM,GAAG,CAAEJ,MAAM,CAAE,EAAG;MACtBI,GAAG,CAAEJ,MAAM,CAAE,GAAG,EAAE;IACnB;IACAI,GAAG,CAAEJ,MAAM,CAAE,CAACK,IAAI,CAAEP,IAAK,CAAC;IAC1B,OAAOM,GAAG;EACX,CAAC,EACD,CAAC,CACF,CAAC;EAED,MAAME,gBAAgB,GAAKC,KAAK,IAAM;IACrC,OAAOA,KAAK,CAACV,GAAG,CAAIC,IAAI,IAAM;MAC7B,MAAMC,QAAQ,GAAGG,aAAa,CAAEJ,IAAI,CAACU,EAAE,CAAE;MACzC,OAAO;QACN,GAAGV,IAAI;QACPC,QAAQ,EACPA,QAAQ,IAAIA,QAAQ,CAACU,MAAM,GACxBH,gBAAgB,CAAEP,QAAS,CAAC,GAC5B;MACL,CAAC;IACF,CAAE,CAAC;EACJ,CAAC;EAED,OAAOO,gBAAgB,CAAEJ,aAAa,CAAE,GAAG,CAAE,IAAI,EAAG,CAAC;AACtD;AAEA,OAAO,MAAMQ,cAAc,GAAKC,GAAG,IAAM;EACxC,OAAOlB,cAAc,CAAEkB,GAAI,CAAC;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAKd,IAAI,IAAM;EACvC,OAAO;IACN,GAAGA,IAAI;IACPe,IAAI,EAAEH,cAAc,CAAEZ,IAAI,CAACe,IAAK;EACjC,CAAC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAKP,KAAK,IAAM;EACzC,OAAO,CAAEA,KAAK,aAALA,KAAK,cAALA,KAAK,GAAI,EAAE,EAAGV,GAAG,CAAEe,YAAa,CAAC;AAC3C,CAAC","ignoreList":[]}