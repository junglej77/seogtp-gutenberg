{"version":3,"names":["__unstableEscapeGreaterThan","REGEXP_INVALID_ATTRIBUTE_NAME","escapeAmpersand","value","replace","escapeQuotationMark","escapeLessThan","escapeAttribute","escapeHTML","escapeEditableHTML","isValidAttributeName","name","test"],"sources":["@wordpress/escape-html/src/index.ts"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport __unstableEscapeGreaterThan from './escape-greater';\r\n\r\n/**\r\n * Regular expression matching invalid attribute names.\r\n *\r\n * \"Attribute names must consist of one or more characters other than controls,\r\n * U+0020 SPACE, U+0022 (\"), U+0027 ('), U+003E (>), U+002F (/), U+003D (=),\r\n * and noncharacters.\"\r\n *\r\n * @see https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\r\n */\r\nconst REGEXP_INVALID_ATTRIBUTE_NAME: RegExp =\r\n\t/[\\u007F-\\u009F \"'>/=\"\\uFDD0-\\uFDEF]/;\r\n\r\n/**\r\n * Returns a string with ampersands escaped. Note that this is an imperfect\r\n * implementation, where only ampersands which do not appear as a pattern of\r\n * named, decimal, or hexadecimal character references are escaped. Invalid\r\n * named references (i.e. ambiguous ampersand) are still permitted.\r\n *\r\n * @see https://w3c.github.io/html/syntax.html#character-references\r\n * @see https://w3c.github.io/html/syntax.html#ambiguous-ampersand\r\n * @see https://w3c.github.io/html/syntax.html#named-character-references\r\n *\r\n * @param value Original string.\r\n *\r\n * @return Escaped string.\r\n */\r\nexport function escapeAmpersand( value: string ): string {\r\n\treturn value.replace( /&(?!([a-z0-9]+|#[0-9]+|#x[a-f0-9]+);)/gi, '&amp;' );\r\n}\r\n\r\n/**\r\n * Returns a string with quotation marks replaced.\r\n *\r\n * @param value Original string.\r\n *\r\n * @return Escaped string.\r\n */\r\nexport function escapeQuotationMark( value: string ): string {\r\n\treturn value.replace( /\"/g, '&quot;' );\r\n}\r\n\r\n/**\r\n * Returns a string with less-than sign replaced.\r\n *\r\n * @param value Original string.\r\n *\r\n * @return Escaped string.\r\n */\r\nexport function escapeLessThan( value: string ): string {\r\n\treturn value.replace( /</g, '&lt;' );\r\n}\r\n\r\n/**\r\n * Returns an escaped attribute value.\r\n *\r\n * @see https://w3c.github.io/html/syntax.html#elements-attributes\r\n *\r\n * \"[...] the text cannot contain an ambiguous ampersand [...] must not contain\r\n * any literal U+0022 QUOTATION MARK characters (\")\"\r\n *\r\n * Note we also escape the greater than symbol, as this is used by wptexturize to\r\n * split HTML strings. This is a WordPress specific fix\r\n *\r\n * Note that if a resolution for Trac#45387 comes to fruition, it is no longer\r\n * necessary for `__unstableEscapeGreaterThan` to be used.\r\n *\r\n * See: https://core.trac.wordpress.org/ticket/45387\r\n *\r\n * @param value Attribute value.\r\n *\r\n * @return Escaped attribute value.\r\n */\r\nexport function escapeAttribute( value: string ): string {\r\n\treturn __unstableEscapeGreaterThan(\r\n\t\tescapeQuotationMark( escapeAmpersand( value ) )\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns an escaped HTML element value.\r\n *\r\n * @see https://w3c.github.io/html/syntax.html#writing-html-documents-elements\r\n *\r\n * \"the text must not contain the character U+003C LESS-THAN SIGN (<) or an\r\n * ambiguous ampersand.\"\r\n *\r\n * @param value Element value.\r\n *\r\n * @return Escaped HTML element value.\r\n */\r\nexport function escapeHTML( value: string ): string {\r\n\treturn escapeLessThan( escapeAmpersand( value ) );\r\n}\r\n\r\n/**\r\n * Returns an escaped Editable HTML element value. This is different from\r\n * `escapeHTML`, because for editable HTML, ALL ampersands must be escaped in\r\n * order to render the content correctly on the page.\r\n *\r\n * @param value Element value.\r\n *\r\n * @return Escaped HTML element value.\r\n */\r\nexport function escapeEditableHTML( value: string ): string {\r\n\treturn escapeLessThan( value.replace( /&/g, '&amp;' ) );\r\n}\r\n\r\n/**\r\n * Returns true if the given attribute name is valid, or false otherwise.\r\n *\r\n * @param name Attribute name to test.\r\n *\r\n * @return Whether attribute is valid.\r\n */\r\nexport function isValidAttributeName( name: string ): boolean {\r\n\treturn ! REGEXP_INVALID_ATTRIBUTE_NAME.test( name );\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,2BAA2B,MAAM,kBAAkB;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,6BAAqC,GAC1C,qCAAqC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAAEC,KAAa,EAAW;EACxD,OAAOA,KAAK,CAACC,OAAO,CAAE,yCAAyC,EAAE,OAAQ,CAAC;AAC3E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAAEF,KAAa,EAAW;EAC5D,OAAOA,KAAK,CAACC,OAAO,CAAE,IAAI,EAAE,QAAS,CAAC;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,cAAcA,CAAEH,KAAa,EAAW;EACvD,OAAOA,KAAK,CAACC,OAAO,CAAE,IAAI,EAAE,MAAO,CAAC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,eAAeA,CAAEJ,KAAa,EAAW;EACxD,OAAOH,2BAA2B,CACjCK,mBAAmB,CAAEH,eAAe,CAAEC,KAAM,CAAE,CAC/C,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,UAAUA,CAAEL,KAAa,EAAW;EACnD,OAAOG,cAAc,CAAEJ,eAAe,CAAEC,KAAM,CAAE,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,kBAAkBA,CAAEN,KAAa,EAAW;EAC3D,OAAOG,cAAc,CAAEH,KAAK,CAACC,OAAO,CAAE,IAAI,EAAE,OAAQ,CAAE,CAAC;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,oBAAoBA,CAAEC,IAAY,EAAY;EAC7D,OAAO,CAAEV,6BAA6B,CAACW,IAAI,CAAED,IAAK,CAAC;AACpD","ignoreList":[]}