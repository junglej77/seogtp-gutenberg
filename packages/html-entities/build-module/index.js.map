{"version":3,"names":["_decodeTextArea","decodeEntities","html","indexOf","undefined","document","implementation","createHTMLDocument","createElement","innerHTML","decoded","textContent"],"sources":["@wordpress/html-entities/src/index.js"],"sourcesContent":["/** @type {HTMLTextAreaElement} */\r\nlet _decodeTextArea;\r\n\r\n/**\r\n * Decodes the HTML entities from a given string.\r\n *\r\n * @param {string} html String that contain HTML entities.\r\n *\r\n * @example\r\n * ```js\r\n * import { decodeEntities } from '@wordpress/html-entities';\r\n *\r\n * const result = decodeEntities( '&aacute;' );\r\n * console.log( result ); // result will be \"รก\"\r\n * ```\r\n *\r\n * @return {string} The decoded string.\r\n */\r\nexport function decodeEntities( html ) {\r\n\t// Not a string, or no entities to decode.\r\n\tif ( 'string' !== typeof html || -1 === html.indexOf( '&' ) ) {\r\n\t\treturn html;\r\n\t}\r\n\r\n\t// Create a textarea for decoding entities, that we can reuse.\r\n\tif ( undefined === _decodeTextArea ) {\r\n\t\tif (\r\n\t\t\tdocument.implementation &&\r\n\t\t\tdocument.implementation.createHTMLDocument\r\n\t\t) {\r\n\t\t\t_decodeTextArea = document.implementation\r\n\t\t\t\t.createHTMLDocument( '' )\r\n\t\t\t\t.createElement( 'textarea' );\r\n\t\t} else {\r\n\t\t\t_decodeTextArea = document.createElement( 'textarea' );\r\n\t\t}\r\n\t}\r\n\r\n\t_decodeTextArea.innerHTML = html;\r\n\tconst decoded = _decodeTextArea.textContent;\r\n\t_decodeTextArea.innerHTML = '';\r\n\r\n\t/**\r\n\t * Cast to string, HTMLTextAreaElement should always have `string` textContent.\r\n\t *\r\n\t * > The `textContent` property of the `Node` interface represents the text content of the\r\n\t * > node and its descendants.\r\n\t * >\r\n\t * > Value: A string or `null`\r\n\t * >\r\n\t * > * If the node is a `document` or a Doctype, `textContent` returns `null`.\r\n\t * > * If the node is a CDATA section, comment, processing instruction, or text node,\r\n\t * >   textContent returns the text inside the node, i.e., the `Node.nodeValue`.\r\n\t * > * For other node types, `textContent returns the concatenation of the textContent of\r\n\t * >   every child node, excluding comments and processing instructions. (This is an empty\r\n\t * >   string if the node has no children.)\r\n\t *\r\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent\r\n\t */\r\n\treturn /** @type {string} */ ( decoded );\r\n}\r\n"],"mappings":"AAAA;AACA,IAAIA,eAAe;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAAEC,IAAI,EAAG;EACtC;EACA,IAAK,QAAQ,KAAK,OAAOA,IAAI,IAAI,CAAC,CAAC,KAAKA,IAAI,CAACC,OAAO,CAAE,GAAI,CAAC,EAAG;IAC7D,OAAOD,IAAI;EACZ;;EAEA;EACA,IAAKE,SAAS,KAAKJ,eAAe,EAAG;IACpC,IACCK,QAAQ,CAACC,cAAc,IACvBD,QAAQ,CAACC,cAAc,CAACC,kBAAkB,EACzC;MACDP,eAAe,GAAGK,QAAQ,CAACC,cAAc,CACvCC,kBAAkB,CAAE,EAAG,CAAC,CACxBC,aAAa,CAAE,UAAW,CAAC;IAC9B,CAAC,MAAM;MACNR,eAAe,GAAGK,QAAQ,CAACG,aAAa,CAAE,UAAW,CAAC;IACvD;EACD;EAEAR,eAAe,CAACS,SAAS,GAAGP,IAAI;EAChC,MAAMQ,OAAO,GAAGV,eAAe,CAACW,WAAW;EAC3CX,eAAe,CAACS,SAAS,GAAG,EAAE;;EAE9B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC,OAAO,qBAAwBC,OAAO;AACvC","ignoreList":[]}