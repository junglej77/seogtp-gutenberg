{"version":3,"names":["Tannin","DEFAULT_LOCALE_DATA","plural_forms","n","I18N_HOOK_REGEXP","createI18n","initialData","initialDomain","hooks","tannin","listeners","Set","notifyListeners","forEach","listener","subscribe","callback","add","delete","getLocaleData","domain","data","doSetLocaleData","pluralForms","setLocaleData","addLocaleData","resetLocaleData","dcnpgettext","context","single","plural","number","undefined","getFilterDomain","__","text","translation","applyFilters","_x","_n","_nx","isRTL","hasTranslation","key","result","onHookAddedOrRemoved","hookName","test","addAction"],"sources":["@wordpress/i18n/src/create-i18n.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport Tannin from 'tannin';\r\n\r\n/**\r\n * @typedef {Record<string,any>} LocaleData\r\n */\r\n\r\n/**\r\n * Default locale data to use for Tannin domain when not otherwise provided.\r\n * Assumes an English plural forms expression.\r\n *\r\n * @type {LocaleData}\r\n */\r\nconst DEFAULT_LOCALE_DATA = {\r\n\t'': {\r\n\t\t/** @param {number} n */\r\n\t\tplural_forms( n ) {\r\n\t\t\treturn n === 1 ? 0 : 1;\r\n\t\t},\r\n\t},\r\n};\r\n\r\n/*\r\n * Regular expression that matches i18n hooks like `i18n.gettext`, `i18n.ngettext`,\r\n * `i18n.gettext_domain` or `i18n.ngettext_with_context` or `i18n.has_translation`.\r\n */\r\nconst I18N_HOOK_REGEXP = /^i18n\\.(n?gettext|has_translation)(_|$)/;\r\n\r\n/**\r\n * @typedef {(domain?: string) => LocaleData} GetLocaleData\r\n *\r\n * Returns locale data by domain in a\r\n * Jed-formatted JSON object shape.\r\n *\r\n * @see http://messageformat.github.io/Jed/\r\n */\r\n/**\r\n * @typedef {(data?: LocaleData, domain?: string) => void} SetLocaleData\r\n *\r\n * Merges locale data into the Tannin instance by domain. Note that this\r\n * function will overwrite the domain configuration. Accepts data in a\r\n * Jed-formatted JSON object shape.\r\n *\r\n * @see http://messageformat.github.io/Jed/\r\n */\r\n/**\r\n * @typedef {(data?: LocaleData, domain?: string) => void} AddLocaleData\r\n *\r\n * Merges locale data into the Tannin instance by domain. Note that this\r\n * function will also merge the domain configuration. Accepts data in a\r\n * Jed-formatted JSON object shape.\r\n *\r\n * @see http://messageformat.github.io/Jed/\r\n */\r\n/**\r\n * @typedef {(data?: LocaleData, domain?: string) => void} ResetLocaleData\r\n *\r\n * Resets all current Tannin instance locale data and sets the specified\r\n * locale data for the domain. Accepts data in a Jed-formatted JSON object shape.\r\n *\r\n * @see http://messageformat.github.io/Jed/\r\n */\r\n/** @typedef {() => void} SubscribeCallback */\r\n/** @typedef {() => void} UnsubscribeCallback */\r\n/**\r\n * @typedef {(callback: SubscribeCallback) => UnsubscribeCallback} Subscribe\r\n *\r\n * Subscribes to changes of locale data\r\n */\r\n/**\r\n * @typedef {(domain?: string) => string} GetFilterDomain\r\n * Retrieve the domain to use when calling domain-specific filters.\r\n */\r\n/**\r\n * @typedef {(text: string, domain?: string) => string} __\r\n *\r\n * Retrieve the translation of text.\r\n *\r\n * @see https://developer.wordpress.org/reference/functions/__/\r\n */\r\n/**\r\n * @typedef {(text: string, context: string, domain?: string) => string} _x\r\n *\r\n * Retrieve translated string with gettext context.\r\n *\r\n * @see https://developer.wordpress.org/reference/functions/_x/\r\n */\r\n/**\r\n * @typedef {(single: string, plural: string, number: number, domain?: string) => string} _n\r\n *\r\n * Translates and retrieves the singular or plural form based on the supplied\r\n * number.\r\n *\r\n * @see https://developer.wordpress.org/reference/functions/_n/\r\n */\r\n/**\r\n * @typedef {(single: string, plural: string, number: number, context: string, domain?: string) => string} _nx\r\n *\r\n * Translates and retrieves the singular or plural form based on the supplied\r\n * number, with gettext context.\r\n *\r\n * @see https://developer.wordpress.org/reference/functions/_nx/\r\n */\r\n/**\r\n * @typedef {() => boolean} IsRtl\r\n *\r\n * Check if current locale is RTL.\r\n *\r\n * **RTL (Right To Left)** is a locale property indicating that text is written from right to left.\r\n * For example, the `he` locale (for Hebrew) specifies right-to-left. Arabic (ar) is another common\r\n * language written RTL. The opposite of RTL, LTR (Left To Right) is used in other languages,\r\n * including English (`en`, `en-US`, `en-GB`, etc.), Spanish (`es`), and French (`fr`).\r\n */\r\n/**\r\n * @typedef {(single: string, context?: string, domain?: string) => boolean} HasTranslation\r\n *\r\n * Check if there is a translation for a given string in singular form.\r\n */\r\n/** @typedef {import('@wordpress/hooks').Hooks} Hooks */\r\n\r\n/**\r\n * An i18n instance\r\n *\r\n * @typedef I18n\r\n * @property {GetLocaleData}   getLocaleData   Returns locale data by domain in a Jed-formatted JSON object shape.\r\n * @property {SetLocaleData}   setLocaleData   Merges locale data into the Tannin instance by domain. Note that this\r\n *                                             function will overwrite the domain configuration. Accepts data in a\r\n *                                             Jed-formatted JSON object shape.\r\n * @property {AddLocaleData}   addLocaleData   Merges locale data into the Tannin instance by domain. Note that this\r\n *                                             function will also merge the domain configuration. Accepts data in a\r\n *                                             Jed-formatted JSON object shape.\r\n * @property {ResetLocaleData} resetLocaleData Resets all current Tannin instance locale data and sets the specified\r\n *                                             locale data for the domain. Accepts data in a Jed-formatted JSON object shape.\r\n * @property {Subscribe}       subscribe       Subscribes to changes of Tannin locale data.\r\n * @property {__}              __              Retrieve the translation of text.\r\n * @property {_x}              _x              Retrieve translated string with gettext context.\r\n * @property {_n}              _n              Translates and retrieves the singular or plural form based on the supplied\r\n *                                             number.\r\n * @property {_nx}             _nx             Translates and retrieves the singular or plural form based on the supplied\r\n *                                             number, with gettext context.\r\n * @property {IsRtl}           isRTL           Check if current locale is RTL.\r\n * @property {HasTranslation}  hasTranslation  Check if there is a translation for a given string.\r\n */\r\n\r\n/**\r\n * Create an i18n instance\r\n *\r\n * @param {LocaleData} [initialData]   Locale data configuration.\r\n * @param {string}     [initialDomain] Domain for which configuration applies.\r\n * @param {Hooks}      [hooks]         Hooks implementation.\r\n *\r\n * @return {I18n} I18n instance.\r\n */\r\nexport const createI18n = ( initialData, initialDomain, hooks ) => {\r\n\t/**\r\n\t * The underlying instance of Tannin to which exported functions interface.\r\n\t *\r\n\t * @type {Tannin}\r\n\t */\r\n\tconst tannin = new Tannin( {} );\r\n\r\n\tconst listeners = new Set();\r\n\r\n\tconst notifyListeners = () => {\r\n\t\tlisteners.forEach( ( listener ) => listener() );\r\n\t};\r\n\r\n\t/**\r\n\t * Subscribe to changes of locale data.\r\n\t *\r\n\t * @param {SubscribeCallback} callback Subscription callback.\r\n\t * @return {UnsubscribeCallback} Unsubscribe callback.\r\n\t */\r\n\tconst subscribe = ( callback ) => {\r\n\t\tlisteners.add( callback );\r\n\t\treturn () => listeners.delete( callback );\r\n\t};\r\n\r\n\t/** @type {GetLocaleData} */\r\n\tconst getLocaleData = ( domain = 'default' ) => tannin.data[ domain ];\r\n\r\n\t/**\r\n\t * @param {LocaleData} [data]\r\n\t * @param {string}     [domain]\r\n\t */\r\n\tconst doSetLocaleData = ( data, domain = 'default' ) => {\r\n\t\ttannin.data[ domain ] = {\r\n\t\t\t...tannin.data[ domain ],\r\n\t\t\t...data,\r\n\t\t};\r\n\r\n\t\t// Populate default domain configuration (supported locale date which omits\r\n\t\t// a plural forms expression).\r\n\t\ttannin.data[ domain ][ '' ] = {\r\n\t\t\t...DEFAULT_LOCALE_DATA[ '' ],\r\n\t\t\t...tannin.data[ domain ]?.[ '' ],\r\n\t\t};\r\n\r\n\t\t// Clean up cached plural forms functions cache as it might be updated.\r\n\t\tdelete tannin.pluralForms[ domain ];\r\n\t};\r\n\r\n\t/** @type {SetLocaleData} */\r\n\tconst setLocaleData = ( data, domain ) => {\r\n\t\tdoSetLocaleData( data, domain );\r\n\t\tnotifyListeners();\r\n\t};\r\n\r\n\t/** @type {AddLocaleData} */\r\n\tconst addLocaleData = ( data, domain = 'default' ) => {\r\n\t\ttannin.data[ domain ] = {\r\n\t\t\t...tannin.data[ domain ],\r\n\t\t\t...data,\r\n\t\t\t// Populate default domain configuration (supported locale date which omits\r\n\t\t\t// a plural forms expression).\r\n\t\t\t'': {\r\n\t\t\t\t...DEFAULT_LOCALE_DATA[ '' ],\r\n\t\t\t\t...tannin.data[ domain ]?.[ '' ],\r\n\t\t\t\t...data?.[ '' ],\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\t// Clean up cached plural forms functions cache as it might be updated.\r\n\t\tdelete tannin.pluralForms[ domain ];\r\n\r\n\t\tnotifyListeners();\r\n\t};\r\n\r\n\t/** @type {ResetLocaleData} */\r\n\tconst resetLocaleData = ( data, domain ) => {\r\n\t\t// Reset all current Tannin locale data.\r\n\t\ttannin.data = {};\r\n\r\n\t\t// Reset cached plural forms functions cache.\r\n\t\ttannin.pluralForms = {};\r\n\r\n\t\tsetLocaleData( data, domain );\r\n\t};\r\n\r\n\t/**\r\n\t * Wrapper for Tannin's `dcnpgettext`. Populates default locale data if not\r\n\t * otherwise previously assigned.\r\n\t *\r\n\t * @param {string|undefined} domain   Domain to retrieve the translated text.\r\n\t * @param {string|undefined} context  Context information for the translators.\r\n\t * @param {string}           single   Text to translate if non-plural. Used as\r\n\t *                                    fallback return value on a caught error.\r\n\t * @param {string}           [plural] The text to be used if the number is\r\n\t *                                    plural.\r\n\t * @param {number}           [number] The number to compare against to use\r\n\t *                                    either the singular or plural form.\r\n\t *\r\n\t * @return {string} The translated string.\r\n\t */\r\n\tconst dcnpgettext = (\r\n\t\tdomain = 'default',\r\n\t\tcontext,\r\n\t\tsingle,\r\n\t\tplural,\r\n\t\tnumber\r\n\t) => {\r\n\t\tif ( ! tannin.data[ domain ] ) {\r\n\t\t\t// Use `doSetLocaleData` to set silently, without notifying listeners.\r\n\t\t\tdoSetLocaleData( undefined, domain );\r\n\t\t}\r\n\r\n\t\treturn tannin.dcnpgettext( domain, context, single, plural, number );\r\n\t};\r\n\r\n\t/** @type {GetFilterDomain} */\r\n\tconst getFilterDomain = ( domain = 'default' ) => domain;\r\n\r\n\t/** @type {__} */\r\n\tconst __ = ( text, domain ) => {\r\n\t\tlet translation = dcnpgettext( domain, undefined, text );\r\n\t\tif ( ! hooks ) {\r\n\t\t\treturn translation;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Filters text with its translation.\r\n\t\t *\r\n\t\t * @param {string} translation Translated text.\r\n\t\t * @param {string} text        Text to translate.\r\n\t\t * @param {string} domain      Text domain. Unique identifier for retrieving translated strings.\r\n\t\t */\r\n\t\ttranslation = /** @type {string} */ (\r\n\t\t\t/** @type {*} */ hooks.applyFilters(\r\n\t\t\t\t'i18n.gettext',\r\n\t\t\t\ttranslation,\r\n\t\t\t\ttext,\r\n\t\t\t\tdomain\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn /** @type {string} */ (\r\n\t\t\t/** @type {*} */ hooks.applyFilters(\r\n\t\t\t\t'i18n.gettext_' + getFilterDomain( domain ),\r\n\t\t\t\ttranslation,\r\n\t\t\t\ttext,\r\n\t\t\t\tdomain\r\n\t\t\t)\r\n\t\t);\r\n\t};\r\n\r\n\t/** @type {_x} */\r\n\tconst _x = ( text, context, domain ) => {\r\n\t\tlet translation = dcnpgettext( domain, context, text );\r\n\t\tif ( ! hooks ) {\r\n\t\t\treturn translation;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Filters text with its translation based on context information.\r\n\t\t *\r\n\t\t * @param {string} translation Translated text.\r\n\t\t * @param {string} text        Text to translate.\r\n\t\t * @param {string} context     Context information for the translators.\r\n\t\t * @param {string} domain      Text domain. Unique identifier for retrieving translated strings.\r\n\t\t */\r\n\t\ttranslation = /** @type {string} */ (\r\n\t\t\t/** @type {*} */ hooks.applyFilters(\r\n\t\t\t\t'i18n.gettext_with_context',\r\n\t\t\t\ttranslation,\r\n\t\t\t\ttext,\r\n\t\t\t\tcontext,\r\n\t\t\t\tdomain\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn /** @type {string} */ (\r\n\t\t\t/** @type {*} */ hooks.applyFilters(\r\n\t\t\t\t'i18n.gettext_with_context_' + getFilterDomain( domain ),\r\n\t\t\t\ttranslation,\r\n\t\t\t\ttext,\r\n\t\t\t\tcontext,\r\n\t\t\t\tdomain\r\n\t\t\t)\r\n\t\t);\r\n\t};\r\n\r\n\t/** @type {_n} */\r\n\tconst _n = ( single, plural, number, domain ) => {\r\n\t\tlet translation = dcnpgettext(\r\n\t\t\tdomain,\r\n\t\t\tundefined,\r\n\t\t\tsingle,\r\n\t\t\tplural,\r\n\t\t\tnumber\r\n\t\t);\r\n\t\tif ( ! hooks ) {\r\n\t\t\treturn translation;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Filters the singular or plural form of a string.\r\n\t\t *\r\n\t\t * @param {string} translation Translated text.\r\n\t\t * @param {string} single      The text to be used if the number is singular.\r\n\t\t * @param {string} plural      The text to be used if the number is plural.\r\n\t\t * @param {string} number      The number to compare against to use either the singular or plural form.\r\n\t\t * @param {string} domain      Text domain. Unique identifier for retrieving translated strings.\r\n\t\t */\r\n\t\ttranslation = /** @type {string} */ (\r\n\t\t\t/** @type {*} */ hooks.applyFilters(\r\n\t\t\t\t'i18n.ngettext',\r\n\t\t\t\ttranslation,\r\n\t\t\t\tsingle,\r\n\t\t\t\tplural,\r\n\t\t\t\tnumber,\r\n\t\t\t\tdomain\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn /** @type {string} */ (\r\n\t\t\t/** @type {*} */ hooks.applyFilters(\r\n\t\t\t\t'i18n.ngettext_' + getFilterDomain( domain ),\r\n\t\t\t\ttranslation,\r\n\t\t\t\tsingle,\r\n\t\t\t\tplural,\r\n\t\t\t\tnumber,\r\n\t\t\t\tdomain\r\n\t\t\t)\r\n\t\t);\r\n\t};\r\n\r\n\t/** @type {_nx} */\r\n\tconst _nx = ( single, plural, number, context, domain ) => {\r\n\t\tlet translation = dcnpgettext(\r\n\t\t\tdomain,\r\n\t\t\tcontext,\r\n\t\t\tsingle,\r\n\t\t\tplural,\r\n\t\t\tnumber\r\n\t\t);\r\n\t\tif ( ! hooks ) {\r\n\t\t\treturn translation;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Filters the singular or plural form of a string with gettext context.\r\n\t\t *\r\n\t\t * @param {string} translation Translated text.\r\n\t\t * @param {string} single      The text to be used if the number is singular.\r\n\t\t * @param {string} plural      The text to be used if the number is plural.\r\n\t\t * @param {string} number      The number to compare against to use either the singular or plural form.\r\n\t\t * @param {string} context     Context information for the translators.\r\n\t\t * @param {string} domain      Text domain. Unique identifier for retrieving translated strings.\r\n\t\t */\r\n\t\ttranslation = /** @type {string} */ (\r\n\t\t\t/** @type {*} */ hooks.applyFilters(\r\n\t\t\t\t'i18n.ngettext_with_context',\r\n\t\t\t\ttranslation,\r\n\t\t\t\tsingle,\r\n\t\t\t\tplural,\r\n\t\t\t\tnumber,\r\n\t\t\t\tcontext,\r\n\t\t\t\tdomain\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\treturn /** @type {string} */ (\r\n\t\t\t/** @type {*} */ hooks.applyFilters(\r\n\t\t\t\t'i18n.ngettext_with_context_' + getFilterDomain( domain ),\r\n\t\t\t\ttranslation,\r\n\t\t\t\tsingle,\r\n\t\t\t\tplural,\r\n\t\t\t\tnumber,\r\n\t\t\t\tcontext,\r\n\t\t\t\tdomain\r\n\t\t\t)\r\n\t\t);\r\n\t};\r\n\r\n\t/** @type {IsRtl} */\r\n\tconst isRTL = () => {\r\n\t\treturn 'rtl' === _x( 'ltr', 'text direction' );\r\n\t};\r\n\r\n\t/** @type {HasTranslation} */\r\n\tconst hasTranslation = ( single, context, domain ) => {\r\n\t\tconst key = context ? context + '\\u0004' + single : single;\r\n\t\tlet result = !! tannin.data?.[ domain ?? 'default' ]?.[ key ];\r\n\t\tif ( hooks ) {\r\n\t\t\t/**\r\n\t\t\t * Filters the presence of a translation in the locale data.\r\n\t\t\t *\r\n\t\t\t * @param {boolean} hasTranslation Whether the translation is present or not..\r\n\t\t\t * @param {string}  single         The singular form of the translated text (used as key in locale data)\r\n\t\t\t * @param {string}  context        Context information for the translators.\r\n\t\t\t * @param {string}  domain         Text domain. Unique identifier for retrieving translated strings.\r\n\t\t\t */\r\n\t\t\tresult = /** @type { boolean } */ (\r\n\t\t\t\t/** @type {*} */ hooks.applyFilters(\r\n\t\t\t\t\t'i18n.has_translation',\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tsingle,\r\n\t\t\t\t\tcontext,\r\n\t\t\t\t\tdomain\r\n\t\t\t\t)\r\n\t\t\t);\r\n\r\n\t\t\tresult = /** @type { boolean } */ (\r\n\t\t\t\t/** @type {*} */ hooks.applyFilters(\r\n\t\t\t\t\t'i18n.has_translation_' + getFilterDomain( domain ),\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tsingle,\r\n\t\t\t\t\tcontext,\r\n\t\t\t\t\tdomain\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\tif ( initialData ) {\r\n\t\tsetLocaleData( initialData, initialDomain );\r\n\t}\r\n\r\n\tif ( hooks ) {\r\n\t\t/**\r\n\t\t * @param {string} hookName\r\n\t\t */\r\n\t\tconst onHookAddedOrRemoved = ( hookName ) => {\r\n\t\t\tif ( I18N_HOOK_REGEXP.test( hookName ) ) {\r\n\t\t\t\tnotifyListeners();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\thooks.addAction( 'hookAdded', 'core/i18n', onHookAddedOrRemoved );\r\n\t\thooks.addAction( 'hookRemoved', 'core/i18n', onHookAddedOrRemoved );\r\n\t}\r\n\r\n\treturn {\r\n\t\tgetLocaleData,\r\n\t\tsetLocaleData,\r\n\t\taddLocaleData,\r\n\t\tresetLocaleData,\r\n\t\tsubscribe,\r\n\t\t__,\r\n\t\t_x,\r\n\t\t_n,\r\n\t\t_nx,\r\n\t\tisRTL,\r\n\t\thasTranslation,\r\n\t};\r\n};\r\n"],"mappings":"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","ignoreList":[]}