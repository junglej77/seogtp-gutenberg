{"version":3,"names":["createSelector","displayShortcut","shortcutAriaLabel","rawShortcut","EMPTY_ARRAY","FORMATTING_METHODS","display","raw","ariaLabel","getKeyCombinationRepresentation","shortcut","representation","modifier","character","getShortcutKeyCombination","state","name","keyCombination","getShortcutRepresentation","getShortcutDescription","description","getShortcutAliases","aliases","getAllShortcutKeyCombinations","filter","Boolean","getAllShortcutRawKeyCombinations","map","combination","getCategoryShortcuts","categoryName","Object","entries","category"],"sources":["@wordpress/keyboard-shortcuts/src/store/selectors.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { createSelector } from '@wordpress/data';\r\nimport {\r\n\tdisplayShortcut,\r\n\tshortcutAriaLabel,\r\n\trawShortcut,\r\n} from '@wordpress/keycodes';\r\n\r\n/** @typedef {import('./actions').WPShortcutKeyCombination} WPShortcutKeyCombination */\r\n\r\n/** @typedef {import('@wordpress/keycodes').WPKeycodeHandlerByModifier} WPKeycodeHandlerByModifier */\r\n\r\n/**\r\n * Shared reference to an empty array for cases where it is important to avoid\r\n * returning a new array reference on every invocation.\r\n *\r\n * @type {Array<any>}\r\n */\r\nconst EMPTY_ARRAY = [];\r\n\r\n/**\r\n * Shortcut formatting methods.\r\n *\r\n * @property {WPKeycodeHandlerByModifier} display     Display formatting.\r\n * @property {WPKeycodeHandlerByModifier} rawShortcut Raw shortcut formatting.\r\n * @property {WPKeycodeHandlerByModifier} ariaLabel   ARIA label formatting.\r\n */\r\nconst FORMATTING_METHODS = {\r\n\tdisplay: displayShortcut,\r\n\traw: rawShortcut,\r\n\tariaLabel: shortcutAriaLabel,\r\n};\r\n\r\n/**\r\n * Returns a string representing the key combination.\r\n *\r\n * @param {?WPShortcutKeyCombination} shortcut       Key combination.\r\n * @param {keyof FORMATTING_METHODS}  representation Type of representation\r\n *                                                   (display, raw, ariaLabel).\r\n *\r\n * @return {string?} Shortcut representation.\r\n */\r\nfunction getKeyCombinationRepresentation( shortcut, representation ) {\r\n\tif ( ! shortcut ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn shortcut.modifier\r\n\t\t? FORMATTING_METHODS[ representation ][ shortcut.modifier ](\r\n\t\t\t\tshortcut.character\r\n\t\t  )\r\n\t\t: shortcut.character;\r\n}\r\n\r\n/**\r\n * Returns the main key combination for a given shortcut name.\r\n *\r\n * @param {Object} state Global state.\r\n * @param {string} name  Shortcut name.\r\n *\r\n * @example\r\n *\r\n *```js\r\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\r\n * import { useSelect } from '@wordpress/data';\r\n * import { createInterpolateElement } from '@wordpress/element';\r\n * import { sprintf } from '@wordpress/i18n';\r\n * const ExampleComponent = () => {\r\n *     const {character, modifier} = useSelect(\r\n *         ( select ) =>\r\n *             select( keyboardShortcutsStore ).getShortcutKeyCombination(\r\n *                 'core/editor/next-region'\r\n *             ),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         <div>\r\n *             { createInterpolateElement(\r\n *                 sprintf(\r\n *                     'Character: <code>%s</code> / Modifier: <code>%s</code>',\r\n *                     character,\r\n *                     modifier\r\n *                 ),\r\n *                 {\r\n *                     code: <code />,\r\n *                 }\r\n *             ) }\r\n *         </div>\r\n *     );\r\n * };\r\n *```\r\n *\r\n * @return {WPShortcutKeyCombination?} Key combination.\r\n */\r\nexport function getShortcutKeyCombination( state, name ) {\r\n\treturn state[ name ] ? state[ name ].keyCombination : null;\r\n}\r\n\r\n/**\r\n * Returns a string representing the main key combination for a given shortcut name.\r\n *\r\n * @param {Object}                   state          Global state.\r\n * @param {string}                   name           Shortcut name.\r\n * @param {keyof FORMATTING_METHODS} representation Type of representation\r\n *                                                  (display, raw, ariaLabel).\r\n * @example\r\n *\r\n *```js\r\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\r\n * import { useSelect } from '@wordpress/data';\r\n * import { sprintf } from '@wordpress/i18n';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const {display, raw, ariaLabel} = useSelect(\r\n *         ( select ) =>{\r\n *             return {\r\n *                 display: select( keyboardShortcutsStore ).getShortcutRepresentation('core/editor/next-region' ),\r\n *                 raw: select( keyboardShortcutsStore ).getShortcutRepresentation('core/editor/next-region','raw' ),\r\n *                 ariaLabel: select( keyboardShortcutsStore ).getShortcutRepresentation('core/editor/next-region', 'ariaLabel')\r\n *             }\r\n *         },\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         <ul>\r\n *             <li>{ sprintf( 'display string: %s', display ) }</li>\r\n *             <li>{ sprintf( 'raw string: %s', raw ) }</li>\r\n *             <li>{ sprintf( 'ariaLabel string: %s', ariaLabel ) }</li>\r\n *         </ul>\r\n *     );\r\n * };\r\n *```\r\n *\r\n * @return {string?} Shortcut representation.\r\n */\r\nexport function getShortcutRepresentation(\r\n\tstate,\r\n\tname,\r\n\trepresentation = 'display'\r\n) {\r\n\tconst shortcut = getShortcutKeyCombination( state, name );\r\n\treturn getKeyCombinationRepresentation( shortcut, representation );\r\n}\r\n\r\n/**\r\n * Returns the shortcut description given its name.\r\n *\r\n * @param {Object} state Global state.\r\n * @param {string} name  Shortcut name.\r\n *\r\n * @example\r\n *\r\n *```js\r\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\r\n * import { useSelect } from '@wordpress/data';\r\n * import { __ } from '@wordpress/i18n';\r\n * const ExampleComponent = () => {\r\n *     const shortcutDescription = useSelect(\r\n *         ( select ) =>\r\n *             select( keyboardShortcutsStore ).getShortcutDescription( 'core/editor/next-region' ),\r\n *         []\r\n *     );\r\n *\r\n *     return shortcutDescription ? (\r\n *         <div>{ shortcutDescription }</div>\r\n *     ) : (\r\n *         <div>{ __( 'No description.' ) }</div>\r\n *     );\r\n * };\r\n *```\r\n * @return {string?} Shortcut description.\r\n */\r\nexport function getShortcutDescription( state, name ) {\r\n\treturn state[ name ] ? state[ name ].description : null;\r\n}\r\n\r\n/**\r\n * Returns the aliases for a given shortcut name.\r\n *\r\n * @param {Object} state Global state.\r\n * @param {string} name  Shortcut name.\r\n * @example\r\n *\r\n *```js\r\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\r\n * import { useSelect } from '@wordpress/data';\r\n * import { createInterpolateElement } from '@wordpress/element';\r\n * import { sprintf } from '@wordpress/i18n';\r\n * const ExampleComponent = () => {\r\n *     const shortcutAliases = useSelect(\r\n *         ( select ) =>\r\n *             select( keyboardShortcutsStore ).getShortcutAliases(\r\n *                 'core/editor/next-region'\r\n *             ),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         shortcutAliases.length > 0 && (\r\n *             <ul>\r\n *                 { shortcutAliases.map( ( { character, modifier }, index ) => (\r\n *                     <li key={ index }>\r\n *                         { createInterpolateElement(\r\n *                             sprintf(\r\n *                                 'Character: <code>%s</code> / Modifier: <code>%s</code>',\r\n *                                 character,\r\n *                                 modifier\r\n *                             ),\r\n *                             {\r\n *                                 code: <code />,\r\n *                             }\r\n *                         ) }\r\n *                     </li>\r\n *                 ) ) }\r\n *             </ul>\r\n *         )\r\n *     );\r\n * };\r\n *```\r\n *\r\n * @return {WPShortcutKeyCombination[]} Key combinations.\r\n */\r\nexport function getShortcutAliases( state, name ) {\r\n\treturn state[ name ] && state[ name ].aliases\r\n\t\t? state[ name ].aliases\r\n\t\t: EMPTY_ARRAY;\r\n}\r\n\r\n/**\r\n * Returns the shortcuts that include aliases for a given shortcut name.\r\n *\r\n * @param {Object} state Global state.\r\n * @param {string} name  Shortcut name.\r\n * @example\r\n *\r\n *```js\r\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\r\n * import { useSelect } from '@wordpress/data';\r\n * import { createInterpolateElement } from '@wordpress/element';\r\n * import { sprintf } from '@wordpress/i18n';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const allShortcutKeyCombinations = useSelect(\r\n *         ( select ) =>\r\n *             select( keyboardShortcutsStore ).getAllShortcutKeyCombinations(\r\n *                 'core/editor/next-region'\r\n *             ),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         allShortcutKeyCombinations.length > 0 && (\r\n *             <ul>\r\n *                 { allShortcutKeyCombinations.map(\r\n *                     ( { character, modifier }, index ) => (\r\n *                         <li key={ index }>\r\n *                             { createInterpolateElement(\r\n *                                 sprintf(\r\n *                                     'Character: <code>%s</code> / Modifier: <code>%s</code>',\r\n *                                     character,\r\n *                                     modifier\r\n *                                 ),\r\n *                                 {\r\n *                                     code: <code />,\r\n *                                 }\r\n *                             ) }\r\n *                         </li>\r\n *                     )\r\n *                 ) }\r\n *             </ul>\r\n *         )\r\n *     );\r\n * };\r\n *```\r\n *\r\n * @return {WPShortcutKeyCombination[]} Key combinations.\r\n */\r\nexport const getAllShortcutKeyCombinations = createSelector(\r\n\t( state, name ) => {\r\n\t\treturn [\r\n\t\t\tgetShortcutKeyCombination( state, name ),\r\n\t\t\t...getShortcutAliases( state, name ),\r\n\t\t].filter( Boolean );\r\n\t},\r\n\t( state, name ) => [ state[ name ] ]\r\n);\r\n\r\n/**\r\n * Returns the raw representation of all the keyboard combinations of a given shortcut name.\r\n *\r\n * @param {Object} state Global state.\r\n * @param {string} name  Shortcut name.\r\n *\r\n * @example\r\n *\r\n *```js\r\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\r\n * import { useSelect } from '@wordpress/data';\r\n * import { createInterpolateElement } from '@wordpress/element';\r\n * import { sprintf } from '@wordpress/i18n';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const allShortcutRawKeyCombinations = useSelect(\r\n *         ( select ) =>\r\n *             select( keyboardShortcutsStore ).getAllShortcutRawKeyCombinations(\r\n *                 'core/editor/next-region'\r\n *             ),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         allShortcutRawKeyCombinations.length > 0 && (\r\n *             <ul>\r\n *                 { allShortcutRawKeyCombinations.map(\r\n *                     ( shortcutRawKeyCombination, index ) => (\r\n *                         <li key={ index }>\r\n *                             { createInterpolateElement(\r\n *                                 sprintf(\r\n *                                     ' <code>%s</code>',\r\n *                                     shortcutRawKeyCombination\r\n *                                 ),\r\n *                                 {\r\n *                                     code: <code />,\r\n *                                 }\r\n *                             ) }\r\n *                         </li>\r\n *                     )\r\n *                 ) }\r\n *             </ul>\r\n *         )\r\n *     );\r\n * };\r\n *```\r\n *\r\n * @return {string[]} Shortcuts.\r\n */\r\nexport const getAllShortcutRawKeyCombinations = createSelector(\r\n\t( state, name ) => {\r\n\t\treturn getAllShortcutKeyCombinations( state, name ).map(\r\n\t\t\t( combination ) =>\r\n\t\t\t\tgetKeyCombinationRepresentation( combination, 'raw' )\r\n\t\t);\r\n\t},\r\n\t( state, name ) => [ state[ name ] ]\r\n);\r\n\r\n/**\r\n * Returns the shortcut names list for a given category name.\r\n *\r\n * @param {Object} state Global state.\r\n * @param {string} name  Category name.\r\n * @example\r\n *\r\n *```js\r\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\r\n * import { useSelect } from '@wordpress/data';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const categoryShortcuts = useSelect(\r\n *         ( select ) =>\r\n *             select( keyboardShortcutsStore ).getCategoryShortcuts(\r\n *                 'block'\r\n *             ),\r\n *         []\r\n *     );\r\n *\r\n *     return (\r\n *         categoryShortcuts.length > 0 && (\r\n *             <ul>\r\n *                 { categoryShortcuts.map( ( categoryShortcut ) => (\r\n *                     <li key={ categoryShortcut }>{ categoryShortcut }</li>\r\n *                 ) ) }\r\n *             </ul>\r\n *         )\r\n *     );\r\n * };\r\n *```\r\n * @return {string[]} Shortcut names.\r\n */\r\nexport const getCategoryShortcuts = createSelector(\r\n\t( state, categoryName ) => {\r\n\t\treturn Object.entries( state )\r\n\t\t\t.filter( ( [ , shortcut ] ) => shortcut.category === categoryName )\r\n\t\t\t.map( ( [ name ] ) => name );\r\n\t},\r\n\t( state ) => [ state ]\r\n);\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,cAAc,QAAQ,iBAAiB;AAChD,SACCC,eAAe,EACfC,iBAAiB,EACjBC,WAAW,QACL,qBAAqB;;AAE5B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG;EAC1BC,OAAO,EAAEL,eAAe;EACxBM,GAAG,EAAEJ,WAAW;EAChBK,SAAS,EAAEN;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,+BAA+BA,CAAEC,QAAQ,EAAEC,cAAc,EAAG;EACpE,IAAK,CAAED,QAAQ,EAAG;IACjB,OAAO,IAAI;EACZ;EAEA,OAAOA,QAAQ,CAACE,QAAQ,GACrBP,kBAAkB,CAAEM,cAAc,CAAE,CAAED,QAAQ,CAACE,QAAQ,CAAE,CACzDF,QAAQ,CAACG,SACT,CAAC,GACDH,QAAQ,CAACG,SAAS;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyBA,CAAEC,KAAK,EAAEC,IAAI,EAAG;EACxD,OAAOD,KAAK,CAAEC,IAAI,CAAE,GAAGD,KAAK,CAAEC,IAAI,CAAE,CAACC,cAAc,GAAG,IAAI;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyBA,CACxCH,KAAK,EACLC,IAAI,EACJL,cAAc,GAAG,SAAS,EACzB;EACD,MAAMD,QAAQ,GAAGI,yBAAyB,CAAEC,KAAK,EAAEC,IAAK,CAAC;EACzD,OAAOP,+BAA+B,CAAEC,QAAQ,EAAEC,cAAe,CAAC;AACnE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,sBAAsBA,CAAEJ,KAAK,EAAEC,IAAI,EAAG;EACrD,OAAOD,KAAK,CAAEC,IAAI,CAAE,GAAGD,KAAK,CAAEC,IAAI,CAAE,CAACI,WAAW,GAAG,IAAI;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAAEN,KAAK,EAAEC,IAAI,EAAG;EACjD,OAAOD,KAAK,CAAEC,IAAI,CAAE,IAAID,KAAK,CAAEC,IAAI,CAAE,CAACM,OAAO,GAC1CP,KAAK,CAAEC,IAAI,CAAE,CAACM,OAAO,GACrBlB,WAAW;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMmB,6BAA6B,GAAGvB,cAAc,CAC1D,CAAEe,KAAK,EAAEC,IAAI,KAAM;EAClB,OAAO,CACNF,yBAAyB,CAAEC,KAAK,EAAEC,IAAK,CAAC,EACxC,GAAGK,kBAAkB,CAAEN,KAAK,EAAEC,IAAK,CAAC,CACpC,CAACQ,MAAM,CAAEC,OAAQ,CAAC;AACpB,CAAC,EACD,CAAEV,KAAK,EAAEC,IAAI,KAAM,CAAED,KAAK,CAAEC,IAAI,CAAE,CACnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMU,gCAAgC,GAAG1B,cAAc,CAC7D,CAAEe,KAAK,EAAEC,IAAI,KAAM;EAClB,OAAOO,6BAA6B,CAAER,KAAK,EAAEC,IAAK,CAAC,CAACW,GAAG,CACpDC,WAAW,IACZnB,+BAA+B,CAAEmB,WAAW,EAAE,KAAM,CACtD,CAAC;AACF,CAAC,EACD,CAAEb,KAAK,EAAEC,IAAI,KAAM,CAAED,KAAK,CAAEC,IAAI,CAAE,CACnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMa,oBAAoB,GAAG7B,cAAc,CACjD,CAAEe,KAAK,EAAEe,YAAY,KAAM;EAC1B,OAAOC,MAAM,CAACC,OAAO,CAAEjB,KAAM,CAAC,CAC5BS,MAAM,CAAE,CAAE,GAAId,QAAQ,CAAE,KAAMA,QAAQ,CAACuB,QAAQ,KAAKH,YAAa,CAAC,CAClEH,GAAG,CAAE,CAAE,CAAEX,IAAI,CAAE,KAAMA,IAAK,CAAC;AAC9B,CAAC,EACCD,KAAK,IAAM,CAAEA,KAAK,CACrB,CAAC","ignoreList":[]}