{"version":3,"names":["__","isAppleOS","BACKSPACE","TAB","ENTER","ESCAPE","SPACE","PAGEUP","PAGEDOWN","END","HOME","LEFT","UP","RIGHT","DOWN","DELETE","F10","ALT","CTRL","COMMAND","SHIFT","ZERO","capitaliseFirstCharacter","string","length","toUpperCase","charAt","slice","mapValues","object","mapFn","Object","fromEntries","entries","map","key","value","modifiers","primary","_isApple","primaryShift","primaryAlt","secondary","access","ctrl","alt","ctrlShift","shift","shiftAlt","undefined","rawShortcut","modifier","character","toLowerCase","join","displayShortcutList","isApple","replacementKeyMap","modifierKeys","reduce","accumulator","_replacementKeyMap$ke","replacementKey","displayShortcut","shortcutList","shortcutAriaLabel","_replacementKeyMap$ke2","getEventModifiers","event","filter","isKeyboardEvent","getModifiers","mods","eventMods","replacementWithShiftKeyMap","Comma","Backslash","IntlRo","IntlYen","modsDiff","mod","includes","eventModsDiff","altKey","String","fromCharCode","keyCode","shiftKey","code"],"sources":["@wordpress/keycodes/src/index.js"],"sourcesContent":["/**\r\n * Note: The order of the modifier keys in many of the [foo]Shortcut()\r\n * functions in this file are intentional and should not be changed. They're\r\n * designed to fit with the standard menu keyboard shortcuts shown in the\r\n * user's platform.\r\n *\r\n * For example, on MacOS menu shortcuts will place Shift before Command, but\r\n * on Windows Control will usually come first. So don't provide your own\r\n * shortcut combos directly to keyboardShortcut().\r\n */\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { __ } from '@wordpress/i18n';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { isAppleOS } from './platform';\r\n\r\n/** @typedef {typeof ALT | CTRL | COMMAND | SHIFT } WPModifierPart */\r\n\r\n/** @typedef {'primary' | 'primaryShift' | 'primaryAlt' | 'secondary' | 'access' | 'ctrl' | 'alt' | 'ctrlShift' | 'shift' | 'shiftAlt' | 'undefined'} WPKeycodeModifier */\r\n\r\n/**\r\n * An object of handler functions for each of the possible modifier\r\n * combinations. A handler will return a value for a given key.\r\n *\r\n * @template T\r\n *\r\n * @typedef {Record<WPKeycodeModifier, T>} WPModifierHandler\r\n */\r\n\r\n/**\r\n * @template T\r\n *\r\n * @typedef {(character: string, isApple?: () => boolean) => T} WPKeyHandler\r\n */\r\n/** @typedef {(event: import('react').KeyboardEvent<HTMLElement> | KeyboardEvent, character: string, isApple?: () => boolean) => boolean} WPEventKeyHandler */\r\n\r\n/** @typedef {( isApple: () => boolean ) => WPModifierPart[]} WPModifier */\r\n\r\n/**\r\n * Keycode for BACKSPACE key.\r\n */\r\nexport const BACKSPACE = 8;\r\n\r\n/**\r\n * Keycode for TAB key.\r\n */\r\nexport const TAB = 9;\r\n\r\n/**\r\n * Keycode for ENTER key.\r\n */\r\nexport const ENTER = 13;\r\n\r\n/**\r\n * Keycode for ESCAPE key.\r\n */\r\nexport const ESCAPE = 27;\r\n\r\n/**\r\n * Keycode for SPACE key.\r\n */\r\nexport const SPACE = 32;\r\n\r\n/**\r\n * Keycode for PAGEUP key.\r\n */\r\nexport const PAGEUP = 33;\r\n\r\n/**\r\n * Keycode for PAGEDOWN key.\r\n */\r\nexport const PAGEDOWN = 34;\r\n\r\n/**\r\n * Keycode for END key.\r\n */\r\nexport const END = 35;\r\n\r\n/**\r\n * Keycode for HOME key.\r\n */\r\nexport const HOME = 36;\r\n\r\n/**\r\n * Keycode for LEFT key.\r\n */\r\nexport const LEFT = 37;\r\n\r\n/**\r\n * Keycode for UP key.\r\n */\r\nexport const UP = 38;\r\n\r\n/**\r\n * Keycode for RIGHT key.\r\n */\r\nexport const RIGHT = 39;\r\n\r\n/**\r\n * Keycode for DOWN key.\r\n */\r\nexport const DOWN = 40;\r\n\r\n/**\r\n * Keycode for DELETE key.\r\n */\r\nexport const DELETE = 46;\r\n\r\n/**\r\n * Keycode for F10 key.\r\n */\r\nexport const F10 = 121;\r\n\r\n/**\r\n * Keycode for ALT key.\r\n */\r\nexport const ALT = 'alt';\r\n\r\n/**\r\n * Keycode for CTRL key.\r\n */\r\nexport const CTRL = 'ctrl';\r\n\r\n/**\r\n * Keycode for COMMAND/META key.\r\n */\r\nexport const COMMAND = 'meta';\r\n\r\n/**\r\n * Keycode for SHIFT key.\r\n */\r\nexport const SHIFT = 'shift';\r\n\r\n/**\r\n * Keycode for ZERO key.\r\n */\r\nexport const ZERO = 48;\r\n\r\nexport { isAppleOS };\r\n\r\n/**\r\n * Capitalise the first character of a string.\r\n * @param {string} string String to capitalise.\r\n * @return {string} Capitalised string.\r\n */\r\nfunction capitaliseFirstCharacter( string ) {\r\n\treturn string.length < 2\r\n\t\t? string.toUpperCase()\r\n\t\t: string.charAt( 0 ).toUpperCase() + string.slice( 1 );\r\n}\r\n\r\n/**\r\n * Map the values of an object with a specified callback and return the result object.\r\n *\r\n * @template {{ [s: string]: any; } | ArrayLike<any>} T\r\n *\r\n * @param {T}                     object Object to map values of.\r\n * @param {( value: any ) => any} mapFn  Mapping function\r\n *\r\n * @return {any} Active modifier constants.\r\n */\r\nfunction mapValues( object, mapFn ) {\r\n\treturn Object.fromEntries(\r\n\t\tObject.entries( object ).map( ( [ key, value ] ) => [\r\n\t\t\tkey,\r\n\t\t\tmapFn( value ),\r\n\t\t] )\r\n\t);\r\n}\r\n\r\n/**\r\n * Object that contains functions that return the available modifier\r\n * depending on platform.\r\n *\r\n * @type {WPModifierHandler< ( isApple: () => boolean ) => WPModifierPart[]>}\r\n */\r\nexport const modifiers = {\r\n\tprimary: ( _isApple ) => ( _isApple() ? [ COMMAND ] : [ CTRL ] ),\r\n\tprimaryShift: ( _isApple ) =>\r\n\t\t_isApple() ? [ SHIFT, COMMAND ] : [ CTRL, SHIFT ],\r\n\tprimaryAlt: ( _isApple ) =>\r\n\t\t_isApple() ? [ ALT, COMMAND ] : [ CTRL, ALT ],\r\n\tsecondary: ( _isApple ) =>\r\n\t\t_isApple() ? [ SHIFT, ALT, COMMAND ] : [ CTRL, SHIFT, ALT ],\r\n\taccess: ( _isApple ) => ( _isApple() ? [ CTRL, ALT ] : [ SHIFT, ALT ] ),\r\n\tctrl: () => [ CTRL ],\r\n\talt: () => [ ALT ],\r\n\tctrlShift: () => [ CTRL, SHIFT ],\r\n\tshift: () => [ SHIFT ],\r\n\tshiftAlt: () => [ SHIFT, ALT ],\r\n\tundefined: () => [],\r\n};\r\n\r\n/**\r\n * An object that contains functions to get raw shortcuts.\r\n *\r\n * These are intended for user with the KeyboardShortcuts.\r\n *\r\n * @example\r\n * ```js\r\n * // Assuming macOS:\r\n * rawShortcut.primary( 'm' )\r\n * // \"meta+m\"\"\r\n * ```\r\n *\r\n * @type {WPModifierHandler<WPKeyHandler<string>>} Keyed map of functions to raw\r\n *                                                 shortcuts.\r\n */\r\nexport const rawShortcut = mapValues(\r\n\tmodifiers,\r\n\t( /** @type {WPModifier} */ modifier ) => {\r\n\t\treturn /** @type {WPKeyHandler<string>} */ (\r\n\t\t\tcharacter,\r\n\t\t\t_isApple = isAppleOS\r\n\t\t) => {\r\n\t\t\treturn [ ...modifier( _isApple ), character.toLowerCase() ].join(\r\n\t\t\t\t'+'\r\n\t\t\t);\r\n\t\t};\r\n\t}\r\n);\r\n\r\n/**\r\n * Return an array of the parts of a keyboard shortcut chord for display.\r\n *\r\n * @example\r\n * ```js\r\n * // Assuming macOS:\r\n * displayShortcutList.primary( 'm' );\r\n * // [ \"⌘\", \"M\" ]\r\n * ```\r\n *\r\n * @type {WPModifierHandler<WPKeyHandler<string[]>>} Keyed map of functions to\r\n *                                                   shortcut sequences.\r\n */\r\nexport const displayShortcutList = mapValues(\r\n\tmodifiers,\r\n\t( /** @type {WPModifier} */ modifier ) => {\r\n\t\treturn /** @type {WPKeyHandler<string[]>} */ (\r\n\t\t\tcharacter,\r\n\t\t\t_isApple = isAppleOS\r\n\t\t) => {\r\n\t\t\tconst isApple = _isApple();\r\n\t\t\tconst replacementKeyMap = {\r\n\t\t\t\t[ ALT ]: isApple ? '⌥' : 'Alt',\r\n\t\t\t\t[ CTRL ]: isApple ? '⌃' : 'Ctrl', // Make sure ⌃ is the U+2303 UP ARROWHEAD unicode character and not the caret character.\r\n\t\t\t\t[ COMMAND ]: '⌘',\r\n\t\t\t\t[ SHIFT ]: isApple ? '⇧' : 'Shift',\r\n\t\t\t};\r\n\r\n\t\t\tconst modifierKeys = modifier( _isApple ).reduce(\r\n\t\t\t\t( accumulator, key ) => {\r\n\t\t\t\t\tconst replacementKey = replacementKeyMap[ key ] ?? key;\r\n\t\t\t\t\t// If on the Mac, adhere to platform convention and don't show plus between keys.\r\n\t\t\t\t\tif ( isApple ) {\r\n\t\t\t\t\t\treturn [ ...accumulator, replacementKey ];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn [ ...accumulator, replacementKey, '+' ];\r\n\t\t\t\t},\r\n\t\t\t\t/** @type {string[]} */ ( [] )\r\n\t\t\t);\r\n\r\n\t\t\treturn [ ...modifierKeys, capitaliseFirstCharacter( character ) ];\r\n\t\t};\r\n\t}\r\n);\r\n\r\n/**\r\n * An object that contains functions to display shortcuts.\r\n *\r\n * @example\r\n * ```js\r\n * // Assuming macOS:\r\n * displayShortcut.primary( 'm' );\r\n * // \"⌘M\"\r\n * ```\r\n *\r\n * @type {WPModifierHandler<WPKeyHandler<string>>} Keyed map of functions to\r\n *                                                 display shortcuts.\r\n */\r\nexport const displayShortcut = mapValues(\r\n\tdisplayShortcutList,\r\n\t( /** @type {WPKeyHandler<string[]>} */ shortcutList ) => {\r\n\t\treturn /** @type {WPKeyHandler<string>} */ (\r\n\t\t\tcharacter,\r\n\t\t\t_isApple = isAppleOS\r\n\t\t) => shortcutList( character, _isApple ).join( '' );\r\n\t}\r\n);\r\n\r\n/**\r\n * An object that contains functions to return an aria label for a keyboard\r\n * shortcut.\r\n *\r\n * @example\r\n * ```js\r\n * // Assuming macOS:\r\n * shortcutAriaLabel.primary( '.' );\r\n * // \"Command + Period\"\r\n * ```\r\n *\r\n * @type {WPModifierHandler<WPKeyHandler<string>>} Keyed map of functions to\r\n *                                                 shortcut ARIA labels.\r\n */\r\nexport const shortcutAriaLabel = mapValues(\r\n\tmodifiers,\r\n\t( /** @type {WPModifier} */ modifier ) => {\r\n\t\treturn /** @type {WPKeyHandler<string>} */ (\r\n\t\t\tcharacter,\r\n\t\t\t_isApple = isAppleOS\r\n\t\t) => {\r\n\t\t\tconst isApple = _isApple();\r\n\t\t\t/** @type {Record<string,string>} */\r\n\t\t\tconst replacementKeyMap = {\r\n\t\t\t\t[ SHIFT ]: 'Shift',\r\n\t\t\t\t[ COMMAND ]: isApple ? 'Command' : 'Control',\r\n\t\t\t\t[ CTRL ]: 'Control',\r\n\t\t\t\t[ ALT ]: isApple ? 'Option' : 'Alt',\r\n\t\t\t\t/* translators: comma as in the character ',' */\r\n\t\t\t\t',': __( 'Comma' ),\r\n\t\t\t\t/* translators: period as in the character '.' */\r\n\t\t\t\t'.': __( 'Period' ),\r\n\t\t\t\t/* translators: backtick as in the character '`' */\r\n\t\t\t\t'`': __( 'Backtick' ),\r\n\t\t\t\t/* translators: tilde as in the character '~' */\r\n\t\t\t\t'~': __( 'Tilde' ),\r\n\t\t\t};\r\n\r\n\t\t\treturn [ ...modifier( _isApple ), character ]\r\n\t\t\t\t.map( ( key ) =>\r\n\t\t\t\t\tcapitaliseFirstCharacter( replacementKeyMap[ key ] ?? key )\r\n\t\t\t\t)\r\n\t\t\t\t.join( isApple ? ' ' : ' + ' );\r\n\t\t};\r\n\t}\r\n);\r\n\r\n/**\r\n * From a given KeyboardEvent, returns an array of active modifier constants for\r\n * the event.\r\n *\r\n * @param {import('react').KeyboardEvent<HTMLElement> | KeyboardEvent} event Keyboard event.\r\n *\r\n * @return {Array<WPModifierPart>} Active modifier constants.\r\n */\r\nfunction getEventModifiers( event ) {\r\n\treturn /** @type {WPModifierPart[]} */ ( [\r\n\t\tALT,\r\n\t\tCTRL,\r\n\t\tCOMMAND,\r\n\t\tSHIFT,\r\n\t] ).filter(\r\n\t\t( key ) =>\r\n\t\t\tevent[\r\n\t\t\t\t/** @type {'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'} */ (\r\n\t\t\t\t\t`${ key }Key`\r\n\t\t\t\t)\r\n\t\t\t]\r\n\t);\r\n}\r\n\r\n/**\r\n * An object that contains functions to check if a keyboard event matches a\r\n * predefined shortcut combination.\r\n *\r\n * @example\r\n * ```js\r\n * // Assuming an event for ⌘M key press:\r\n * isKeyboardEvent.primary( event, 'm' );\r\n * // true\r\n * ```\r\n *\r\n * @type {WPModifierHandler<WPEventKeyHandler>} Keyed map of functions\r\n *                                                       to match events.\r\n */\r\nexport const isKeyboardEvent = mapValues(\r\n\tmodifiers,\r\n\t( /** @type {WPModifier} */ getModifiers ) => {\r\n\t\treturn /** @type {WPEventKeyHandler} */ (\r\n\t\t\tevent,\r\n\t\t\tcharacter,\r\n\t\t\t_isApple = isAppleOS\r\n\t\t) => {\r\n\t\t\tconst mods = getModifiers( _isApple );\r\n\t\t\tconst eventMods = getEventModifiers( event );\r\n\t\t\t/** @type {Record<string,string>} */\r\n\t\t\tconst replacementWithShiftKeyMap = {\r\n\t\t\t\tComma: ',',\r\n\t\t\t\tBackslash: '\\\\',\r\n\t\t\t\t// Windows returns `\\` for both IntlRo and IntlYen.\r\n\t\t\t\tIntlRo: '\\\\',\r\n\t\t\t\tIntlYen: '\\\\',\r\n\t\t\t};\r\n\r\n\t\t\tconst modsDiff = mods.filter(\r\n\t\t\t\t( mod ) => ! eventMods.includes( mod )\r\n\t\t\t);\r\n\t\t\tconst eventModsDiff = eventMods.filter(\r\n\t\t\t\t( mod ) => ! mods.includes( mod )\r\n\t\t\t);\r\n\r\n\t\t\tif ( modsDiff.length > 0 || eventModsDiff.length > 0 ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tlet key = event.key.toLowerCase();\r\n\r\n\t\t\tif ( ! character ) {\r\n\t\t\t\treturn mods.includes( /** @type {WPModifierPart} */ ( key ) );\r\n\t\t\t}\r\n\r\n\t\t\tif ( event.altKey && character.length === 1 ) {\r\n\t\t\t\tkey = String.fromCharCode( event.keyCode ).toLowerCase();\r\n\t\t\t}\r\n\r\n\t\t\t// `event.key` returns the value of the key pressed, taking into the state of\r\n\t\t\t// modifier keys such as `Shift`. If the shift key is pressed, a different\r\n\t\t\t// value may be returned depending on the keyboard layout. It is necessary to\r\n\t\t\t// convert to the physical key value that don't take into account keyboard\r\n\t\t\t// layout or modifier key state.\r\n\t\t\tif (\r\n\t\t\t\tevent.shiftKey &&\r\n\t\t\t\tcharacter.length === 1 &&\r\n\t\t\t\treplacementWithShiftKeyMap[ event.code ]\r\n\t\t\t) {\r\n\t\t\t\tkey = replacementWithShiftKeyMap[ event.code ];\r\n\t\t\t}\r\n\r\n\t\t\t// For backwards compatibility.\r\n\t\t\tif ( character === 'del' ) {\r\n\t\t\t\tcharacter = 'delete';\r\n\t\t\t}\r\n\r\n\t\t\treturn key === character.toLowerCase();\r\n\t\t};\r\n\t}\r\n);\r\n"],"mappings":"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","ignoreList":[]}