{"version":3,"names":["getMimeTypesArray","wpMimeTypesObject","Object","entries","flatMap","extensionsString","mime","type","split","extensions","map","extension"],"sources":["@wordpress/media-utils/src/utils/get-mime-types-array.ts"],"sourcesContent":["/**\r\n * Browsers may use unexpected mime types, and they differ from browser to browser.\r\n * This function computes a flexible array of mime types from the mime type structured provided by the server.\r\n * Converts { jpg|jpeg|jpe: \"image/jpeg\" } into [ \"image/jpeg\", \"image/jpg\", \"image/jpeg\", \"image/jpe\" ]\r\n *\r\n * @param {?Object} wpMimeTypesObject Mime type object received from the server.\r\n *                                    Extensions are keys separated by '|' and values are mime types associated with an extension.\r\n *\r\n * @return An array of mime types or null\r\n */\r\nexport function getMimeTypesArray(\r\n\twpMimeTypesObject?: Record< string, string > | null\r\n) {\r\n\tif ( ! wpMimeTypesObject ) {\r\n\t\treturn null;\r\n\t}\r\n\treturn Object.entries( wpMimeTypesObject ).flatMap(\r\n\t\t( [ extensionsString, mime ] ) => {\r\n\t\t\tconst [ type ] = mime.split( '/' );\r\n\t\t\tconst extensions = extensionsString.split( '|' );\r\n\t\t\treturn [\r\n\t\t\t\tmime,\r\n\t\t\t\t...extensions.map(\r\n\t\t\t\t\t( extension ) => `${ type }/${ extension }`\r\n\t\t\t\t),\r\n\t\t\t];\r\n\t\t}\r\n\t);\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,iBAAiBA,CAChCC,iBAAmD,EAClD;EACD,IAAK,CAAEA,iBAAiB,EAAG;IAC1B,OAAO,IAAI;EACZ;EACA,OAAOC,MAAM,CAACC,OAAO,CAAEF,iBAAkB,CAAC,CAACG,OAAO,CACjD,CAAE,CAAEC,gBAAgB,EAAEC,IAAI,CAAE,KAAM;IACjC,MAAM,CAAEC,IAAI,CAAE,GAAGD,IAAI,CAACE,KAAK,CAAE,GAAI,CAAC;IAClC,MAAMC,UAAU,GAAGJ,gBAAgB,CAACG,KAAK,CAAE,GAAI,CAAC;IAChD,OAAO,CACNF,IAAI,EACJ,GAAGG,UAAU,CAACC,GAAG,CACdC,SAAS,IAAO,GAAGJ,IAAM,IAAII,SAAW,EAC3C,CAAC,CACD;EACF,CACD,CAAC;AACF","ignoreList":[]}