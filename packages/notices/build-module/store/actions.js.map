{"version":3,"names":["DEFAULT_CONTEXT","DEFAULT_STATUS","uniqueId","createNotice","status","content","options","speak","isDismissible","context","id","actions","type","__unstableHTML","icon","explicitDismiss","onDismiss","String","notice","spokenMessage","createSuccessNotice","createInfoNotice","createErrorNotice","createWarningNotice","removeNotice","removeAllNotices","noticeType","removeNotices","ids"],"sources":["@wordpress/notices/src/store/actions.js"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport { DEFAULT_CONTEXT, DEFAULT_STATUS } from './constants';\r\n\r\n/**\r\n * @typedef {Object} WPNoticeAction Object describing a user action option associated with a notice.\r\n *\r\n * @property {string}    label   Message to use as action label.\r\n * @property {?string}   url     Optional URL of resource if action incurs\r\n *                               browser navigation.\r\n * @property {?Function} onClick Optional function to invoke when action is\r\n *                               triggered by user.\r\n */\r\n\r\nlet uniqueId = 0;\r\n\r\n/**\r\n * Returns an action object used in signalling that a notice is to be created.\r\n *\r\n * @param {string|undefined}      status                       Notice status (\"info\" if undefined is passed).\r\n * @param {string}                content                      Notice message.\r\n * @param {Object}                [options]                    Notice options.\r\n * @param {string}                [options.context='global']   Context under which to\r\n *                                                             group notice.\r\n * @param {string}                [options.id]                 Identifier for notice.\r\n *                                                             Automatically assigned\r\n *                                                             if not specified.\r\n * @param {boolean}               [options.isDismissible=true] Whether the notice can\r\n *                                                             be dismissed by user.\r\n * @param {string}                [options.type='default']     Type of notice, one of\r\n *                                                             `default`, or `snackbar`.\r\n * @param {boolean}               [options.speak=true]         Whether the notice\r\n *                                                             content should be\r\n *                                                             announced to screen\r\n *                                                             readers.\r\n * @param {Array<WPNoticeAction>} [options.actions]            User actions to be\r\n *                                                             presented with notice.\r\n * @param {string}                [options.icon]               An icon displayed with the notice.\r\n *                                                             Only used when type is set to `snackbar`.\r\n * @param {boolean}               [options.explicitDismiss]    Whether the notice includes\r\n *                                                             an explicit dismiss button and\r\n *                                                             can't be dismissed by clicking\r\n *                                                             the body of the notice. Only applies\r\n *                                                             when type is set to `snackbar`.\r\n * @param {Function}              [options.onDismiss]          Called when the notice is dismissed.\r\n *\r\n * @example\r\n * ```js\r\n * import { __ } from '@wordpress/i18n';\r\n * import { useDispatch } from '@wordpress/data';\r\n * import { store as noticesStore } from '@wordpress/notices';\r\n * import { Button } from '@wordpress/components';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const { createNotice } = useDispatch( noticesStore );\r\n *     return (\r\n *         <Button\r\n *             onClick={ () => createNotice( 'success', __( 'Notice message' ) ) }\r\n *         >\r\n *             { __( 'Generate a success notice!' ) }\r\n *         </Button>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function createNotice( status = DEFAULT_STATUS, content, options = {} ) {\r\n\tconst {\r\n\t\tspeak = true,\r\n\t\tisDismissible = true,\r\n\t\tcontext = DEFAULT_CONTEXT,\r\n\t\tid = `${ context }${ ++uniqueId }`,\r\n\t\tactions = [],\r\n\t\ttype = 'default',\r\n\t\t__unstableHTML,\r\n\t\ticon = null,\r\n\t\texplicitDismiss = false,\r\n\t\tonDismiss,\r\n\t} = options;\r\n\r\n\t// The supported value shape of content is currently limited to plain text\r\n\t// strings. To avoid setting expectation that e.g. a React Element could be\r\n\t// supported, cast to a string.\r\n\tcontent = String( content );\r\n\r\n\treturn {\r\n\t\ttype: 'CREATE_NOTICE',\r\n\t\tcontext,\r\n\t\tnotice: {\r\n\t\t\tid,\r\n\t\t\tstatus,\r\n\t\t\tcontent,\r\n\t\t\tspokenMessage: speak ? content : null,\r\n\t\t\t__unstableHTML,\r\n\t\t\tisDismissible,\r\n\t\t\tactions,\r\n\t\t\ttype,\r\n\t\t\ticon,\r\n\t\t\texplicitDismiss,\r\n\t\t\tonDismiss,\r\n\t\t},\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used in signalling that a success notice is to be\r\n * created. Refer to `createNotice` for options documentation.\r\n *\r\n * @see createNotice\r\n *\r\n * @param {string} content   Notice message.\r\n * @param {Object} [options] Optional notice options.\r\n *\r\n * @example\r\n * ```js\r\n * import { __ } from '@wordpress/i18n';\r\n * import { useDispatch } from '@wordpress/data';\r\n * import { store as noticesStore } from '@wordpress/notices';\r\n * import { Button } from '@wordpress/components';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const { createSuccessNotice } = useDispatch( noticesStore );\r\n *     return (\r\n *         <Button\r\n *             onClick={ () =>\r\n *                 createSuccessNotice( __( 'Success!' ), {\r\n *                     type: 'snackbar',\r\n *                     icon: 'ðŸ”¥',\r\n *                 } )\r\n *             }\r\n *         >\r\n *             { __( 'Generate a snackbar success notice!' ) }\r\n *        </Button>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function createSuccessNotice( content, options ) {\r\n\treturn createNotice( 'success', content, options );\r\n}\r\n\r\n/**\r\n * Returns an action object used in signalling that an info notice is to be\r\n * created. Refer to `createNotice` for options documentation.\r\n *\r\n * @see createNotice\r\n *\r\n * @param {string} content   Notice message.\r\n * @param {Object} [options] Optional notice options.\r\n *\r\n * @example\r\n * ```js\r\n * import { __ } from '@wordpress/i18n';\r\n * import { useDispatch } from '@wordpress/data';\r\n * import { store as noticesStore } from '@wordpress/notices';\r\n * import { Button } from '@wordpress/components';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const { createInfoNotice } = useDispatch( noticesStore );\r\n *     return (\r\n *         <Button\r\n *             onClick={ () =>\r\n *                createInfoNotice( __( 'Something happened!' ), {\r\n *                   isDismissible: false,\r\n *                } )\r\n *             }\r\n *         >\r\n *         { __( 'Generate a notice that cannot be dismissed.' ) }\r\n *       </Button>\r\n *       );\r\n * };\r\n *```\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function createInfoNotice( content, options ) {\r\n\treturn createNotice( 'info', content, options );\r\n}\r\n\r\n/**\r\n * Returns an action object used in signalling that an error notice is to be\r\n * created. Refer to `createNotice` for options documentation.\r\n *\r\n * @see createNotice\r\n *\r\n * @param {string} content   Notice message.\r\n * @param {Object} [options] Optional notice options.\r\n *\r\n * @example\r\n * ```js\r\n * import { __ } from '@wordpress/i18n';\r\n * import { useDispatch } from '@wordpress/data';\r\n * import { store as noticesStore } from '@wordpress/notices';\r\n * import { Button } from '@wordpress/components';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const { createErrorNotice } = useDispatch( noticesStore );\r\n *     return (\r\n *         <Button\r\n *             onClick={ () =>\r\n *                 createErrorNotice( __( 'An error occurred!' ), {\r\n *                     type: 'snackbar',\r\n *                     explicitDismiss: true,\r\n *                 } )\r\n *             }\r\n *         >\r\n *             { __(\r\n *                 'Generate an snackbar error notice with explicit dismiss button.'\r\n *             ) }\r\n *         </Button>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function createErrorNotice( content, options ) {\r\n\treturn createNotice( 'error', content, options );\r\n}\r\n\r\n/**\r\n * Returns an action object used in signalling that a warning notice is to be\r\n * created. Refer to `createNotice` for options documentation.\r\n *\r\n * @see createNotice\r\n *\r\n * @param {string} content   Notice message.\r\n * @param {Object} [options] Optional notice options.\r\n *\r\n * @example\r\n * ```js\r\n * import { __ } from '@wordpress/i18n';\r\n * import { useDispatch } from '@wordpress/data';\r\n * import { store as noticesStore } from '@wordpress/notices';\r\n * import { Button } from '@wordpress/components';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const { createWarningNotice, createInfoNotice } = useDispatch( noticesStore );\r\n *     return (\r\n *         <Button\r\n *             onClick={ () =>\r\n *                 createWarningNotice( __( 'Warning!' ), {\r\n *                     onDismiss: () => {\r\n *                         createInfoNotice(\r\n *                             __( 'The warning has been dismissed!' )\r\n *                         );\r\n *                     },\r\n *                 } )\r\n *             }\r\n *         >\r\n *             { __( 'Generates a warning notice with onDismiss callback' ) }\r\n *         </Button>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function createWarningNotice( content, options ) {\r\n\treturn createNotice( 'warning', content, options );\r\n}\r\n\r\n/**\r\n * Returns an action object used in signalling that a notice is to be removed.\r\n *\r\n * @param {string} id                 Notice unique identifier.\r\n * @param {string} [context='global'] Optional context (grouping) in which the notice is\r\n *                                    intended to appear. Defaults to default context.\r\n *\r\n * @example\r\n * ```js\r\n * import { __ } from '@wordpress/i18n';\r\n * import { useDispatch } from '@wordpress/data';\r\n * import { store as noticesStore } from '@wordpress/notices';\r\n * import { Button } from '@wordpress/components';\r\n *\r\n * const ExampleComponent = () => {\r\n *    const notices = useSelect( ( select ) => select( noticesStore ).getNotices() );\r\n *    const { createWarningNotice, removeNotice } = useDispatch( noticesStore );\r\n *\r\n *    return (\r\n *         <>\r\n *             <Button\r\n *                 onClick={ () =>\r\n *                     createWarningNotice( __( 'Warning!' ), {\r\n *                         isDismissible: false,\r\n *                     } )\r\n *                 }\r\n *             >\r\n *                 { __( 'Generate a notice' ) }\r\n *             </Button>\r\n *             { notices.length > 0 && (\r\n *                 <Button onClick={ () => removeNotice( notices[ 0 ].id ) }>\r\n *                     { __( 'Remove the notice' ) }\r\n *                 </Button>\r\n *             ) }\r\n *         </>\r\n *     );\r\n *};\r\n * ```\r\n *\r\n * @return {Object} Action object.\r\n */\r\nexport function removeNotice( id, context = DEFAULT_CONTEXT ) {\r\n\treturn {\r\n\t\ttype: 'REMOVE_NOTICE',\r\n\t\tid,\r\n\t\tcontext,\r\n\t};\r\n}\r\n\r\n/**\r\n * Removes all notices from a given context. Defaults to the default context.\r\n *\r\n * @param {string} noticeType The context to remove all notices from.\r\n * @param {string} context    The context to remove all notices from.\r\n *\r\n * @example\r\n * ```js\r\n * import { __ } from '@wordpress/i18n';\r\n * import { useDispatch, useSelect } from '@wordpress/data';\r\n * import { store as noticesStore } from '@wordpress/notices';\r\n * import { Button } from '@wordpress/components';\r\n *\r\n * export const ExampleComponent = () => {\r\n * \tconst notices = useSelect( ( select ) =>\r\n * \t\tselect( noticesStore ).getNotices()\r\n * \t);\r\n * \tconst { removeAllNotices } = useDispatch( noticesStore );\r\n * \treturn (\r\n * \t\t<>\r\n * \t\t\t<ul>\r\n * \t\t\t\t{ notices.map( ( notice ) => (\r\n * \t\t\t\t\t<li key={ notice.id }>{ notice.content }</li>\r\n * \t\t\t\t) ) }\r\n * \t\t\t</ul>\r\n * \t\t\t<Button\r\n * \t\t\t\tonClick={ () =>\r\n * \t\t\t\t\tremoveAllNotices()\r\n * \t\t\t\t}\r\n * \t\t\t>\r\n * \t\t\t\t{ __( 'Clear all notices', 'woo-gutenberg-products-block' ) }\r\n * \t\t\t</Button>\r\n * \t\t\t<Button\r\n * \t\t\t\tonClick={ () =>\r\n * \t\t\t\t\tremoveAllNotices( 'snackbar' )\r\n * \t\t\t\t}\r\n * \t\t\t>\r\n * \t\t\t\t{ __( 'Clear all snackbar notices', 'woo-gutenberg-products-block' ) }\r\n * \t\t\t</Button>\r\n * \t\t</>\r\n * \t);\r\n * };\r\n * ```\r\n *\r\n * @return {Object} \t   Action object.\r\n */\r\nexport function removeAllNotices(\r\n\tnoticeType = 'default',\r\n\tcontext = DEFAULT_CONTEXT\r\n) {\r\n\treturn {\r\n\t\ttype: 'REMOVE_ALL_NOTICES',\r\n\t\tnoticeType,\r\n\t\tcontext,\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an action object used in signalling that several notices are to be removed.\r\n *\r\n * @param {string[]} ids                List of unique notice identifiers.\r\n * @param {string}   [context='global'] Optional context (grouping) in which the notices are\r\n *                                      intended to appear. Defaults to default context.\r\n * @example\r\n * ```js\r\n * import { __ } from '@wordpress/i18n';\r\n * import { useDispatch, useSelect } from '@wordpress/data';\r\n * import { store as noticesStore } from '@wordpress/notices';\r\n * import { Button } from '@wordpress/components';\r\n *\r\n * const ExampleComponent = () => {\r\n * \tconst notices = useSelect( ( select ) =>\r\n * \t\tselect( noticesStore ).getNotices()\r\n * \t);\r\n * \tconst { removeNotices } = useDispatch( noticesStore );\r\n * \treturn (\r\n * \t\t<>\r\n * \t\t\t<ul>\r\n * \t\t\t\t{ notices.map( ( notice ) => (\r\n * \t\t\t\t\t<li key={ notice.id }>{ notice.content }</li>\r\n * \t\t\t\t) ) }\r\n * \t\t\t</ul>\r\n * \t\t\t<Button\r\n * \t\t\t\tonClick={ () =>\r\n * \t\t\t\t\tremoveNotices( notices.map( ( { id } ) => id ) )\r\n * \t\t\t\t}\r\n * \t\t\t>\r\n * \t\t\t\t{ __( 'Clear all notices' ) }\r\n * \t\t\t</Button>\r\n * \t\t</>\r\n * \t);\r\n * };\r\n * ```\r\n * @return {Object} Action object.\r\n */\r\nexport function removeNotices( ids, context = DEFAULT_CONTEXT ) {\r\n\treturn {\r\n\t\ttype: 'REMOVE_NOTICES',\r\n\t\tids,\r\n\t\tcontext,\r\n\t};\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,eAAe,EAAEC,cAAc,QAAQ,aAAa;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ,GAAG,CAAC;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAAEC,MAAM,GAAGH,cAAc,EAAEI,OAAO,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAG;EAC9E,MAAM;IACLC,KAAK,GAAG,IAAI;IACZC,aAAa,GAAG,IAAI;IACpBC,OAAO,GAAGT,eAAe;IACzBU,EAAE,GAAI,GAAGD,OAAS,GAAG,EAAEP,QAAU,EAAC;IAClCS,OAAO,GAAG,EAAE;IACZC,IAAI,GAAG,SAAS;IAChBC,cAAc;IACdC,IAAI,GAAG,IAAI;IACXC,eAAe,GAAG,KAAK;IACvBC;EACD,CAAC,GAAGV,OAAO;;EAEX;EACA;EACA;EACAD,OAAO,GAAGY,MAAM,CAAEZ,OAAQ,CAAC;EAE3B,OAAO;IACNO,IAAI,EAAE,eAAe;IACrBH,OAAO;IACPS,MAAM,EAAE;MACPR,EAAE;MACFN,MAAM;MACNC,OAAO;MACPc,aAAa,EAAEZ,KAAK,GAAGF,OAAO,GAAG,IAAI;MACrCQ,cAAc;MACdL,aAAa;MACbG,OAAO;MACPC,IAAI;MACJE,IAAI;MACJC,eAAe;MACfC;IACD;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,mBAAmBA,CAAEf,OAAO,EAAEC,OAAO,EAAG;EACvD,OAAOH,YAAY,CAAE,SAAS,EAAEE,OAAO,EAAEC,OAAQ,CAAC;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASe,gBAAgBA,CAAEhB,OAAO,EAAEC,OAAO,EAAG;EACpD,OAAOH,YAAY,CAAE,MAAM,EAAEE,OAAO,EAAEC,OAAQ,CAAC;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgB,iBAAiBA,CAAEjB,OAAO,EAAEC,OAAO,EAAG;EACrD,OAAOH,YAAY,CAAE,OAAO,EAAEE,OAAO,EAAEC,OAAQ,CAAC;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASiB,mBAAmBA,CAAElB,OAAO,EAAEC,OAAO,EAAG;EACvD,OAAOH,YAAY,CAAE,SAAS,EAAEE,OAAO,EAAEC,OAAQ,CAAC;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASkB,YAAYA,CAAEd,EAAE,EAAED,OAAO,GAAGT,eAAe,EAAG;EAC7D,OAAO;IACNY,IAAI,EAAE,eAAe;IACrBF,EAAE;IACFD;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgB,gBAAgBA,CAC/BC,UAAU,GAAG,SAAS,EACtBjB,OAAO,GAAGT,eAAe,EACxB;EACD,OAAO;IACNY,IAAI,EAAE,oBAAoB;IAC1Bc,UAAU;IACVjB;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASkB,aAAaA,CAAEC,GAAG,EAAEnB,OAAO,GAAGT,eAAe,EAAG;EAC/D,OAAO;IACNY,IAAI,EAAE,gBAAgB;IACtBgB,GAAG;IACHnB;EACD,CAAC;AACF","ignoreList":[]}