{"version":3,"names":["DEFAULT_CONTEXT","DEFAULT_NOTICES","getNotices","state","context"],"sources":["@wordpress/notices/src/store/selectors.js"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport { DEFAULT_CONTEXT } from './constants';\r\n\r\n/** @typedef {import('./actions').WPNoticeAction} WPNoticeAction */\r\n\r\n/**\r\n * The default empty set of notices to return when there are no notices\r\n * assigned for a given notices context. This can occur if the getNotices\r\n * selector is called without a notice ever having been created for the\r\n * context. A shared value is used to ensure referential equality between\r\n * sequential selector calls, since otherwise `[] !== []`.\r\n *\r\n * @type {Array}\r\n */\r\nconst DEFAULT_NOTICES = [];\r\n\r\n/**\r\n * @typedef {Object} WPNotice Notice object.\r\n *\r\n * @property {string}           id             Unique identifier of notice.\r\n * @property {string}           status         Status of notice, one of `success`,\r\n *                                             `info`, `error`, or `warning`. Defaults\r\n *                                             to `info`.\r\n * @property {string}           content        Notice message.\r\n * @property {string}           spokenMessage  Audibly announced message text used by\r\n *                                             assistive technologies.\r\n * @property {string}           __unstableHTML Notice message as raw HTML. Intended to\r\n *                                             serve primarily for compatibility of\r\n *                                             server-rendered notices, and SHOULD NOT\r\n *                                             be used for notices. It is subject to\r\n *                                             removal without notice.\r\n * @property {boolean}          isDismissible  Whether the notice can be dismissed by\r\n *                                             user. Defaults to `true`.\r\n * @property {string}           type           Type of notice, one of `default`,\r\n *                                             or `snackbar`. Defaults to `default`.\r\n * @property {boolean}          speak          Whether the notice content should be\r\n *                                             announced to screen readers. Defaults to\r\n *                                             `true`.\r\n * @property {WPNoticeAction[]} actions        User actions to present with notice.\r\n */\r\n\r\n/**\r\n * Returns all notices as an array, optionally for a given context. Defaults to\r\n * the global context.\r\n *\r\n * @param {Object}  state   Notices state.\r\n * @param {?string} context Optional grouping context.\r\n *\r\n * @example\r\n *\r\n *```js\r\n * import { useSelect } from '@wordpress/data';\r\n * import { store as noticesStore } from '@wordpress/notices';\r\n *\r\n * const ExampleComponent = () => {\r\n *     const notices = useSelect( ( select ) => select( noticesStore ).getNotices() );\r\n *     return (\r\n *         <ul>\r\n *         { notices.map( ( notice ) => (\r\n *             <li key={ notice.ID }>{ notice.content }</li>\r\n *         ) ) }\r\n *        </ul>\r\n *    )\r\n * };\r\n *```\r\n *\r\n * @return {WPNotice[]} Array of notices.\r\n */\r\nexport function getNotices( state, context = DEFAULT_CONTEXT ) {\r\n\treturn state[ context ] || DEFAULT_NOTICES;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,eAAe,QAAQ,aAAa;;AAE7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,EAAE;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAAEC,KAAK,EAAEC,OAAO,GAAGJ,eAAe,EAAG;EAC9D,OAAOG,KAAK,CAAEC,OAAO,CAAE,IAAIH,eAAe;AAC3C","ignoreList":[]}