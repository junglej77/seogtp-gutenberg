{"version":3,"names":["createSelector","getAssociatedGuide","state","tipId","tipIds","guides","includes","nonDismissedTips","filter","tId","Object","keys","preferences","dismissedTips","currentTipId","nextTipId","isTipVisible","areTipsEnabled","hasOwnProperty","associatedGuide"],"sources":["@wordpress/nux/src/store/selectors.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { createSelector } from '@wordpress/data';\r\n\r\n/**\r\n * An object containing information about a guide.\r\n *\r\n * @typedef {Object} NUXGuideInfo\r\n * @property {string[]} tipIds       Which tips the guide contains.\r\n * @property {?string}  currentTipId The guide's currently showing tip.\r\n * @property {?string}  nextTipId    The guide's next tip to show.\r\n */\r\n\r\n/**\r\n * Returns an object describing the guide, if any, that the given tip is a part\r\n * of.\r\n *\r\n * @param {Object} state Global application state.\r\n * @param {string} tipId The tip to query.\r\n *\r\n * @return {?NUXGuideInfo} Information about the associated guide.\r\n */\r\nexport const getAssociatedGuide = createSelector(\r\n\t( state, tipId ) => {\r\n\t\tfor ( const tipIds of state.guides ) {\r\n\t\t\tif ( tipIds.includes( tipId ) ) {\r\n\t\t\t\tconst nonDismissedTips = tipIds.filter(\r\n\t\t\t\t\t( tId ) =>\r\n\t\t\t\t\t\t! Object.keys(\r\n\t\t\t\t\t\t\tstate.preferences.dismissedTips\r\n\t\t\t\t\t\t).includes( tId )\r\n\t\t\t\t);\r\n\t\t\t\tconst [ currentTipId = null, nextTipId = null ] =\r\n\t\t\t\t\tnonDismissedTips;\r\n\t\t\t\treturn { tipIds, currentTipId, nextTipId };\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t},\r\n\t( state ) => [ state.guides, state.preferences.dismissedTips ]\r\n);\r\n\r\n/**\r\n * Determines whether or not the given tip is showing. Tips are hidden if they\r\n * are disabled, have been dismissed, or are not the current tip in any\r\n * guide that they have been added to.\r\n *\r\n * @param {Object} state Global application state.\r\n * @param {string} tipId The tip to query.\r\n *\r\n * @return {boolean} Whether or not the given tip is showing.\r\n */\r\nexport function isTipVisible( state, tipId ) {\r\n\tif ( ! state.preferences.areTipsEnabled ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif ( state.preferences.dismissedTips?.hasOwnProperty( tipId ) ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst associatedGuide = getAssociatedGuide( state, tipId );\r\n\tif ( associatedGuide && associatedGuide.currentTipId !== tipId ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * Returns whether or not tips are globally enabled.\r\n *\r\n * @param {Object} state Global application state.\r\n *\r\n * @return {boolean} Whether tips are globally enabled.\r\n */\r\nexport function areTipsEnabled( state ) {\r\n\treturn state.preferences.areTipsEnabled;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,cAAc,QAAQ,iBAAiB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAGD,cAAc,CAC/C,CAAEE,KAAK,EAAEC,KAAK,KAAM;EACnB,KAAM,MAAMC,MAAM,IAAIF,KAAK,CAACG,MAAM,EAAG;IACpC,IAAKD,MAAM,CAACE,QAAQ,CAAEH,KAAM,CAAC,EAAG;MAC/B,MAAMI,gBAAgB,GAAGH,MAAM,CAACI,MAAM,CACnCC,GAAG,IACJ,CAAEC,MAAM,CAACC,IAAI,CACZT,KAAK,CAACU,WAAW,CAACC,aACnB,CAAC,CAACP,QAAQ,CAAEG,GAAI,CAClB,CAAC;MACD,MAAM,CAAEK,YAAY,GAAG,IAAI,EAAEC,SAAS,GAAG,IAAI,CAAE,GAC9CR,gBAAgB;MACjB,OAAO;QAAEH,MAAM;QAAEU,YAAY;QAAEC;MAAU,CAAC;IAC3C;EACD;EAEA,OAAO,IAAI;AACZ,CAAC,EACCb,KAAK,IAAM,CAAEA,KAAK,CAACG,MAAM,EAAEH,KAAK,CAACU,WAAW,CAACC,aAAa,CAC7D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,YAAYA,CAAEd,KAAK,EAAEC,KAAK,EAAG;EAC5C,IAAK,CAAED,KAAK,CAACU,WAAW,CAACK,cAAc,EAAG;IACzC,OAAO,KAAK;EACb;EAEA,IAAKf,KAAK,CAACU,WAAW,CAACC,aAAa,EAAEK,cAAc,CAAEf,KAAM,CAAC,EAAG;IAC/D,OAAO,KAAK;EACb;EAEA,MAAMgB,eAAe,GAAGlB,kBAAkB,CAAEC,KAAK,EAAEC,KAAM,CAAC;EAC1D,IAAKgB,eAAe,IAAIA,eAAe,CAACL,YAAY,KAAKX,KAAK,EAAG;IAChE,OAAO,KAAK;EACb;EAEA,OAAO,IAAI;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASc,cAAcA,CAAEf,KAAK,EAAG;EACvC,OAAOA,KAAK,CAACU,WAAW,CAACK,cAAc;AACxC","ignoreList":[]}