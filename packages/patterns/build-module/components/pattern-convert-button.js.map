{"version":3,"names":["hasBlockSupport","isReusableBlock","createBlock","serialize","store","blockEditorStore","useState","useCallback","MenuItem","symbol","useSelect","useDispatch","coreStore","__","sprintf","noticesStore","patternsStore","CreatePatternModal","unlock","PATTERN_SYNC_TYPES","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","PatternConvertButton","clientIds","rootClientId","closeBlockSettingsMenu","createSuccessNotice","replaceBlocks","setEditingPattern","isModalOpen","setIsModalOpen","canConvert","select","_getBlocksByClientId","canUser","getBlocksByClientId","canInsertBlockType","getBlockRootClientId","rootId","length","undefined","blocks","isReusable","getEntityRecord","attributes","ref","_canConvert","every","block","isValid","name","kind","getContent","handleSuccess","pattern","wp_pattern_sync_status","unsynced","newBlock","id","clientId","title","raw","type","children","icon","onClick","content","onSuccess","onError","onClose"],"sources":["@wordpress/patterns/src/components/pattern-convert-button.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport {\r\n\thasBlockSupport,\r\n\tisReusableBlock,\r\n\tcreateBlock,\r\n\tserialize,\r\n} from '@wordpress/blocks';\r\nimport { store as blockEditorStore } from '@wordpress/block-editor';\r\nimport { useState, useCallback } from '@wordpress/element';\r\nimport { MenuItem } from '@wordpress/components';\r\nimport { symbol } from '@wordpress/icons';\r\nimport { useSelect, useDispatch } from '@wordpress/data';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\nimport { __, sprintf } from '@wordpress/i18n';\r\nimport { store as noticesStore } from '@wordpress/notices';\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store as patternsStore } from '../store';\r\nimport CreatePatternModal from './create-pattern-modal';\r\nimport { unlock } from '../lock-unlock';\r\nimport { PATTERN_SYNC_TYPES } from '../constants';\r\n\r\n/**\r\n * Menu control to convert block(s) to a pattern block.\r\n *\r\n * @param {Object}   props                        Component props.\r\n * @param {string[]} props.clientIds              Client ids of selected blocks.\r\n * @param {string}   props.rootClientId           ID of the currently selected top-level block.\r\n * @param {()=>void} props.closeBlockSettingsMenu Callback to close the block settings menu dropdown.\r\n * @return {import('react').ComponentType} The menu control or null.\r\n */\r\nexport default function PatternConvertButton( {\r\n\tclientIds,\r\n\trootClientId,\r\n\tcloseBlockSettingsMenu,\r\n} ) {\r\n\tconst { createSuccessNotice } = useDispatch( noticesStore );\r\n\tconst { replaceBlocks } = useDispatch( blockEditorStore );\r\n\t// Ignore reason: false positive of the lint rule.\r\n\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\r\n\tconst { setEditingPattern } = unlock( useDispatch( patternsStore ) );\r\n\tconst [ isModalOpen, setIsModalOpen ] = useState( false );\r\n\tconst canConvert = useSelect(\r\n\t\t( select ) => {\r\n\t\t\tconst { canUser } = select( coreStore );\r\n\t\t\tconst {\r\n\t\t\t\tgetBlocksByClientId,\r\n\t\t\t\tcanInsertBlockType,\r\n\t\t\t\tgetBlockRootClientId,\r\n\t\t\t} = select( blockEditorStore );\r\n\r\n\t\t\tconst rootId =\r\n\t\t\t\trootClientId ||\r\n\t\t\t\t( clientIds.length > 0\r\n\t\t\t\t\t? getBlockRootClientId( clientIds[ 0 ] )\r\n\t\t\t\t\t: undefined );\r\n\r\n\t\t\tconst blocks = getBlocksByClientId( clientIds ) ?? [];\r\n\r\n\t\t\tconst isReusable =\r\n\t\t\t\tblocks.length === 1 &&\r\n\t\t\t\tblocks[ 0 ] &&\r\n\t\t\t\tisReusableBlock( blocks[ 0 ] ) &&\r\n\t\t\t\t!! select( coreStore ).getEntityRecord(\r\n\t\t\t\t\t'postType',\r\n\t\t\t\t\t'wp_block',\r\n\t\t\t\t\tblocks[ 0 ].attributes.ref\r\n\t\t\t\t);\r\n\r\n\t\t\tconst _canConvert =\r\n\t\t\t\t// Hide when this is already a synced pattern.\r\n\t\t\t\t! isReusable &&\r\n\t\t\t\t// Hide when patterns are disabled.\r\n\t\t\t\tcanInsertBlockType( 'core/block', rootId ) &&\r\n\t\t\t\tblocks.every(\r\n\t\t\t\t\t( block ) =>\r\n\t\t\t\t\t\t// Guard against the case where a regular block has *just* been converted.\r\n\t\t\t\t\t\t!! block &&\r\n\t\t\t\t\t\t// Hide on invalid blocks.\r\n\t\t\t\t\t\tblock.isValid &&\r\n\t\t\t\t\t\t// Hide when block doesn't support being made into a pattern.\r\n\t\t\t\t\t\thasBlockSupport( block.name, 'reusable', true )\r\n\t\t\t\t) &&\r\n\t\t\t\t// Hide when current doesn't have permission to do that.\r\n\t\t\t\t// Blocks refers to the wp_block post type, this checks the ability to create a post of that type.\r\n\t\t\t\t!! canUser( 'create', {\r\n\t\t\t\t\tkind: 'postType',\r\n\t\t\t\t\tname: 'wp_block',\r\n\t\t\t\t} );\r\n\r\n\t\t\treturn _canConvert;\r\n\t\t},\r\n\t\t[ clientIds, rootClientId ]\r\n\t);\r\n\tconst { getBlocksByClientId } = useSelect( blockEditorStore );\r\n\tconst getContent = useCallback(\r\n\t\t() => serialize( getBlocksByClientId( clientIds ) ),\r\n\t\t[ getBlocksByClientId, clientIds ]\r\n\t);\r\n\r\n\tif ( ! canConvert ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst handleSuccess = ( { pattern } ) => {\r\n\t\tif ( pattern.wp_pattern_sync_status !== PATTERN_SYNC_TYPES.unsynced ) {\r\n\t\t\tconst newBlock = createBlock( 'core/block', {\r\n\t\t\t\tref: pattern.id,\r\n\t\t\t} );\r\n\r\n\t\t\treplaceBlocks( clientIds, newBlock );\r\n\t\t\tsetEditingPattern( newBlock.clientId, true );\r\n\t\t\tcloseBlockSettingsMenu();\r\n\t\t}\r\n\r\n\t\tcreateSuccessNotice(\r\n\t\t\tpattern.wp_pattern_sync_status === PATTERN_SYNC_TYPES.unsynced\r\n\t\t\t\t? sprintf(\r\n\t\t\t\t\t\t// translators: %s: the name the user has given to the pattern.\r\n\t\t\t\t\t\t__( 'Unsynced pattern created: %s' ),\r\n\t\t\t\t\t\tpattern.title.raw\r\n\t\t\t\t  )\r\n\t\t\t\t: sprintf(\r\n\t\t\t\t\t\t// translators: %s: the name the user has given to the pattern.\r\n\t\t\t\t\t\t__( 'Synced pattern created: %s' ),\r\n\t\t\t\t\t\tpattern.title.raw\r\n\t\t\t\t  ),\r\n\t\t\t{\r\n\t\t\t\ttype: 'snackbar',\r\n\t\t\t\tid: 'convert-to-pattern-success',\r\n\t\t\t}\r\n\t\t);\r\n\t\tsetIsModalOpen( false );\r\n\t};\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<MenuItem\r\n\t\t\t\ticon={ symbol }\r\n\t\t\t\tonClick={ () => setIsModalOpen( true ) }\r\n\t\t\t\taria-expanded={ isModalOpen }\r\n\t\t\t\taria-haspopup=\"dialog\"\r\n\t\t\t>\r\n\t\t\t\t{ __( 'Create pattern' ) }\r\n\t\t\t</MenuItem>\r\n\t\t\t{ isModalOpen && (\r\n\t\t\t\t<CreatePatternModal\r\n\t\t\t\t\tcontent={ getContent }\r\n\t\t\t\t\tonSuccess={ ( pattern ) => {\r\n\t\t\t\t\t\thandleSuccess( pattern );\r\n\t\t\t\t\t} }\r\n\t\t\t\t\tonError={ () => {\r\n\t\t\t\t\t\tsetIsModalOpen( false );\r\n\t\t\t\t\t} }\r\n\t\t\t\t\tonClose={ () => {\r\n\t\t\t\t\t\tsetIsModalOpen( false );\r\n\t\t\t\t\t} }\r\n\t\t\t\t/>\r\n\t\t\t) }\r\n\t\t</>\r\n\t);\r\n}\r\n"],"mappings":"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","ignoreList":[]}