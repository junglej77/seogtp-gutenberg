{"version":3,"names":["useSelect","useDispatch","store","coreStore","useMemo","CATEGORY_SLUG","useAddPatternCategory","saveEntityRecord","invalidateResolution","corePatternCategories","userPatternCategories","select","getUserPatternCategories","getBlockPatternCategories","categoryMap","uniqueCategories","Map","forEach","category","set","label","toLowerCase","name","id","has","findOrCreateTerm","term","existingTerm","get","termData","slug","newTerm","throwOnError","error","code","data","term_id"],"sources":["@wordpress/patterns/src/private-hooks.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport { useSelect, useDispatch } from '@wordpress/data';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\nimport { useMemo } from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { CATEGORY_SLUG } from './components/category-selector';\r\n\r\n/**\r\n * Helper hook that creates a Map with the core and user patterns categories\r\n * and removes any duplicates. It's used when we need to create new user\r\n * categories when creating or importing patterns.\r\n * This hook also provides a function to find or create a pattern category.\r\n *\r\n * @return {Object} The merged categories map and the callback function to find or create a category.\r\n */\r\nexport function useAddPatternCategory() {\r\n\tconst { saveEntityRecord, invalidateResolution } = useDispatch( coreStore );\r\n\tconst { corePatternCategories, userPatternCategories } = useSelect(\r\n\t\t( select ) => {\r\n\t\t\tconst { getUserPatternCategories, getBlockPatternCategories } =\r\n\t\t\t\tselect( coreStore );\r\n\r\n\t\t\treturn {\r\n\t\t\t\tcorePatternCategories: getBlockPatternCategories(),\r\n\t\t\t\tuserPatternCategories: getUserPatternCategories(),\r\n\t\t\t};\r\n\t\t},\r\n\t\t[]\r\n\t);\r\n\tconst categoryMap = useMemo( () => {\r\n\t\t// Merge the user and core pattern categories and remove any duplicates.\r\n\t\tconst uniqueCategories = new Map();\r\n\t\tuserPatternCategories.forEach( ( category ) => {\r\n\t\t\tuniqueCategories.set( category.label.toLowerCase(), {\r\n\t\t\t\tlabel: category.label,\r\n\t\t\t\tname: category.name,\r\n\t\t\t\tid: category.id,\r\n\t\t\t} );\r\n\t\t} );\r\n\r\n\t\tcorePatternCategories.forEach( ( category ) => {\r\n\t\t\tif (\r\n\t\t\t\t! uniqueCategories.has( category.label.toLowerCase() ) &&\r\n\t\t\t\t// There are two core categories with `Post` label so explicitly remove the one with\r\n\t\t\t\t// the `query` slug to avoid any confusion.\r\n\t\t\t\tcategory.name !== 'query'\r\n\t\t\t) {\r\n\t\t\t\tuniqueCategories.set( category.label.toLowerCase(), {\r\n\t\t\t\t\tlabel: category.label,\r\n\t\t\t\t\tname: category.name,\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t} );\r\n\t\treturn uniqueCategories;\r\n\t}, [ userPatternCategories, corePatternCategories ] );\r\n\r\n\tasync function findOrCreateTerm( term ) {\r\n\t\ttry {\r\n\t\t\tconst existingTerm = categoryMap.get( term.toLowerCase() );\r\n\t\t\tif ( existingTerm?.id ) {\r\n\t\t\t\treturn existingTerm.id;\r\n\t\t\t}\r\n\t\t\t// If we have an existing core category we need to match the new user category to the\r\n\t\t\t// correct slug rather than autogenerating it to prevent duplicates, eg. the core `Headers`\r\n\t\t\t// category uses the singular `header` as the slug.\r\n\t\t\tconst termData = existingTerm\r\n\t\t\t\t? { name: existingTerm.label, slug: existingTerm.name }\r\n\t\t\t\t: { name: term };\r\n\t\t\tconst newTerm = await saveEntityRecord(\r\n\t\t\t\t'taxonomy',\r\n\t\t\t\tCATEGORY_SLUG,\r\n\t\t\t\ttermData,\r\n\t\t\t\t{ throwOnError: true }\r\n\t\t\t);\r\n\t\t\tinvalidateResolution( 'getUserPatternCategories' );\r\n\t\t\treturn newTerm.id;\r\n\t\t} catch ( error ) {\r\n\t\t\tif ( error.code !== 'term_exists' ) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t\treturn error.data.term_id;\r\n\t\t}\r\n\t}\r\n\r\n\treturn { categoryMap, findOrCreateTerm };\r\n}\r\n"],"mappings":"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","ignoreList":[]}