{"version":3,"names":["apiFetch","debounceAsync","EMPTY_OBJECT","localStorage","window","create","preloadedData","localStorageRestoreKey","requestDebounceMS","cache","debouncedApiFetch","get","user","path","serverData","meta","persisted_preferences","localData","JSON","parse","getItem","serverTimestamp","Date","_modified","localTimestamp","set","newData","dataWithTimestamp","toISOString","setItem","stringify","method","keepalive","data","catch"],"sources":["@wordpress/preferences-persistence/src/create/index.js"],"sourcesContent":["/**\r\n * WordPress dependencies\r\n */\r\nimport apiFetch from '@wordpress/api-fetch';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport debounceAsync from './debounce-async';\r\n\r\nconst EMPTY_OBJECT = {};\r\nconst localStorage = window.localStorage;\r\n\r\n/**\r\n * Creates a persistence layer that stores data in WordPress user meta via the\r\n * REST API.\r\n *\r\n * @param {Object}  options\r\n * @param {?Object} options.preloadedData          Any persisted preferences data that should be preloaded.\r\n *                                                 When set, the persistence layer will avoid fetching data\r\n *                                                 from the REST API.\r\n * @param {?string} options.localStorageRestoreKey The key to use for restoring the localStorage backup, used\r\n *                                                 when the persistence layer calls `localStorage.getItem` or\r\n *                                                 `localStorage.setItem`.\r\n * @param {?number} options.requestDebounceMS      Debounce requests to the API so that they only occur at\r\n *                                                 minimum every `requestDebounceMS` milliseconds, and don't\r\n *                                                 swamp the server. Defaults to 2500ms.\r\n *\r\n * @return {Object} A persistence layer for WordPress user meta.\r\n */\r\nexport default function create( {\r\n\tpreloadedData,\r\n\tlocalStorageRestoreKey = 'WP_PREFERENCES_RESTORE_DATA',\r\n\trequestDebounceMS = 2500,\r\n} = {} ) {\r\n\tlet cache = preloadedData;\r\n\tconst debouncedApiFetch = debounceAsync( apiFetch, requestDebounceMS );\r\n\r\n\tasync function get() {\r\n\t\tif ( cache ) {\r\n\t\t\treturn cache;\r\n\t\t}\r\n\r\n\t\tconst user = await apiFetch( {\r\n\t\t\tpath: '/wp/v2/users/me?context=edit',\r\n\t\t} );\r\n\r\n\t\tconst serverData = user?.meta?.persisted_preferences;\r\n\t\tconst localData = JSON.parse(\r\n\t\t\tlocalStorage.getItem( localStorageRestoreKey )\r\n\t\t);\r\n\r\n\t\t// Date parse returns NaN for invalid input. Coerce anything invalid\r\n\t\t// into a conveniently comparable zero.\r\n\t\tconst serverTimestamp = Date.parse( serverData?._modified ) || 0;\r\n\t\tconst localTimestamp = Date.parse( localData?._modified ) || 0;\r\n\r\n\t\t// Prefer server data if it exists and is more recent.\r\n\t\t// Otherwise fallback to localStorage data.\r\n\t\tif ( serverData && serverTimestamp >= localTimestamp ) {\r\n\t\t\tcache = serverData;\r\n\t\t} else if ( localData ) {\r\n\t\t\tcache = localData;\r\n\t\t} else {\r\n\t\t\tcache = EMPTY_OBJECT;\r\n\t\t}\r\n\r\n\t\treturn cache;\r\n\t}\r\n\r\n\tfunction set( newData ) {\r\n\t\tconst dataWithTimestamp = {\r\n\t\t\t...newData,\r\n\t\t\t_modified: new Date().toISOString(),\r\n\t\t};\r\n\t\tcache = dataWithTimestamp;\r\n\r\n\t\t// Store data in local storage as a fallback. If for some reason the\r\n\t\t// api request does not complete or becomes unavailable, this data\r\n\t\t// can be used to restore preferences.\r\n\t\tlocalStorage.setItem(\r\n\t\t\tlocalStorageRestoreKey,\r\n\t\t\tJSON.stringify( dataWithTimestamp )\r\n\t\t);\r\n\r\n\t\t// The user meta endpoint seems susceptible to errors when consecutive\r\n\t\t// requests are made in quick succession. Ensure there's a gap between\r\n\t\t// any consecutive requests.\r\n\t\t//\r\n\t\t// Catch and do nothing with errors from the REST API.\r\n\t\tdebouncedApiFetch( {\r\n\t\t\tpath: '/wp/v2/users/me',\r\n\t\t\tmethod: 'PUT',\r\n\t\t\t// `keepalive` will still send the request in the background,\r\n\t\t\t// even when a browser unload event might interrupt it.\r\n\t\t\t// This should hopefully make things more resilient.\r\n\t\t\t// This does have a size limit of 64kb, but the data is usually\r\n\t\t\t// much less.\r\n\t\t\tkeepalive: true,\r\n\t\t\tdata: {\r\n\t\t\t\tmeta: {\r\n\t\t\t\t\tpersisted_preferences: dataWithTimestamp,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t} ).catch( () => {} );\r\n\t}\r\n\r\n\treturn {\r\n\t\tget,\r\n\t\tset,\r\n\t};\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,QAAQ,MAAM,sBAAsB;;AAE3C;AACA;AACA;AACA,OAAOC,aAAa,MAAM,kBAAkB;AAE5C,MAAMC,YAAY,GAAG,CAAC,CAAC;AACvB,MAAMC,YAAY,GAAGC,MAAM,CAACD,YAAY;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASE,MAAMA,CAAE;EAC/BC,aAAa;EACbC,sBAAsB,GAAG,6BAA6B;EACtDC,iBAAiB,GAAG;AACrB,CAAC,GAAG,CAAC,CAAC,EAAG;EACR,IAAIC,KAAK,GAAGH,aAAa;EACzB,MAAMI,iBAAiB,GAAGT,aAAa,CAAED,QAAQ,EAAEQ,iBAAkB,CAAC;EAEtE,eAAeG,GAAGA,CAAA,EAAG;IACpB,IAAKF,KAAK,EAAG;MACZ,OAAOA,KAAK;IACb;IAEA,MAAMG,IAAI,GAAG,MAAMZ,QAAQ,CAAE;MAC5Ba,IAAI,EAAE;IACP,CAAE,CAAC;IAEH,MAAMC,UAAU,GAAGF,IAAI,EAAEG,IAAI,EAAEC,qBAAqB;IACpD,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAC3BhB,YAAY,CAACiB,OAAO,CAAEb,sBAAuB,CAC9C,CAAC;;IAED;IACA;IACA,MAAMc,eAAe,GAAGC,IAAI,CAACH,KAAK,CAAEL,UAAU,EAAES,SAAU,CAAC,IAAI,CAAC;IAChE,MAAMC,cAAc,GAAGF,IAAI,CAACH,KAAK,CAAEF,SAAS,EAAEM,SAAU,CAAC,IAAI,CAAC;;IAE9D;IACA;IACA,IAAKT,UAAU,IAAIO,eAAe,IAAIG,cAAc,EAAG;MACtDf,KAAK,GAAGK,UAAU;IACnB,CAAC,MAAM,IAAKG,SAAS,EAAG;MACvBR,KAAK,GAAGQ,SAAS;IAClB,CAAC,MAAM;MACNR,KAAK,GAAGP,YAAY;IACrB;IAEA,OAAOO,KAAK;EACb;EAEA,SAASgB,GAAGA,CAAEC,OAAO,EAAG;IACvB,MAAMC,iBAAiB,GAAG;MACzB,GAAGD,OAAO;MACVH,SAAS,EAAE,IAAID,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC;IACnC,CAAC;IACDnB,KAAK,GAAGkB,iBAAiB;;IAEzB;IACA;IACA;IACAxB,YAAY,CAAC0B,OAAO,CACnBtB,sBAAsB,EACtBW,IAAI,CAACY,SAAS,CAAEH,iBAAkB,CACnC,CAAC;;IAED;IACA;IACA;IACA;IACA;IACAjB,iBAAiB,CAAE;MAClBG,IAAI,EAAE,iBAAiB;MACvBkB,MAAM,EAAE,KAAK;MACb;MACA;MACA;MACA;MACA;MACAC,SAAS,EAAE,IAAI;MACfC,IAAI,EAAE;QACLlB,IAAI,EAAE;UACLC,qBAAqB,EAAEW;QACxB;MACD;IACD,CAAE,CAAC,CAACO,KAAK,CAAE,MAAM,CAAC,CAAE,CAAC;EACtB;EAEA,OAAO;IACNvB,GAAG;IACHc;EACD,CAAC;AACF","ignoreList":[]}