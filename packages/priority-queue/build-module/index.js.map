{"version":3,"names":["requestIdleCallback","createQueue","waitingList","Map","isRunning","runWaitingList","deadline","nextElement","callback","delete","timeRemaining","size","add","element","item","set","flush","get","undefined","cancel","reset","clear"],"sources":["@wordpress/priority-queue/src/index.js"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport requestIdleCallback from './request-idle-callback';\r\n\r\n/**\r\n * Enqueued callback to invoke once idle time permits.\r\n *\r\n * @typedef {()=>void} WPPriorityQueueCallback\r\n */\r\n\r\n/**\r\n * An object used to associate callbacks in a particular context grouping.\r\n *\r\n * @typedef {{}} WPPriorityQueueContext\r\n */\r\n\r\n/**\r\n * Function to add callback to priority queue.\r\n *\r\n * @typedef {(element:WPPriorityQueueContext,item:WPPriorityQueueCallback)=>void} WPPriorityQueueAdd\r\n */\r\n\r\n/**\r\n * Function to flush callbacks from priority queue.\r\n *\r\n * @typedef {(element:WPPriorityQueueContext)=>boolean} WPPriorityQueueFlush\r\n */\r\n\r\n/**\r\n * Reset the queue.\r\n *\r\n * @typedef {()=>void} WPPriorityQueueReset\r\n */\r\n\r\n/**\r\n * Priority queue instance.\r\n *\r\n * @typedef {Object} WPPriorityQueue\r\n *\r\n * @property {WPPriorityQueueAdd}   add    Add callback to queue for context.\r\n * @property {WPPriorityQueueFlush} flush  Flush queue for context.\r\n * @property {WPPriorityQueueFlush} cancel Clear queue for context.\r\n * @property {WPPriorityQueueReset} reset  Reset queue.\r\n */\r\n\r\n/**\r\n * Creates a context-aware queue that only executes\r\n * the last task of a given context.\r\n *\r\n * @example\r\n *```js\r\n * import { createQueue } from '@wordpress/priority-queue';\r\n *\r\n * const queue = createQueue();\r\n *\r\n * // Context objects.\r\n * const ctx1 = {};\r\n * const ctx2 = {};\r\n *\r\n * // For a given context in the queue, only the last callback is executed.\r\n * queue.add( ctx1, () => console.log( 'This will be printed first' ) );\r\n * queue.add( ctx2, () => console.log( 'This won\\'t be printed' ) );\r\n * queue.add( ctx2, () => console.log( 'This will be printed second' ) );\r\n *```\r\n *\r\n * @return {WPPriorityQueue} Queue object with `add`, `flush` and `reset` methods.\r\n */\r\nexport const createQueue = () => {\r\n\t/** @type {Map<WPPriorityQueueContext, WPPriorityQueueCallback>} */\r\n\tconst waitingList = new Map();\r\n\tlet isRunning = false;\r\n\r\n\t/**\r\n\t * Callback to process as much queue as time permits.\r\n\t *\r\n\t * Map Iteration follows the original insertion order. This means that here\r\n\t * we can iterate the queue and know that the first contexts which were\r\n\t * added will be run first. On the other hand, if anyone adds a new callback\r\n\t * for an existing context it will supplant the previously-set callback for\r\n\t * that context because we reassigned that map key's value.\r\n\t *\r\n\t * In the case that a callback adds a new callback to its own context then\r\n\t * the callback it adds will appear at the end of the iteration and will be\r\n\t * run only after all other existing contexts have finished executing.\r\n\t *\r\n\t * @param {IdleDeadline|number} deadline Idle callback deadline object, or\r\n\t *                                       animation frame timestamp.\r\n\t */\r\n\tconst runWaitingList = ( deadline ) => {\r\n\t\tfor ( const [ nextElement, callback ] of waitingList ) {\r\n\t\t\twaitingList.delete( nextElement );\r\n\t\t\tcallback();\r\n\r\n\t\t\tif (\r\n\t\t\t\t'number' === typeof deadline ||\r\n\t\t\t\tdeadline.timeRemaining() <= 0\r\n\t\t\t) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( waitingList.size === 0 ) {\r\n\t\t\tisRunning = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\trequestIdleCallback( runWaitingList );\r\n\t};\r\n\r\n\t/**\r\n\t * Add a callback to the queue for a given context.\r\n\t *\r\n\t * If errors with undefined callbacks are encountered double check that\r\n\t * all of your useSelect calls have the right dependencies set correctly\r\n\t * in their second parameter. Missing dependencies can cause unexpected\r\n\t * loops and race conditions in the queue.\r\n\t *\r\n\t * @type {WPPriorityQueueAdd}\r\n\t *\r\n\t * @param {WPPriorityQueueContext}  element Context object.\r\n\t * @param {WPPriorityQueueCallback} item    Callback function.\r\n\t */\r\n\tconst add = ( element, item ) => {\r\n\t\twaitingList.set( element, item );\r\n\t\tif ( ! isRunning ) {\r\n\t\t\tisRunning = true;\r\n\t\t\trequestIdleCallback( runWaitingList );\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Flushes queue for a given context, returning true if the flush was\r\n\t * performed, or false if there is no queue for the given context.\r\n\t *\r\n\t * @type {WPPriorityQueueFlush}\r\n\t *\r\n\t * @param {WPPriorityQueueContext} element Context object.\r\n\t *\r\n\t * @return {boolean} Whether flush was performed.\r\n\t */\r\n\tconst flush = ( element ) => {\r\n\t\tconst callback = waitingList.get( element );\r\n\t\tif ( undefined === callback ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\twaitingList.delete( element );\r\n\t\tcallback();\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Clears the queue for a given context, cancelling the callbacks without\r\n\t * executing them. Returns `true` if there were scheduled callbacks to cancel,\r\n\t * or `false` if there was is no queue for the given context.\r\n\t *\r\n\t * @type {WPPriorityQueueFlush}\r\n\t *\r\n\t * @param {WPPriorityQueueContext} element Context object.\r\n\t *\r\n\t * @return {boolean} Whether any callbacks got cancelled.\r\n\t */\r\n\tconst cancel = ( element ) => {\r\n\t\treturn waitingList.delete( element );\r\n\t};\r\n\r\n\t/**\r\n\t * Reset the queue without running the pending callbacks.\r\n\t *\r\n\t * @type {WPPriorityQueueReset}\r\n\t */\r\n\tconst reset = () => {\r\n\t\twaitingList.clear();\r\n\t\tisRunning = false;\r\n\t};\r\n\r\n\treturn {\r\n\t\tadd,\r\n\t\tflush,\r\n\t\tcancel,\r\n\t\treset,\r\n\t};\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,mBAAmB,MAAM,yBAAyB;;AAEzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAChC;EACA,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC7B,IAAIC,SAAS,GAAG,KAAK;;EAErB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC,MAAMC,cAAc,GAAKC,QAAQ,IAAM;IACtC,KAAM,MAAM,CAAEC,WAAW,EAAEC,QAAQ,CAAE,IAAIN,WAAW,EAAG;MACtDA,WAAW,CAACO,MAAM,CAAEF,WAAY,CAAC;MACjCC,QAAQ,CAAC,CAAC;MAEV,IACC,QAAQ,KAAK,OAAOF,QAAQ,IAC5BA,QAAQ,CAACI,aAAa,CAAC,CAAC,IAAI,CAAC,EAC5B;QACD;MACD;IACD;IAEA,IAAKR,WAAW,CAACS,IAAI,KAAK,CAAC,EAAG;MAC7BP,SAAS,GAAG,KAAK;MACjB;IACD;IAEAJ,mBAAmB,CAAEK,cAAe,CAAC;EACtC,CAAC;;EAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC,MAAMO,GAAG,GAAGA,CAAEC,OAAO,EAAEC,IAAI,KAAM;IAChCZ,WAAW,CAACa,GAAG,CAAEF,OAAO,EAAEC,IAAK,CAAC;IAChC,IAAK,CAAEV,SAAS,EAAG;MAClBA,SAAS,GAAG,IAAI;MAChBJ,mBAAmB,CAAEK,cAAe,CAAC;IACtC;EACD,CAAC;;EAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC,MAAMW,KAAK,GAAKH,OAAO,IAAM;IAC5B,MAAML,QAAQ,GAAGN,WAAW,CAACe,GAAG,CAAEJ,OAAQ,CAAC;IAC3C,IAAKK,SAAS,KAAKV,QAAQ,EAAG;MAC7B,OAAO,KAAK;IACb;IAEAN,WAAW,CAACO,MAAM,CAAEI,OAAQ,CAAC;IAC7BL,QAAQ,CAAC,CAAC;IAEV,OAAO,IAAI;EACZ,CAAC;;EAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC,MAAMW,MAAM,GAAKN,OAAO,IAAM;IAC7B,OAAOX,WAAW,CAACO,MAAM,CAAEI,OAAQ,CAAC;EACrC,CAAC;;EAED;AACD;AACA;AACA;AACA;EACC,MAAMO,KAAK,GAAGA,CAAA,KAAM;IACnBlB,WAAW,CAACmB,KAAK,CAAC,CAAC;IACnBjB,SAAS,GAAG,KAAK;EAClB,CAAC;EAED,OAAO;IACNQ,GAAG;IACHI,KAAK;IACLG,MAAM;IACNC;EACD,CAAC;AACF,CAAC","ignoreList":[]}