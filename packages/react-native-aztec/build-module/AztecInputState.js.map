{"version":3,"names":["Platform","TextInputState","debounce","hideAndroidSoftKeyboard","focusChangeListeners","caretChangeListeners","currentFocusedElement","currentCaretData","addFocusChangeListener","listener","push","removeFocusChangeListener","itemIndex","indexOf","splice","notifyListeners","isFocused","forEach","addCaretChangeListener","removeCaretChangeListener","notifyCaretChangeListeners","getCurrentCaretData","getCurrentFocusedElement","notifyInputChange","focusedInput","currentlyFocusedInput","hasAnyFocusedInput","focusInput","element","focus","blur","cancel","blurOnUnmountDebounce","focusTextInput","blurTextInput","setCurrentCaretData","blurOnUnmount","OS","blurCurrentFocusedElement","caret"],"sources":["@wordpress/react-native-aztec/src/AztecInputState.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport { Platform } from 'react-native';\r\nimport TextInputState from 'react-native/Libraries/Components/TextInput/TextInputState';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { debounce } from '@wordpress/compose';\r\nimport { hideAndroidSoftKeyboard } from '@wordpress/react-native-bridge';\r\n\r\n/** @typedef {import('@wordpress/element').RefObject} RefObject */\r\n\r\nconst focusChangeListeners = [];\r\nconst caretChangeListeners = [];\r\n\r\nlet currentFocusedElement = null;\r\nlet currentCaretData = null;\r\n\r\n/**\r\n * Adds a listener that will be called in the following cases:\r\n *\r\n * - An Aztec view is being focused and all were previously unfocused.\r\n * - An Aztec view is being unfocused and none will be focused.\r\n *\r\n * Note that this listener won't be called when switching focus between Aztec views.\r\n *\r\n * @param {Function} listener\r\n */\r\nexport const addFocusChangeListener = ( listener ) => {\r\n\tfocusChangeListeners.push( listener );\r\n};\r\n\r\n/**\r\n * Removes a listener from the focus change listeners list.\r\n *\r\n * @param {Function} listener\r\n */\r\nexport const removeFocusChangeListener = ( listener ) => {\r\n\tconst itemIndex = focusChangeListeners.indexOf( listener );\r\n\tif ( itemIndex !== -1 ) {\r\n\t\tfocusChangeListeners.splice( itemIndex, 1 );\r\n\t}\r\n};\r\n\r\n/**\r\n *\tNotifies listeners about changes in focus.\r\n *\r\n * @param {Object}  event           Event data to be notified to listeners.\r\n * @param {boolean} event.isFocused True if any Aztec view is currently focused.\r\n */\r\nconst notifyListeners = ( { isFocused } ) => {\r\n\tfocusChangeListeners.forEach( ( listener ) => {\r\n\t\tlistener( { isFocused } );\r\n\t} );\r\n};\r\n\r\n/**\r\n * Adds a listener that will be called when the caret's Y position\r\n * changes for the focused Aztec view.\r\n *\r\n * @param {Function} listener\r\n */\r\nexport const addCaretChangeListener = ( listener ) => {\r\n\tcaretChangeListeners.push( listener );\r\n};\r\n\r\n/**\r\n * Removes a listener from the caret change listeners list.\r\n *\r\n * @param {Function} listener\r\n */\r\nexport const removeCaretChangeListener = ( listener ) => {\r\n\tconst itemIndex = caretChangeListeners.indexOf( listener );\r\n\tif ( itemIndex !== -1 ) {\r\n\t\tcaretChangeListeners.splice( itemIndex, 1 );\r\n\t}\r\n};\r\n\r\n/**\r\n * Notifies listeners about caret changes in focused Aztec view.\r\n */\r\nconst notifyCaretChangeListeners = () => {\r\n\tcaretChangeListeners.forEach( ( listener ) => {\r\n\t\tlistener( getCurrentCaretData() );\r\n\t} );\r\n};\r\n\r\n/**\r\n * Determines if any Aztec view is focused.\r\n *\r\n * @return {boolean} True if focused.\r\n */\r\nexport const isFocused = () => {\r\n\treturn currentFocusedElement !== null;\r\n};\r\n\r\n/**\r\n * Returns the current focused element.\r\n *\r\n * @return {RefObject} Ref of the current focused element or `null` otherwise.\r\n */\r\nexport const getCurrentFocusedElement = () => {\r\n\treturn currentFocusedElement;\r\n};\r\n\r\n/**\r\n * Notifies that an Aztec view is being focused or unfocused.\r\n */\r\nexport const notifyInputChange = () => {\r\n\tconst focusedInput = TextInputState.currentlyFocusedInput();\r\n\tconst hasAnyFocusedInput = focusedInput !== null;\r\n\r\n\tif ( hasAnyFocusedInput ) {\r\n\t\tif ( ! currentFocusedElement ) {\r\n\t\t\tnotifyListeners( { isFocused: true } );\r\n\t\t}\r\n\t\tcurrentFocusedElement = focusedInput;\r\n\t} else if ( currentFocusedElement ) {\r\n\t\tnotifyListeners( { isFocused: false } );\r\n\t\tcurrentFocusedElement = null;\r\n\t}\r\n};\r\n\r\n/**\r\n * Sets the current focused element ref held within TextInputState.\r\n *\r\n * @param {RefObject} element Element to be set as the focused element.\r\n */\r\nexport const focusInput = ( element ) => {\r\n\tTextInputState.focusInput( element );\r\n};\r\n\r\n/**\r\n * Focuses the specified element.\r\n *\r\n * @param {RefObject} element Element to be focused.\r\n */\r\nexport const focus = ( element ) => {\r\n\t// If other blur events happen at the same time that focus is triggered, the focus event\r\n\t// will take precedence and cancels pending blur events.\r\n\tblur.cancel();\r\n\t// Similar to blur events, we also need to cancel potential keyboard dismiss.\r\n\tblurOnUnmountDebounce.cancel();\r\n\r\n\tTextInputState.focusTextInput( element );\r\n\tnotifyInputChange();\r\n};\r\n\r\n/**\r\n * Unfocuses the specified element.\r\n * This function uses debounce to avoid conflicts with the focus event when both are\r\n * triggered at the same time. Focus events will take precedence.\r\n *\r\n * @param {RefObject} element Element to be unfocused.\r\n */\r\nexport const blur = debounce( ( element ) => {\r\n\tTextInputState.blurTextInput( element );\r\n\tsetCurrentCaretData( null );\r\n\tnotifyInputChange();\r\n}, 0 );\r\n\r\n/**\r\n * Unfocuses the specified element in case it's about to be unmounted.\r\n *\r\n * Note that we can't trigger the blur event, as it's likely that the Aztec view is no\r\n * longer available when the event is executed and will produce an exception.\r\n *\r\n * @param {RefObject} element Element to be unfocused.\r\n */\r\nexport const blurOnUnmount = ( element ) => {\r\n\tif ( getCurrentFocusedElement() === element ) {\r\n\t\t// If a blur event was triggered before unmount, we need to cancel them to avoid\r\n\t\t// exceptions.\r\n\t\tblur.cancel();\r\n\t\tblurOnUnmountDebounce();\r\n\t}\r\n};\r\n\r\n// For updating the input state and dismissing the keyboard, we use debounce to avoid\r\n// conflicts with the focus event when both are triggered at the same time.\r\nconst blurOnUnmountDebounce = debounce( () => {\r\n\t// At this point, the text input will be destroyed but it's still focused. Hence, we\r\n\t// have to explicitly notify listeners and update internal input state.\r\n\tnotifyListeners( { isFocused: false } );\r\n\tcurrentFocusedElement = null;\r\n\r\n\t// On iOS text inputs are automatically unfocused and keyboard dismissed when they\r\n\t// are removed. However, this is not the case on Android, where text inputs are\r\n\t// unfocused but the keyboard remains open.\r\n\tif ( Platform.OS === 'android' ) {\r\n\t\thideAndroidSoftKeyboard();\r\n\t}\r\n}, 0 );\r\n\r\n/**\r\n * Unfocuses the current focused element.\r\n */\r\nexport const blurCurrentFocusedElement = () => {\r\n\tif ( isFocused() ) {\r\n\t\tblur( getCurrentFocusedElement() );\r\n\t}\r\n};\r\n\r\n/**\r\n * Sets the current focused element caret's data.\r\n *\r\n * @param {Object} caret Caret's data.\r\n */\r\nexport const setCurrentCaretData = ( caret ) => {\r\n\tif ( isFocused() && caret ) {\r\n\t\tcurrentCaretData = caret;\r\n\t\tnotifyCaretChangeListeners();\r\n\t}\r\n};\r\n\r\n/**\r\n * Get the current focused element caret's data.\r\n *\r\n * @return {Object} Current caret's data.\r\n */\r\nexport const getCurrentCaretData = () => {\r\n\treturn currentCaretData;\r\n};\r\n"],"mappings":"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","ignoreList":[]}