{"version":3,"names":["path","formatResultsErrors","core","stripAnsi","TEST_RESULTS_LIST","open","close","TEST_RESULT","metaData","render","json","JSON","stringify","get","str","matched","match","parse","error","undefined","TEST_LOG_REGEX","RegExp","TEST_FULL_REGEX","source","renderIssueBody","meta","testTitle","testPath","formattedTestResults","formatTestErrorMessage","flakyTestResult","runner","results","map","result","stack","join","rootDir","process","cwd","testMatch","noStackTrace","formatTestResults","date","failedTimes","headBranch","runURL","errorMessage","dateString","toISOString","log","parseFormattedTestResults","matches","replace","Error","groups","Date","parseInt","parseIssueBody","body","testResults","Array","from","matchAll","testResult","filter","FLAKY_TESTS_REPORT_COMMENT_TOKEN","renderCommitComment","reportedIssues","commitSHA","issue","issueNumber","isReportComment","startsWith"],"sources":["@wordpress/report-flaky-tests/src/markdown.ts"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\nimport path from 'path';\r\nimport { formatResultsErrors } from 'jest-message-util';\r\nimport * as core from '@actions/core';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { stripAnsi } from './strip-ansi';\r\nimport type { MetaData, FlakyTestResult, ReportedIssue } from './types';\r\n\r\ntype ParsedTestResult = {\r\n\tdate: Date;\r\n\tfailedTimes: number;\r\n\trunURL: string;\r\n\theadBranch: string;\r\n\terrorMessage?: string;\r\n};\r\n\r\nconst TEST_RESULTS_LIST = {\r\n\topen: `<!-- __TEST_RESULTS_LIST__ -->`,\r\n\tclose: `<!-- /__TEST_RESULTS_LIST__ -->`,\r\n};\r\nconst TEST_RESULT = {\r\n\topen: '<!-- __TEST_RESULT__ -->',\r\n\tclose: '<!-- /__TEST_RESULT__ -->',\r\n};\r\n\r\nconst metaData = {\r\n\trender: ( json: MetaData ) =>\r\n\t\t`<!-- __META_DATA__:${ JSON.stringify( json ) } -->`,\r\n\tget: ( str: string ): MetaData | undefined => {\r\n\t\tconst matched = str.match( /<!-- __META_DATA__:(.*) -->/ );\r\n\t\ttry {\r\n\t\t\tif ( matched ) {\r\n\t\t\t\treturn JSON.parse( matched[ 1 ] );\r\n\t\t\t}\r\n\t\t} catch ( error ) {\r\n\t\t\t// Ignore errors.\r\n\t\t}\r\n\t\treturn undefined;\r\n\t},\r\n};\r\n\r\nconst TEST_LOG_REGEX = new RegExp(\r\n\t`<time datetime=\"(?<date>.+)\">.*</time>\\\\s*Test passed after (?<failedTimes>\\\\d) failed attempts? on <a href=\"(?<runURL>.+)\"><code>(?<headBranch>.+)</code></a>\\\\.`\r\n);\r\nconst TEST_FULL_REGEX = new RegExp(\r\n\t`(?:<details>\\\\s*<summary>\\\\s*)?${ TEST_LOG_REGEX.source }(?:\\\\s*</summary>\\\\s*\r\n\\`\\`\\`\r\n(?<errorMessage>[\\\\s\\\\S]*)\r\n\\`\\`\\`\r\n\\\\s*</details>)?`\r\n);\r\n\r\nfunction renderIssueBody( {\r\n\tmeta,\r\n\ttestTitle,\r\n\ttestPath,\r\n\tformattedTestResults,\r\n}: {\r\n\tmeta: MetaData;\r\n\ttestTitle: string;\r\n\ttestPath: string;\r\n\tformattedTestResults: string;\r\n} ) {\r\n\treturn `${ metaData.render( meta ) }\r\n**Flaky test detected. This is an auto-generated issue by GitHub Actions. Please do NOT edit this manually.**\r\n\r\n## Test title\r\n${ testTitle }\r\n\r\n## Test path\r\n\\`${ testPath }\\`\r\n\r\n## Errors\r\n${ TEST_RESULTS_LIST.open }\r\n${ formattedTestResults }\r\n${ TEST_RESULTS_LIST.close }\r\n`;\r\n}\r\n\r\nfunction formatTestErrorMessage( flakyTestResult: FlakyTestResult ) {\r\n\tswitch ( flakyTestResult.runner ) {\r\n\t\tcase '@playwright/test': {\r\n\t\t\t// Could do a slightly better formatting than this.\r\n\t\t\treturn stripAnsi(\r\n\t\t\t\tflakyTestResult.results\r\n\t\t\t\t\t.map( ( result ) => result!.error!.stack )\r\n\t\t\t\t\t.join( '\\n' )\r\n\t\t\t);\r\n\t\t}\r\n\t\tcase 'jest-circus':\r\n\t\tdefault: {\r\n\t\t\treturn stripAnsi(\r\n\t\t\t\tformatResultsErrors(\r\n\t\t\t\t\tflakyTestResult.results,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trootDir: path.join(\r\n\t\t\t\t\t\t\tprocess.cwd(),\r\n\t\t\t\t\t\t\t'packages/e2e-tests'\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\t// This is useless just to make typescript happy.\r\n\t\t\t\t\t\ttestMatch: [],\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{ noStackTrace: false },\r\n\t\t\t\t\tflakyTestResult.path\r\n\t\t\t\t)!\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction formatTestResults( {\r\n\tdate,\r\n\tfailedTimes,\r\n\theadBranch,\r\n\trunURL,\r\n\terrorMessage,\r\n}: ParsedTestResult ) {\r\n\tconst dateString = date.toISOString();\r\n\r\n\t// It will look something like this without formatting:\r\n\t// [2021-08-31T16:15:19.875Z] Test passed after 2 failed attempts on trunk.\r\n\tconst log = `<time datetime=\"${ dateString }\"><code>[${ dateString }]</code></time> Test passed after ${ failedTimes } failed ${\r\n\t\tfailedTimes === 1 ? 'attempt' : 'attempts'\r\n\t} on <a href=\"${ runURL }\"><code>${ headBranch }</code></a>.`;\r\n\r\n\tif ( ! errorMessage ) {\r\n\t\treturn `${ TEST_RESULT.open }${ log }${ TEST_RESULT.close }`;\r\n\t}\r\n\r\n\treturn `${ TEST_RESULT.open }<details>\r\n<summary>\r\n\t${ log }\r\n</summary>\r\n\r\n\\`\\`\\`\r\n${ errorMessage }\r\n\\`\\`\\`\r\n</details>${ TEST_RESULT.close }`;\r\n}\r\n\r\nfunction parseFormattedTestResults(\r\n\tformattedTestResults: string\r\n): ParsedTestResult {\r\n\tconst matches = formattedTestResults\r\n\t\t// Unify line breaks.\r\n\t\t.replace( /\\r\\n/g, '\\n' )\r\n\t\t.match( TEST_FULL_REGEX );\r\n\r\n\tif ( ! matches ) {\r\n\t\tthrow new Error( `Unable to parse the test results:\r\n${ formattedTestResults }` );\r\n\t}\r\n\r\n\tconst { date, failedTimes, runURL, headBranch, errorMessage } =\r\n\t\tmatches.groups!;\r\n\r\n\treturn {\r\n\t\tdate: new Date( date ),\r\n\t\tfailedTimes: parseInt( failedTimes, 10 ),\r\n\t\trunURL,\r\n\t\theadBranch,\r\n\t\terrorMessage,\r\n\t};\r\n}\r\n\r\nfunction parseIssueBody( body: string ) {\r\n\tconst meta = metaData.get( body );\r\n\r\n\tif ( ! meta ) {\r\n\t\tthrow new Error( 'Unable to parse meta data from issue.' );\r\n\t}\r\n\r\n\tconst testResults = Array.from(\r\n\t\tbody.matchAll(\r\n\t\t\tnew RegExp(\r\n\t\t\t\t`^${ TEST_RESULT.open }[\\\\s\\\\S]+?${ TEST_RESULT.close }$`,\r\n\t\t\t\t'gm'\r\n\t\t\t)\r\n\t\t)\r\n\t)\r\n\t\t.map( ( [ match ] ) => match )\r\n\t\t.map( ( testResult ) => {\r\n\t\t\ttry {\r\n\t\t\t\treturn parseFormattedTestResults( testResult );\r\n\t\t\t} catch ( error ) {\r\n\t\t\t\tcore.error( error as Error );\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t} )\r\n\t\t.filter(\r\n\t\t\t( testResult ): testResult is ParsedTestResult =>\r\n\t\t\t\ttestResult !== undefined\r\n\t\t);\r\n\r\n\treturn {\r\n\t\tmeta,\r\n\t\ttestResults,\r\n\t};\r\n}\r\n\r\nconst FLAKY_TESTS_REPORT_COMMENT_TOKEN = `flaky-tests-report-comment`;\r\n\r\nfunction renderCommitComment( {\r\n\treportedIssues,\r\n\trunURL,\r\n\tcommitSHA,\r\n}: {\r\n\treportedIssues: ReportedIssue[];\r\n\trunURL: string;\r\n\tcommitSHA: string;\r\n} ) {\r\n\treturn `<!-- ${ FLAKY_TESTS_REPORT_COMMENT_TOKEN } -->\r\n**Flaky tests detected in ${ commitSHA }.**\r\nSome tests passed with failed attempts. The failures may not be related to this commit but are still reported for visibility. See [the documentation](https://github.com/WordPress/gutenberg/blob/HEAD/docs/contributors/code/testing-overview.md#flaky-tests) for more information.\r\n\r\n🔍  Workflow run URL: ${ runURL }\r\n📝  Reported issues:\r\n${ reportedIssues\r\n\t.map( ( issue ) => `- #${ issue.issueNumber } in \\`${ issue.testPath }\\`` )\r\n\t.join( '\\n' ) }`;\r\n}\r\n\r\nfunction isReportComment( body: string ) {\r\n\treturn body.startsWith( `<!-- ${ FLAKY_TESTS_REPORT_COMMENT_TOKEN } -->` );\r\n}\r\n\r\nexport {\r\n\trenderIssueBody,\r\n\tformatTestErrorMessage,\r\n\tformatTestResults,\r\n\tparseFormattedTestResults,\r\n\tparseIssueBody,\r\n\trenderCommitComment,\r\n\tisReportComment,\r\n};\r\n"],"mappings":"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","ignoreList":[]}