{"version":3,"names":["getActiveFormats","updateFormats","INSERTION_INPUT_TYPES_TO_IGNORE","Set","EMPTY_ACTIVE_FORMATS","PLACEHOLDER_ATTR_NAME","fixPlaceholderSelection","defaultView","selection","getSelection","anchorNode","anchorOffset","nodeType","ELEMENT_NODE","targetNode","childNodes","hasAttribute","collapseToStart","props","element","ownerDocument","isComposing","onInput","event","inputType","record","applyRecord","createRecord","handleChange","current","indexOf","has","currentValue","start","activeFormats","oldActiveFormats","change","value","end","formats","handleSelectionChange","onSelectionChange","contentEditable","focusNode","containsSelection","contains","activeElement","text","oldRecord","length","newValue","_newActiveFormats","undefined","newActiveFormats","domOnly","onCompositionStart","removeEventListener","querySelector","remove","onCompositionEnd","addEventListener","onFocus","isSelected","parentElement","closest","index","window","queueMicrotask"],"sources":["@wordpress/rich-text/src/component/event-listeners/input-and-selection.js"],"sourcesContent":["/**\r\n * Internal dependencies\r\n */\r\nimport { getActiveFormats } from '../../get-active-formats';\r\nimport { updateFormats } from '../../update-formats';\r\n\r\n/**\r\n * All inserting input types that would insert HTML into the DOM.\r\n *\r\n * @see https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes\r\n *\r\n * @type {Set}\r\n */\r\nconst INSERTION_INPUT_TYPES_TO_IGNORE = new Set( [\r\n\t'insertParagraph',\r\n\t'insertOrderedList',\r\n\t'insertUnorderedList',\r\n\t'insertHorizontalRule',\r\n\t'insertLink',\r\n] );\r\n\r\nconst EMPTY_ACTIVE_FORMATS = [];\r\n\r\nconst PLACEHOLDER_ATTR_NAME = 'data-rich-text-placeholder';\r\n\r\n/**\r\n * If the selection is set on the placeholder element, collapse the selection to\r\n * the start (before the placeholder).\r\n *\r\n * @param {Window} defaultView\r\n */\r\nfunction fixPlaceholderSelection( defaultView ) {\r\n\tconst selection = defaultView.getSelection();\r\n\tconst { anchorNode, anchorOffset } = selection;\r\n\r\n\tif ( anchorNode.nodeType !== anchorNode.ELEMENT_NODE ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst targetNode = anchorNode.childNodes[ anchorOffset ];\r\n\r\n\tif (\r\n\t\t! targetNode ||\r\n\t\ttargetNode.nodeType !== targetNode.ELEMENT_NODE ||\r\n\t\t! targetNode.hasAttribute( PLACEHOLDER_ATTR_NAME )\r\n\t) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tselection.collapseToStart();\r\n}\r\n\r\nexport default ( props ) => ( element ) => {\r\n\tconst { ownerDocument } = element;\r\n\tconst { defaultView } = ownerDocument;\r\n\r\n\tlet isComposing = false;\r\n\r\n\tfunction onInput( event ) {\r\n\t\t// Do not trigger a change if characters are being composed. Browsers\r\n\t\t// will usually emit a final `input` event when the characters are\r\n\t\t// composed. As of December 2019, Safari doesn't support\r\n\t\t// nativeEvent.isComposing.\r\n\t\tif ( isComposing ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet inputType;\r\n\r\n\t\tif ( event ) {\r\n\t\t\tinputType = event.inputType;\r\n\t\t}\r\n\r\n\t\tconst { record, applyRecord, createRecord, handleChange } =\r\n\t\t\tprops.current;\r\n\r\n\t\t// The browser formatted something or tried to insert HTML. Overwrite\r\n\t\t// it. It will be handled later by the format library if needed.\r\n\t\tif (\r\n\t\t\tinputType &&\r\n\t\t\t( inputType.indexOf( 'format' ) === 0 ||\r\n\t\t\t\tINSERTION_INPUT_TYPES_TO_IGNORE.has( inputType ) )\r\n\t\t) {\r\n\t\t\tapplyRecord( record.current );\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst currentValue = createRecord();\r\n\t\tconst { start, activeFormats: oldActiveFormats = [] } = record.current;\r\n\r\n\t\t// Update the formats between the last and new caret position.\r\n\t\tconst change = updateFormats( {\r\n\t\t\tvalue: currentValue,\r\n\t\t\tstart,\r\n\t\t\tend: currentValue.start,\r\n\t\t\tformats: oldActiveFormats,\r\n\t\t} );\r\n\r\n\t\thandleChange( change );\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs the selection to local state. A callback for the `selectionchange`\r\n\t * event.\r\n\t */\r\n\tfunction handleSelectionChange() {\r\n\t\tconst { record, applyRecord, createRecord, onSelectionChange } =\r\n\t\t\tprops.current;\r\n\r\n\t\t// Check if the implementor disabled editing. `contentEditable` does\r\n\t\t// disable input, but not text selection, so we must ignore selection\r\n\t\t// changes.\r\n\t\tif ( element.contentEditable !== 'true' ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst { anchorNode, focusNode } = defaultView.getSelection();\r\n\t\tconst containsSelection =\r\n\t\t\telement.contains( anchorNode ) &&\r\n\t\t\telement.contains( focusNode ) &&\r\n\t\t\townerDocument.activeElement.contains( element );\r\n\r\n\t\tif ( ! containsSelection ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// In case of a keyboard event, ignore selection changes during\r\n\t\t// composition.\r\n\t\tif ( isComposing ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst { start, end, text } = createRecord();\r\n\t\tconst oldRecord = record.current;\r\n\r\n\t\t// Fallback mechanism for IE11, which doesn't support the input event.\r\n\t\t// Any input results in a selection change.\r\n\t\tif ( text !== oldRecord.text ) {\r\n\t\t\tonInput();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( start === oldRecord.start && end === oldRecord.end ) {\r\n\t\t\t// Sometimes the browser may set the selection on the placeholder\r\n\t\t\t// element, in which case the caret is not visible. We need to set\r\n\t\t\t// the caret before the placeholder if that's the case.\r\n\t\t\tif ( oldRecord.text.length === 0 && start === 0 ) {\r\n\t\t\t\tfixPlaceholderSelection( defaultView );\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst newValue = {\r\n\t\t\t...oldRecord,\r\n\t\t\tstart,\r\n\t\t\tend,\r\n\t\t\t// _newActiveFormats may be set on arrow key navigation to control\r\n\t\t\t// the right boundary position. If undefined, getActiveFormats will\r\n\t\t\t// give the active formats according to the browser.\r\n\t\t\tactiveFormats: oldRecord._newActiveFormats,\r\n\t\t\t_newActiveFormats: undefined,\r\n\t\t};\r\n\r\n\t\tconst newActiveFormats = getActiveFormats(\r\n\t\t\tnewValue,\r\n\t\t\tEMPTY_ACTIVE_FORMATS\r\n\t\t);\r\n\r\n\t\t// Update the value with the new active formats.\r\n\t\tnewValue.activeFormats = newActiveFormats;\r\n\r\n\t\t// It is important that the internal value is updated first,\r\n\t\t// otherwise the value will be wrong on render!\r\n\t\trecord.current = newValue;\r\n\t\tapplyRecord( newValue, { domOnly: true } );\r\n\t\tonSelectionChange( start, end );\r\n\t}\r\n\r\n\tfunction onCompositionStart() {\r\n\t\tisComposing = true;\r\n\t\t// Do not update the selection when characters are being composed as\r\n\t\t// this rerenders the component and might destroy internal browser\r\n\t\t// editing state.\r\n\t\townerDocument.removeEventListener(\r\n\t\t\t'selectionchange',\r\n\t\t\thandleSelectionChange\r\n\t\t);\r\n\t\t// Remove the placeholder. Since the rich text value doesn't update\r\n\t\t// during composition, the placeholder doesn't get removed. There's no\r\n\t\t// need to re-add it, when the value is updated on compositionend it\r\n\t\t// will be re-added when the value is empty.\r\n\t\telement.querySelector( `[${ PLACEHOLDER_ATTR_NAME }]` )?.remove();\r\n\t}\r\n\r\n\tfunction onCompositionEnd() {\r\n\t\tisComposing = false;\r\n\t\t// Ensure the value is up-to-date for browsers that don't emit a final\r\n\t\t// input event after composition.\r\n\t\tonInput( { inputType: 'insertText' } );\r\n\t\t// Tracking selection changes can be resumed.\r\n\t\townerDocument.addEventListener(\r\n\t\t\t'selectionchange',\r\n\t\t\thandleSelectionChange\r\n\t\t);\r\n\t}\r\n\r\n\tfunction onFocus() {\r\n\t\tconst { record, isSelected, onSelectionChange, applyRecord } =\r\n\t\t\tprops.current;\r\n\r\n\t\t// When the whole editor is editable, let writing flow handle\r\n\t\t// selection.\r\n\t\tif ( element.parentElement.closest( '[contenteditable=\"true\"]' ) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( ! isSelected ) {\r\n\t\t\t// We know for certain that on focus, the old selection is invalid.\r\n\t\t\t// It will be recalculated on the next mouseup, keyup, or touchend\r\n\t\t\t// event.\r\n\t\t\tconst index = undefined;\r\n\r\n\t\t\trecord.current = {\r\n\t\t\t\t...record.current,\r\n\t\t\t\tstart: index,\r\n\t\t\t\tend: index,\r\n\t\t\t\tactiveFormats: EMPTY_ACTIVE_FORMATS,\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tapplyRecord( record.current, { domOnly: true } );\r\n\t\t}\r\n\r\n\t\tonSelectionChange( record.current.start, record.current.end );\r\n\r\n\t\t// There is no selection change event when the element is focused, so\r\n\t\t// we need to manually trigger it. The selection is also not available\r\n\t\t// yet in this call stack.\r\n\t\twindow.queueMicrotask( handleSelectionChange );\r\n\r\n\t\townerDocument.addEventListener(\r\n\t\t\t'selectionchange',\r\n\t\t\thandleSelectionChange\r\n\t\t);\r\n\t}\r\n\r\n\telement.addEventListener( 'input', onInput );\r\n\telement.addEventListener( 'compositionstart', onCompositionStart );\r\n\telement.addEventListener( 'compositionend', onCompositionEnd );\r\n\telement.addEventListener( 'focus', onFocus );\r\n\r\n\treturn () => {\r\n\t\telement.removeEventListener( 'input', onInput );\r\n\t\telement.removeEventListener( 'compositionstart', onCompositionStart );\r\n\t\telement.removeEventListener( 'compositionend', onCompositionEnd );\r\n\t\telement.removeEventListener( 'focus', onFocus );\r\n\t\townerDocument.removeEventListener(\r\n\t\t\t'selectionchange',\r\n\t\t\thandleSelectionChange\r\n\t\t);\r\n\t};\r\n};\r\n"],"mappings":"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","ignoreList":[]}