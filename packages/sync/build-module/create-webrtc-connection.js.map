{"version":3,"names":["WebrtcProviderWithHttpSignaling","createWebRTCConnection","signaling","password","objectId","objectType","doc","roomName","Promise","resolve"],"sources":["@wordpress/sync/src/create-webrtc-connection.js"],"sourcesContent":["/**\r\n * External dependencies\r\n */\r\n// import { WebrtcProvider } from 'y-webrtc';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { WebrtcProviderWithHttpSignaling } from './webrtc-http-stream-signaling';\r\n\r\n/** @typedef {import('./types').ObjectType} ObjectType */\r\n/** @typedef {import('./types').ObjectID} ObjectID */\r\n/** @typedef {import('./types').CRDTDoc} CRDTDoc */\r\n\r\n/**\r\n * Function that creates a new WebRTC Connection.\r\n *\r\n * @param {Object}        config           The object ID.\r\n *\r\n * @param {Array<string>} config.signaling\r\n * @param {string}        config.password\r\n * @return {Function} Promise that resolves when the connection is established.\r\n */\r\nexport function createWebRTCConnection( { signaling, password } ) {\r\n\treturn function (\r\n\t\t/** @type {string} */ objectId,\r\n\t\t/** @type {string} */ objectType,\r\n\t\t/** @type {import(\"yjs\").Doc} */ doc\r\n\t) {\r\n\t\tconst roomName = `${ objectType }-${ objectId }`;\r\n\t\tnew WebrtcProviderWithHttpSignaling( roomName, doc, {\r\n\t\t\tsignaling,\r\n\t\t\t// @ts-ignore\r\n\t\t\tpassword,\r\n\t\t} );\r\n\r\n\t\treturn Promise.resolve( () => true );\r\n\t};\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAASA,+BAA+B,QAAQ,gCAAgC;;AAEhF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAAE;EAAEC,SAAS;EAAEC;AAAS,CAAC,EAAG;EACjE,OAAO,WACN,qBAAsBC,QAAQ,EAC9B,qBAAsBC,UAAU,EAChC,gCAAiCC,GAAG,EACnC;IACD,MAAMC,QAAQ,GAAI,GAAGF,UAAY,IAAID,QAAU,EAAC;IAChD,IAAIJ,+BAA+B,CAAEO,QAAQ,EAAED,GAAG,EAAE;MACnDJ,SAAS;MACT;MACAC;IACD,CAAE,CAAC;IAEH,OAAOK,OAAO,CAACC,OAAO,CAAE,MAAM,IAAK,CAAC;EACrC,CAAC;AACF","ignoreList":[]}