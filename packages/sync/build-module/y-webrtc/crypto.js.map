{"version":3,"names":["encoding","decoding","promise","error","string","deriveKey","secret","roomName","secretBuffer","encodeUtf8","buffer","salt","crypto","subtle","importKey","then","keyMaterial","name","iterations","hash","length","encrypt","data","key","resolve","iv","getRandomValues","Uint8Array","cipher","encryptedDataEncoder","createEncoder","writeVarString","writeVarUint8Array","toUint8Array","encryptJson","dataEncoder","writeAny","decrypt","dataDecoder","createDecoder","algorithm","readVarString","reject","create","readVarUint8Array","decryptJson","decryptedValue","readAny"],"sources":["@wordpress/sync/src/y-webrtc/crypto.js"],"sourcesContent":["// File copied as is from the y-webrtc package.\r\n/* eslint-disable eslint-comments/disable-enable-pair */\r\n/* eslint-disable eslint-comments/no-unlimited-disable */\r\n/* eslint-disable */\r\n// @ts-nocheck\r\n/* eslint-env browser */\r\n\r\nimport * as encoding from 'lib0/encoding';\r\nimport * as decoding from 'lib0/decoding';\r\nimport * as promise from 'lib0/promise';\r\nimport * as error from 'lib0/error';\r\nimport * as string from 'lib0/string';\r\n\r\n/**\r\n * @param {string} secret\r\n * @param {string} roomName\r\n * @return {PromiseLike<CryptoKey>}\r\n */\r\nexport const deriveKey = ( secret, roomName ) => {\r\n\tconst secretBuffer = string.encodeUtf8( secret ).buffer;\r\n\tconst salt = string.encodeUtf8( roomName ).buffer;\r\n\treturn crypto.subtle\r\n\t\t.importKey( 'raw', secretBuffer, 'PBKDF2', false, [ 'deriveKey' ] )\r\n\t\t.then( ( keyMaterial ) =>\r\n\t\t\tcrypto.subtle.deriveKey(\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PBKDF2',\r\n\t\t\t\t\tsalt,\r\n\t\t\t\t\titerations: 100000,\r\n\t\t\t\t\thash: 'SHA-256',\r\n\t\t\t\t},\r\n\t\t\t\tkeyMaterial,\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'AES-GCM',\r\n\t\t\t\t\tlength: 256,\r\n\t\t\t\t},\r\n\t\t\t\ttrue,\r\n\t\t\t\t[ 'encrypt', 'decrypt' ]\r\n\t\t\t)\r\n\t\t);\r\n};\r\n\r\n/**\r\n * @param {Uint8Array} data data to be encrypted\r\n * @param {CryptoKey?} key\r\n * @return {PromiseLike<Uint8Array>} encrypted, base64 encoded message\r\n */\r\nexport const encrypt = ( data, key ) => {\r\n\tif ( ! key ) {\r\n\t\treturn /** @type {PromiseLike<Uint8Array>} */ (\r\n\t\t\tpromise.resolve( data )\r\n\t\t);\r\n\t}\r\n\tconst iv = crypto.getRandomValues( new Uint8Array( 12 ) );\r\n\treturn crypto.subtle\r\n\t\t.encrypt(\r\n\t\t\t{\r\n\t\t\t\tname: 'AES-GCM',\r\n\t\t\t\tiv,\r\n\t\t\t},\r\n\t\t\tkey,\r\n\t\t\tdata\r\n\t\t)\r\n\t\t.then( ( cipher ) => {\r\n\t\t\tconst encryptedDataEncoder = encoding.createEncoder();\r\n\t\t\tencoding.writeVarString( encryptedDataEncoder, 'AES-GCM' );\r\n\t\t\tencoding.writeVarUint8Array( encryptedDataEncoder, iv );\r\n\t\t\tencoding.writeVarUint8Array(\r\n\t\t\t\tencryptedDataEncoder,\r\n\t\t\t\tnew Uint8Array( cipher )\r\n\t\t\t);\r\n\t\t\treturn encoding.toUint8Array( encryptedDataEncoder );\r\n\t\t} );\r\n};\r\n\r\n/**\r\n * @param {Object} data data to be encrypted\r\n * @param {CryptoKey?} key\r\n * @return {PromiseLike<Uint8Array>} encrypted data, if key is provided\r\n */\r\nexport const encryptJson = ( data, key ) => {\r\n\tconst dataEncoder = encoding.createEncoder();\r\n\tencoding.writeAny( dataEncoder, data );\r\n\treturn encrypt( encoding.toUint8Array( dataEncoder ), key );\r\n};\r\n\r\n/**\r\n * @param {Uint8Array} data\r\n * @param {CryptoKey?} key\r\n * @return {PromiseLike<Uint8Array>} decrypted buffer\r\n */\r\nexport const decrypt = ( data, key ) => {\r\n\tif ( ! key ) {\r\n\t\treturn /** @type {PromiseLike<Uint8Array>} */ (\r\n\t\t\tpromise.resolve( data )\r\n\t\t);\r\n\t}\r\n\tconst dataDecoder = decoding.createDecoder( data );\r\n\tconst algorithm = decoding.readVarString( dataDecoder );\r\n\tif ( algorithm !== 'AES-GCM' ) {\r\n\t\tpromise.reject( error.create( 'Unknown encryption algorithm' ) );\r\n\t}\r\n\tconst iv = decoding.readVarUint8Array( dataDecoder );\r\n\tconst cipher = decoding.readVarUint8Array( dataDecoder );\r\n\treturn crypto.subtle\r\n\t\t.decrypt(\r\n\t\t\t{\r\n\t\t\t\tname: 'AES-GCM',\r\n\t\t\t\tiv,\r\n\t\t\t},\r\n\t\t\tkey,\r\n\t\t\tcipher\r\n\t\t)\r\n\t\t.then( ( data ) => new Uint8Array( data ) );\r\n};\r\n\r\n/**\r\n * @param {Uint8Array} data\r\n * @param {CryptoKey?} key\r\n * @return {PromiseLike<Object>} decrypted object\r\n */\r\nexport const decryptJson = ( data, key ) =>\r\n\tdecrypt( data, key ).then( ( decryptedValue ) =>\r\n\t\tdecoding.readAny(\r\n\t\t\tdecoding.createDecoder( new Uint8Array( decryptedValue ) )\r\n\t\t)\r\n\t);\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,QAAQ,MAAM,eAAe;AACzC,OAAO,KAAKC,QAAQ,MAAM,eAAe;AACzC,OAAO,KAAKC,OAAO,MAAM,cAAc;AACvC,OAAO,KAAKC,KAAK,MAAM,YAAY;AACnC,OAAO,KAAKC,MAAM,MAAM,aAAa;;AAErC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGA,CAAEC,MAAM,EAAEC,QAAQ,KAAM;EAChD,MAAMC,YAAY,GAAGJ,MAAM,CAACK,UAAU,CAAEH,MAAO,CAAC,CAACI,MAAM;EACvD,MAAMC,IAAI,GAAGP,MAAM,CAACK,UAAU,CAAEF,QAAS,CAAC,CAACG,MAAM;EACjD,OAAOE,MAAM,CAACC,MAAM,CAClBC,SAAS,CAAE,KAAK,EAAEN,YAAY,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAE,WAAW,CAAG,CAAC,CAClEO,IAAI,CAAIC,WAAW,IACnBJ,MAAM,CAACC,MAAM,CAACR,SAAS,CACtB;IACCY,IAAI,EAAE,QAAQ;IACdN,IAAI;IACJO,UAAU,EAAE,MAAM;IAClBC,IAAI,EAAE;EACP,CAAC,EACDH,WAAW,EACX;IACCC,IAAI,EAAE,SAAS;IACfG,MAAM,EAAE;EACT,CAAC,EACD,IAAI,EACJ,CAAE,SAAS,EAAE,SAAS,CACvB,CACD,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,GAAGA,CAAEC,IAAI,EAAEC,GAAG,KAAM;EACvC,IAAK,CAAEA,GAAG,EAAG;IACZ,OAAO;MACNrB,OAAO,CAACsB,OAAO,CAAEF,IAAK;IAAC;EAEzB;EACA,MAAMG,EAAE,GAAGb,MAAM,CAACc,eAAe,CAAE,IAAIC,UAAU,CAAE,EAAG,CAAE,CAAC;EACzD,OAAOf,MAAM,CAACC,MAAM,CAClBQ,OAAO,CACP;IACCJ,IAAI,EAAE,SAAS;IACfQ;EACD,CAAC,EACDF,GAAG,EACHD,IACD,CAAC,CACAP,IAAI,CAAIa,MAAM,IAAM;IACpB,MAAMC,oBAAoB,GAAG7B,QAAQ,CAAC8B,aAAa,CAAC,CAAC;IACrD9B,QAAQ,CAAC+B,cAAc,CAAEF,oBAAoB,EAAE,SAAU,CAAC;IAC1D7B,QAAQ,CAACgC,kBAAkB,CAAEH,oBAAoB,EAAEJ,EAAG,CAAC;IACvDzB,QAAQ,CAACgC,kBAAkB,CAC1BH,oBAAoB,EACpB,IAAIF,UAAU,CAAEC,MAAO,CACxB,CAAC;IACD,OAAO5B,QAAQ,CAACiC,YAAY,CAAEJ,oBAAqB,CAAC;EACrD,CAAE,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,WAAW,GAAGA,CAAEZ,IAAI,EAAEC,GAAG,KAAM;EAC3C,MAAMY,WAAW,GAAGnC,QAAQ,CAAC8B,aAAa,CAAC,CAAC;EAC5C9B,QAAQ,CAACoC,QAAQ,CAAED,WAAW,EAAEb,IAAK,CAAC;EACtC,OAAOD,OAAO,CAAErB,QAAQ,CAACiC,YAAY,CAAEE,WAAY,CAAC,EAAEZ,GAAI,CAAC;AAC5D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMc,OAAO,GAAGA,CAAEf,IAAI,EAAEC,GAAG,KAAM;EACvC,IAAK,CAAEA,GAAG,EAAG;IACZ,OAAO;MACNrB,OAAO,CAACsB,OAAO,CAAEF,IAAK;IAAC;EAEzB;EACA,MAAMgB,WAAW,GAAGrC,QAAQ,CAACsC,aAAa,CAAEjB,IAAK,CAAC;EAClD,MAAMkB,SAAS,GAAGvC,QAAQ,CAACwC,aAAa,CAAEH,WAAY,CAAC;EACvD,IAAKE,SAAS,KAAK,SAAS,EAAG;IAC9BtC,OAAO,CAACwC,MAAM,CAAEvC,KAAK,CAACwC,MAAM,CAAE,8BAA+B,CAAE,CAAC;EACjE;EACA,MAAMlB,EAAE,GAAGxB,QAAQ,CAAC2C,iBAAiB,CAAEN,WAAY,CAAC;EACpD,MAAMV,MAAM,GAAG3B,QAAQ,CAAC2C,iBAAiB,CAAEN,WAAY,CAAC;EACxD,OAAO1B,MAAM,CAACC,MAAM,CAClBwB,OAAO,CACP;IACCpB,IAAI,EAAE,SAAS;IACfQ;EACD,CAAC,EACDF,GAAG,EACHK,MACD,CAAC,CACAb,IAAI,CAAIO,IAAI,IAAM,IAAIK,UAAU,CAAEL,IAAK,CAAE,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMuB,WAAW,GAAGA,CAAEvB,IAAI,EAAEC,GAAG,KACrCc,OAAO,CAAEf,IAAI,EAAEC,GAAI,CAAC,CAACR,IAAI,CAAI+B,cAAc,IAC1C7C,QAAQ,CAAC8C,OAAO,CACf9C,QAAQ,CAACsC,aAAa,CAAE,IAAIZ,UAAU,CAAEmB,cAAe,CAAE,CAC1D,CACD,CAAC","ignoreList":[]}