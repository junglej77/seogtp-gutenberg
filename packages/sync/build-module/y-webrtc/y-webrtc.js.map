{"version":3,"names":["ws","map","error","random","encoding","decoding","Observable","logging","promise","bc","buffer","math","createMutex","Y","Peer","syncProtocol","awarenessProtocol","cryptoutils","log","createModuleLogger","messageSync","messageQueryAwareness","messageAwareness","messageBcPeerId","signalingConns","Map","rooms","checkIsSynced","room","synced","webrtcConns","forEach","peer","provider","emit","BOLD","name","UNBOLD","readMessage","buf","syncedCallback","decoder","createDecoder","encoder","createEncoder","messageType","readVarUint","undefined","awareness","doc","sendReply","writeVarUint","syncMessageType","readSyncMessage","messageYjsSyncStep2","messageYjsSyncStep1","writeVarUint8Array","encodeAwarenessUpdate","Array","from","getStates","keys","applyAwarenessUpdate","readVarUint8Array","add","readUint8","peerName","readVarString","peerId","bcConns","has","removed","added","push","delete","webrtcPeers","bcPeers","broadcastBcPeerId","console","readPeerMessage","peerConn","remotePeerId","GREY","UNCOLOR","sendWebrtcConn","webrtcConn","send","toUint8Array","e","broadcastWebrtcConn","m","conn","WebrtcConn","constructor","signalingConn","initiator","glareToken","closed","connected","peerOpts","on","signal","Date","now","Math","publishSignalingMessage","to","type","token","writeSyncStep1","awarenessStates","size","destroy","announceSignalingInfo","err","data","answer","broadcastBcMessage","encrypt","key","then","mux","publish","broadcastRoomMessage","bcconnected","topics","maxConns","filterBcConns","encoderPeerIdBc","writeUint8","writeVarString","Room","uuidv4","Set","_bcSubscriber","decrypt","Uint8Array","reply","_docUpdateHandler","update","origin","writeUpdate","_awarenessUpdateHandler","updated","changedClients","concat","encoderAwareness","_beforeUnloadHandler","removeAwarenessStates","clientID","disconnect","window","addEventListener","process","connect","roomName","subscribe","encoderSync","encoderState","writeSyncStep2","encoderAwarenessQuery","encoderAwarenessState","unsubscribe","off","removeEventListener","openRoom","create","set","encryptJson","topic","toBase64","SignalingConn","WebsocketClient","url","providers","get","execMessage","emitPeerChange","setIfUndefined","existingConn","remoteToken","localToken","decryptJson","fromBase64","WebrtcProvider","signaling","password","Awareness","floor","rand","shouldConnect","signalingUrls","deriveKey","resolve","bind"],"sources":["@wordpress/sync/src/y-webrtc/y-webrtc.js"],"sourcesContent":["// File copied as is from the y-webrtc package with only exports\r\n// added to the following vars/functions: signalingConns,rooms, publishSignalingMessage, log.\r\n/* eslint-disable eslint-comments/disable-enable-pair */\r\n/* eslint-disable eslint-comments/no-unlimited-disable */\r\n/* eslint-disable */\r\n// @ts-nocheck\r\n\r\nimport * as ws from 'lib0/websocket';\r\nimport * as map from 'lib0/map';\r\nimport * as error from 'lib0/error';\r\nimport * as random from 'lib0/random';\r\nimport * as encoding from 'lib0/encoding';\r\nimport * as decoding from 'lib0/decoding';\r\nimport { Observable } from 'lib0/observable';\r\nimport * as logging from 'lib0/logging';\r\nimport * as promise from 'lib0/promise';\r\nimport * as bc from 'lib0/broadcastchannel';\r\nimport * as buffer from 'lib0/buffer';\r\nimport * as math from 'lib0/math';\r\nimport { createMutex } from 'lib0/mutex';\r\n\r\nimport * as Y from 'yjs'; // eslint-disable-line\r\nimport Peer from 'simple-peer/simplepeer.min.js';\r\n\r\nimport * as syncProtocol from 'y-protocols/sync';\r\nimport * as awarenessProtocol from 'y-protocols/awareness';\r\n\r\nimport * as cryptoutils from './crypto.js';\r\n\r\nexport const log = logging.createModuleLogger( 'y-webrtc' );\r\n\r\nconst messageSync = 0;\r\nconst messageQueryAwareness = 3;\r\nconst messageAwareness = 1;\r\nconst messageBcPeerId = 4;\r\n\r\n/**\r\n * @type {Map<string, SignalingConn>}\r\n */\r\nexport const signalingConns = new Map();\r\n\r\n/**\r\n * @type {Map<string,Room>}\r\n */\r\nexport const rooms = new Map();\r\n\r\n/**\r\n * @param {Room} room\r\n */\r\nconst checkIsSynced = ( room ) => {\r\n\tlet synced = true;\r\n\troom.webrtcConns.forEach( ( peer ) => {\r\n\t\tif ( ! peer.synced ) {\r\n\t\t\tsynced = false;\r\n\t\t}\r\n\t} );\r\n\tif ( ( ! synced && room.synced ) || ( synced && ! room.synced ) ) {\r\n\t\troom.synced = synced;\r\n\t\troom.provider.emit( 'synced', [ { synced } ] );\r\n\t\tlog(\r\n\t\t\t'synced ',\r\n\t\t\tlogging.BOLD,\r\n\t\t\troom.name,\r\n\t\t\tlogging.UNBOLD,\r\n\t\t\t' with all peers'\r\n\t\t);\r\n\t}\r\n};\r\n\r\n/**\r\n * @param {Room} room\r\n * @param {Uint8Array} buf\r\n * @param {function} syncedCallback\r\n * @return {encoding.Encoder?}\r\n */\r\nconst readMessage = ( room, buf, syncedCallback ) => {\r\n\tconst decoder = decoding.createDecoder( buf );\r\n\tconst encoder = encoding.createEncoder();\r\n\tconst messageType = decoding.readVarUint( decoder );\r\n\tif ( room === undefined ) {\r\n\t\treturn null;\r\n\t}\r\n\tconst awareness = room.awareness;\r\n\tconst doc = room.doc;\r\n\tlet sendReply = false;\r\n\tswitch ( messageType ) {\r\n\t\tcase messageSync: {\r\n\t\t\tencoding.writeVarUint( encoder, messageSync );\r\n\t\t\tconst syncMessageType = syncProtocol.readSyncMessage(\r\n\t\t\t\tdecoder,\r\n\t\t\t\tencoder,\r\n\t\t\t\tdoc,\r\n\t\t\t\troom\r\n\t\t\t);\r\n\t\t\tif (\r\n\t\t\t\tsyncMessageType === syncProtocol.messageYjsSyncStep2 &&\r\n\t\t\t\t! room.synced\r\n\t\t\t) {\r\n\t\t\t\tsyncedCallback();\r\n\t\t\t}\r\n\t\t\tif ( syncMessageType === syncProtocol.messageYjsSyncStep1 ) {\r\n\t\t\t\tsendReply = true;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase messageQueryAwareness:\r\n\t\t\tencoding.writeVarUint( encoder, messageAwareness );\r\n\t\t\tencoding.writeVarUint8Array(\r\n\t\t\t\tencoder,\r\n\t\t\t\tawarenessProtocol.encodeAwarenessUpdate(\r\n\t\t\t\t\tawareness,\r\n\t\t\t\t\tArray.from( awareness.getStates().keys() )\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t\tsendReply = true;\r\n\t\t\tbreak;\r\n\t\tcase messageAwareness:\r\n\t\t\tawarenessProtocol.applyAwarenessUpdate(\r\n\t\t\t\tawareness,\r\n\t\t\t\tdecoding.readVarUint8Array( decoder ),\r\n\t\t\t\troom\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\tcase messageBcPeerId: {\r\n\t\t\tconst add = decoding.readUint8( decoder ) === 1;\r\n\t\t\tconst peerName = decoding.readVarString( decoder );\r\n\t\t\tif (\r\n\t\t\t\tpeerName !== room.peerId &&\r\n\t\t\t\t( ( room.bcConns.has( peerName ) && ! add ) ||\r\n\t\t\t\t\t( ! room.bcConns.has( peerName ) && add ) )\r\n\t\t\t) {\r\n\t\t\t\tconst removed = [];\r\n\t\t\t\tconst added = [];\r\n\t\t\t\tif ( add ) {\r\n\t\t\t\t\troom.bcConns.add( peerName );\r\n\t\t\t\t\tadded.push( peerName );\r\n\t\t\t\t} else {\r\n\t\t\t\t\troom.bcConns.delete( peerName );\r\n\t\t\t\t\tremoved.push( peerName );\r\n\t\t\t\t}\r\n\t\t\t\troom.provider.emit( 'peers', [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tadded,\r\n\t\t\t\t\t\tremoved,\r\n\t\t\t\t\t\twebrtcPeers: Array.from( room.webrtcConns.keys() ),\r\n\t\t\t\t\t\tbcPeers: Array.from( room.bcConns ),\r\n\t\t\t\t\t},\r\n\t\t\t\t] );\r\n\t\t\t\tbroadcastBcPeerId( room );\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\tconsole.error( 'Unable to compute message' );\r\n\t\t\treturn encoder;\r\n\t}\r\n\tif ( ! sendReply ) {\r\n\t\t// nothing has been written, no answer created\r\n\t\treturn null;\r\n\t}\r\n\treturn encoder;\r\n};\r\n\r\n/**\r\n * @param {WebrtcConn} peerConn\r\n * @param {Uint8Array} buf\r\n * @return {encoding.Encoder?}\r\n */\r\nconst readPeerMessage = ( peerConn, buf ) => {\r\n\tconst room = peerConn.room;\r\n\tlog(\r\n\t\t'received message from ',\r\n\t\tlogging.BOLD,\r\n\t\tpeerConn.remotePeerId,\r\n\t\tlogging.GREY,\r\n\t\t' (',\r\n\t\troom.name,\r\n\t\t')',\r\n\t\tlogging.UNBOLD,\r\n\t\tlogging.UNCOLOR\r\n\t);\r\n\treturn readMessage( room, buf, () => {\r\n\t\tpeerConn.synced = true;\r\n\t\tlog(\r\n\t\t\t'synced ',\r\n\t\t\tlogging.BOLD,\r\n\t\t\troom.name,\r\n\t\t\tlogging.UNBOLD,\r\n\t\t\t' with ',\r\n\t\t\tlogging.BOLD,\r\n\t\t\tpeerConn.remotePeerId\r\n\t\t);\r\n\t\tcheckIsSynced( room );\r\n\t} );\r\n};\r\n\r\n/**\r\n * @param {WebrtcConn} webrtcConn\r\n * @param {encoding.Encoder} encoder\r\n */\r\nconst sendWebrtcConn = ( webrtcConn, encoder ) => {\r\n\tlog(\r\n\t\t'send message to ',\r\n\t\tlogging.BOLD,\r\n\t\twebrtcConn.remotePeerId,\r\n\t\tlogging.UNBOLD,\r\n\t\tlogging.GREY,\r\n\t\t' (',\r\n\t\twebrtcConn.room.name,\r\n\t\t')',\r\n\t\tlogging.UNCOLOR\r\n\t);\r\n\ttry {\r\n\t\twebrtcConn.peer.send( encoding.toUint8Array( encoder ) );\r\n\t} catch ( e ) {}\r\n};\r\n\r\n/**\r\n * @param {Room} room\r\n * @param {Uint8Array} m\r\n */\r\nconst broadcastWebrtcConn = ( room, m ) => {\r\n\tlog( 'broadcast message in ', logging.BOLD, room.name, logging.UNBOLD );\r\n\troom.webrtcConns.forEach( ( conn ) => {\r\n\t\ttry {\r\n\t\t\tconn.peer.send( m );\r\n\t\t} catch ( e ) {}\r\n\t} );\r\n};\r\n\r\nexport class WebrtcConn {\r\n\t/**\r\n\t * @param {SignalingConn} signalingConn\r\n\t * @param {boolean} initiator\r\n\t * @param {string} remotePeerId\r\n\t * @param {Room} room\r\n\t */\r\n\tconstructor( signalingConn, initiator, remotePeerId, room ) {\r\n\t\tlog( 'establishing connection to ', logging.BOLD, remotePeerId );\r\n\t\tthis.room = room;\r\n\t\tthis.remotePeerId = remotePeerId;\r\n\t\tthis.glareToken = undefined;\r\n\t\tthis.closed = false;\r\n\t\tthis.connected = false;\r\n\t\tthis.synced = false;\r\n\t\t/**\r\n\t\t * @type {any}\r\n\t\t */\r\n\t\tthis.peer = new Peer( { initiator, ...room.provider.peerOpts } );\r\n\t\tthis.peer.on( 'signal', ( signal ) => {\r\n\t\t\tif ( this.glareToken === undefined ) {\r\n\t\t\t\t// add some randomness to the timestamp of the offer\r\n\t\t\t\tthis.glareToken = Date.now() + Math.random();\r\n\t\t\t}\r\n\t\t\tpublishSignalingMessage( signalingConn, room, {\r\n\t\t\t\tto: remotePeerId,\r\n\t\t\t\tfrom: room.peerId,\r\n\t\t\t\ttype: 'signal',\r\n\t\t\t\ttoken: this.glareToken,\r\n\t\t\t\tsignal,\r\n\t\t\t} );\r\n\t\t} );\r\n\t\tthis.peer.on( 'connect', () => {\r\n\t\t\tlog( 'connected to ', logging.BOLD, remotePeerId );\r\n\t\t\tthis.connected = true;\r\n\t\t\t// send sync step 1\r\n\t\t\tconst provider = room.provider;\r\n\t\t\tconst doc = provider.doc;\r\n\t\t\tconst awareness = room.awareness;\r\n\t\t\tconst encoder = encoding.createEncoder();\r\n\t\t\tencoding.writeVarUint( encoder, messageSync );\r\n\t\t\tsyncProtocol.writeSyncStep1( encoder, doc );\r\n\t\t\tsendWebrtcConn( this, encoder );\r\n\t\t\tconst awarenessStates = awareness.getStates();\r\n\t\t\tif ( awarenessStates.size > 0 ) {\r\n\t\t\t\tconst encoder = encoding.createEncoder();\r\n\t\t\t\tencoding.writeVarUint( encoder, messageAwareness );\r\n\t\t\t\tencoding.writeVarUint8Array(\r\n\t\t\t\t\tencoder,\r\n\t\t\t\t\tawarenessProtocol.encodeAwarenessUpdate(\r\n\t\t\t\t\t\tawareness,\r\n\t\t\t\t\t\tArray.from( awarenessStates.keys() )\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\t\tsendWebrtcConn( this, encoder );\r\n\t\t\t}\r\n\t\t} );\r\n\t\tthis.peer.on( 'close', () => {\r\n\t\t\tthis.connected = false;\r\n\t\t\tthis.closed = true;\r\n\t\t\tif ( room.webrtcConns.has( this.remotePeerId ) ) {\r\n\t\t\t\troom.webrtcConns.delete( this.remotePeerId );\r\n\t\t\t\troom.provider.emit( 'peers', [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tremoved: [ this.remotePeerId ],\r\n\t\t\t\t\t\tadded: [],\r\n\t\t\t\t\t\twebrtcPeers: Array.from( room.webrtcConns.keys() ),\r\n\t\t\t\t\t\tbcPeers: Array.from( room.bcConns ),\r\n\t\t\t\t\t},\r\n\t\t\t\t] );\r\n\t\t\t}\r\n\t\t\tcheckIsSynced( room );\r\n\t\t\tthis.peer.destroy();\r\n\t\t\tlog( 'closed connection to ', logging.BOLD, remotePeerId );\r\n\t\t\tannounceSignalingInfo( room );\r\n\t\t} );\r\n\t\tthis.peer.on( 'error', ( err ) => {\r\n\t\t\tlog(\r\n\t\t\t\t'Error in connection to ',\r\n\t\t\t\tlogging.BOLD,\r\n\t\t\t\tremotePeerId,\r\n\t\t\t\t': ',\r\n\t\t\t\terr\r\n\t\t\t);\r\n\t\t\tannounceSignalingInfo( room );\r\n\t\t} );\r\n\t\tthis.peer.on( 'data', ( data ) => {\r\n\t\t\tconst answer = readPeerMessage( this, data );\r\n\t\t\tif ( answer !== null ) {\r\n\t\t\t\tsendWebrtcConn( this, answer );\r\n\t\t\t}\r\n\t\t} );\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tthis.peer.destroy();\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Room} room\r\n * @param {Uint8Array} m\r\n */\r\nconst broadcastBcMessage = ( room, m ) =>\r\n\tcryptoutils\r\n\t\t.encrypt( m, room.key )\r\n\t\t.then( ( data ) => room.mux( () => bc.publish( room.name, data ) ) );\r\n\r\n/**\r\n * @param {Room} room\r\n * @param {Uint8Array} m\r\n */\r\nconst broadcastRoomMessage = ( room, m ) => {\r\n\tif ( room.bcconnected ) {\r\n\t\tbroadcastBcMessage( room, m );\r\n\t}\r\n\tbroadcastWebrtcConn( room, m );\r\n};\r\n\r\n/**\r\n * @param {Room} room\r\n */\r\nconst announceSignalingInfo = ( room ) => {\r\n\tsignalingConns.forEach( ( conn ) => {\r\n\t\t// only subscribe if connection is established, otherwise the conn automatically subscribes to all rooms\r\n\t\tif ( conn.connected ) {\r\n\t\t\tconn.send( { type: 'subscribe', topics: [ room.name ] } );\r\n\t\t\tif ( room.webrtcConns.size < room.provider.maxConns ) {\r\n\t\t\t\tpublishSignalingMessage( conn, room, {\r\n\t\t\t\t\ttype: 'announce',\r\n\t\t\t\t\tfrom: room.peerId,\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n};\r\n\r\n/**\r\n * @param {Room} room\r\n */\r\nconst broadcastBcPeerId = ( room ) => {\r\n\tif ( room.provider.filterBcConns ) {\r\n\t\t// broadcast peerId via broadcastchannel\r\n\t\tconst encoderPeerIdBc = encoding.createEncoder();\r\n\t\tencoding.writeVarUint( encoderPeerIdBc, messageBcPeerId );\r\n\t\tencoding.writeUint8( encoderPeerIdBc, 1 );\r\n\t\tencoding.writeVarString( encoderPeerIdBc, room.peerId );\r\n\t\tbroadcastBcMessage( room, encoding.toUint8Array( encoderPeerIdBc ) );\r\n\t}\r\n};\r\n\r\nexport class Room {\r\n\t/**\r\n\t * @param {Y.Doc} doc\r\n\t * @param {WebrtcProvider} provider\r\n\t * @param {string} name\r\n\t * @param {CryptoKey|null} key\r\n\t */\r\n\tconstructor( doc, provider, name, key ) {\r\n\t\t/**\r\n\t\t * Do not assume that peerId is unique. This is only meant for sending signaling messages.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.peerId = random.uuidv4();\r\n\t\tthis.doc = doc;\r\n\t\t/**\r\n\t\t * @type {awarenessProtocol.Awareness}\r\n\t\t */\r\n\t\tthis.awareness = provider.awareness;\r\n\t\tthis.provider = provider;\r\n\t\tthis.synced = false;\r\n\t\tthis.name = name;\r\n\t\t// @todo make key secret by scoping\r\n\t\tthis.key = key;\r\n\t\t/**\r\n\t\t * @type {Map<string, WebrtcConn>}\r\n\t\t */\r\n\t\tthis.webrtcConns = new Map();\r\n\t\t/**\r\n\t\t * @type {Set<string>}\r\n\t\t */\r\n\t\tthis.bcConns = new Set();\r\n\t\tthis.mux = createMutex();\r\n\t\tthis.bcconnected = false;\r\n\t\t/**\r\n\t\t * @param {ArrayBuffer} data\r\n\t\t */\r\n\t\tthis._bcSubscriber = ( data ) =>\r\n\t\t\tcryptoutils.decrypt( new Uint8Array( data ), key ).then( ( m ) =>\r\n\t\t\t\tthis.mux( () => {\r\n\t\t\t\t\tconst reply = readMessage( this, m, () => {} );\r\n\t\t\t\t\tif ( reply ) {\r\n\t\t\t\t\t\tbroadcastBcMessage(\r\n\t\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\t\tencoding.toUint8Array( reply )\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} )\r\n\t\t\t);\r\n\t\t/**\r\n\t\t * Listens to Yjs updates and sends them to remote peers\r\n\t\t *\r\n\t\t * @param {Uint8Array} update\r\n\t\t * @param {any} origin\r\n\t\t */\r\n\t\tthis._docUpdateHandler = ( update, origin ) => {\r\n\t\t\tconst encoder = encoding.createEncoder();\r\n\t\t\tencoding.writeVarUint( encoder, messageSync );\r\n\t\t\tsyncProtocol.writeUpdate( encoder, update );\r\n\t\t\tbroadcastRoomMessage( this, encoding.toUint8Array( encoder ) );\r\n\t\t};\r\n\t\t/**\r\n\t\t * Listens to Awareness updates and sends them to remote peers\r\n\t\t *\r\n\t\t * @param {any} changed\r\n\t\t * @param {any} origin\r\n\t\t */\r\n\t\tthis._awarenessUpdateHandler = (\r\n\t\t\t{ added, updated, removed },\r\n\t\t\torigin\r\n\t\t) => {\r\n\t\t\tconst changedClients = added.concat( updated ).concat( removed );\r\n\t\t\tconst encoderAwareness = encoding.createEncoder();\r\n\t\t\tencoding.writeVarUint( encoderAwareness, messageAwareness );\r\n\t\t\tencoding.writeVarUint8Array(\r\n\t\t\t\tencoderAwareness,\r\n\t\t\t\tawarenessProtocol.encodeAwarenessUpdate(\r\n\t\t\t\t\tthis.awareness,\r\n\t\t\t\t\tchangedClients\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t\tbroadcastRoomMessage(\r\n\t\t\t\tthis,\r\n\t\t\t\tencoding.toUint8Array( encoderAwareness )\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\tthis._beforeUnloadHandler = () => {\r\n\t\t\tawarenessProtocol.removeAwarenessStates(\r\n\t\t\t\tthis.awareness,\r\n\t\t\t\t[ doc.clientID ],\r\n\t\t\t\t'window unload'\r\n\t\t\t);\r\n\t\t\trooms.forEach( ( room ) => {\r\n\t\t\t\troom.disconnect();\r\n\t\t\t} );\r\n\t\t};\r\n\r\n\t\tif ( typeof window !== 'undefined' ) {\r\n\t\t\twindow.addEventListener(\r\n\t\t\t\t'beforeunload',\r\n\t\t\t\tthis._beforeUnloadHandler\r\n\t\t\t);\r\n\t\t} else if ( typeof process !== 'undefined' ) {\r\n\t\t\tprocess.on( 'exit', this._beforeUnloadHandler );\r\n\t\t}\r\n\t}\r\n\r\n\tconnect() {\r\n\t\tthis.doc.on( 'update', this._docUpdateHandler );\r\n\t\tthis.awareness.on( 'update', this._awarenessUpdateHandler );\r\n\t\t// signal through all available signaling connections\r\n\t\tannounceSignalingInfo( this );\r\n\t\tconst roomName = this.name;\r\n\t\tbc.subscribe( roomName, this._bcSubscriber );\r\n\t\tthis.bcconnected = true;\r\n\t\t// broadcast peerId via broadcastchannel\r\n\t\tbroadcastBcPeerId( this );\r\n\t\t// write sync step 1\r\n\t\tconst encoderSync = encoding.createEncoder();\r\n\t\tencoding.writeVarUint( encoderSync, messageSync );\r\n\t\tsyncProtocol.writeSyncStep1( encoderSync, this.doc );\r\n\t\tbroadcastBcMessage( this, encoding.toUint8Array( encoderSync ) );\r\n\t\t// broadcast local state\r\n\t\tconst encoderState = encoding.createEncoder();\r\n\t\tencoding.writeVarUint( encoderState, messageSync );\r\n\t\tsyncProtocol.writeSyncStep2( encoderState, this.doc );\r\n\t\tbroadcastBcMessage( this, encoding.toUint8Array( encoderState ) );\r\n\t\t// write queryAwareness\r\n\t\tconst encoderAwarenessQuery = encoding.createEncoder();\r\n\t\tencoding.writeVarUint( encoderAwarenessQuery, messageQueryAwareness );\r\n\t\tbroadcastBcMessage(\r\n\t\t\tthis,\r\n\t\t\tencoding.toUint8Array( encoderAwarenessQuery )\r\n\t\t);\r\n\t\t// broadcast local awareness state\r\n\t\tconst encoderAwarenessState = encoding.createEncoder();\r\n\t\tencoding.writeVarUint( encoderAwarenessState, messageAwareness );\r\n\t\tencoding.writeVarUint8Array(\r\n\t\t\tencoderAwarenessState,\r\n\t\t\tawarenessProtocol.encodeAwarenessUpdate( this.awareness, [\r\n\t\t\t\tthis.doc.clientID,\r\n\t\t\t] )\r\n\t\t);\r\n\t\tbroadcastBcMessage(\r\n\t\t\tthis,\r\n\t\t\tencoding.toUint8Array( encoderAwarenessState )\r\n\t\t);\r\n\t}\r\n\r\n\tdisconnect() {\r\n\t\t// signal through all available signaling connections\r\n\t\tsignalingConns.forEach( ( conn ) => {\r\n\t\t\tif ( conn.connected ) {\r\n\t\t\t\tconn.send( { type: 'unsubscribe', topics: [ this.name ] } );\r\n\t\t\t}\r\n\t\t} );\r\n\t\tawarenessProtocol.removeAwarenessStates(\r\n\t\t\tthis.awareness,\r\n\t\t\t[ this.doc.clientID ],\r\n\t\t\t'disconnect'\r\n\t\t);\r\n\t\t// broadcast peerId removal via broadcastchannel\r\n\t\tconst encoderPeerIdBc = encoding.createEncoder();\r\n\t\tencoding.writeVarUint( encoderPeerIdBc, messageBcPeerId );\r\n\t\tencoding.writeUint8( encoderPeerIdBc, 0 ); // remove peerId from other bc peers\r\n\t\tencoding.writeVarString( encoderPeerIdBc, this.peerId );\r\n\t\tbroadcastBcMessage( this, encoding.toUint8Array( encoderPeerIdBc ) );\r\n\r\n\t\tbc.unsubscribe( this.name, this._bcSubscriber );\r\n\t\tthis.bcconnected = false;\r\n\t\tthis.doc.off( 'update', this._docUpdateHandler );\r\n\t\tthis.awareness.off( 'update', this._awarenessUpdateHandler );\r\n\t\tthis.webrtcConns.forEach( ( conn ) => conn.destroy() );\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tthis.disconnect();\r\n\t\tif ( typeof window !== 'undefined' ) {\r\n\t\t\twindow.removeEventListener(\r\n\t\t\t\t'beforeunload',\r\n\t\t\t\tthis._beforeUnloadHandler\r\n\t\t\t);\r\n\t\t} else if ( typeof process !== 'undefined' ) {\r\n\t\t\tprocess.off( 'exit', this._beforeUnloadHandler );\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Y.Doc} doc\r\n * @param {WebrtcProvider} provider\r\n * @param {string} name\r\n * @param {CryptoKey|null} key\r\n * @return {Room}\r\n */\r\nconst openRoom = ( doc, provider, name, key ) => {\r\n\t// there must only be one room\r\n\tif ( rooms.has( name ) ) {\r\n\t\tthrow error.create(\r\n\t\t\t`A Yjs Doc connected to room \"${ name }\" already exists!`\r\n\t\t);\r\n\t}\r\n\tconst room = new Room( doc, provider, name, key );\r\n\trooms.set( name, /** @type {Room} */ ( room ) );\r\n\treturn room;\r\n};\r\n\r\n/**\r\n * @param {SignalingConn} conn\r\n * @param {Room} room\r\n * @param {any} data\r\n */\r\nexport const publishSignalingMessage = ( conn, room, data ) => {\r\n\tif ( room.key ) {\r\n\t\tcryptoutils.encryptJson( data, room.key ).then( ( data ) => {\r\n\t\t\tconn.send( {\r\n\t\t\t\ttype: 'publish',\r\n\t\t\t\ttopic: room.name,\r\n\t\t\t\tdata: buffer.toBase64( data ),\r\n\t\t\t} );\r\n\t\t} );\r\n\t} else {\r\n\t\tconn.send( { type: 'publish', topic: room.name, data } );\r\n\t}\r\n};\r\n\r\nexport class SignalingConn extends ws.WebsocketClient {\r\n\tconstructor( url ) {\r\n\t\tsuper( url );\r\n\t\t/**\r\n\t\t * @type {Set<WebrtcProvider>}\r\n\t\t */\r\n\t\tthis.providers = new Set();\r\n\t\tthis.on( 'connect', () => {\r\n\t\t\tlog( `connected (${ url })` );\r\n\t\t\tconst topics = Array.from( rooms.keys() );\r\n\t\t\tthis.send( { type: 'subscribe', topics } );\r\n\t\t\trooms.forEach( ( room ) =>\r\n\t\t\t\tpublishSignalingMessage( this, room, {\r\n\t\t\t\t\ttype: 'announce',\r\n\t\t\t\t\tfrom: room.peerId,\r\n\t\t\t\t} )\r\n\t\t\t);\r\n\t\t} );\r\n\t\tthis.on( 'message', ( m ) => {\r\n\t\t\tswitch ( m.type ) {\r\n\t\t\t\tcase 'publish': {\r\n\t\t\t\t\tconst roomName = m.topic;\r\n\t\t\t\t\tconst room = rooms.get( roomName );\r\n\t\t\t\t\tif ( room == null || typeof roomName !== 'string' ) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst execMessage = ( data ) => {\r\n\t\t\t\t\t\tconst webrtcConns = room.webrtcConns;\r\n\t\t\t\t\t\tconst peerId = room.peerId;\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tdata == null ||\r\n\t\t\t\t\t\t\tdata.from === peerId ||\r\n\t\t\t\t\t\t\t( data.to !== undefined && data.to !== peerId ) ||\r\n\t\t\t\t\t\t\troom.bcConns.has( data.from )\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t// ignore messages that are not addressed to this conn, or from clients that are connected via broadcastchannel\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst emitPeerChange = webrtcConns.has( data.from )\r\n\t\t\t\t\t\t\t? () => {}\r\n\t\t\t\t\t\t\t: () =>\r\n\t\t\t\t\t\t\t\t\troom.provider.emit( 'peers', [\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tremoved: [],\r\n\t\t\t\t\t\t\t\t\t\t\tadded: [ data.from ],\r\n\t\t\t\t\t\t\t\t\t\t\twebrtcPeers: Array.from(\r\n\t\t\t\t\t\t\t\t\t\t\t\troom.webrtcConns.keys()\r\n\t\t\t\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t\t\t\t\tbcPeers: Array.from( room.bcConns ),\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t] );\r\n\t\t\t\t\t\tswitch ( data.type ) {\r\n\t\t\t\t\t\t\tcase 'announce':\r\n\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\twebrtcConns.size < room.provider.maxConns\r\n\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\tmap.setIfUndefined(\r\n\t\t\t\t\t\t\t\t\t\twebrtcConns,\r\n\t\t\t\t\t\t\t\t\t\tdata.from,\r\n\t\t\t\t\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t\t\t\t\t\tnew WebrtcConn(\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\t\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdata.from,\r\n\t\t\t\t\t\t\t\t\t\t\t\troom\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\temitPeerChange();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 'signal':\r\n\t\t\t\t\t\t\t\tif ( data.signal.type === 'offer' ) {\r\n\t\t\t\t\t\t\t\t\tconst existingConn = webrtcConns.get(\r\n\t\t\t\t\t\t\t\t\t\tdata.from\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\tif ( existingConn ) {\r\n\t\t\t\t\t\t\t\t\t\tconst remoteToken = data.token;\r\n\t\t\t\t\t\t\t\t\t\tconst localToken =\r\n\t\t\t\t\t\t\t\t\t\t\texistingConn.glareToken;\r\n\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\tlocalToken &&\r\n\t\t\t\t\t\t\t\t\t\t\tlocalToken > remoteToken\r\n\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\tlog(\r\n\t\t\t\t\t\t\t\t\t\t\t\t'offer rejected: ',\r\n\t\t\t\t\t\t\t\t\t\t\t\tdata.from\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t// if we don't reject the offer, we will be accepting it and answering it\r\n\t\t\t\t\t\t\t\t\t\texistingConn.glareToken = undefined;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif ( data.signal.type === 'answer' ) {\r\n\t\t\t\t\t\t\t\t\tlog( 'offer answered by: ', data.from );\r\n\t\t\t\t\t\t\t\t\tconst existingConn = webrtcConns.get(\r\n\t\t\t\t\t\t\t\t\t\tdata.from\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\texistingConn.glareToken = undefined;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif ( data.to === peerId ) {\r\n\t\t\t\t\t\t\t\t\tmap.setIfUndefined(\r\n\t\t\t\t\t\t\t\t\t\twebrtcConns,\r\n\t\t\t\t\t\t\t\t\t\tdata.from,\r\n\t\t\t\t\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t\t\t\t\t\tnew WebrtcConn(\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\t\t\t\t\t\t\tfalse,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdata.from,\r\n\t\t\t\t\t\t\t\t\t\t\t\troom\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t).peer.signal( data.signal );\r\n\t\t\t\t\t\t\t\t\temitPeerChange();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tif ( room.key ) {\r\n\t\t\t\t\t\tif ( typeof m.data === 'string' ) {\r\n\t\t\t\t\t\t\tcryptoutils\r\n\t\t\t\t\t\t\t\t.decryptJson(\r\n\t\t\t\t\t\t\t\t\tbuffer.fromBase64( m.data ),\r\n\t\t\t\t\t\t\t\t\troom.key\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t.then( execMessage );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\texecMessage( m.data );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\t\tthis.on( 'disconnect', () => log( `disconnect (${ url })` ) );\r\n\t}\r\n}\r\n\r\n/**\r\n * @typedef {Object} ProviderOptions\r\n * @property {Array<string>} [signaling]\r\n * @property {string} [password]\r\n * @property {awarenessProtocol.Awareness} [awareness]\r\n * @property {number} [maxConns]\r\n * @property {boolean} [filterBcConns]\r\n * @property {any} [peerOpts]\r\n */\r\n\r\n/**\r\n * @extends Observable<string>\r\n */\r\nexport class WebrtcProvider extends Observable {\r\n\t/**\r\n\t * @param {string} roomName\r\n\t * @param {Y.Doc} doc\r\n\t * @param {ProviderOptions?} opts\r\n\t */\r\n\tconstructor(\r\n\t\troomName,\r\n\t\tdoc,\r\n\t\t{\r\n\t\t\tsignaling = [ 'wss://y-webrtc-eu.fly.dev' ],\r\n\t\t\tpassword = null,\r\n\t\t\tawareness = new awarenessProtocol.Awareness( doc ),\r\n\t\t\tmaxConns = 20 + math.floor( random.rand() * 15 ), // the random factor reduces the chance that n clients form a cluster\r\n\t\t\tfilterBcConns = true,\r\n\t\t\tpeerOpts = {}, // simple-peer options. See https://github.com/feross/simple-peer#peer--new-peeropts\r\n\t\t} = {}\r\n\t) {\r\n\t\tsuper();\r\n\t\tthis.roomName = roomName;\r\n\t\tthis.doc = doc;\r\n\t\tthis.filterBcConns = filterBcConns;\r\n\t\t/**\r\n\t\t * @type {awarenessProtocol.Awareness}\r\n\t\t */\r\n\t\tthis.awareness = awareness;\r\n\t\tthis.shouldConnect = false;\r\n\t\tthis.signalingUrls = signaling;\r\n\t\tthis.signalingConns = [];\r\n\t\tthis.maxConns = maxConns;\r\n\t\tthis.peerOpts = peerOpts;\r\n\t\t/**\r\n\t\t * @type {PromiseLike<CryptoKey | null>}\r\n\t\t */\r\n\t\tthis.key = password\r\n\t\t\t? cryptoutils.deriveKey( password, roomName )\r\n\t\t\t: /** @type {PromiseLike<null>} */ ( promise.resolve( null ) );\r\n\t\t/**\r\n\t\t * @type {Room|null}\r\n\t\t */\r\n\t\tthis.room = null;\r\n\t\tthis.key.then( ( key ) => {\r\n\t\t\tthis.room = openRoom( doc, this, roomName, key );\r\n\t\t\tif ( this.shouldConnect ) {\r\n\t\t\t\tthis.room.connect();\r\n\t\t\t} else {\r\n\t\t\t\tthis.room.disconnect();\r\n\t\t\t}\r\n\t\t} );\r\n\t\tthis.connect();\r\n\t\tthis.destroy = this.destroy.bind( this );\r\n\t\tdoc.on( 'destroy', this.destroy );\r\n\t}\r\n\r\n\t/**\r\n\t * @type {boolean}\r\n\t */\r\n\tget connected() {\r\n\t\treturn this.room !== null && this.shouldConnect;\r\n\t}\r\n\r\n\tconnect() {\r\n\t\tthis.shouldConnect = true;\r\n\t\tthis.signalingUrls.forEach( ( url ) => {\r\n\t\t\tconst signalingConn = map.setIfUndefined(\r\n\t\t\t\tsignalingConns,\r\n\t\t\t\turl,\r\n\t\t\t\t() => new SignalingConn( url )\r\n\t\t\t);\r\n\t\t\tthis.signalingConns.push( signalingConn );\r\n\t\t\tsignalingConn.providers.add( this );\r\n\t\t} );\r\n\t\tif ( this.room ) {\r\n\t\t\tthis.room.connect();\r\n\t\t}\r\n\t}\r\n\r\n\tdisconnect() {\r\n\t\tthis.shouldConnect = false;\r\n\t\tthis.signalingConns.forEach( ( conn ) => {\r\n\t\t\tconn.providers.delete( this );\r\n\t\t\tif ( conn.providers.size === 0 ) {\r\n\t\t\t\tconn.destroy();\r\n\t\t\t\tsignalingConns.delete( conn.url );\r\n\t\t\t}\r\n\t\t} );\r\n\t\tif ( this.room ) {\r\n\t\t\tthis.room.disconnect();\r\n\t\t}\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tthis.doc.off( 'destroy', this.destroy );\r\n\t\t// need to wait for key before deleting room\r\n\t\tthis.key.then( () => {\r\n\t\t\t/** @type {Room} */ ( this.room ).destroy();\r\n\t\t\trooms.delete( this.roomName );\r\n\t\t} );\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]}