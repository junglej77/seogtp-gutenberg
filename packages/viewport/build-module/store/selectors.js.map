{"version":3,"names":["isViewportMatch","state","query","indexOf"],"sources":["@wordpress/viewport/src/store/selectors.js"],"sourcesContent":["/**\r\n * Returns true if the viewport matches the given query, or false otherwise.\r\n *\r\n * @param {Object} state Viewport state object.\r\n * @param {string} query Query string. Includes operator and breakpoint name,\r\n *                       space separated. Operator defaults to >=.\r\n *\r\n * @example\r\n *\r\n * ```js\r\n * import { store as viewportStore } from '@wordpress/viewport';\r\n * import { useSelect } from '@wordpress/data';\r\n * import { __ } from '@wordpress/i18n';\r\n * const ExampleComponent = () => {\r\n *     const isMobile = useSelect(\r\n *         ( select ) => select( viewportStore ).isViewportMatch( '< small' ),\r\n *         []\r\n *     );\r\n *\r\n *     return isMobile ? (\r\n *         <div>{ __( 'Mobile' ) }</div>\r\n *     ) : (\r\n *         <div>{ __( 'Not Mobile' ) }</div>\r\n *     );\r\n * };\r\n * ```\r\n *\r\n * @return {boolean} Whether viewport matches query.\r\n */\r\nexport function isViewportMatch( state, query ) {\r\n\t// Default to `>=` if no operator is present.\r\n\tif ( query.indexOf( ' ' ) === -1 ) {\r\n\t\tquery = '>= ' + query;\r\n\t}\r\n\r\n\treturn !! state[ query ];\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAeA,CAAEC,KAAK,EAAEC,KAAK,EAAG;EAC/C;EACA,IAAKA,KAAK,CAACC,OAAO,CAAE,GAAI,CAAC,KAAK,CAAC,CAAC,EAAG;IAClCD,KAAK,GAAG,KAAK,GAAGA,KAAK;EACtB;EAEA,OAAO,CAAC,CAAED,KAAK,CAAEC,KAAK,CAAE;AACzB","ignoreList":[]}