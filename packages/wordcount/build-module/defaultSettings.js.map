{"version":3,"names":["defaultSettings","HTMLRegExp","HTMLcommentRegExp","spaceRegExp","HTMLEntityRegExp","connectorRegExp","removeRegExp","RegExp","join","astralRegExp","wordsRegExp","characters_excluding_spacesRegExp","characters_including_spacesRegExp","l10n","type"],"sources":["@wordpress/wordcount/src/defaultSettings.js"],"sourcesContent":["/** @typedef {import('./index').WPWordCountStrategy} WPWordCountStrategy */\r\n\r\n/** @typedef {Partial<{type: WPWordCountStrategy, shortcodes: string[]}>} WPWordCountL10n */\r\n\r\n/**\r\n * @typedef WPWordCountSettingsFields\r\n * @property {RegExp}              HTMLRegExp                        Regular expression that matches HTML tags\r\n * @property {RegExp}              HTMLcommentRegExp                 Regular expression that matches HTML comments\r\n * @property {RegExp}              spaceRegExp                       Regular expression that matches spaces in HTML\r\n * @property {RegExp}              HTMLEntityRegExp                  Regular expression that matches HTML entities\r\n * @property {RegExp}              connectorRegExp                   Regular expression that matches word connectors, like em-dash\r\n * @property {RegExp}              removeRegExp                      Regular expression that matches various characters to be removed when counting\r\n * @property {RegExp}              astralRegExp                      Regular expression that matches astral UTF-16 code points\r\n * @property {RegExp}              wordsRegExp                       Regular expression that matches words\r\n * @property {RegExp}              characters_excluding_spacesRegExp Regular expression that matches characters excluding spaces\r\n * @property {RegExp}              characters_including_spacesRegExp Regular expression that matches characters including spaces\r\n * @property {RegExp}              shortcodesRegExp                  Regular expression that matches WordPress shortcodes\r\n * @property {string[]}            shortcodes                        List of all shortcodes\r\n * @property {WPWordCountStrategy} type                              Describes what and how are we counting\r\n * @property {WPWordCountL10n}     l10n                              Object with human translations\r\n */\r\n\r\n/**\r\n * Lower-level settings for word counting that can be overridden.\r\n *\r\n * @typedef {Partial<WPWordCountSettingsFields>} WPWordCountUserSettings\r\n */\r\n\r\n// Disable reason: JSDoc linter doesn't seem to parse the union (`&`) correctly: https://github.com/jsdoc/jsdoc/issues/1285\r\n/* eslint-disable jsdoc/valid-types */\r\n/**\r\n * Word counting settings that include non-optional values we set if missing\r\n *\r\n * @typedef {WPWordCountUserSettings & typeof defaultSettings} WPWordCountDefaultSettings\r\n */\r\n/* eslint-enable jsdoc/valid-types */\r\n\r\nexport const defaultSettings = {\r\n\tHTMLRegExp: /<\\/?[a-z][^>]*?>/gi,\r\n\tHTMLcommentRegExp: /<!--[\\s\\S]*?-->/g,\r\n\tspaceRegExp: /&nbsp;|&#160;/gi,\r\n\tHTMLEntityRegExp: /&\\S+?;/g,\r\n\r\n\t// \\u2014 = em-dash.\r\n\tconnectorRegExp: /--|\\u2014/g,\r\n\r\n\t// Characters to be removed from input text.\r\n\tremoveRegExp: new RegExp(\r\n\t\t[\r\n\t\t\t'[',\r\n\r\n\t\t\t// Basic Latin (extract)\r\n\t\t\t'\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E',\r\n\r\n\t\t\t// Latin-1 Supplement (extract)\r\n\t\t\t'\\u0080-\\u00BF\\u00D7\\u00F7',\r\n\r\n\t\t\t/*\r\n\t\t\t * The following range consists of:\r\n\t\t\t * General Punctuation\r\n\t\t\t * Superscripts and Subscripts\r\n\t\t\t * Currency Symbols\r\n\t\t\t * Combining Diacritical Marks for Symbols\r\n\t\t\t * Letterlike Symbols\r\n\t\t\t * Number Forms\r\n\t\t\t * Arrows\r\n\t\t\t * Mathematical Operators\r\n\t\t\t * Miscellaneous Technical\r\n\t\t\t * Control Pictures\r\n\t\t\t * Optical Character Recognition\r\n\t\t\t * Enclosed Alphanumerics\r\n\t\t\t * Box Drawing\r\n\t\t\t * Block Elements\r\n\t\t\t * Geometric Shapes\r\n\t\t\t * Miscellaneous Symbols\r\n\t\t\t * Dingbats\r\n\t\t\t * Miscellaneous Mathematical Symbols-A\r\n\t\t\t * Supplemental Arrows-A\r\n\t\t\t * Braille Patterns\r\n\t\t\t * Supplemental Arrows-B\r\n\t\t\t * Miscellaneous Mathematical Symbols-B\r\n\t\t\t * Supplemental Mathematical Operators\r\n\t\t\t * Miscellaneous Symbols and Arrows\r\n\t\t\t */\r\n\t\t\t'\\u2000-\\u2BFF',\r\n\r\n\t\t\t// Supplemental Punctuation.\r\n\t\t\t'\\u2E00-\\u2E7F',\r\n\t\t\t']',\r\n\t\t].join( '' ),\r\n\t\t'g'\r\n\t),\r\n\r\n\t// Remove UTF-16 surrogate points, see https://en.wikipedia.org/wiki/UTF-16#U.2BD800_to_U.2BDFFF\r\n\tastralRegExp: /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\r\n\twordsRegExp: /\\S\\s+/g,\r\n\tcharacters_excluding_spacesRegExp: /\\S/g,\r\n\r\n\t/*\r\n\t * Match anything that is not a formatting character, excluding:\r\n\t * \\f = form feed\r\n\t * \\n = new line\r\n\t * \\r = carriage return\r\n\t * \\t = tab\r\n\t * \\v = vertical tab\r\n\t * \\u00AD = soft hyphen\r\n\t * \\u2028 = line separator\r\n\t * \\u2029 = paragraph separator\r\n\t */\r\n\tcharacters_including_spacesRegExp: /[^\\f\\n\\r\\t\\v\\u00AD\\u2028\\u2029]/g,\r\n\tl10n: {\r\n\t\ttype: 'words',\r\n\t},\r\n};\r\n"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,eAAe,GAAG;EAC9BC,UAAU,EAAE,oBAAoB;EAChCC,iBAAiB,EAAE,kBAAkB;EACrCC,WAAW,EAAE,iBAAiB;EAC9BC,gBAAgB,EAAE,SAAS;EAE3B;EACAC,eAAe,EAAE,YAAY;EAE7B;EACAC,YAAY,EAAE,IAAIC,MAAM,CACvB,CACC,GAAG;EAEH;EACA,sDAAsD;EAEtD;EACA,2BAA2B;EAE3B;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACG,eAAe;EAEf;EACA,eAAe,EACf,GAAG,CACH,CAACC,IAAI,CAAE,EAAG,CAAC,EACZ,GACD,CAAC;EAED;EACAC,YAAY,EAAE,iCAAiC;EAC/CC,WAAW,EAAE,QAAQ;EACrBC,iCAAiC,EAAE,KAAK;EAExC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,iCAAiC,EAAE,kCAAkC;EACrEC,IAAI,EAAE;IACLC,IAAI,EAAE;EACP;AACD,CAAC","ignoreList":[]}